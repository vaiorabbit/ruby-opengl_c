/* opengl-bindings
 * * http://rubygems.org/gems/opengl-bindings_c
 * * http://github.com/vaiorabbit/ruby-opengl_c
 *
 * [NOTICE] This is an automatically generated file.
 */
typedef void (* ROGL_PFNGLTBUFFERMASK3DFXPROC) (unsigned int mask);
typedef void (* ROGL_PFNGLDEBUGMESSAGEENABLEAMDPROC) (unsigned int category, unsigned int severity, int count, void* ids, unsigned char enabled);
typedef void (* ROGL_PFNGLDEBUGMESSAGEINSERTAMDPROC) (unsigned int category, unsigned int severity, unsigned int id, int length, void* buf);
typedef void (* ROGL_PFNGLDEBUGMESSAGECALLBACKAMDPROC) (void* callback, void* userParam);
typedef unsigned int (* ROGL_PFNGLGETDEBUGMESSAGELOGAMDPROC) (unsigned int count, int bufsize, void* categories, void* severities, void* ids, void* lengths, void* message);
typedef void (* ROGL_PFNGLBLENDFUNCINDEXEDAMDPROC) (unsigned int buf, unsigned int src, unsigned int dst);
typedef void (* ROGL_PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC) (unsigned int buf, unsigned int srcRGB, unsigned int dstRGB, unsigned int srcAlpha, unsigned int dstAlpha);
typedef void (* ROGL_PFNGLBLENDEQUATIONINDEXEDAMDPROC) (unsigned int buf, unsigned int mode);
typedef void (* ROGL_PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC) (unsigned int buf, unsigned int modeRGB, unsigned int modeAlpha);
typedef void (* ROGL_PFNGLVERTEXATTRIBPARAMETERIAMDPROC) (unsigned int index, unsigned int pname, int param);
typedef void (* ROGL_PFNGLMULTIDRAWARRAYSINDIRECTAMDPROC) (unsigned int mode, void* indirect, int primcount, int stride);
typedef void (* ROGL_PFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC) (unsigned int mode, unsigned int type, void* indirect, int primcount, int stride);
typedef void (* ROGL_PFNGLGENNAMESAMDPROC) (unsigned int identifier, unsigned int num, void* names);
typedef void (* ROGL_PFNGLDELETENAMESAMDPROC) (unsigned int identifier, unsigned int num, void* names);
typedef unsigned char (* ROGL_PFNGLISNAMEAMDPROC) (unsigned int identifier, unsigned int name);
typedef void (* ROGL_PFNGLQUERYOBJECTPARAMETERUIAMDPROC) (unsigned int target, unsigned int id, unsigned int pname, unsigned int param);
typedef void (* ROGL_PFNGLGETPERFMONITORGROUPSAMDPROC) (void* numGroups, int groupsSize, void* groups);
typedef void (* ROGL_PFNGLGETPERFMONITORCOUNTERSAMDPROC) (unsigned int group, void* numCounters, void* maxActiveCounters, int counterSize, void* counters);
typedef void (* ROGL_PFNGLGETPERFMONITORGROUPSTRINGAMDPROC) (unsigned int group, int bufSize, void* length, void* groupString);
typedef void (* ROGL_PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC) (unsigned int group, unsigned int counter, int bufSize, void* length, void* counterString);
typedef void (* ROGL_PFNGLGETPERFMONITORCOUNTERINFOAMDPROC) (unsigned int group, unsigned int counter, unsigned int pname, void* data);
typedef void (* ROGL_PFNGLGENPERFMONITORSAMDPROC) (int n, void* monitors);
typedef void (* ROGL_PFNGLDELETEPERFMONITORSAMDPROC) (int n, void* monitors);
typedef void (* ROGL_PFNGLSELECTPERFMONITORCOUNTERSAMDPROC) (unsigned int monitor, unsigned char enable, unsigned int group, int numCounters, void* counterList);
typedef void (* ROGL_PFNGLBEGINPERFMONITORAMDPROC) (unsigned int monitor);
typedef void (* ROGL_PFNGLENDPERFMONITORAMDPROC) (unsigned int monitor);
typedef void (* ROGL_PFNGLGETPERFMONITORCOUNTERDATAAMDPROC) (unsigned int monitor, unsigned int pname, int dataSize, void* data, void* bytesWritten);
typedef void (* ROGL_PFNGLSETMULTISAMPLEFVAMDPROC) (unsigned int pname, unsigned int index, void* val);
typedef void (* ROGL_PFNGLTEXSTORAGESPARSEAMDPROC) (unsigned int target, unsigned int internalFormat, int width, int height, int depth, int layers, unsigned int flags);
typedef void (* ROGL_PFNGLTEXTURESTORAGESPARSEAMDPROC) (unsigned int texture, unsigned int target, unsigned int internalFormat, int width, int height, int depth, int layers, unsigned int flags);
typedef void (* ROGL_PFNGLSTENCILOPVALUEAMDPROC) (unsigned int face, unsigned int value);
typedef void (* ROGL_PFNGLTESSELLATIONFACTORAMDPROC) (float factor);
typedef void (* ROGL_PFNGLTESSELLATIONMODEAMDPROC) (unsigned int mode);
typedef void (* ROGL_PFNGLELEMENTPOINTERAPPLEPROC) (unsigned int type, void* pointer);
typedef void (* ROGL_PFNGLDRAWELEMENTARRAYAPPLEPROC) (unsigned int mode, int first, int count);
typedef void (* ROGL_PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC) (unsigned int mode, unsigned int start, unsigned int end, int first, int count);
typedef void (* ROGL_PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC) (unsigned int mode, void* first, void* count, int primcount);
typedef void (* ROGL_PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC) (unsigned int mode, unsigned int start, unsigned int end, void* first, void* count, int primcount);
typedef void (* ROGL_PFNGLGENFENCESAPPLEPROC) (int n, void* fences);
typedef void (* ROGL_PFNGLDELETEFENCESAPPLEPROC) (int n, void* fences);
typedef void (* ROGL_PFNGLSETFENCEAPPLEPROC) (unsigned int fence);
typedef unsigned char (* ROGL_PFNGLISFENCEAPPLEPROC) (unsigned int fence);
typedef unsigned char (* ROGL_PFNGLTESTFENCEAPPLEPROC) (unsigned int fence);
typedef void (* ROGL_PFNGLFINISHFENCEAPPLEPROC) (unsigned int fence);
typedef unsigned char (* ROGL_PFNGLTESTOBJECTAPPLEPROC) (unsigned int object, unsigned int name);
typedef void (* ROGL_PFNGLFINISHOBJECTAPPLEPROC) (unsigned int object, int name);
typedef void (* ROGL_PFNGLBUFFERPARAMETERIAPPLEPROC) (unsigned int target, unsigned int pname, int param);
typedef void (* ROGL_PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC) (unsigned int target, ptrdiff_t offset, ptrdiff_t size);
typedef unsigned int (* ROGL_PFNGLOBJECTPURGEABLEAPPLEPROC) (unsigned int objectType, unsigned int name, unsigned int option);
typedef unsigned int (* ROGL_PFNGLOBJECTUNPURGEABLEAPPLEPROC) (unsigned int objectType, unsigned int name, unsigned int option);
typedef void (* ROGL_PFNGLGETOBJECTPARAMETERIVAPPLEPROC) (unsigned int objectType, unsigned int name, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLTEXTURERANGEAPPLEPROC) (unsigned int target, int length, void* pointer);
typedef void (* ROGL_PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC) (unsigned int target, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLBINDVERTEXARRAYAPPLEPROC) (unsigned int array);
typedef void (* ROGL_PFNGLDELETEVERTEXARRAYSAPPLEPROC) (int n, void* arrays);
typedef void (* ROGL_PFNGLGENVERTEXARRAYSAPPLEPROC) (int n, void* arrays);
typedef unsigned char (* ROGL_PFNGLISVERTEXARRAYAPPLEPROC) (unsigned int array);
typedef void (* ROGL_PFNGLVERTEXARRAYRANGEAPPLEPROC) (int length, void* pointer);
typedef void (* ROGL_PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC) (int length, void* pointer);
typedef void (* ROGL_PFNGLVERTEXARRAYPARAMETERIAPPLEPROC) (unsigned int pname, int param);
typedef void (* ROGL_PFNGLENABLEVERTEXATTRIBAPPLEPROC) (unsigned int index, unsigned int pname);
typedef void (* ROGL_PFNGLDISABLEVERTEXATTRIBAPPLEPROC) (unsigned int index, unsigned int pname);
typedef unsigned char (* ROGL_PFNGLISVERTEXATTRIBENABLEDAPPLEPROC) (unsigned int index, unsigned int pname);
typedef void (* ROGL_PFNGLMAPVERTEXATTRIB1DAPPLEPROC) (unsigned int index, unsigned int size, double u1, double u2, int stride, int order, void* points);
typedef void (* ROGL_PFNGLMAPVERTEXATTRIB1FAPPLEPROC) (unsigned int index, unsigned int size, float u1, float u2, int stride, int order, void* points);
typedef void (* ROGL_PFNGLMAPVERTEXATTRIB2DAPPLEPROC) (unsigned int index, unsigned int size, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, void* points);
typedef void (* ROGL_PFNGLMAPVERTEXATTRIB2FAPPLEPROC) (unsigned int index, unsigned int size, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, void* points);
typedef void (* ROGL_PFNGLPRIMITIVEBOUNDINGBOXARBPROC) (float minX, float minY, float minZ, float minW, float maxX, float maxY, float maxZ, float maxW);
typedef unsigned long long (* ROGL_PFNGLGETTEXTUREHANDLEARBPROC) (unsigned int texture);
typedef unsigned long long (* ROGL_PFNGLGETTEXTURESAMPLERHANDLEARBPROC) (unsigned int texture, unsigned int sampler);
typedef void (* ROGL_PFNGLMAKETEXTUREHANDLERESIDENTARBPROC) (unsigned long long handle);
typedef void (* ROGL_PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC) (unsigned long long handle);
typedef unsigned long long (* ROGL_PFNGLGETIMAGEHANDLEARBPROC) (unsigned int texture, int level, unsigned char layered, int layer, unsigned int format);
typedef void (* ROGL_PFNGLMAKEIMAGEHANDLERESIDENTARBPROC) (unsigned long long handle, unsigned int access);
typedef void (* ROGL_PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC) (unsigned long long handle);
typedef void (* ROGL_PFNGLUNIFORMHANDLEUI64ARBPROC) (int location, unsigned long long value);
typedef void (* ROGL_PFNGLUNIFORMHANDLEUI64VARBPROC) (int location, int count, void* value);
typedef void (* ROGL_PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC) (unsigned int program, int location, unsigned long long value);
typedef void (* ROGL_PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC) (unsigned int program, int location, int count, void* values);
typedef unsigned char (* ROGL_PFNGLISTEXTUREHANDLERESIDENTARBPROC) (unsigned long long handle);
typedef unsigned char (* ROGL_PFNGLISIMAGEHANDLERESIDENTARBPROC) (unsigned long long handle);
typedef void (* ROGL_PFNGLVERTEXATTRIBL1UI64ARBPROC) (unsigned int index, unsigned long long x);
typedef void (* ROGL_PFNGLVERTEXATTRIBL1UI64VARBPROC) (unsigned int index, void* v);
typedef void (* ROGL_PFNGLGETVERTEXATTRIBLUI64VARBPROC) (unsigned int index, unsigned int pname, void* params);
typedef void* (* ROGL_PFNGLCREATESYNCFROMCLEVENTARBPROC) (void* context, void* event, unsigned int flags);
typedef void (* ROGL_PFNGLCLAMPCOLORARBPROC) (unsigned int target, unsigned int clamp);
typedef void (* ROGL_PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC) (unsigned int num_groups_x, unsigned int num_groups_y, unsigned int num_groups_z, unsigned int group_size_x, unsigned int group_size_y, unsigned int group_size_z);
typedef void (* ROGL_PFNGLDEBUGMESSAGECONTROLARBPROC) (unsigned int source, unsigned int type, unsigned int severity, int count, void* ids, unsigned char enabled);
typedef void (* ROGL_PFNGLDEBUGMESSAGEINSERTARBPROC) (unsigned int source, unsigned int type, unsigned int id, unsigned int severity, int length, void* buf);
typedef void (* ROGL_PFNGLDEBUGMESSAGECALLBACKARBPROC) (void* callback, void* userParam);
typedef unsigned int (* ROGL_PFNGLGETDEBUGMESSAGELOGARBPROC) (unsigned int count, int bufSize, void* sources, void* types, void* ids, void* severities, void* lengths, void* messageLog);
typedef void (* ROGL_PFNGLDRAWBUFFERSARBPROC) (int n, void* bufs);
typedef void (* ROGL_PFNGLBLENDEQUATIONIARBPROC) (unsigned int buf, unsigned int mode);
typedef void (* ROGL_PFNGLBLENDEQUATIONSEPARATEIARBPROC) (unsigned int buf, unsigned int modeRGB, unsigned int modeAlpha);
typedef void (* ROGL_PFNGLBLENDFUNCIARBPROC) (unsigned int buf, unsigned int src, unsigned int dst);
typedef void (* ROGL_PFNGLBLENDFUNCSEPARATEIARBPROC) (unsigned int buf, unsigned int srcRGB, unsigned int dstRGB, unsigned int srcAlpha, unsigned int dstAlpha);
typedef void (* ROGL_PFNGLDRAWARRAYSINSTANCEDARBPROC) (unsigned int mode, int first, int count, int primcount);
typedef void (* ROGL_PFNGLDRAWELEMENTSINSTANCEDARBPROC) (unsigned int mode, int count, unsigned int type, void* indices, int primcount);
typedef void (* ROGL_PFNGLPROGRAMPARAMETERIARBPROC) (unsigned int program, unsigned int pname, int value);
typedef void (* ROGL_PFNGLFRAMEBUFFERTEXTUREARBPROC) (unsigned int target, unsigned int attachment, unsigned int texture, int level);
typedef void (* ROGL_PFNGLFRAMEBUFFERTEXTURELAYERARBPROC) (unsigned int target, unsigned int attachment, unsigned int texture, int level, int layer);
typedef void (* ROGL_PFNGLFRAMEBUFFERTEXTUREFACEARBPROC) (unsigned int target, unsigned int attachment, unsigned int texture, int level, unsigned int face);
typedef void (* ROGL_PFNGLUNIFORM1I64ARBPROC) (int location, long long x);
typedef void (* ROGL_PFNGLUNIFORM2I64ARBPROC) (int location, long long x, long long y);
typedef void (* ROGL_PFNGLUNIFORM3I64ARBPROC) (int location, long long x, long long y, long long z);
typedef void (* ROGL_PFNGLUNIFORM4I64ARBPROC) (int location, long long x, long long y, long long z, long long w);
typedef void (* ROGL_PFNGLUNIFORM1I64VARBPROC) (int location, int count, void* value);
typedef void (* ROGL_PFNGLUNIFORM2I64VARBPROC) (int location, int count, void* value);
typedef void (* ROGL_PFNGLUNIFORM3I64VARBPROC) (int location, int count, void* value);
typedef void (* ROGL_PFNGLUNIFORM4I64VARBPROC) (int location, int count, void* value);
typedef void (* ROGL_PFNGLUNIFORM1UI64ARBPROC) (int location, unsigned long long x);
typedef void (* ROGL_PFNGLUNIFORM2UI64ARBPROC) (int location, unsigned long long x, unsigned long long y);
typedef void (* ROGL_PFNGLUNIFORM3UI64ARBPROC) (int location, unsigned long long x, unsigned long long y, unsigned long long z);
typedef void (* ROGL_PFNGLUNIFORM4UI64ARBPROC) (int location, unsigned long long x, unsigned long long y, unsigned long long z, unsigned long long w);
typedef void (* ROGL_PFNGLUNIFORM1UI64VARBPROC) (int location, int count, void* value);
typedef void (* ROGL_PFNGLUNIFORM2UI64VARBPROC) (int location, int count, void* value);
typedef void (* ROGL_PFNGLUNIFORM3UI64VARBPROC) (int location, int count, void* value);
typedef void (* ROGL_PFNGLUNIFORM4UI64VARBPROC) (int location, int count, void* value);
typedef void (* ROGL_PFNGLGETUNIFORMI64VARBPROC) (unsigned int program, int location, void* params);
typedef void (* ROGL_PFNGLGETUNIFORMUI64VARBPROC) (unsigned int program, int location, void* params);
typedef void (* ROGL_PFNGLGETNUNIFORMI64VARBPROC) (unsigned int program, int location, int bufSize, void* params);
typedef void (* ROGL_PFNGLGETNUNIFORMUI64VARBPROC) (unsigned int program, int location, int bufSize, void* params);
typedef void (* ROGL_PFNGLPROGRAMUNIFORM1I64ARBPROC) (unsigned int program, int location, long long x);
typedef void (* ROGL_PFNGLPROGRAMUNIFORM2I64ARBPROC) (unsigned int program, int location, long long x, long long y);
typedef void (* ROGL_PFNGLPROGRAMUNIFORM3I64ARBPROC) (unsigned int program, int location, long long x, long long y, long long z);
typedef void (* ROGL_PFNGLPROGRAMUNIFORM4I64ARBPROC) (unsigned int program, int location, long long x, long long y, long long z, long long w);
typedef void (* ROGL_PFNGLPROGRAMUNIFORM1I64VARBPROC) (unsigned int program, int location, int count, void* value);
typedef void (* ROGL_PFNGLPROGRAMUNIFORM2I64VARBPROC) (unsigned int program, int location, int count, void* value);
typedef void (* ROGL_PFNGLPROGRAMUNIFORM3I64VARBPROC) (unsigned int program, int location, int count, void* value);
typedef void (* ROGL_PFNGLPROGRAMUNIFORM4I64VARBPROC) (unsigned int program, int location, int count, void* value);
typedef void (* ROGL_PFNGLPROGRAMUNIFORM1UI64ARBPROC) (unsigned int program, int location, unsigned long long x);
typedef void (* ROGL_PFNGLPROGRAMUNIFORM2UI64ARBPROC) (unsigned int program, int location, unsigned long long x, unsigned long long y);
typedef void (* ROGL_PFNGLPROGRAMUNIFORM3UI64ARBPROC) (unsigned int program, int location, unsigned long long x, unsigned long long y, unsigned long long z);
typedef void (* ROGL_PFNGLPROGRAMUNIFORM4UI64ARBPROC) (unsigned int program, int location, unsigned long long x, unsigned long long y, unsigned long long z, unsigned long long w);
typedef void (* ROGL_PFNGLPROGRAMUNIFORM1UI64VARBPROC) (unsigned int program, int location, int count, void* value);
typedef void (* ROGL_PFNGLPROGRAMUNIFORM2UI64VARBPROC) (unsigned int program, int location, int count, void* value);
typedef void (* ROGL_PFNGLPROGRAMUNIFORM3UI64VARBPROC) (unsigned int program, int location, int count, void* value);
typedef void (* ROGL_PFNGLPROGRAMUNIFORM4UI64VARBPROC) (unsigned int program, int location, int count, void* value);
typedef void (* ROGL_PFNGLCOLORTABLEPROC) (unsigned int target, unsigned int internalformat, int width, unsigned int format, unsigned int type, void* table);
typedef void (* ROGL_PFNGLCOLORTABLEPARAMETERFVPROC) (unsigned int target, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLCOLORTABLEPARAMETERIVPROC) (unsigned int target, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLCOPYCOLORTABLEPROC) (unsigned int target, unsigned int internalformat, int x, int y, int width);
typedef void (* ROGL_PFNGLGETCOLORTABLEPROC) (unsigned int target, unsigned int format, unsigned int type, void* table);
typedef void (* ROGL_PFNGLGETCOLORTABLEPARAMETERFVPROC) (unsigned int target, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETCOLORTABLEPARAMETERIVPROC) (unsigned int target, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLCOLORSUBTABLEPROC) (unsigned int target, int start, int count, unsigned int format, unsigned int type, void* data);
typedef void (* ROGL_PFNGLCOPYCOLORSUBTABLEPROC) (unsigned int target, int start, int x, int y, int width);
typedef void (* ROGL_PFNGLCONVOLUTIONFILTER1DPROC) (unsigned int target, unsigned int internalformat, int width, unsigned int format, unsigned int type, void* image);
typedef void (* ROGL_PFNGLCONVOLUTIONFILTER2DPROC) (unsigned int target, unsigned int internalformat, int width, int height, unsigned int format, unsigned int type, void* image);
typedef void (* ROGL_PFNGLCONVOLUTIONPARAMETERFPROC) (unsigned int target, unsigned int pname, float params);
typedef void (* ROGL_PFNGLCONVOLUTIONPARAMETERFVPROC) (unsigned int target, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLCONVOLUTIONPARAMETERIPROC) (unsigned int target, unsigned int pname, int params);
typedef void (* ROGL_PFNGLCONVOLUTIONPARAMETERIVPROC) (unsigned int target, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLCOPYCONVOLUTIONFILTER1DPROC) (unsigned int target, unsigned int internalformat, int x, int y, int width);
typedef void (* ROGL_PFNGLCOPYCONVOLUTIONFILTER2DPROC) (unsigned int target, unsigned int internalformat, int x, int y, int width, int height);
typedef void (* ROGL_PFNGLGETCONVOLUTIONFILTERPROC) (unsigned int target, unsigned int format, unsigned int type, void* image);
typedef void (* ROGL_PFNGLGETCONVOLUTIONPARAMETERFVPROC) (unsigned int target, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETCONVOLUTIONPARAMETERIVPROC) (unsigned int target, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETSEPARABLEFILTERPROC) (unsigned int target, unsigned int format, unsigned int type, void* row, void* column, void* span);
typedef void (* ROGL_PFNGLSEPARABLEFILTER2DPROC) (unsigned int target, unsigned int internalformat, int width, int height, unsigned int format, unsigned int type, void* row, void* column);
typedef void (* ROGL_PFNGLGETHISTOGRAMPROC) (unsigned int target, unsigned char reset, unsigned int format, unsigned int type, void* values);
typedef void (* ROGL_PFNGLGETHISTOGRAMPARAMETERFVPROC) (unsigned int target, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETHISTOGRAMPARAMETERIVPROC) (unsigned int target, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETMINMAXPROC) (unsigned int target, unsigned char reset, unsigned int format, unsigned int type, void* values);
typedef void (* ROGL_PFNGLGETMINMAXPARAMETERFVPROC) (unsigned int target, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETMINMAXPARAMETERIVPROC) (unsigned int target, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLHISTOGRAMPROC) (unsigned int target, int width, unsigned int internalformat, unsigned char sink);
typedef void (* ROGL_PFNGLMINMAXPROC) (unsigned int target, unsigned int internalformat, unsigned char sink);
typedef void (* ROGL_PFNGLRESETHISTOGRAMPROC) (unsigned int target);
typedef void (* ROGL_PFNGLRESETMINMAXPROC) (unsigned int target);
typedef void (* ROGL_PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC) (unsigned int mode, ptrdiff_t indirect, ptrdiff_t drawcount, int maxdrawcount, int stride);
typedef void (* ROGL_PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC) (unsigned int mode, unsigned int type, ptrdiff_t indirect, ptrdiff_t drawcount, int maxdrawcount, int stride);
typedef void (* ROGL_PFNGLVERTEXATTRIBDIVISORARBPROC) (unsigned int index, unsigned int divisor);
typedef void (* ROGL_PFNGLCURRENTPALETTEMATRIXARBPROC) (int index);
typedef void (* ROGL_PFNGLMATRIXINDEXUBVARBPROC) (int size, void* indices);
typedef void (* ROGL_PFNGLMATRIXINDEXUSVARBPROC) (int size, void* indices);
typedef void (* ROGL_PFNGLMATRIXINDEXUIVARBPROC) (int size, void* indices);
typedef void (* ROGL_PFNGLMATRIXINDEXPOINTERARBPROC) (int size, unsigned int type, int stride, void* pointer);
typedef void (* ROGL_PFNGLSAMPLECOVERAGEARBPROC) (float value, unsigned char invert);
typedef void (* ROGL_PFNGLACTIVETEXTUREARBPROC) (unsigned int texture);
typedef void (* ROGL_PFNGLCLIENTACTIVETEXTUREARBPROC) (unsigned int texture);
typedef void (* ROGL_PFNGLMULTITEXCOORD1DARBPROC) (unsigned int target, double s);
typedef void (* ROGL_PFNGLMULTITEXCOORD1DVARBPROC) (unsigned int target, void* v);
typedef void (* ROGL_PFNGLMULTITEXCOORD1FARBPROC) (unsigned int target, float s);
typedef void (* ROGL_PFNGLMULTITEXCOORD1FVARBPROC) (unsigned int target, void* v);
typedef void (* ROGL_PFNGLMULTITEXCOORD1IARBPROC) (unsigned int target, int s);
typedef void (* ROGL_PFNGLMULTITEXCOORD1IVARBPROC) (unsigned int target, void* v);
typedef void (* ROGL_PFNGLMULTITEXCOORD1SARBPROC) (unsigned int target, short s);
typedef void (* ROGL_PFNGLMULTITEXCOORD1SVARBPROC) (unsigned int target, void* v);
typedef void (* ROGL_PFNGLMULTITEXCOORD2DARBPROC) (unsigned int target, double s, double t);
typedef void (* ROGL_PFNGLMULTITEXCOORD2DVARBPROC) (unsigned int target, void* v);
typedef void (* ROGL_PFNGLMULTITEXCOORD2FARBPROC) (unsigned int target, float s, float t);
typedef void (* ROGL_PFNGLMULTITEXCOORD2FVARBPROC) (unsigned int target, void* v);
typedef void (* ROGL_PFNGLMULTITEXCOORD2IARBPROC) (unsigned int target, int s, int t);
typedef void (* ROGL_PFNGLMULTITEXCOORD2IVARBPROC) (unsigned int target, void* v);
typedef void (* ROGL_PFNGLMULTITEXCOORD2SARBPROC) (unsigned int target, short s, short t);
typedef void (* ROGL_PFNGLMULTITEXCOORD2SVARBPROC) (unsigned int target, void* v);
typedef void (* ROGL_PFNGLMULTITEXCOORD3DARBPROC) (unsigned int target, double s, double t, double r);
typedef void (* ROGL_PFNGLMULTITEXCOORD3DVARBPROC) (unsigned int target, void* v);
typedef void (* ROGL_PFNGLMULTITEXCOORD3FARBPROC) (unsigned int target, float s, float t, float r);
typedef void (* ROGL_PFNGLMULTITEXCOORD3FVARBPROC) (unsigned int target, void* v);
typedef void (* ROGL_PFNGLMULTITEXCOORD3IARBPROC) (unsigned int target, int s, int t, int r);
typedef void (* ROGL_PFNGLMULTITEXCOORD3IVARBPROC) (unsigned int target, void* v);
typedef void (* ROGL_PFNGLMULTITEXCOORD3SARBPROC) (unsigned int target, short s, short t, short r);
typedef void (* ROGL_PFNGLMULTITEXCOORD3SVARBPROC) (unsigned int target, void* v);
typedef void (* ROGL_PFNGLMULTITEXCOORD4DARBPROC) (unsigned int target, double s, double t, double r, double q);
typedef void (* ROGL_PFNGLMULTITEXCOORD4DVARBPROC) (unsigned int target, void* v);
typedef void (* ROGL_PFNGLMULTITEXCOORD4FARBPROC) (unsigned int target, float s, float t, float r, float q);
typedef void (* ROGL_PFNGLMULTITEXCOORD4FVARBPROC) (unsigned int target, void* v);
typedef void (* ROGL_PFNGLMULTITEXCOORD4IARBPROC) (unsigned int target, int s, int t, int r, int q);
typedef void (* ROGL_PFNGLMULTITEXCOORD4IVARBPROC) (unsigned int target, void* v);
typedef void (* ROGL_PFNGLMULTITEXCOORD4SARBPROC) (unsigned int target, short s, short t, short r, short q);
typedef void (* ROGL_PFNGLMULTITEXCOORD4SVARBPROC) (unsigned int target, void* v);
typedef void (* ROGL_PFNGLGENQUERIESARBPROC) (int n, void* ids);
typedef void (* ROGL_PFNGLDELETEQUERIESARBPROC) (int n, void* ids);
typedef unsigned char (* ROGL_PFNGLISQUERYARBPROC) (unsigned int id);
typedef void (* ROGL_PFNGLBEGINQUERYARBPROC) (unsigned int target, unsigned int id);
typedef void (* ROGL_PFNGLENDQUERYARBPROC) (unsigned int target);
typedef void (* ROGL_PFNGLGETQUERYIVARBPROC) (unsigned int target, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETQUERYOBJECTIVARBPROC) (unsigned int id, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETQUERYOBJECTUIVARBPROC) (unsigned int id, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLMAXSHADERCOMPILERTHREADSARBPROC) (unsigned int count);
typedef void (* ROGL_PFNGLPOINTPARAMETERFARBPROC) (unsigned int pname, float param);
typedef void (* ROGL_PFNGLPOINTPARAMETERFVARBPROC) (unsigned int pname, void* params);
typedef unsigned int (* ROGL_PFNGLGETGRAPHICSRESETSTATUSARBPROC) (void);
typedef void (* ROGL_PFNGLGETNTEXIMAGEARBPROC) (unsigned int target, int level, unsigned int format, unsigned int type, int bufSize, void* img);
typedef void (* ROGL_PFNGLREADNPIXELSARBPROC) (int x, int y, int width, int height, unsigned int format, unsigned int type, int bufSize, void* data);
typedef void (* ROGL_PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC) (unsigned int target, int lod, int bufSize, void* img);
typedef void (* ROGL_PFNGLGETNUNIFORMFVARBPROC) (unsigned int program, int location, int bufSize, void* params);
typedef void (* ROGL_PFNGLGETNUNIFORMIVARBPROC) (unsigned int program, int location, int bufSize, void* params);
typedef void (* ROGL_PFNGLGETNUNIFORMUIVARBPROC) (unsigned int program, int location, int bufSize, void* params);
typedef void (* ROGL_PFNGLGETNUNIFORMDVARBPROC) (unsigned int program, int location, int bufSize, void* params);
typedef void (* ROGL_PFNGLGETNMAPDVARBPROC) (unsigned int target, unsigned int query, int bufSize, void* v);
typedef void (* ROGL_PFNGLGETNMAPFVARBPROC) (unsigned int target, unsigned int query, int bufSize, void* v);
typedef void (* ROGL_PFNGLGETNMAPIVARBPROC) (unsigned int target, unsigned int query, int bufSize, void* v);
typedef void (* ROGL_PFNGLGETNPIXELMAPFVARBPROC) (unsigned int map, int bufSize, void* values);
typedef void (* ROGL_PFNGLGETNPIXELMAPUIVARBPROC) (unsigned int map, int bufSize, void* values);
typedef void (* ROGL_PFNGLGETNPIXELMAPUSVARBPROC) (unsigned int map, int bufSize, void* values);
typedef void (* ROGL_PFNGLGETNPOLYGONSTIPPLEARBPROC) (int bufSize, void* pattern);
typedef void (* ROGL_PFNGLGETNCOLORTABLEARBPROC) (unsigned int target, unsigned int format, unsigned int type, int bufSize, void* table);
typedef void (* ROGL_PFNGLGETNCONVOLUTIONFILTERARBPROC) (unsigned int target, unsigned int format, unsigned int type, int bufSize, void* image);
typedef void (* ROGL_PFNGLGETNSEPARABLEFILTERARBPROC) (unsigned int target, unsigned int format, unsigned int type, int rowBufSize, void* row, int columnBufSize, void* column, void* span);
typedef void (* ROGL_PFNGLGETNHISTOGRAMARBPROC) (unsigned int target, unsigned char reset, unsigned int format, unsigned int type, int bufSize, void* values);
typedef void (* ROGL_PFNGLGETNMINMAXARBPROC) (unsigned int target, unsigned char reset, unsigned int format, unsigned int type, int bufSize, void* values);
typedef void (* ROGL_PFNGLFRAMEBUFFERSAMPLELOCATIONSFVARBPROC) (unsigned int target, unsigned int start, int count, void* v);
typedef void (* ROGL_PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVARBPROC) (unsigned int framebuffer, unsigned int start, int count, void* v);
typedef void (* ROGL_PFNGLEVALUATEDEPTHVALUESARBPROC) (void);
typedef void (* ROGL_PFNGLMINSAMPLESHADINGARBPROC) (float value);
typedef void (* ROGL_PFNGLDELETEOBJECTARBPROC) (void* obj);
typedef void* (* ROGL_PFNGLGETHANDLEARBPROC) (unsigned int pname);
typedef void (* ROGL_PFNGLDETACHOBJECTARBPROC) (void* containerObj, void* attachedObj);
typedef void* (* ROGL_PFNGLCREATESHADEROBJECTARBPROC) (unsigned int shaderType);
typedef void (* ROGL_PFNGLSHADERSOURCEARBPROC) (void* shaderObj, int count, void* string, void* length);
typedef void (* ROGL_PFNGLCOMPILESHADERARBPROC) (void* shaderObj);
typedef void* (* ROGL_PFNGLCREATEPROGRAMOBJECTARBPROC) (void);
typedef void (* ROGL_PFNGLATTACHOBJECTARBPROC) (void* containerObj, void* obj);
typedef void (* ROGL_PFNGLLINKPROGRAMARBPROC) (void* programObj);
typedef void (* ROGL_PFNGLUSEPROGRAMOBJECTARBPROC) (void* programObj);
typedef void (* ROGL_PFNGLVALIDATEPROGRAMARBPROC) (void* programObj);
typedef void (* ROGL_PFNGLUNIFORM1FARBPROC) (int location, float v0);
typedef void (* ROGL_PFNGLUNIFORM2FARBPROC) (int location, float v0, float v1);
typedef void (* ROGL_PFNGLUNIFORM3FARBPROC) (int location, float v0, float v1, float v2);
typedef void (* ROGL_PFNGLUNIFORM4FARBPROC) (int location, float v0, float v1, float v2, float v3);
typedef void (* ROGL_PFNGLUNIFORM1IARBPROC) (int location, int v0);
typedef void (* ROGL_PFNGLUNIFORM2IARBPROC) (int location, int v0, int v1);
typedef void (* ROGL_PFNGLUNIFORM3IARBPROC) (int location, int v0, int v1, int v2);
typedef void (* ROGL_PFNGLUNIFORM4IARBPROC) (int location, int v0, int v1, int v2, int v3);
typedef void (* ROGL_PFNGLUNIFORM1FVARBPROC) (int location, int count, void* value);
typedef void (* ROGL_PFNGLUNIFORM2FVARBPROC) (int location, int count, void* value);
typedef void (* ROGL_PFNGLUNIFORM3FVARBPROC) (int location, int count, void* value);
typedef void (* ROGL_PFNGLUNIFORM4FVARBPROC) (int location, int count, void* value);
typedef void (* ROGL_PFNGLUNIFORM1IVARBPROC) (int location, int count, void* value);
typedef void (* ROGL_PFNGLUNIFORM2IVARBPROC) (int location, int count, void* value);
typedef void (* ROGL_PFNGLUNIFORM3IVARBPROC) (int location, int count, void* value);
typedef void (* ROGL_PFNGLUNIFORM4IVARBPROC) (int location, int count, void* value);
typedef void (* ROGL_PFNGLUNIFORMMATRIX2FVARBPROC) (int location, int count, unsigned char transpose, void* value);
typedef void (* ROGL_PFNGLUNIFORMMATRIX3FVARBPROC) (int location, int count, unsigned char transpose, void* value);
typedef void (* ROGL_PFNGLUNIFORMMATRIX4FVARBPROC) (int location, int count, unsigned char transpose, void* value);
typedef void (* ROGL_PFNGLGETOBJECTPARAMETERFVARBPROC) (void* obj, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETOBJECTPARAMETERIVARBPROC) (void* obj, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETINFOLOGARBPROC) (void* obj, int maxLength, void* length, void* infoLog);
typedef void (* ROGL_PFNGLGETATTACHEDOBJECTSARBPROC) (void* containerObj, int maxCount, void* count, void* obj);
typedef int (* ROGL_PFNGLGETUNIFORMLOCATIONARBPROC) (void* programObj, void* name);
typedef void (* ROGL_PFNGLGETACTIVEUNIFORMARBPROC) (void* programObj, unsigned int index, int maxLength, void* length, void* size, void* type, void* name);
typedef void (* ROGL_PFNGLGETUNIFORMFVARBPROC) (void* programObj, int location, void* params);
typedef void (* ROGL_PFNGLGETUNIFORMIVARBPROC) (void* programObj, int location, void* params);
typedef void (* ROGL_PFNGLGETSHADERSOURCEARBPROC) (void* obj, int maxLength, void* length, void* source);
typedef void (* ROGL_PFNGLNAMEDSTRINGARBPROC) (unsigned int type, int namelen, void* name, int stringlen, void* string);
typedef void (* ROGL_PFNGLDELETENAMEDSTRINGARBPROC) (int namelen, void* name);
typedef void (* ROGL_PFNGLCOMPILESHADERINCLUDEARBPROC) (unsigned int shader, int count, void* path, void* length);
typedef unsigned char (* ROGL_PFNGLISNAMEDSTRINGARBPROC) (int namelen, void* name);
typedef void (* ROGL_PFNGLGETNAMEDSTRINGARBPROC) (int namelen, void* name, int bufSize, void* stringlen, void* string);
typedef void (* ROGL_PFNGLGETNAMEDSTRINGIVARBPROC) (int namelen, void* name, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLBUFFERPAGECOMMITMENTARBPROC) (unsigned int target, ptrdiff_t offset, ptrdiff_t size, unsigned char commit);
typedef void (* ROGL_PFNGLNAMEDBUFFERPAGECOMMITMENTEXTPROC) (unsigned int buffer, ptrdiff_t offset, ptrdiff_t size, unsigned char commit);
typedef void (* ROGL_PFNGLNAMEDBUFFERPAGECOMMITMENTARBPROC) (unsigned int buffer, ptrdiff_t offset, ptrdiff_t size, unsigned char commit);
typedef void (* ROGL_PFNGLTEXPAGECOMMITMENTARBPROC) (unsigned int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, unsigned char commit);
typedef void (* ROGL_PFNGLTEXBUFFERARBPROC) (unsigned int target, unsigned int internalformat, unsigned int buffer);
typedef void (* ROGL_PFNGLCOMPRESSEDTEXIMAGE3DARBPROC) (unsigned int target, int level, unsigned int internalformat, int width, int height, int depth, int border, int imageSize, void* data);
typedef void (* ROGL_PFNGLCOMPRESSEDTEXIMAGE2DARBPROC) (unsigned int target, int level, unsigned int internalformat, int width, int height, int border, int imageSize, void* data);
typedef void (* ROGL_PFNGLCOMPRESSEDTEXIMAGE1DARBPROC) (unsigned int target, int level, unsigned int internalformat, int width, int border, int imageSize, void* data);
typedef void (* ROGL_PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC) (unsigned int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, unsigned int format, int imageSize, void* data);
typedef void (* ROGL_PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC) (unsigned int target, int level, int xoffset, int yoffset, int width, int height, unsigned int format, int imageSize, void* data);
typedef void (* ROGL_PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC) (unsigned int target, int level, int xoffset, int width, unsigned int format, int imageSize, void* data);
typedef void (* ROGL_PFNGLGETCOMPRESSEDTEXIMAGEARBPROC) (unsigned int target, int level, void* img);
typedef void (* ROGL_PFNGLLOADTRANSPOSEMATRIXFARBPROC) (void* m);
typedef void (* ROGL_PFNGLLOADTRANSPOSEMATRIXDARBPROC) (void* m);
typedef void (* ROGL_PFNGLMULTTRANSPOSEMATRIXFARBPROC) (void* m);
typedef void (* ROGL_PFNGLMULTTRANSPOSEMATRIXDARBPROC) (void* m);
typedef void (* ROGL_PFNGLWEIGHTBVARBPROC) (int size, void* weights);
typedef void (* ROGL_PFNGLWEIGHTSVARBPROC) (int size, void* weights);
typedef void (* ROGL_PFNGLWEIGHTIVARBPROC) (int size, void* weights);
typedef void (* ROGL_PFNGLWEIGHTFVARBPROC) (int size, void* weights);
typedef void (* ROGL_PFNGLWEIGHTDVARBPROC) (int size, void* weights);
typedef void (* ROGL_PFNGLWEIGHTUBVARBPROC) (int size, void* weights);
typedef void (* ROGL_PFNGLWEIGHTUSVARBPROC) (int size, void* weights);
typedef void (* ROGL_PFNGLWEIGHTUIVARBPROC) (int size, void* weights);
typedef void (* ROGL_PFNGLWEIGHTPOINTERARBPROC) (int size, unsigned int type, int stride, void* pointer);
typedef void (* ROGL_PFNGLVERTEXBLENDARBPROC) (int count);
typedef void (* ROGL_PFNGLBINDBUFFERARBPROC) (unsigned int target, unsigned int buffer);
typedef void (* ROGL_PFNGLDELETEBUFFERSARBPROC) (int n, void* buffers);
typedef void (* ROGL_PFNGLGENBUFFERSARBPROC) (int n, void* buffers);
typedef unsigned char (* ROGL_PFNGLISBUFFERARBPROC) (unsigned int buffer);
typedef void (* ROGL_PFNGLBUFFERDATAARBPROC) (unsigned int target, ptrdiff_t size, void* data, unsigned int usage);
typedef void (* ROGL_PFNGLBUFFERSUBDATAARBPROC) (unsigned int target, ptrdiff_t offset, ptrdiff_t size, void* data);
typedef void (* ROGL_PFNGLGETBUFFERSUBDATAARBPROC) (unsigned int target, ptrdiff_t offset, ptrdiff_t size, void* data);
typedef void* (* ROGL_PFNGLMAPBUFFERARBPROC) (unsigned int target, unsigned int access);
typedef unsigned char (* ROGL_PFNGLUNMAPBUFFERARBPROC) (unsigned int target);
typedef void (* ROGL_PFNGLGETBUFFERPARAMETERIVARBPROC) (unsigned int target, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETBUFFERPOINTERVARBPROC) (unsigned int target, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLBINDATTRIBLOCATIONARBPROC) (void* programObj, unsigned int index, void* name);
typedef void (* ROGL_PFNGLGETACTIVEATTRIBARBPROC) (void* programObj, unsigned int index, int maxLength, void* length, void* size, void* type, void* name);
typedef int (* ROGL_PFNGLGETATTRIBLOCATIONARBPROC) (void* programObj, void* name);
typedef void (* ROGL_PFNGLWINDOWPOS2DARBPROC) (double x, double y);
typedef void (* ROGL_PFNGLWINDOWPOS2DVARBPROC) (void* v);
typedef void (* ROGL_PFNGLWINDOWPOS2FARBPROC) (float x, float y);
typedef void (* ROGL_PFNGLWINDOWPOS2FVARBPROC) (void* v);
typedef void (* ROGL_PFNGLWINDOWPOS2IARBPROC) (int x, int y);
typedef void (* ROGL_PFNGLWINDOWPOS2IVARBPROC) (void* v);
typedef void (* ROGL_PFNGLWINDOWPOS2SARBPROC) (short x, short y);
typedef void (* ROGL_PFNGLWINDOWPOS2SVARBPROC) (void* v);
typedef void (* ROGL_PFNGLWINDOWPOS3DARBPROC) (double x, double y, double z);
typedef void (* ROGL_PFNGLWINDOWPOS3DVARBPROC) (void* v);
typedef void (* ROGL_PFNGLWINDOWPOS3FARBPROC) (float x, float y, float z);
typedef void (* ROGL_PFNGLWINDOWPOS3FVARBPROC) (void* v);
typedef void (* ROGL_PFNGLWINDOWPOS3IARBPROC) (int x, int y, int z);
typedef void (* ROGL_PFNGLWINDOWPOS3IVARBPROC) (void* v);
typedef void (* ROGL_PFNGLWINDOWPOS3SARBPROC) (short x, short y, short z);
typedef void (* ROGL_PFNGLWINDOWPOS3SVARBPROC) (void* v);
typedef void (* ROGL_PFNGLDRAWBUFFERSATIPROC) (int n, void* bufs);
typedef void (* ROGL_PFNGLELEMENTPOINTERATIPROC) (unsigned int type, void* pointer);
typedef void (* ROGL_PFNGLDRAWELEMENTARRAYATIPROC) (unsigned int mode, int count);
typedef void (* ROGL_PFNGLDRAWRANGEELEMENTARRAYATIPROC) (unsigned int mode, unsigned int start, unsigned int end, int count);
typedef void (* ROGL_PFNGLTEXBUMPPARAMETERIVATIPROC) (unsigned int pname, void* param);
typedef void (* ROGL_PFNGLTEXBUMPPARAMETERFVATIPROC) (unsigned int pname, void* param);
typedef void (* ROGL_PFNGLGETTEXBUMPPARAMETERIVATIPROC) (unsigned int pname, void* param);
typedef void (* ROGL_PFNGLGETTEXBUMPPARAMETERFVATIPROC) (unsigned int pname, void* param);
typedef unsigned int (* ROGL_PFNGLGENFRAGMENTSHADERSATIPROC) (unsigned int range);
typedef void (* ROGL_PFNGLBINDFRAGMENTSHADERATIPROC) (unsigned int id);
typedef void (* ROGL_PFNGLDELETEFRAGMENTSHADERATIPROC) (unsigned int id);
typedef void (* ROGL_PFNGLBEGINFRAGMENTSHADERATIPROC) (void);
typedef void (* ROGL_PFNGLENDFRAGMENTSHADERATIPROC) (void);
typedef void (* ROGL_PFNGLPASSTEXCOORDATIPROC) (unsigned int dst, unsigned int coord, unsigned int swizzle);
typedef void (* ROGL_PFNGLSAMPLEMAPATIPROC) (unsigned int dst, unsigned int interp, unsigned int swizzle);
typedef void (* ROGL_PFNGLCOLORFRAGMENTOP1ATIPROC) (unsigned int op, unsigned int dst, unsigned int dstMask, unsigned int dstMod, unsigned int arg1, unsigned int arg1Rep, unsigned int arg1Mod);
typedef void (* ROGL_PFNGLCOLORFRAGMENTOP2ATIPROC) (unsigned int op, unsigned int dst, unsigned int dstMask, unsigned int dstMod, unsigned int arg1, unsigned int arg1Rep, unsigned int arg1Mod, unsigned int arg2, unsigned int arg2Rep, unsigned int arg2Mod);
typedef void (* ROGL_PFNGLCOLORFRAGMENTOP3ATIPROC) (unsigned int op, unsigned int dst, unsigned int dstMask, unsigned int dstMod, unsigned int arg1, unsigned int arg1Rep, unsigned int arg1Mod, unsigned int arg2, unsigned int arg2Rep, unsigned int arg2Mod, unsigned int arg3, unsigned int arg3Rep, unsigned int arg3Mod);
typedef void (* ROGL_PFNGLALPHAFRAGMENTOP1ATIPROC) (unsigned int op, unsigned int dst, unsigned int dstMod, unsigned int arg1, unsigned int arg1Rep, unsigned int arg1Mod);
typedef void (* ROGL_PFNGLALPHAFRAGMENTOP2ATIPROC) (unsigned int op, unsigned int dst, unsigned int dstMod, unsigned int arg1, unsigned int arg1Rep, unsigned int arg1Mod, unsigned int arg2, unsigned int arg2Rep, unsigned int arg2Mod);
typedef void (* ROGL_PFNGLALPHAFRAGMENTOP3ATIPROC) (unsigned int op, unsigned int dst, unsigned int dstMod, unsigned int arg1, unsigned int arg1Rep, unsigned int arg1Mod, unsigned int arg2, unsigned int arg2Rep, unsigned int arg2Mod, unsigned int arg3, unsigned int arg3Rep, unsigned int arg3Mod);
typedef void (* ROGL_PFNGLSETFRAGMENTSHADERCONSTANTATIPROC) (unsigned int dst, void* value);
typedef void* (* ROGL_PFNGLMAPOBJECTBUFFERATIPROC) (unsigned int buffer);
typedef void (* ROGL_PFNGLUNMAPOBJECTBUFFERATIPROC) (unsigned int buffer);
typedef void (* ROGL_PFNGLPNTRIANGLESIATIPROC) (unsigned int pname, int param);
typedef void (* ROGL_PFNGLPNTRIANGLESFATIPROC) (unsigned int pname, float param);
typedef void (* ROGL_PFNGLSTENCILOPSEPARATEATIPROC) (unsigned int face, unsigned int sfail, unsigned int dpfail, unsigned int dppass);
typedef void (* ROGL_PFNGLSTENCILFUNCSEPARATEATIPROC) (unsigned int frontfunc, unsigned int backfunc, int ref, unsigned int mask);
typedef unsigned int (* ROGL_PFNGLNEWOBJECTBUFFERATIPROC) (int size, void* pointer, unsigned int usage);
typedef unsigned char (* ROGL_PFNGLISOBJECTBUFFERATIPROC) (unsigned int buffer);
typedef void (* ROGL_PFNGLUPDATEOBJECTBUFFERATIPROC) (unsigned int buffer, unsigned int offset, int size, void* pointer, unsigned int preserve);
typedef void (* ROGL_PFNGLGETOBJECTBUFFERFVATIPROC) (unsigned int buffer, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETOBJECTBUFFERIVATIPROC) (unsigned int buffer, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLFREEOBJECTBUFFERATIPROC) (unsigned int buffer);
typedef void (* ROGL_PFNGLARRAYOBJECTATIPROC) (unsigned int array, int size, unsigned int type, int stride, unsigned int buffer, unsigned int offset);
typedef void (* ROGL_PFNGLGETARRAYOBJECTFVATIPROC) (unsigned int array, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETARRAYOBJECTIVATIPROC) (unsigned int array, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLVARIANTARRAYOBJECTATIPROC) (unsigned int id, unsigned int type, int stride, unsigned int buffer, unsigned int offset);
typedef void (* ROGL_PFNGLGETVARIANTARRAYOBJECTFVATIPROC) (unsigned int id, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETVARIANTARRAYOBJECTIVATIPROC) (unsigned int id, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLVERTEXATTRIBARRAYOBJECTATIPROC) (unsigned int index, int size, unsigned int type, unsigned char normalized, int stride, unsigned int buffer, unsigned int offset);
typedef void (* ROGL_PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC) (unsigned int index, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC) (unsigned int index, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLVERTEXSTREAM1SATIPROC) (unsigned int stream, short x);
typedef void (* ROGL_PFNGLVERTEXSTREAM1SVATIPROC) (unsigned int stream, void* coords);
typedef void (* ROGL_PFNGLVERTEXSTREAM1IATIPROC) (unsigned int stream, int x);
typedef void (* ROGL_PFNGLVERTEXSTREAM1IVATIPROC) (unsigned int stream, void* coords);
typedef void (* ROGL_PFNGLVERTEXSTREAM1FATIPROC) (unsigned int stream, float x);
typedef void (* ROGL_PFNGLVERTEXSTREAM1FVATIPROC) (unsigned int stream, void* coords);
typedef void (* ROGL_PFNGLVERTEXSTREAM1DATIPROC) (unsigned int stream, double x);
typedef void (* ROGL_PFNGLVERTEXSTREAM1DVATIPROC) (unsigned int stream, void* coords);
typedef void (* ROGL_PFNGLVERTEXSTREAM2SATIPROC) (unsigned int stream, short x, short y);
typedef void (* ROGL_PFNGLVERTEXSTREAM2SVATIPROC) (unsigned int stream, void* coords);
typedef void (* ROGL_PFNGLVERTEXSTREAM2IATIPROC) (unsigned int stream, int x, int y);
typedef void (* ROGL_PFNGLVERTEXSTREAM2IVATIPROC) (unsigned int stream, void* coords);
typedef void (* ROGL_PFNGLVERTEXSTREAM2FATIPROC) (unsigned int stream, float x, float y);
typedef void (* ROGL_PFNGLVERTEXSTREAM2FVATIPROC) (unsigned int stream, void* coords);
typedef void (* ROGL_PFNGLVERTEXSTREAM2DATIPROC) (unsigned int stream, double x, double y);
typedef void (* ROGL_PFNGLVERTEXSTREAM2DVATIPROC) (unsigned int stream, void* coords);
typedef void (* ROGL_PFNGLVERTEXSTREAM3SATIPROC) (unsigned int stream, short x, short y, short z);
typedef void (* ROGL_PFNGLVERTEXSTREAM3SVATIPROC) (unsigned int stream, void* coords);
typedef void (* ROGL_PFNGLVERTEXSTREAM3IATIPROC) (unsigned int stream, int x, int y, int z);
typedef void (* ROGL_PFNGLVERTEXSTREAM3IVATIPROC) (unsigned int stream, void* coords);
typedef void (* ROGL_PFNGLVERTEXSTREAM3FATIPROC) (unsigned int stream, float x, float y, float z);
typedef void (* ROGL_PFNGLVERTEXSTREAM3FVATIPROC) (unsigned int stream, void* coords);
typedef void (* ROGL_PFNGLVERTEXSTREAM3DATIPROC) (unsigned int stream, double x, double y, double z);
typedef void (* ROGL_PFNGLVERTEXSTREAM3DVATIPROC) (unsigned int stream, void* coords);
typedef void (* ROGL_PFNGLVERTEXSTREAM4SATIPROC) (unsigned int stream, short x, short y, short z, short w);
typedef void (* ROGL_PFNGLVERTEXSTREAM4SVATIPROC) (unsigned int stream, void* coords);
typedef void (* ROGL_PFNGLVERTEXSTREAM4IATIPROC) (unsigned int stream, int x, int y, int z, int w);
typedef void (* ROGL_PFNGLVERTEXSTREAM4IVATIPROC) (unsigned int stream, void* coords);
typedef void (* ROGL_PFNGLVERTEXSTREAM4FATIPROC) (unsigned int stream, float x, float y, float z, float w);
typedef void (* ROGL_PFNGLVERTEXSTREAM4FVATIPROC) (unsigned int stream, void* coords);
typedef void (* ROGL_PFNGLVERTEXSTREAM4DATIPROC) (unsigned int stream, double x, double y, double z, double w);
typedef void (* ROGL_PFNGLVERTEXSTREAM4DVATIPROC) (unsigned int stream, void* coords);
typedef void (* ROGL_PFNGLNORMALSTREAM3BATIPROC) (unsigned int stream, char nx, char ny, char nz);
typedef void (* ROGL_PFNGLNORMALSTREAM3BVATIPROC) (unsigned int stream, void* coords);
typedef void (* ROGL_PFNGLNORMALSTREAM3SATIPROC) (unsigned int stream, short nx, short ny, short nz);
typedef void (* ROGL_PFNGLNORMALSTREAM3SVATIPROC) (unsigned int stream, void* coords);
typedef void (* ROGL_PFNGLNORMALSTREAM3IATIPROC) (unsigned int stream, int nx, int ny, int nz);
typedef void (* ROGL_PFNGLNORMALSTREAM3IVATIPROC) (unsigned int stream, void* coords);
typedef void (* ROGL_PFNGLNORMALSTREAM3FATIPROC) (unsigned int stream, float nx, float ny, float nz);
typedef void (* ROGL_PFNGLNORMALSTREAM3FVATIPROC) (unsigned int stream, void* coords);
typedef void (* ROGL_PFNGLNORMALSTREAM3DATIPROC) (unsigned int stream, double nx, double ny, double nz);
typedef void (* ROGL_PFNGLNORMALSTREAM3DVATIPROC) (unsigned int stream, void* coords);
typedef void (* ROGL_PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC) (unsigned int stream);
typedef void (* ROGL_PFNGLVERTEXBLENDENVIATIPROC) (unsigned int pname, int param);
typedef void (* ROGL_PFNGLVERTEXBLENDENVFATIPROC) (unsigned int pname, float param);
typedef void (* ROGL_PFNGLUNIFORMBUFFEREXTPROC) (unsigned int program, int location, unsigned int buffer);
typedef int (* ROGL_PFNGLGETUNIFORMBUFFERSIZEEXTPROC) (unsigned int program, int location);
typedef ptrdiff_t (* ROGL_PFNGLGETUNIFORMOFFSETEXTPROC) (unsigned int program, int location);
typedef void (* ROGL_PFNGLBLENDCOLOREXTPROC) (float red, float green, float blue, float alpha);
typedef void (* ROGL_PFNGLBLENDEQUATIONSEPARATEEXTPROC) (unsigned int modeRGB, unsigned int modeAlpha);
typedef void (* ROGL_PFNGLBLENDFUNCSEPARATEEXTPROC) (unsigned int sfactorRGB, unsigned int dfactorRGB, unsigned int sfactorAlpha, unsigned int dfactorAlpha);
typedef void (* ROGL_PFNGLBLENDEQUATIONEXTPROC) (unsigned int mode);
typedef void (* ROGL_PFNGLCOLORSUBTABLEEXTPROC) (unsigned int target, int start, int count, unsigned int format, unsigned int type, void* data);
typedef void (* ROGL_PFNGLCOPYCOLORSUBTABLEEXTPROC) (unsigned int target, int start, int x, int y, int width);
typedef void (* ROGL_PFNGLLOCKARRAYSEXTPROC) (int first, int count);
typedef void (* ROGL_PFNGLUNLOCKARRAYSEXTPROC) (void);
typedef void (* ROGL_PFNGLCONVOLUTIONFILTER1DEXTPROC) (unsigned int target, unsigned int internalformat, int width, unsigned int format, unsigned int type, void* image);
typedef void (* ROGL_PFNGLCONVOLUTIONFILTER2DEXTPROC) (unsigned int target, unsigned int internalformat, int width, int height, unsigned int format, unsigned int type, void* image);
typedef void (* ROGL_PFNGLCONVOLUTIONPARAMETERFEXTPROC) (unsigned int target, unsigned int pname, float params);
typedef void (* ROGL_PFNGLCONVOLUTIONPARAMETERFVEXTPROC) (unsigned int target, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLCONVOLUTIONPARAMETERIEXTPROC) (unsigned int target, unsigned int pname, int params);
typedef void (* ROGL_PFNGLCONVOLUTIONPARAMETERIVEXTPROC) (unsigned int target, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC) (unsigned int target, unsigned int internalformat, int x, int y, int width);
typedef void (* ROGL_PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC) (unsigned int target, unsigned int internalformat, int x, int y, int width, int height);
typedef void (* ROGL_PFNGLGETCONVOLUTIONFILTEREXTPROC) (unsigned int target, unsigned int format, unsigned int type, void* image);
typedef void (* ROGL_PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC) (unsigned int target, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC) (unsigned int target, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETSEPARABLEFILTEREXTPROC) (unsigned int target, unsigned int format, unsigned int type, void* row, void* column, void* span);
typedef void (* ROGL_PFNGLSEPARABLEFILTER2DEXTPROC) (unsigned int target, unsigned int internalformat, int width, int height, unsigned int format, unsigned int type, void* row, void* column);
typedef void (* ROGL_PFNGLTANGENT3BEXTPROC) (char tx, char ty, char tz);
typedef void (* ROGL_PFNGLTANGENT3BVEXTPROC) (void* v);
typedef void (* ROGL_PFNGLTANGENT3DEXTPROC) (double tx, double ty, double tz);
typedef void (* ROGL_PFNGLTANGENT3DVEXTPROC) (void* v);
typedef void (* ROGL_PFNGLTANGENT3FEXTPROC) (float tx, float ty, float tz);
typedef void (* ROGL_PFNGLTANGENT3FVEXTPROC) (void* v);
typedef void (* ROGL_PFNGLTANGENT3IEXTPROC) (int tx, int ty, int tz);
typedef void (* ROGL_PFNGLTANGENT3IVEXTPROC) (void* v);
typedef void (* ROGL_PFNGLTANGENT3SEXTPROC) (short tx, short ty, short tz);
typedef void (* ROGL_PFNGLTANGENT3SVEXTPROC) (void* v);
typedef void (* ROGL_PFNGLBINORMAL3BEXTPROC) (char bx, char by, char bz);
typedef void (* ROGL_PFNGLBINORMAL3BVEXTPROC) (void* v);
typedef void (* ROGL_PFNGLBINORMAL3DEXTPROC) (double bx, double by, double bz);
typedef void (* ROGL_PFNGLBINORMAL3DVEXTPROC) (void* v);
typedef void (* ROGL_PFNGLBINORMAL3FEXTPROC) (float bx, float by, float bz);
typedef void (* ROGL_PFNGLBINORMAL3FVEXTPROC) (void* v);
typedef void (* ROGL_PFNGLBINORMAL3IEXTPROC) (int bx, int by, int bz);
typedef void (* ROGL_PFNGLBINORMAL3IVEXTPROC) (void* v);
typedef void (* ROGL_PFNGLBINORMAL3SEXTPROC) (short bx, short by, short bz);
typedef void (* ROGL_PFNGLBINORMAL3SVEXTPROC) (void* v);
typedef void (* ROGL_PFNGLTANGENTPOINTEREXTPROC) (unsigned int type, int stride, void* pointer);
typedef void (* ROGL_PFNGLBINORMALPOINTEREXTPROC) (unsigned int type, int stride, void* pointer);
typedef void (* ROGL_PFNGLCOPYTEXIMAGE1DEXTPROC) (unsigned int target, int level, unsigned int internalformat, int x, int y, int width, int border);
typedef void (* ROGL_PFNGLCOPYTEXIMAGE2DEXTPROC) (unsigned int target, int level, unsigned int internalformat, int x, int y, int width, int height, int border);
typedef void (* ROGL_PFNGLCOPYTEXSUBIMAGE1DEXTPROC) (unsigned int target, int level, int xoffset, int x, int y, int width);
typedef void (* ROGL_PFNGLCOPYTEXSUBIMAGE2DEXTPROC) (unsigned int target, int level, int xoffset, int yoffset, int x, int y, int width, int height);
typedef void (* ROGL_PFNGLCOPYTEXSUBIMAGE3DEXTPROC) (unsigned int target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height);
typedef void (* ROGL_PFNGLCULLPARAMETERDVEXTPROC) (unsigned int pname, void* params);
typedef void (* ROGL_PFNGLCULLPARAMETERFVEXTPROC) (unsigned int pname, void* params);
typedef void (* ROGL_PFNGLLABELOBJECTEXTPROC) (unsigned int type, unsigned int object, int length, void* label);
typedef void (* ROGL_PFNGLGETOBJECTLABELEXTPROC) (unsigned int type, unsigned int object, int bufSize, void* length, void* label);
typedef void (* ROGL_PFNGLINSERTEVENTMARKEREXTPROC) (int length, void* marker);
typedef void (* ROGL_PFNGLPUSHGROUPMARKEREXTPROC) (int length, void* marker);
typedef void (* ROGL_PFNGLPOPGROUPMARKEREXTPROC) (void);
typedef void (* ROGL_PFNGLDEPTHBOUNDSEXTPROC) (double zmin, double zmax);
typedef void (* ROGL_PFNGLMATRIXLOADFEXTPROC) (unsigned int mode, void* m);
typedef void (* ROGL_PFNGLMATRIXLOADDEXTPROC) (unsigned int mode, void* m);
typedef void (* ROGL_PFNGLMATRIXMULTFEXTPROC) (unsigned int mode, void* m);
typedef void (* ROGL_PFNGLMATRIXMULTDEXTPROC) (unsigned int mode, void* m);
typedef void (* ROGL_PFNGLMATRIXLOADIDENTITYEXTPROC) (unsigned int mode);
typedef void (* ROGL_PFNGLMATRIXROTATEFEXTPROC) (unsigned int mode, float angle, float x, float y, float z);
typedef void (* ROGL_PFNGLMATRIXROTATEDEXTPROC) (unsigned int mode, double angle, double x, double y, double z);
typedef void (* ROGL_PFNGLMATRIXSCALEFEXTPROC) (unsigned int mode, float x, float y, float z);
typedef void (* ROGL_PFNGLMATRIXSCALEDEXTPROC) (unsigned int mode, double x, double y, double z);
typedef void (* ROGL_PFNGLMATRIXTRANSLATEFEXTPROC) (unsigned int mode, float x, float y, float z);
typedef void (* ROGL_PFNGLMATRIXTRANSLATEDEXTPROC) (unsigned int mode, double x, double y, double z);
typedef void (* ROGL_PFNGLMATRIXFRUSTUMEXTPROC) (unsigned int mode, double left, double right, double bottom, double top, double zNear, double zFar);
typedef void (* ROGL_PFNGLMATRIXORTHOEXTPROC) (unsigned int mode, double left, double right, double bottom, double top, double zNear, double zFar);
typedef void (* ROGL_PFNGLMATRIXPOPEXTPROC) (unsigned int mode);
typedef void (* ROGL_PFNGLMATRIXPUSHEXTPROC) (unsigned int mode);
typedef void (* ROGL_PFNGLCLIENTATTRIBDEFAULTEXTPROC) (unsigned int mask);
typedef void (* ROGL_PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC) (unsigned int mask);
typedef void (* ROGL_PFNGLTEXTUREPARAMETERFEXTPROC) (unsigned int texture, unsigned int target, unsigned int pname, float param);
typedef void (* ROGL_PFNGLTEXTUREPARAMETERFVEXTPROC) (unsigned int texture, unsigned int target, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLTEXTUREPARAMETERIEXTPROC) (unsigned int texture, unsigned int target, unsigned int pname, int param);
typedef void (* ROGL_PFNGLTEXTUREPARAMETERIVEXTPROC) (unsigned int texture, unsigned int target, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLTEXTUREIMAGE1DEXTPROC) (unsigned int texture, unsigned int target, int level, int internalformat, int width, int border, unsigned int format, unsigned int type, void* pixels);
typedef void (* ROGL_PFNGLTEXTUREIMAGE2DEXTPROC) (unsigned int texture, unsigned int target, int level, int internalformat, int width, int height, int border, unsigned int format, unsigned int type, void* pixels);
typedef void (* ROGL_PFNGLTEXTURESUBIMAGE1DEXTPROC) (unsigned int texture, unsigned int target, int level, int xoffset, int width, unsigned int format, unsigned int type, void* pixels);
typedef void (* ROGL_PFNGLTEXTURESUBIMAGE2DEXTPROC) (unsigned int texture, unsigned int target, int level, int xoffset, int yoffset, int width, int height, unsigned int format, unsigned int type, void* pixels);
typedef void (* ROGL_PFNGLCOPYTEXTUREIMAGE1DEXTPROC) (unsigned int texture, unsigned int target, int level, unsigned int internalformat, int x, int y, int width, int border);
typedef void (* ROGL_PFNGLCOPYTEXTUREIMAGE2DEXTPROC) (unsigned int texture, unsigned int target, int level, unsigned int internalformat, int x, int y, int width, int height, int border);
typedef void (* ROGL_PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC) (unsigned int texture, unsigned int target, int level, int xoffset, int x, int y, int width);
typedef void (* ROGL_PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC) (unsigned int texture, unsigned int target, int level, int xoffset, int yoffset, int x, int y, int width, int height);
typedef void (* ROGL_PFNGLGETTEXTUREIMAGEEXTPROC) (unsigned int texture, unsigned int target, int level, unsigned int format, unsigned int type, void* pixels);
typedef void (* ROGL_PFNGLGETTEXTUREPARAMETERFVEXTPROC) (unsigned int texture, unsigned int target, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETTEXTUREPARAMETERIVEXTPROC) (unsigned int texture, unsigned int target, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC) (unsigned int texture, unsigned int target, int level, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC) (unsigned int texture, unsigned int target, int level, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLTEXTUREIMAGE3DEXTPROC) (unsigned int texture, unsigned int target, int level, int internalformat, int width, int height, int depth, int border, unsigned int format, unsigned int type, void* pixels);
typedef void (* ROGL_PFNGLTEXTURESUBIMAGE3DEXTPROC) (unsigned int texture, unsigned int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, unsigned int format, unsigned int type, void* pixels);
typedef void (* ROGL_PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC) (unsigned int texture, unsigned int target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height);
typedef void (* ROGL_PFNGLBINDMULTITEXTUREEXTPROC) (unsigned int texunit, unsigned int target, unsigned int texture);
typedef void (* ROGL_PFNGLMULTITEXCOORDPOINTEREXTPROC) (unsigned int texunit, int size, unsigned int type, int stride, void* pointer);
typedef void (* ROGL_PFNGLMULTITEXENVFEXTPROC) (unsigned int texunit, unsigned int target, unsigned int pname, float param);
typedef void (* ROGL_PFNGLMULTITEXENVFVEXTPROC) (unsigned int texunit, unsigned int target, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLMULTITEXENVIEXTPROC) (unsigned int texunit, unsigned int target, unsigned int pname, int param);
typedef void (* ROGL_PFNGLMULTITEXENVIVEXTPROC) (unsigned int texunit, unsigned int target, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLMULTITEXGENDEXTPROC) (unsigned int texunit, unsigned int coord, unsigned int pname, double param);
typedef void (* ROGL_PFNGLMULTITEXGENDVEXTPROC) (unsigned int texunit, unsigned int coord, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLMULTITEXGENFEXTPROC) (unsigned int texunit, unsigned int coord, unsigned int pname, float param);
typedef void (* ROGL_PFNGLMULTITEXGENFVEXTPROC) (unsigned int texunit, unsigned int coord, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLMULTITEXGENIEXTPROC) (unsigned int texunit, unsigned int coord, unsigned int pname, int param);
typedef void (* ROGL_PFNGLMULTITEXGENIVEXTPROC) (unsigned int texunit, unsigned int coord, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETMULTITEXENVFVEXTPROC) (unsigned int texunit, unsigned int target, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETMULTITEXENVIVEXTPROC) (unsigned int texunit, unsigned int target, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETMULTITEXGENDVEXTPROC) (unsigned int texunit, unsigned int coord, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETMULTITEXGENFVEXTPROC) (unsigned int texunit, unsigned int coord, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETMULTITEXGENIVEXTPROC) (unsigned int texunit, unsigned int coord, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLMULTITEXPARAMETERIEXTPROC) (unsigned int texunit, unsigned int target, unsigned int pname, int param);
typedef void (* ROGL_PFNGLMULTITEXPARAMETERIVEXTPROC) (unsigned int texunit, unsigned int target, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLMULTITEXPARAMETERFEXTPROC) (unsigned int texunit, unsigned int target, unsigned int pname, float param);
typedef void (* ROGL_PFNGLMULTITEXPARAMETERFVEXTPROC) (unsigned int texunit, unsigned int target, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLMULTITEXIMAGE1DEXTPROC) (unsigned int texunit, unsigned int target, int level, int internalformat, int width, int border, unsigned int format, unsigned int type, void* pixels);
typedef void (* ROGL_PFNGLMULTITEXIMAGE2DEXTPROC) (unsigned int texunit, unsigned int target, int level, int internalformat, int width, int height, int border, unsigned int format, unsigned int type, void* pixels);
typedef void (* ROGL_PFNGLMULTITEXSUBIMAGE1DEXTPROC) (unsigned int texunit, unsigned int target, int level, int xoffset, int width, unsigned int format, unsigned int type, void* pixels);
typedef void (* ROGL_PFNGLMULTITEXSUBIMAGE2DEXTPROC) (unsigned int texunit, unsigned int target, int level, int xoffset, int yoffset, int width, int height, unsigned int format, unsigned int type, void* pixels);
typedef void (* ROGL_PFNGLCOPYMULTITEXIMAGE1DEXTPROC) (unsigned int texunit, unsigned int target, int level, unsigned int internalformat, int x, int y, int width, int border);
typedef void (* ROGL_PFNGLCOPYMULTITEXIMAGE2DEXTPROC) (unsigned int texunit, unsigned int target, int level, unsigned int internalformat, int x, int y, int width, int height, int border);
typedef void (* ROGL_PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC) (unsigned int texunit, unsigned int target, int level, int xoffset, int x, int y, int width);
typedef void (* ROGL_PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC) (unsigned int texunit, unsigned int target, int level, int xoffset, int yoffset, int x, int y, int width, int height);
typedef void (* ROGL_PFNGLGETMULTITEXIMAGEEXTPROC) (unsigned int texunit, unsigned int target, int level, unsigned int format, unsigned int type, void* pixels);
typedef void (* ROGL_PFNGLGETMULTITEXPARAMETERFVEXTPROC) (unsigned int texunit, unsigned int target, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETMULTITEXPARAMETERIVEXTPROC) (unsigned int texunit, unsigned int target, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC) (unsigned int texunit, unsigned int target, int level, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC) (unsigned int texunit, unsigned int target, int level, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLMULTITEXIMAGE3DEXTPROC) (unsigned int texunit, unsigned int target, int level, int internalformat, int width, int height, int depth, int border, unsigned int format, unsigned int type, void* pixels);
typedef void (* ROGL_PFNGLMULTITEXSUBIMAGE3DEXTPROC) (unsigned int texunit, unsigned int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, unsigned int format, unsigned int type, void* pixels);
typedef void (* ROGL_PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC) (unsigned int texunit, unsigned int target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height);
typedef void (* ROGL_PFNGLENABLECLIENTSTATEINDEXEDEXTPROC) (unsigned int array, unsigned int index);
typedef void (* ROGL_PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC) (unsigned int array, unsigned int index);
typedef void (* ROGL_PFNGLGETFLOATINDEXEDVEXTPROC) (unsigned int target, unsigned int index, void* data);
typedef void (* ROGL_PFNGLGETDOUBLEINDEXEDVEXTPROC) (unsigned int target, unsigned int index, void* data);
typedef void (* ROGL_PFNGLGETPOINTERINDEXEDVEXTPROC) (unsigned int target, unsigned int index, void* data);
typedef void (* ROGL_PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC) (unsigned int texture, unsigned int target, int level, unsigned int internalformat, int width, int height, int depth, int border, int imageSize, void* bits);
typedef void (* ROGL_PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC) (unsigned int texture, unsigned int target, int level, unsigned int internalformat, int width, int height, int border, int imageSize, void* bits);
typedef void (* ROGL_PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC) (unsigned int texture, unsigned int target, int level, unsigned int internalformat, int width, int border, int imageSize, void* bits);
typedef void (* ROGL_PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC) (unsigned int texture, unsigned int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, unsigned int format, int imageSize, void* bits);
typedef void (* ROGL_PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC) (unsigned int texture, unsigned int target, int level, int xoffset, int yoffset, int width, int height, unsigned int format, int imageSize, void* bits);
typedef void (* ROGL_PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC) (unsigned int texture, unsigned int target, int level, int xoffset, int width, unsigned int format, int imageSize, void* bits);
typedef void (* ROGL_PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC) (unsigned int texture, unsigned int target, int lod, void* img);
typedef void (* ROGL_PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC) (unsigned int texunit, unsigned int target, int level, unsigned int internalformat, int width, int height, int depth, int border, int imageSize, void* bits);
typedef void (* ROGL_PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC) (unsigned int texunit, unsigned int target, int level, unsigned int internalformat, int width, int height, int border, int imageSize, void* bits);
typedef void (* ROGL_PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC) (unsigned int texunit, unsigned int target, int level, unsigned int internalformat, int width, int border, int imageSize, void* bits);
typedef void (* ROGL_PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC) (unsigned int texunit, unsigned int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, unsigned int format, int imageSize, void* bits);
typedef void (* ROGL_PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC) (unsigned int texunit, unsigned int target, int level, int xoffset, int yoffset, int width, int height, unsigned int format, int imageSize, void* bits);
typedef void (* ROGL_PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC) (unsigned int texunit, unsigned int target, int level, int xoffset, int width, unsigned int format, int imageSize, void* bits);
typedef void (* ROGL_PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC) (unsigned int texunit, unsigned int target, int lod, void* img);
typedef void (* ROGL_PFNGLMATRIXLOADTRANSPOSEFEXTPROC) (unsigned int mode, void* m);
typedef void (* ROGL_PFNGLMATRIXLOADTRANSPOSEDEXTPROC) (unsigned int mode, void* m);
typedef void (* ROGL_PFNGLMATRIXMULTTRANSPOSEFEXTPROC) (unsigned int mode, void* m);
typedef void (* ROGL_PFNGLMATRIXMULTTRANSPOSEDEXTPROC) (unsigned int mode, void* m);
typedef void (* ROGL_PFNGLNAMEDBUFFERDATAEXTPROC) (unsigned int buffer, ptrdiff_t size, void* data, unsigned int usage);
typedef void (* ROGL_PFNGLNAMEDBUFFERSUBDATAEXTPROC) (unsigned int buffer, ptrdiff_t offset, ptrdiff_t size, void* data);
typedef void* (* ROGL_PFNGLMAPNAMEDBUFFEREXTPROC) (unsigned int buffer, unsigned int access);
typedef unsigned char (* ROGL_PFNGLUNMAPNAMEDBUFFEREXTPROC) (unsigned int buffer);
typedef void (* ROGL_PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC) (unsigned int buffer, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETNAMEDBUFFERPOINTERVEXTPROC) (unsigned int buffer, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETNAMEDBUFFERSUBDATAEXTPROC) (unsigned int buffer, ptrdiff_t offset, ptrdiff_t size, void* data);
typedef void (* ROGL_PFNGLTEXTUREBUFFEREXTPROC) (unsigned int texture, unsigned int target, unsigned int internalformat, unsigned int buffer);
typedef void (* ROGL_PFNGLMULTITEXBUFFEREXTPROC) (unsigned int texunit, unsigned int target, unsigned int internalformat, unsigned int buffer);
typedef void (* ROGL_PFNGLTEXTUREPARAMETERIIVEXTPROC) (unsigned int texture, unsigned int target, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLTEXTUREPARAMETERIUIVEXTPROC) (unsigned int texture, unsigned int target, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETTEXTUREPARAMETERIIVEXTPROC) (unsigned int texture, unsigned int target, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETTEXTUREPARAMETERIUIVEXTPROC) (unsigned int texture, unsigned int target, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLMULTITEXPARAMETERIIVEXTPROC) (unsigned int texunit, unsigned int target, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLMULTITEXPARAMETERIUIVEXTPROC) (unsigned int texunit, unsigned int target, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETMULTITEXPARAMETERIIVEXTPROC) (unsigned int texunit, unsigned int target, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETMULTITEXPARAMETERIUIVEXTPROC) (unsigned int texunit, unsigned int target, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC) (unsigned int program, unsigned int target, unsigned int index, int count, void* params);
typedef void (* ROGL_PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC) (unsigned int program, unsigned int target, unsigned int index, int x, int y, int z, int w);
typedef void (* ROGL_PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC) (unsigned int program, unsigned int target, unsigned int index, void* params);
typedef void (* ROGL_PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC) (unsigned int program, unsigned int target, unsigned int index, int count, void* params);
typedef void (* ROGL_PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC) (unsigned int program, unsigned int target, unsigned int index, unsigned int x, unsigned int y, unsigned int z, unsigned int w);
typedef void (* ROGL_PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC) (unsigned int program, unsigned int target, unsigned int index, void* params);
typedef void (* ROGL_PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC) (unsigned int program, unsigned int target, unsigned int index, int count, void* params);
typedef void (* ROGL_PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC) (unsigned int program, unsigned int target, unsigned int index, void* params);
typedef void (* ROGL_PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC) (unsigned int program, unsigned int target, unsigned int index, void* params);
typedef void (* ROGL_PFNGLENABLECLIENTSTATEIEXTPROC) (unsigned int array, unsigned int index);
typedef void (* ROGL_PFNGLDISABLECLIENTSTATEIEXTPROC) (unsigned int array, unsigned int index);
typedef void (* ROGL_PFNGLGETFLOATI_VEXTPROC) (unsigned int pname, unsigned int index, void* params);
typedef void (* ROGL_PFNGLGETDOUBLEI_VEXTPROC) (unsigned int pname, unsigned int index, void* params);
typedef void (* ROGL_PFNGLGETPOINTERI_VEXTPROC) (unsigned int pname, unsigned int index, void* params);
typedef void (* ROGL_PFNGLNAMEDPROGRAMSTRINGEXTPROC) (unsigned int program, unsigned int target, unsigned int format, int len, void* string);
typedef void (* ROGL_PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC) (unsigned int program, unsigned int target, unsigned int index, double x, double y, double z, double w);
typedef void (* ROGL_PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC) (unsigned int program, unsigned int target, unsigned int index, void* params);
typedef void (* ROGL_PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC) (unsigned int program, unsigned int target, unsigned int index, float x, float y, float z, float w);
typedef void (* ROGL_PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC) (unsigned int program, unsigned int target, unsigned int index, void* params);
typedef void (* ROGL_PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC) (unsigned int program, unsigned int target, unsigned int index, void* params);
typedef void (* ROGL_PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC) (unsigned int program, unsigned int target, unsigned int index, void* params);
typedef void (* ROGL_PFNGLGETNAMEDPROGRAMIVEXTPROC) (unsigned int program, unsigned int target, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETNAMEDPROGRAMSTRINGEXTPROC) (unsigned int program, unsigned int target, unsigned int pname, void* string);
typedef void (* ROGL_PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC) (unsigned int renderbuffer, unsigned int internalformat, int width, int height);
typedef void (* ROGL_PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC) (unsigned int renderbuffer, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC) (unsigned int renderbuffer, int samples, unsigned int internalformat, int width, int height);
typedef void (* ROGL_PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC) (unsigned int renderbuffer, int coverageSamples, int colorSamples, unsigned int internalformat, int width, int height);
typedef unsigned int (* ROGL_PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC) (unsigned int framebuffer, unsigned int target);
typedef void (* ROGL_PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC) (unsigned int framebuffer, unsigned int attachment, unsigned int textarget, unsigned int texture, int level);
typedef void (* ROGL_PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC) (unsigned int framebuffer, unsigned int attachment, unsigned int textarget, unsigned int texture, int level);
typedef void (* ROGL_PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC) (unsigned int framebuffer, unsigned int attachment, unsigned int textarget, unsigned int texture, int level, int zoffset);
typedef void (* ROGL_PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC) (unsigned int framebuffer, unsigned int attachment, unsigned int renderbuffertarget, unsigned int renderbuffer);
typedef void (* ROGL_PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC) (unsigned int framebuffer, unsigned int attachment, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGENERATETEXTUREMIPMAPEXTPROC) (unsigned int texture, unsigned int target);
typedef void (* ROGL_PFNGLGENERATEMULTITEXMIPMAPEXTPROC) (unsigned int texunit, unsigned int target);
typedef void (* ROGL_PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC) (unsigned int framebuffer, unsigned int mode);
typedef void (* ROGL_PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC) (unsigned int framebuffer, int n, void* bufs);
typedef void (* ROGL_PFNGLFRAMEBUFFERREADBUFFEREXTPROC) (unsigned int framebuffer, unsigned int mode);
typedef void (* ROGL_PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC) (unsigned int framebuffer, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC) (unsigned int readBuffer, unsigned int writeBuffer, ptrdiff_t readOffset, ptrdiff_t writeOffset, ptrdiff_t size);
typedef void (* ROGL_PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC) (unsigned int framebuffer, unsigned int attachment, unsigned int texture, int level);
typedef void (* ROGL_PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC) (unsigned int framebuffer, unsigned int attachment, unsigned int texture, int level, int layer);
typedef void (* ROGL_PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC) (unsigned int framebuffer, unsigned int attachment, unsigned int texture, int level, unsigned int face);
typedef void (* ROGL_PFNGLTEXTURERENDERBUFFEREXTPROC) (unsigned int texture, unsigned int target, unsigned int renderbuffer);
typedef void (* ROGL_PFNGLMULTITEXRENDERBUFFEREXTPROC) (unsigned int texunit, unsigned int target, unsigned int renderbuffer);
typedef void (* ROGL_PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC) (unsigned int vaobj, unsigned int buffer, int size, unsigned int type, int stride, ptrdiff_t offset);
typedef void (* ROGL_PFNGLVERTEXARRAYCOLOROFFSETEXTPROC) (unsigned int vaobj, unsigned int buffer, int size, unsigned int type, int stride, ptrdiff_t offset);
typedef void (* ROGL_PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC) (unsigned int vaobj, unsigned int buffer, int stride, ptrdiff_t offset);
typedef void (* ROGL_PFNGLVERTEXARRAYINDEXOFFSETEXTPROC) (unsigned int vaobj, unsigned int buffer, unsigned int type, int stride, ptrdiff_t offset);
typedef void (* ROGL_PFNGLVERTEXARRAYNORMALOFFSETEXTPROC) (unsigned int vaobj, unsigned int buffer, unsigned int type, int stride, ptrdiff_t offset);
typedef void (* ROGL_PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC) (unsigned int vaobj, unsigned int buffer, int size, unsigned int type, int stride, ptrdiff_t offset);
typedef void (* ROGL_PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC) (unsigned int vaobj, unsigned int buffer, unsigned int texunit, int size, unsigned int type, int stride, ptrdiff_t offset);
typedef void (* ROGL_PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC) (unsigned int vaobj, unsigned int buffer, unsigned int type, int stride, ptrdiff_t offset);
typedef void (* ROGL_PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC) (unsigned int vaobj, unsigned int buffer, int size, unsigned int type, int stride, ptrdiff_t offset);
typedef void (* ROGL_PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC) (unsigned int vaobj, unsigned int buffer, unsigned int index, int size, unsigned int type, unsigned char normalized, int stride, ptrdiff_t offset);
typedef void (* ROGL_PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC) (unsigned int vaobj, unsigned int buffer, unsigned int index, int size, unsigned int type, int stride, ptrdiff_t offset);
typedef void (* ROGL_PFNGLENABLEVERTEXARRAYEXTPROC) (unsigned int vaobj, unsigned int array);
typedef void (* ROGL_PFNGLDISABLEVERTEXARRAYEXTPROC) (unsigned int vaobj, unsigned int array);
typedef void (* ROGL_PFNGLENABLEVERTEXARRAYATTRIBEXTPROC) (unsigned int vaobj, unsigned int index);
typedef void (* ROGL_PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC) (unsigned int vaobj, unsigned int index);
typedef void (* ROGL_PFNGLGETVERTEXARRAYINTEGERVEXTPROC) (unsigned int vaobj, unsigned int pname, void* param);
typedef void (* ROGL_PFNGLGETVERTEXARRAYPOINTERVEXTPROC) (unsigned int vaobj, unsigned int pname, void* param);
typedef void (* ROGL_PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC) (unsigned int vaobj, unsigned int index, unsigned int pname, void* param);
typedef void (* ROGL_PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC) (unsigned int vaobj, unsigned int index, unsigned int pname, void* param);
typedef void* (* ROGL_PFNGLMAPNAMEDBUFFERRANGEEXTPROC) (unsigned int buffer, ptrdiff_t offset, ptrdiff_t length, unsigned int access);
typedef void (* ROGL_PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC) (unsigned int buffer, ptrdiff_t offset, ptrdiff_t length);
typedef void (* ROGL_PFNGLNAMEDBUFFERSTORAGEEXTPROC) (unsigned int buffer, ptrdiff_t size, void* data, unsigned int flags);
typedef void (* ROGL_PFNGLCLEARNAMEDBUFFERDATAEXTPROC) (unsigned int buffer, unsigned int internalformat, unsigned int format, unsigned int type, void* data);
typedef void (* ROGL_PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC) (unsigned int buffer, unsigned int internalformat, ptrdiff_t offset, ptrdiff_t size, unsigned int format, unsigned int type, void* data);
typedef void (* ROGL_PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC) (unsigned int framebuffer, unsigned int pname, int param);
typedef void (* ROGL_PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC) (unsigned int framebuffer, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLPROGRAMUNIFORM1DEXTPROC) (unsigned int program, int location, double x);
typedef void (* ROGL_PFNGLPROGRAMUNIFORM2DEXTPROC) (unsigned int program, int location, double x, double y);
typedef void (* ROGL_PFNGLPROGRAMUNIFORM3DEXTPROC) (unsigned int program, int location, double x, double y, double z);
typedef void (* ROGL_PFNGLPROGRAMUNIFORM4DEXTPROC) (unsigned int program, int location, double x, double y, double z, double w);
typedef void (* ROGL_PFNGLPROGRAMUNIFORM1DVEXTPROC) (unsigned int program, int location, int count, void* value);
typedef void (* ROGL_PFNGLPROGRAMUNIFORM2DVEXTPROC) (unsigned int program, int location, int count, void* value);
typedef void (* ROGL_PFNGLPROGRAMUNIFORM3DVEXTPROC) (unsigned int program, int location, int count, void* value);
typedef void (* ROGL_PFNGLPROGRAMUNIFORM4DVEXTPROC) (unsigned int program, int location, int count, void* value);
typedef void (* ROGL_PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC) (unsigned int program, int location, int count, unsigned char transpose, void* value);
typedef void (* ROGL_PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC) (unsigned int program, int location, int count, unsigned char transpose, void* value);
typedef void (* ROGL_PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC) (unsigned int program, int location, int count, unsigned char transpose, void* value);
typedef void (* ROGL_PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC) (unsigned int program, int location, int count, unsigned char transpose, void* value);
typedef void (* ROGL_PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC) (unsigned int program, int location, int count, unsigned char transpose, void* value);
typedef void (* ROGL_PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC) (unsigned int program, int location, int count, unsigned char transpose, void* value);
typedef void (* ROGL_PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC) (unsigned int program, int location, int count, unsigned char transpose, void* value);
typedef void (* ROGL_PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC) (unsigned int program, int location, int count, unsigned char transpose, void* value);
typedef void (* ROGL_PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC) (unsigned int program, int location, int count, unsigned char transpose, void* value);
typedef void (* ROGL_PFNGLTEXTUREBUFFERRANGEEXTPROC) (unsigned int texture, unsigned int target, unsigned int internalformat, unsigned int buffer, ptrdiff_t offset, ptrdiff_t size);
typedef void (* ROGL_PFNGLTEXTURESTORAGE1DEXTPROC) (unsigned int texture, unsigned int target, int levels, unsigned int internalformat, int width);
typedef void (* ROGL_PFNGLTEXTURESTORAGE2DEXTPROC) (unsigned int texture, unsigned int target, int levels, unsigned int internalformat, int width, int height);
typedef void (* ROGL_PFNGLTEXTURESTORAGE3DEXTPROC) (unsigned int texture, unsigned int target, int levels, unsigned int internalformat, int width, int height, int depth);
typedef void (* ROGL_PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC) (unsigned int texture, unsigned int target, int samples, unsigned int internalformat, int width, int height, unsigned char fixedsamplelocations);
typedef void (* ROGL_PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC) (unsigned int texture, unsigned int target, int samples, unsigned int internalformat, int width, int height, int depth, unsigned char fixedsamplelocations);
typedef void (* ROGL_PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC) (unsigned int vaobj, unsigned int bindingindex, unsigned int buffer, ptrdiff_t offset, int stride);
typedef void (* ROGL_PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC) (unsigned int vaobj, unsigned int attribindex, int size, unsigned int type, unsigned char normalized, unsigned int relativeoffset);
typedef void (* ROGL_PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC) (unsigned int vaobj, unsigned int attribindex, int size, unsigned int type, unsigned int relativeoffset);
typedef void (* ROGL_PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC) (unsigned int vaobj, unsigned int attribindex, int size, unsigned int type, unsigned int relativeoffset);
typedef void (* ROGL_PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC) (unsigned int vaobj, unsigned int attribindex, unsigned int bindingindex);
typedef void (* ROGL_PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC) (unsigned int vaobj, unsigned int bindingindex, unsigned int divisor);
typedef void (* ROGL_PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC) (unsigned int vaobj, unsigned int buffer, unsigned int index, int size, unsigned int type, int stride, ptrdiff_t offset);
typedef void (* ROGL_PFNGLTEXTUREPAGECOMMITMENTEXTPROC) (unsigned int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, unsigned char commit);
typedef void (* ROGL_PFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC) (unsigned int vaobj, unsigned int index, unsigned int divisor);
typedef void (* ROGL_PFNGLCOLORMASKINDEXEDEXTPROC) (unsigned int index, unsigned char r, unsigned char g, unsigned char b, unsigned char a);
typedef void (* ROGL_PFNGLDRAWARRAYSINSTANCEDEXTPROC) (unsigned int mode, int start, int count, int primcount);
typedef void (* ROGL_PFNGLDRAWELEMENTSINSTANCEDEXTPROC) (unsigned int mode, int count, unsigned int type, void* indices, int primcount);
typedef void (* ROGL_PFNGLDRAWRANGEELEMENTSEXTPROC) (unsigned int mode, unsigned int start, unsigned int end, int count, unsigned int type, void* indices);
typedef void (* ROGL_PFNGLFOGCOORDFEXTPROC) (float coord);
typedef void (* ROGL_PFNGLFOGCOORDFVEXTPROC) (void* coord);
typedef void (* ROGL_PFNGLFOGCOORDDEXTPROC) (double coord);
typedef void (* ROGL_PFNGLFOGCOORDDVEXTPROC) (void* coord);
typedef void (* ROGL_PFNGLFOGCOORDPOINTEREXTPROC) (unsigned int type, int stride, void* pointer);
typedef void (* ROGL_PFNGLBLITFRAMEBUFFEREXTPROC) (int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, unsigned int mask, unsigned int filter);
typedef void (* ROGL_PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC) (unsigned int target, int samples, unsigned int internalformat, int width, int height);
typedef unsigned char (* ROGL_PFNGLISRENDERBUFFEREXTPROC) (unsigned int renderbuffer);
typedef void (* ROGL_PFNGLBINDRENDERBUFFEREXTPROC) (unsigned int target, unsigned int renderbuffer);
typedef void (* ROGL_PFNGLDELETERENDERBUFFERSEXTPROC) (int n, void* renderbuffers);
typedef void (* ROGL_PFNGLGENRENDERBUFFERSEXTPROC) (int n, void* renderbuffers);
typedef void (* ROGL_PFNGLRENDERBUFFERSTORAGEEXTPROC) (unsigned int target, unsigned int internalformat, int width, int height);
typedef void (* ROGL_PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC) (unsigned int target, unsigned int pname, void* params);
typedef unsigned char (* ROGL_PFNGLISFRAMEBUFFEREXTPROC) (unsigned int framebuffer);
typedef void (* ROGL_PFNGLBINDFRAMEBUFFEREXTPROC) (unsigned int target, unsigned int framebuffer);
typedef void (* ROGL_PFNGLDELETEFRAMEBUFFERSEXTPROC) (int n, void* framebuffers);
typedef void (* ROGL_PFNGLGENFRAMEBUFFERSEXTPROC) (int n, void* framebuffers);
typedef unsigned int (* ROGL_PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC) (unsigned int target);
typedef void (* ROGL_PFNGLFRAMEBUFFERTEXTURE1DEXTPROC) (unsigned int target, unsigned int attachment, unsigned int textarget, unsigned int texture, int level);
typedef void (* ROGL_PFNGLFRAMEBUFFERTEXTURE2DEXTPROC) (unsigned int target, unsigned int attachment, unsigned int textarget, unsigned int texture, int level);
typedef void (* ROGL_PFNGLFRAMEBUFFERTEXTURE3DEXTPROC) (unsigned int target, unsigned int attachment, unsigned int textarget, unsigned int texture, int level, int zoffset);
typedef void (* ROGL_PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC) (unsigned int target, unsigned int attachment, unsigned int renderbuffertarget, unsigned int renderbuffer);
typedef void (* ROGL_PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC) (unsigned int target, unsigned int attachment, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGENERATEMIPMAPEXTPROC) (unsigned int target);
typedef void (* ROGL_PFNGLPROGRAMENVPARAMETERS4FVEXTPROC) (unsigned int target, unsigned int index, int count, void* params);
typedef void (* ROGL_PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC) (unsigned int target, unsigned int index, int count, void* params);
typedef void (* ROGL_PFNGLGETUNIFORMUIVEXTPROC) (unsigned int program, int location, void* params);
typedef void (* ROGL_PFNGLBINDFRAGDATALOCATIONEXTPROC) (unsigned int program, unsigned int color, void* name);
typedef int (* ROGL_PFNGLGETFRAGDATALOCATIONEXTPROC) (unsigned int program, void* name);
typedef void (* ROGL_PFNGLUNIFORM1UIEXTPROC) (int location, unsigned int v0);
typedef void (* ROGL_PFNGLUNIFORM2UIEXTPROC) (int location, unsigned int v0, unsigned int v1);
typedef void (* ROGL_PFNGLUNIFORM3UIEXTPROC) (int location, unsigned int v0, unsigned int v1, unsigned int v2);
typedef void (* ROGL_PFNGLUNIFORM4UIEXTPROC) (int location, unsigned int v0, unsigned int v1, unsigned int v2, unsigned int v3);
typedef void (* ROGL_PFNGLUNIFORM1UIVEXTPROC) (int location, int count, void* value);
typedef void (* ROGL_PFNGLUNIFORM2UIVEXTPROC) (int location, int count, void* value);
typedef void (* ROGL_PFNGLUNIFORM3UIVEXTPROC) (int location, int count, void* value);
typedef void (* ROGL_PFNGLUNIFORM4UIVEXTPROC) (int location, int count, void* value);
typedef void (* ROGL_PFNGLGETHISTOGRAMEXTPROC) (unsigned int target, unsigned char reset, unsigned int format, unsigned int type, void* values);
typedef void (* ROGL_PFNGLGETHISTOGRAMPARAMETERFVEXTPROC) (unsigned int target, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETHISTOGRAMPARAMETERIVEXTPROC) (unsigned int target, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETMINMAXEXTPROC) (unsigned int target, unsigned char reset, unsigned int format, unsigned int type, void* values);
typedef void (* ROGL_PFNGLGETMINMAXPARAMETERFVEXTPROC) (unsigned int target, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETMINMAXPARAMETERIVEXTPROC) (unsigned int target, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLHISTOGRAMEXTPROC) (unsigned int target, int width, unsigned int internalformat, unsigned char sink);
typedef void (* ROGL_PFNGLMINMAXEXTPROC) (unsigned int target, unsigned int internalformat, unsigned char sink);
typedef void (* ROGL_PFNGLRESETHISTOGRAMEXTPROC) (unsigned int target);
typedef void (* ROGL_PFNGLRESETMINMAXEXTPROC) (unsigned int target);
typedef void (* ROGL_PFNGLINDEXFUNCEXTPROC) (unsigned int func, float ref);
typedef void (* ROGL_PFNGLINDEXMATERIALEXTPROC) (unsigned int face, unsigned int mode);
typedef void (* ROGL_PFNGLAPPLYTEXTUREEXTPROC) (unsigned int mode);
typedef void (* ROGL_PFNGLTEXTURELIGHTEXTPROC) (unsigned int pname);
typedef void (* ROGL_PFNGLTEXTUREMATERIALEXTPROC) (unsigned int face, unsigned int mode);
typedef void (* ROGL_PFNGLMULTIDRAWARRAYSEXTPROC) (unsigned int mode, void* first, void* count, int primcount);
typedef void (* ROGL_PFNGLMULTIDRAWELEMENTSEXTPROC) (unsigned int mode, void* count, unsigned int type, void* indices, int primcount);
typedef void (* ROGL_PFNGLSAMPLEMASKEXTPROC) (float value, unsigned char invert);
typedef void (* ROGL_PFNGLSAMPLEPATTERNEXTPROC) (unsigned int pattern);
typedef void (* ROGL_PFNGLCOLORTABLEEXTPROC) (unsigned int target, unsigned int internalFormat, int width, unsigned int format, unsigned int type, void* table);
typedef void (* ROGL_PFNGLGETCOLORTABLEEXTPROC) (unsigned int target, unsigned int format, unsigned int type, void* data);
typedef void (* ROGL_PFNGLGETCOLORTABLEPARAMETERIVEXTPROC) (unsigned int target, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETCOLORTABLEPARAMETERFVEXTPROC) (unsigned int target, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLPIXELTRANSFORMPARAMETERIEXTPROC) (unsigned int target, unsigned int pname, int param);
typedef void (* ROGL_PFNGLPIXELTRANSFORMPARAMETERFEXTPROC) (unsigned int target, unsigned int pname, float param);
typedef void (* ROGL_PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC) (unsigned int target, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC) (unsigned int target, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC) (unsigned int target, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC) (unsigned int target, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLPOINTPARAMETERFEXTPROC) (unsigned int pname, float param);
typedef void (* ROGL_PFNGLPOINTPARAMETERFVEXTPROC) (unsigned int pname, void* params);
typedef void (* ROGL_PFNGLPOLYGONOFFSETEXTPROC) (float factor, float bias);
typedef void (* ROGL_PFNGLPOLYGONOFFSETCLAMPEXTPROC) (float factor, float units, float clamp);
typedef void (* ROGL_PFNGLPROVOKINGVERTEXEXTPROC) (unsigned int mode);
typedef void (* ROGL_PFNGLSECONDARYCOLOR3BEXTPROC) (char red, char green, char blue);
typedef void (* ROGL_PFNGLSECONDARYCOLOR3BVEXTPROC) (void* v);
typedef void (* ROGL_PFNGLSECONDARYCOLOR3DEXTPROC) (double red, double green, double blue);
typedef void (* ROGL_PFNGLSECONDARYCOLOR3DVEXTPROC) (void* v);
typedef void (* ROGL_PFNGLSECONDARYCOLOR3FEXTPROC) (float red, float green, float blue);
typedef void (* ROGL_PFNGLSECONDARYCOLOR3FVEXTPROC) (void* v);
typedef void (* ROGL_PFNGLSECONDARYCOLOR3IEXTPROC) (int red, int green, int blue);
typedef void (* ROGL_PFNGLSECONDARYCOLOR3IVEXTPROC) (void* v);
typedef void (* ROGL_PFNGLSECONDARYCOLOR3SEXTPROC) (short red, short green, short blue);
typedef void (* ROGL_PFNGLSECONDARYCOLOR3SVEXTPROC) (void* v);
typedef void (* ROGL_PFNGLSECONDARYCOLOR3UBEXTPROC) (unsigned char red, unsigned char green, unsigned char blue);
typedef void (* ROGL_PFNGLSECONDARYCOLOR3UBVEXTPROC) (void* v);
typedef void (* ROGL_PFNGLSECONDARYCOLOR3UIEXTPROC) (unsigned int red, unsigned int green, unsigned int blue);
typedef void (* ROGL_PFNGLSECONDARYCOLOR3UIVEXTPROC) (void* v);
typedef void (* ROGL_PFNGLSECONDARYCOLOR3USEXTPROC) (unsigned short red, unsigned short green, unsigned short blue);
typedef void (* ROGL_PFNGLSECONDARYCOLOR3USVEXTPROC) (void* v);
typedef void (* ROGL_PFNGLSECONDARYCOLORPOINTEREXTPROC) (int size, unsigned int type, int stride, void* pointer);
typedef void (* ROGL_PFNGLUSESHADERPROGRAMEXTPROC) (unsigned int type, unsigned int program);
typedef void (* ROGL_PFNGLACTIVEPROGRAMEXTPROC) (unsigned int program);
typedef unsigned int (* ROGL_PFNGLCREATESHADERPROGRAMEXTPROC) (unsigned int type, void* string);
typedef void (* ROGL_PFNGLACTIVESHADERPROGRAMEXTPROC) (unsigned int pipeline, unsigned int program);
typedef void (* ROGL_PFNGLBINDPROGRAMPIPELINEEXTPROC) (unsigned int pipeline);
typedef unsigned int (* ROGL_PFNGLCREATESHADERPROGRAMVEXTPROC) (unsigned int type, int count, void* strings);
typedef void (* ROGL_PFNGLDELETEPROGRAMPIPELINESEXTPROC) (int n, void* pipelines);
typedef void (* ROGL_PFNGLGENPROGRAMPIPELINESEXTPROC) (int n, void* pipelines);
typedef void (* ROGL_PFNGLGETPROGRAMPIPELINEINFOLOGEXTPROC) (unsigned int pipeline, int bufSize, void* length, void* infoLog);
typedef void (* ROGL_PFNGLGETPROGRAMPIPELINEIVEXTPROC) (unsigned int pipeline, unsigned int pname, void* params);
typedef unsigned char (* ROGL_PFNGLISPROGRAMPIPELINEEXTPROC) (unsigned int pipeline);
typedef void (* ROGL_PFNGLUSEPROGRAMSTAGESEXTPROC) (unsigned int pipeline, unsigned int stages, unsigned int program);
typedef void (* ROGL_PFNGLVALIDATEPROGRAMPIPELINEEXTPROC) (unsigned int pipeline);
typedef void (* ROGL_PFNGLBINDIMAGETEXTUREEXTPROC) (unsigned int index, unsigned int texture, int level, unsigned char layered, int layer, unsigned int access, int format);
typedef void (* ROGL_PFNGLMEMORYBARRIEREXTPROC) (unsigned int barriers);
typedef void (* ROGL_PFNGLSTENCILCLEARTAGEXTPROC) (int stencilTagBits, unsigned int stencilClearTag);
typedef void (* ROGL_PFNGLACTIVESTENCILFACEEXTPROC) (unsigned int face);
typedef void (* ROGL_PFNGLTEXSUBIMAGE1DEXTPROC) (unsigned int target, int level, int xoffset, int width, unsigned int format, unsigned int type, void* pixels);
typedef void (* ROGL_PFNGLTEXSUBIMAGE2DEXTPROC) (unsigned int target, int level, int xoffset, int yoffset, int width, int height, unsigned int format, unsigned int type, void* pixels);
typedef void (* ROGL_PFNGLTEXIMAGE3DEXTPROC) (unsigned int target, int level, unsigned int internalformat, int width, int height, int depth, int border, unsigned int format, unsigned int type, void* pixels);
typedef void (* ROGL_PFNGLTEXSUBIMAGE3DEXTPROC) (unsigned int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, unsigned int format, unsigned int type, void* pixels);
typedef void (* ROGL_PFNGLTEXBUFFEREXTPROC) (unsigned int target, unsigned int internalformat, unsigned int buffer);
typedef void (* ROGL_PFNGLTEXPARAMETERIIVEXTPROC) (unsigned int target, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLTEXPARAMETERIUIVEXTPROC) (unsigned int target, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETTEXPARAMETERIIVEXTPROC) (unsigned int target, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETTEXPARAMETERIUIVEXTPROC) (unsigned int target, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLCLEARCOLORIIEXTPROC) (int red, int green, int blue, int alpha);
typedef void (* ROGL_PFNGLCLEARCOLORIUIEXTPROC) (unsigned int red, unsigned int green, unsigned int blue, unsigned int alpha);
typedef unsigned char (* ROGL_PFNGLARETEXTURESRESIDENTEXTPROC) (int n, void* textures, void* residences);
typedef void (* ROGL_PFNGLBINDTEXTUREEXTPROC) (unsigned int target, unsigned int texture);
typedef void (* ROGL_PFNGLDELETETEXTURESEXTPROC) (int n, void* textures);
typedef void (* ROGL_PFNGLGENTEXTURESEXTPROC) (int n, void* textures);
typedef unsigned char (* ROGL_PFNGLISTEXTUREEXTPROC) (unsigned int texture);
typedef void (* ROGL_PFNGLPRIORITIZETEXTURESEXTPROC) (int n, void* textures, void* priorities);
typedef void (* ROGL_PFNGLTEXTURENORMALEXTPROC) (unsigned int mode);
typedef void (* ROGL_PFNGLGETQUERYOBJECTI64VEXTPROC) (unsigned int id, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETQUERYOBJECTUI64VEXTPROC) (unsigned int id, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLBEGINTRANSFORMFEEDBACKEXTPROC) (unsigned int primitiveMode);
typedef void (* ROGL_PFNGLENDTRANSFORMFEEDBACKEXTPROC) (void);
typedef void (* ROGL_PFNGLBINDBUFFERRANGEEXTPROC) (unsigned int target, unsigned int index, unsigned int buffer, ptrdiff_t offset, ptrdiff_t size);
typedef void (* ROGL_PFNGLBINDBUFFEROFFSETEXTPROC) (unsigned int target, unsigned int index, unsigned int buffer, ptrdiff_t offset);
typedef void (* ROGL_PFNGLBINDBUFFERBASEEXTPROC) (unsigned int target, unsigned int index, unsigned int buffer);
typedef void (* ROGL_PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC) (unsigned int program, int count, void* varyings, unsigned int bufferMode);
typedef void (* ROGL_PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC) (unsigned int program, unsigned int index, int bufSize, void* length, void* size, void* type, void* name);
typedef void (* ROGL_PFNGLARRAYELEMENTEXTPROC) (int i);
typedef void (* ROGL_PFNGLCOLORPOINTEREXTPROC) (int size, unsigned int type, int stride, int count, void* pointer);
typedef void (* ROGL_PFNGLDRAWARRAYSEXTPROC) (unsigned int mode, int first, int count);
typedef void (* ROGL_PFNGLEDGEFLAGPOINTEREXTPROC) (int stride, int count, void* pointer);
typedef void (* ROGL_PFNGLGETPOINTERVEXTPROC) (unsigned int pname, void* params);
typedef void (* ROGL_PFNGLINDEXPOINTEREXTPROC) (unsigned int type, int stride, int count, void* pointer);
typedef void (* ROGL_PFNGLNORMALPOINTEREXTPROC) (unsigned int type, int stride, int count, void* pointer);
typedef void (* ROGL_PFNGLTEXCOORDPOINTEREXTPROC) (int size, unsigned int type, int stride, int count, void* pointer);
typedef void (* ROGL_PFNGLVERTEXPOINTEREXTPROC) (int size, unsigned int type, int stride, int count, void* pointer);
typedef void (* ROGL_PFNGLVERTEXATTRIBL1DEXTPROC) (unsigned int index, double x);
typedef void (* ROGL_PFNGLVERTEXATTRIBL2DEXTPROC) (unsigned int index, double x, double y);
typedef void (* ROGL_PFNGLVERTEXATTRIBL3DEXTPROC) (unsigned int index, double x, double y, double z);
typedef void (* ROGL_PFNGLVERTEXATTRIBL4DEXTPROC) (unsigned int index, double x, double y, double z, double w);
typedef void (* ROGL_PFNGLVERTEXATTRIBL1DVEXTPROC) (unsigned int index, void* v);
typedef void (* ROGL_PFNGLVERTEXATTRIBL2DVEXTPROC) (unsigned int index, void* v);
typedef void (* ROGL_PFNGLVERTEXATTRIBL3DVEXTPROC) (unsigned int index, void* v);
typedef void (* ROGL_PFNGLVERTEXATTRIBL4DVEXTPROC) (unsigned int index, void* v);
typedef void (* ROGL_PFNGLVERTEXATTRIBLPOINTEREXTPROC) (unsigned int index, int size, unsigned int type, int stride, void* pointer);
typedef void (* ROGL_PFNGLGETVERTEXATTRIBLDVEXTPROC) (unsigned int index, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLBEGINVERTEXSHADEREXTPROC) (void);
typedef void (* ROGL_PFNGLENDVERTEXSHADEREXTPROC) (void);
typedef void (* ROGL_PFNGLBINDVERTEXSHADEREXTPROC) (unsigned int id);
typedef unsigned int (* ROGL_PFNGLGENVERTEXSHADERSEXTPROC) (unsigned int range);
typedef void (* ROGL_PFNGLDELETEVERTEXSHADEREXTPROC) (unsigned int id);
typedef void (* ROGL_PFNGLSHADEROP1EXTPROC) (unsigned int op, unsigned int res, unsigned int arg1);
typedef void (* ROGL_PFNGLSHADEROP2EXTPROC) (unsigned int op, unsigned int res, unsigned int arg1, unsigned int arg2);
typedef void (* ROGL_PFNGLSHADEROP3EXTPROC) (unsigned int op, unsigned int res, unsigned int arg1, unsigned int arg2, unsigned int arg3);
typedef void (* ROGL_PFNGLSWIZZLEEXTPROC) (unsigned int res, unsigned int in, unsigned int outX, unsigned int outY, unsigned int outZ, unsigned int outW);
typedef void (* ROGL_PFNGLWRITEMASKEXTPROC) (unsigned int res, unsigned int in, unsigned int outX, unsigned int outY, unsigned int outZ, unsigned int outW);
typedef void (* ROGL_PFNGLINSERTCOMPONENTEXTPROC) (unsigned int res, unsigned int src, unsigned int num);
typedef void (* ROGL_PFNGLEXTRACTCOMPONENTEXTPROC) (unsigned int res, unsigned int src, unsigned int num);
typedef unsigned int (* ROGL_PFNGLGENSYMBOLSEXTPROC) (unsigned int datatype, unsigned int storagetype, unsigned int range, unsigned int components);
typedef void (* ROGL_PFNGLSETINVARIANTEXTPROC) (unsigned int id, unsigned int type, void* addr);
typedef void (* ROGL_PFNGLSETLOCALCONSTANTEXTPROC) (unsigned int id, unsigned int type, void* addr);
typedef void (* ROGL_PFNGLVARIANTBVEXTPROC) (unsigned int id, void* addr);
typedef void (* ROGL_PFNGLVARIANTSVEXTPROC) (unsigned int id, void* addr);
typedef void (* ROGL_PFNGLVARIANTIVEXTPROC) (unsigned int id, void* addr);
typedef void (* ROGL_PFNGLVARIANTFVEXTPROC) (unsigned int id, void* addr);
typedef void (* ROGL_PFNGLVARIANTDVEXTPROC) (unsigned int id, void* addr);
typedef void (* ROGL_PFNGLVARIANTUBVEXTPROC) (unsigned int id, void* addr);
typedef void (* ROGL_PFNGLVARIANTUSVEXTPROC) (unsigned int id, void* addr);
typedef void (* ROGL_PFNGLVARIANTUIVEXTPROC) (unsigned int id, void* addr);
typedef void (* ROGL_PFNGLVARIANTPOINTEREXTPROC) (unsigned int id, unsigned int type, unsigned int stride, void* addr);
typedef void (* ROGL_PFNGLENABLEVARIANTCLIENTSTATEEXTPROC) (unsigned int id);
typedef void (* ROGL_PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC) (unsigned int id);
typedef unsigned int (* ROGL_PFNGLBINDLIGHTPARAMETEREXTPROC) (unsigned int light, unsigned int value);
typedef unsigned int (* ROGL_PFNGLBINDMATERIALPARAMETEREXTPROC) (unsigned int face, unsigned int value);
typedef unsigned int (* ROGL_PFNGLBINDTEXGENPARAMETEREXTPROC) (unsigned int unit, unsigned int coord, unsigned int value);
typedef unsigned int (* ROGL_PFNGLBINDTEXTUREUNITPARAMETEREXTPROC) (unsigned int unit, unsigned int value);
typedef unsigned int (* ROGL_PFNGLBINDPARAMETEREXTPROC) (unsigned int value);
typedef unsigned char (* ROGL_PFNGLISVARIANTENABLEDEXTPROC) (unsigned int id, unsigned int cap);
typedef void (* ROGL_PFNGLGETVARIANTBOOLEANVEXTPROC) (unsigned int id, unsigned int value, void* data);
typedef void (* ROGL_PFNGLGETVARIANTINTEGERVEXTPROC) (unsigned int id, unsigned int value, void* data);
typedef void (* ROGL_PFNGLGETVARIANTFLOATVEXTPROC) (unsigned int id, unsigned int value, void* data);
typedef void (* ROGL_PFNGLGETVARIANTPOINTERVEXTPROC) (unsigned int id, unsigned int value, void* data);
typedef void (* ROGL_PFNGLGETINVARIANTBOOLEANVEXTPROC) (unsigned int id, unsigned int value, void* data);
typedef void (* ROGL_PFNGLGETINVARIANTINTEGERVEXTPROC) (unsigned int id, unsigned int value, void* data);
typedef void (* ROGL_PFNGLGETINVARIANTFLOATVEXTPROC) (unsigned int id, unsigned int value, void* data);
typedef void (* ROGL_PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC) (unsigned int id, unsigned int value, void* data);
typedef void (* ROGL_PFNGLGETLOCALCONSTANTINTEGERVEXTPROC) (unsigned int id, unsigned int value, void* data);
typedef void (* ROGL_PFNGLGETLOCALCONSTANTFLOATVEXTPROC) (unsigned int id, unsigned int value, void* data);
typedef void (* ROGL_PFNGLVERTEXWEIGHTFEXTPROC) (float weight);
typedef void (* ROGL_PFNGLVERTEXWEIGHTFVEXTPROC) (void* weight);
typedef void (* ROGL_PFNGLVERTEXWEIGHTPOINTEREXTPROC) (int size, unsigned int type, int stride, void* pointer);
typedef void* (* ROGL_PFNGLIMPORTSYNCEXTPROC) (unsigned int external_sync_type, ptrdiff_t external_sync, unsigned int flags);
typedef void (* ROGL_PFNGLFRAMETERMINATORGREMEDYPROC) (void);
typedef void (* ROGL_PFNGLSTRINGMARKERGREMEDYPROC) (int len, void* string);
typedef void (* ROGL_PFNGLIMAGETRANSFORMPARAMETERIHPPROC) (unsigned int target, unsigned int pname, int param);
typedef void (* ROGL_PFNGLIMAGETRANSFORMPARAMETERFHPPROC) (unsigned int target, unsigned int pname, float param);
typedef void (* ROGL_PFNGLIMAGETRANSFORMPARAMETERIVHPPROC) (unsigned int target, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLIMAGETRANSFORMPARAMETERFVHPPROC) (unsigned int target, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC) (unsigned int target, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC) (unsigned int target, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLMULTIMODEDRAWARRAYSIBMPROC) (void* mode, void* first, void* count, int primcount, int modestride);
typedef void (* ROGL_PFNGLMULTIMODEDRAWELEMENTSIBMPROC) (void* mode, void* count, unsigned int type, void* indices, int primcount, int modestride);
typedef void (* ROGL_PFNGLFLUSHSTATICDATAIBMPROC) (unsigned int target);
typedef void (* ROGL_PFNGLCOLORPOINTERLISTIBMPROC) (int size, unsigned int type, int stride, void* pointer, int ptrstride);
typedef void (* ROGL_PFNGLSECONDARYCOLORPOINTERLISTIBMPROC) (int size, unsigned int type, int stride, void* pointer, int ptrstride);
typedef void (* ROGL_PFNGLEDGEFLAGPOINTERLISTIBMPROC) (int stride, void* pointer, int ptrstride);
typedef void (* ROGL_PFNGLFOGCOORDPOINTERLISTIBMPROC) (unsigned int type, int stride, void* pointer, int ptrstride);
typedef void (* ROGL_PFNGLINDEXPOINTERLISTIBMPROC) (unsigned int type, int stride, void* pointer, int ptrstride);
typedef void (* ROGL_PFNGLNORMALPOINTERLISTIBMPROC) (unsigned int type, int stride, void* pointer, int ptrstride);
typedef void (* ROGL_PFNGLTEXCOORDPOINTERLISTIBMPROC) (int size, unsigned int type, int stride, void* pointer, int ptrstride);
typedef void (* ROGL_PFNGLVERTEXPOINTERLISTIBMPROC) (int size, unsigned int type, int stride, void* pointer, int ptrstride);
typedef void (* ROGL_PFNGLBLENDFUNCSEPARATEINGRPROC) (unsigned int sfactorRGB, unsigned int dfactorRGB, unsigned int sfactorAlpha, unsigned int dfactorAlpha);
typedef void (* ROGL_PFNGLAPPLYFRAMEBUFFERATTACHMENTCMAAINTELPROC) (void);
typedef void (* ROGL_PFNGLSYNCTEXTUREINTELPROC) (unsigned int texture);
typedef void (* ROGL_PFNGLUNMAPTEXTURE2DINTELPROC) (unsigned int texture, int level);
typedef void* (* ROGL_PFNGLMAPTEXTURE2DINTELPROC) (unsigned int texture, int level, unsigned int access, void* stride, void* layout);
typedef void (* ROGL_PFNGLVERTEXPOINTERVINTELPROC) (int size, unsigned int type, void* pointer);
typedef void (* ROGL_PFNGLNORMALPOINTERVINTELPROC) (unsigned int type, void* pointer);
typedef void (* ROGL_PFNGLCOLORPOINTERVINTELPROC) (int size, unsigned int type, void* pointer);
typedef void (* ROGL_PFNGLTEXCOORDPOINTERVINTELPROC) (int size, unsigned int type, void* pointer);
typedef void (* ROGL_PFNGLBEGINPERFQUERYINTELPROC) (unsigned int queryHandle);
typedef void (* ROGL_PFNGLCREATEPERFQUERYINTELPROC) (unsigned int queryId, void* queryHandle);
typedef void (* ROGL_PFNGLDELETEPERFQUERYINTELPROC) (unsigned int queryHandle);
typedef void (* ROGL_PFNGLENDPERFQUERYINTELPROC) (unsigned int queryHandle);
typedef void (* ROGL_PFNGLGETFIRSTPERFQUERYIDINTELPROC) (void* queryId);
typedef void (* ROGL_PFNGLGETNEXTPERFQUERYIDINTELPROC) (unsigned int queryId, void* nextQueryId);
typedef void (* ROGL_PFNGLGETPERFCOUNTERINFOINTELPROC) (unsigned int queryId, unsigned int counterId, unsigned int counterNameLength, void* counterName, unsigned int counterDescLength, void* counterDesc, void* counterOffset, void* counterDataSize, void* counterTypeEnum, void* counterDataTypeEnum, void* rawCounterMaxValue);
typedef void (* ROGL_PFNGLGETPERFQUERYDATAINTELPROC) (unsigned int queryHandle, unsigned int flags, int dataSize, void* data, void* bytesWritten);
typedef void (* ROGL_PFNGLGETPERFQUERYIDBYNAMEINTELPROC) (void* queryName, void* queryId);
typedef void (* ROGL_PFNGLGETPERFQUERYINFOINTELPROC) (unsigned int queryId, unsigned int queryNameLength, void* queryName, void* dataSize, void* noCounters, void* noInstances, void* capsMask);
typedef void (* ROGL_PFNGLBLENDBARRIERKHRPROC) (void);
typedef void (* ROGL_PFNGLDEBUGMESSAGECONTROLKHRPROC) (unsigned int source, unsigned int type, unsigned int severity, int count, void* ids, unsigned char enabled);
typedef void (* ROGL_PFNGLDEBUGMESSAGEINSERTKHRPROC) (unsigned int source, unsigned int type, unsigned int id, unsigned int severity, int length, void* buf);
typedef void (* ROGL_PFNGLDEBUGMESSAGECALLBACKKHRPROC) (void* callback, void* userParam);
typedef unsigned int (* ROGL_PFNGLGETDEBUGMESSAGELOGKHRPROC) (unsigned int count, int bufSize, void* sources, void* types, void* ids, void* severities, void* lengths, void* messageLog);
typedef void (* ROGL_PFNGLPUSHDEBUGGROUPKHRPROC) (unsigned int source, unsigned int id, int length, void* message);
typedef void (* ROGL_PFNGLPOPDEBUGGROUPKHRPROC) (void);
typedef void (* ROGL_PFNGLOBJECTLABELKHRPROC) (unsigned int identifier, unsigned int name, int length, void* label);
typedef void (* ROGL_PFNGLGETOBJECTLABELKHRPROC) (unsigned int identifier, unsigned int name, int bufSize, void* length, void* label);
typedef void (* ROGL_PFNGLOBJECTPTRLABELKHRPROC) (void* ptr, int length, void* label);
typedef void (* ROGL_PFNGLGETOBJECTPTRLABELKHRPROC) (void* ptr, int bufSize, void* length, void* label);
typedef void (* ROGL_PFNGLGETPOINTERVKHRPROC) (unsigned int pname, void* params);
typedef unsigned int (* ROGL_PFNGLGETGRAPHICSRESETSTATUSKHRPROC) (void);
typedef void (* ROGL_PFNGLREADNPIXELSKHRPROC) (int x, int y, int width, int height, unsigned int format, unsigned int type, int bufSize, void* data);
typedef void (* ROGL_PFNGLGETNUNIFORMFVKHRPROC) (unsigned int program, int location, int bufSize, void* params);
typedef void (* ROGL_PFNGLGETNUNIFORMIVKHRPROC) (unsigned int program, int location, int bufSize, void* params);
typedef void (* ROGL_PFNGLGETNUNIFORMUIVKHRPROC) (unsigned int program, int location, int bufSize, void* params);
typedef void (* ROGL_PFNGLRESIZEBUFFERSMESAPROC) (void);
typedef void (* ROGL_PFNGLWINDOWPOS2DMESAPROC) (double x, double y);
typedef void (* ROGL_PFNGLWINDOWPOS2DVMESAPROC) (void* v);
typedef void (* ROGL_PFNGLWINDOWPOS2FMESAPROC) (float x, float y);
typedef void (* ROGL_PFNGLWINDOWPOS2FVMESAPROC) (void* v);
typedef void (* ROGL_PFNGLWINDOWPOS2IMESAPROC) (int x, int y);
typedef void (* ROGL_PFNGLWINDOWPOS2IVMESAPROC) (void* v);
typedef void (* ROGL_PFNGLWINDOWPOS2SMESAPROC) (short x, short y);
typedef void (* ROGL_PFNGLWINDOWPOS2SVMESAPROC) (void* v);
typedef void (* ROGL_PFNGLWINDOWPOS3DMESAPROC) (double x, double y, double z);
typedef void (* ROGL_PFNGLWINDOWPOS3DVMESAPROC) (void* v);
typedef void (* ROGL_PFNGLWINDOWPOS3FMESAPROC) (float x, float y, float z);
typedef void (* ROGL_PFNGLWINDOWPOS3FVMESAPROC) (void* v);
typedef void (* ROGL_PFNGLWINDOWPOS3IMESAPROC) (int x, int y, int z);
typedef void (* ROGL_PFNGLWINDOWPOS3IVMESAPROC) (void* v);
typedef void (* ROGL_PFNGLWINDOWPOS3SMESAPROC) (short x, short y, short z);
typedef void (* ROGL_PFNGLWINDOWPOS3SVMESAPROC) (void* v);
typedef void (* ROGL_PFNGLWINDOWPOS4DMESAPROC) (double x, double y, double z, double w);
typedef void (* ROGL_PFNGLWINDOWPOS4DVMESAPROC) (void* v);
typedef void (* ROGL_PFNGLWINDOWPOS4FMESAPROC) (float x, float y, float z, float w);
typedef void (* ROGL_PFNGLWINDOWPOS4FVMESAPROC) (void* v);
typedef void (* ROGL_PFNGLWINDOWPOS4IMESAPROC) (int x, int y, int z, int w);
typedef void (* ROGL_PFNGLWINDOWPOS4IVMESAPROC) (void* v);
typedef void (* ROGL_PFNGLWINDOWPOS4SMESAPROC) (short x, short y, short z, short w);
typedef void (* ROGL_PFNGLWINDOWPOS4SVMESAPROC) (void* v);
typedef void (* ROGL_PFNGLBEGINCONDITIONALRENDERNVXPROC) (unsigned int id);
typedef void (* ROGL_PFNGLENDCONDITIONALRENDERNVXPROC) (void);
typedef void (* ROGL_PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSNVPROC) (unsigned int mode, void* indirect, int drawCount, int stride, int vertexBufferCount);
typedef void (* ROGL_PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSNVPROC) (unsigned int mode, unsigned int type, void* indirect, int drawCount, int stride, int vertexBufferCount);
typedef void (* ROGL_PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSCOUNTNVPROC) (unsigned int mode, void* indirect, int drawCount, int maxDrawCount, int stride, int vertexBufferCount);
typedef void (* ROGL_PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSCOUNTNVPROC) (unsigned int mode, unsigned int type, void* indirect, int drawCount, int maxDrawCount, int stride, int vertexBufferCount);
typedef unsigned long long (* ROGL_PFNGLGETTEXTUREHANDLENVPROC) (unsigned int texture);
typedef unsigned long long (* ROGL_PFNGLGETTEXTURESAMPLERHANDLENVPROC) (unsigned int texture, unsigned int sampler);
typedef void (* ROGL_PFNGLMAKETEXTUREHANDLERESIDENTNVPROC) (unsigned long long handle);
typedef void (* ROGL_PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC) (unsigned long long handle);
typedef unsigned long long (* ROGL_PFNGLGETIMAGEHANDLENVPROC) (unsigned int texture, int level, unsigned char layered, int layer, unsigned int format);
typedef void (* ROGL_PFNGLMAKEIMAGEHANDLERESIDENTNVPROC) (unsigned long long handle, unsigned int access);
typedef void (* ROGL_PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC) (unsigned long long handle);
typedef void (* ROGL_PFNGLUNIFORMHANDLEUI64NVPROC) (int location, unsigned long long value);
typedef void (* ROGL_PFNGLUNIFORMHANDLEUI64VNVPROC) (int location, int count, void* value);
typedef void (* ROGL_PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC) (unsigned int program, int location, unsigned long long value);
typedef void (* ROGL_PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC) (unsigned int program, int location, int count, void* values);
typedef unsigned char (* ROGL_PFNGLISTEXTUREHANDLERESIDENTNVPROC) (unsigned long long handle);
typedef unsigned char (* ROGL_PFNGLISIMAGEHANDLERESIDENTNVPROC) (unsigned long long handle);
typedef void (* ROGL_PFNGLBLENDPARAMETERINVPROC) (unsigned int pname, int value);
typedef void (* ROGL_PFNGLBLENDBARRIERNVPROC) (void);
typedef void (* ROGL_PFNGLCREATESTATESNVPROC) (int n, void* states);
typedef void (* ROGL_PFNGLDELETESTATESNVPROC) (int n, void* states);
typedef unsigned char (* ROGL_PFNGLISSTATENVPROC) (unsigned int state);
typedef void (* ROGL_PFNGLSTATECAPTURENVPROC) (unsigned int state, unsigned int mode);
typedef unsigned int (* ROGL_PFNGLGETCOMMANDHEADERNVPROC) (unsigned int tokenID, unsigned int size);
typedef unsigned short (* ROGL_PFNGLGETSTAGEINDEXNVPROC) (unsigned int shadertype);
typedef void (* ROGL_PFNGLDRAWCOMMANDSNVPROC) (unsigned int primitiveMode, unsigned int buffer, void* indirects, void* sizes, unsigned int count);
typedef void (* ROGL_PFNGLDRAWCOMMANDSADDRESSNVPROC) (unsigned int primitiveMode, void* indirects, void* sizes, unsigned int count);
typedef void (* ROGL_PFNGLDRAWCOMMANDSSTATESNVPROC) (unsigned int buffer, void* indirects, void* sizes, void* states, void* fbos, unsigned int count);
typedef void (* ROGL_PFNGLDRAWCOMMANDSSTATESADDRESSNVPROC) (void* indirects, void* sizes, void* states, void* fbos, unsigned int count);
typedef void (* ROGL_PFNGLCREATECOMMANDLISTSNVPROC) (int n, void* lists);
typedef void (* ROGL_PFNGLDELETECOMMANDLISTSNVPROC) (int n, void* lists);
typedef unsigned char (* ROGL_PFNGLISCOMMANDLISTNVPROC) (unsigned int list);
typedef void (* ROGL_PFNGLLISTDRAWCOMMANDSSTATESCLIENTNVPROC) (unsigned int list, unsigned int segment, void* indirects, void* sizes, void* states, void* fbos, unsigned int count);
typedef void (* ROGL_PFNGLCOMMANDLISTSEGMENTSNVPROC) (unsigned int list, unsigned int segments);
typedef void (* ROGL_PFNGLCOMPILECOMMANDLISTNVPROC) (unsigned int list);
typedef void (* ROGL_PFNGLCALLCOMMANDLISTNVPROC) (unsigned int list);
typedef void (* ROGL_PFNGLBEGINCONDITIONALRENDERNVPROC) (unsigned int id, unsigned int mode);
typedef void (* ROGL_PFNGLENDCONDITIONALRENDERNVPROC) (void);
typedef void (* ROGL_PFNGLSUBPIXELPRECISIONBIASNVPROC) (unsigned int xbits, unsigned int ybits);
typedef void (* ROGL_PFNGLCONSERVATIVERASTERPARAMETERFNVPROC) (unsigned int pname, float value);
typedef void (* ROGL_PFNGLCOPYIMAGESUBDATANVPROC) (unsigned int srcName, unsigned int srcTarget, int srcLevel, int srcX, int srcY, int srcZ, unsigned int dstName, unsigned int dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int width, int height, int depth);
typedef void (* ROGL_PFNGLDEPTHRANGEDNVPROC) (double zNear, double zFar);
typedef void (* ROGL_PFNGLCLEARDEPTHDNVPROC) (double depth);
typedef void (* ROGL_PFNGLDEPTHBOUNDSDNVPROC) (double zmin, double zmax);
typedef void (* ROGL_PFNGLDRAWTEXTURENVPROC) (unsigned int texture, unsigned int sampler, float x0, float y0, float x1, float y1, float z, float s0, float t0, float s1, float t1);
typedef void (* ROGL_PFNGLMAPCONTROLPOINTSNVPROC) (unsigned int target, unsigned int index, unsigned int type, int ustride, int vstride, int uorder, int vorder, unsigned char packed, void* points);
typedef void (* ROGL_PFNGLMAPPARAMETERIVNVPROC) (unsigned int target, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLMAPPARAMETERFVNVPROC) (unsigned int target, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETMAPCONTROLPOINTSNVPROC) (unsigned int target, unsigned int index, unsigned int type, int ustride, int vstride, unsigned char packed, void* points);
typedef void (* ROGL_PFNGLGETMAPPARAMETERIVNVPROC) (unsigned int target, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETMAPPARAMETERFVNVPROC) (unsigned int target, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETMAPATTRIBPARAMETERIVNVPROC) (unsigned int target, unsigned int index, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETMAPATTRIBPARAMETERFVNVPROC) (unsigned int target, unsigned int index, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLEVALMAPSNVPROC) (unsigned int target, unsigned int mode);
typedef void (* ROGL_PFNGLGETMULTISAMPLEFVNVPROC) (unsigned int pname, unsigned int index, void* val);
typedef void (* ROGL_PFNGLSAMPLEMASKINDEXEDNVPROC) (unsigned int index, unsigned int mask);
typedef void (* ROGL_PFNGLTEXRENDERBUFFERNVPROC) (unsigned int target, unsigned int renderbuffer);
typedef void (* ROGL_PFNGLDELETEFENCESNVPROC) (int n, void* fences);
typedef void (* ROGL_PFNGLGENFENCESNVPROC) (int n, void* fences);
typedef unsigned char (* ROGL_PFNGLISFENCENVPROC) (unsigned int fence);
typedef unsigned char (* ROGL_PFNGLTESTFENCENVPROC) (unsigned int fence);
typedef void (* ROGL_PFNGLGETFENCEIVNVPROC) (unsigned int fence, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLFINISHFENCENVPROC) (unsigned int fence);
typedef void (* ROGL_PFNGLSETFENCENVPROC) (unsigned int fence, unsigned int condition);
typedef void (* ROGL_PFNGLFRAGMENTCOVERAGECOLORNVPROC) (unsigned int color);
typedef void (* ROGL_PFNGLPROGRAMNAMEDPARAMETER4FNVPROC) (unsigned int id, int len, void* name, float x, float y, float z, float w);
typedef void (* ROGL_PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC) (unsigned int id, int len, void* name, void* v);
typedef void (* ROGL_PFNGLPROGRAMNAMEDPARAMETER4DNVPROC) (unsigned int id, int len, void* name, double x, double y, double z, double w);
typedef void (* ROGL_PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC) (unsigned int id, int len, void* name, void* v);
typedef void (* ROGL_PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC) (unsigned int id, int len, void* name, void* params);
typedef void (* ROGL_PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC) (unsigned int id, int len, void* name, void* params);
typedef void (* ROGL_PFNGLCOVERAGEMODULATIONTABLENVPROC) (int n, void* v);
typedef void (* ROGL_PFNGLGETCOVERAGEMODULATIONTABLENVPROC) (int bufsize, void* v);
typedef void (* ROGL_PFNGLCOVERAGEMODULATIONNVPROC) (unsigned int components);
typedef void (* ROGL_PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC) (unsigned int target, int coverageSamples, int colorSamples, unsigned int internalformat, int width, int height);
typedef void (* ROGL_PFNGLPROGRAMVERTEXLIMITNVPROC) (unsigned int target, int limit);
typedef void (* ROGL_PFNGLFRAMEBUFFERTEXTUREEXTPROC) (unsigned int target, unsigned int attachment, unsigned int texture, int level);
typedef void (* ROGL_PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC) (unsigned int target, unsigned int attachment, unsigned int texture, int level, unsigned int face);
typedef void (* ROGL_PFNGLPROGRAMLOCALPARAMETERI4INVPROC) (unsigned int target, unsigned int index, int x, int y, int z, int w);
typedef void (* ROGL_PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC) (unsigned int target, unsigned int index, void* params);
typedef void (* ROGL_PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC) (unsigned int target, unsigned int index, int count, void* params);
typedef void (* ROGL_PFNGLPROGRAMLOCALPARAMETERI4UINVPROC) (unsigned int target, unsigned int index, unsigned int x, unsigned int y, unsigned int z, unsigned int w);
typedef void (* ROGL_PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC) (unsigned int target, unsigned int index, void* params);
typedef void (* ROGL_PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC) (unsigned int target, unsigned int index, int count, void* params);
typedef void (* ROGL_PFNGLPROGRAMENVPARAMETERI4INVPROC) (unsigned int target, unsigned int index, int x, int y, int z, int w);
typedef void (* ROGL_PFNGLPROGRAMENVPARAMETERI4IVNVPROC) (unsigned int target, unsigned int index, void* params);
typedef void (* ROGL_PFNGLPROGRAMENVPARAMETERSI4IVNVPROC) (unsigned int target, unsigned int index, int count, void* params);
typedef void (* ROGL_PFNGLPROGRAMENVPARAMETERI4UINVPROC) (unsigned int target, unsigned int index, unsigned int x, unsigned int y, unsigned int z, unsigned int w);
typedef void (* ROGL_PFNGLPROGRAMENVPARAMETERI4UIVNVPROC) (unsigned int target, unsigned int index, void* params);
typedef void (* ROGL_PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC) (unsigned int target, unsigned int index, int count, void* params);
typedef void (* ROGL_PFNGLGETPROGRAMLOCALPARAMETERIIVNVPROC) (unsigned int target, unsigned int index, void* params);
typedef void (* ROGL_PFNGLGETPROGRAMLOCALPARAMETERIUIVNVPROC) (unsigned int target, unsigned int index, void* params);
typedef void (* ROGL_PFNGLGETPROGRAMENVPARAMETERIIVNVPROC) (unsigned int target, unsigned int index, void* params);
typedef void (* ROGL_PFNGLGETPROGRAMENVPARAMETERIUIVNVPROC) (unsigned int target, unsigned int index, void* params);
typedef void (* ROGL_PFNGLPROGRAMSUBROUTINEPARAMETERSUIVNVPROC) (unsigned int target, int count, void* params);
typedef void (* ROGL_PFNGLGETPROGRAMSUBROUTINEPARAMETERUIVNVPROC) (unsigned int target, unsigned int index, void* param);
typedef void (* ROGL_PFNGLVERTEX2HNVPROC) (unsigned short x, unsigned short y);
typedef void (* ROGL_PFNGLVERTEX2HVNVPROC) (void* v);
typedef void (* ROGL_PFNGLVERTEX3HNVPROC) (unsigned short x, unsigned short y, unsigned short z);
typedef void (* ROGL_PFNGLVERTEX3HVNVPROC) (void* v);
typedef void (* ROGL_PFNGLVERTEX4HNVPROC) (unsigned short x, unsigned short y, unsigned short z, unsigned short w);
typedef void (* ROGL_PFNGLVERTEX4HVNVPROC) (void* v);
typedef void (* ROGL_PFNGLNORMAL3HNVPROC) (unsigned short nx, unsigned short ny, unsigned short nz);
typedef void (* ROGL_PFNGLNORMAL3HVNVPROC) (void* v);
typedef void (* ROGL_PFNGLCOLOR3HNVPROC) (unsigned short red, unsigned short green, unsigned short blue);
typedef void (* ROGL_PFNGLCOLOR3HVNVPROC) (void* v);
typedef void (* ROGL_PFNGLCOLOR4HNVPROC) (unsigned short red, unsigned short green, unsigned short blue, unsigned short alpha);
typedef void (* ROGL_PFNGLCOLOR4HVNVPROC) (void* v);
typedef void (* ROGL_PFNGLTEXCOORD1HNVPROC) (unsigned short s);
typedef void (* ROGL_PFNGLTEXCOORD1HVNVPROC) (void* v);
typedef void (* ROGL_PFNGLTEXCOORD2HNVPROC) (unsigned short s, unsigned short t);
typedef void (* ROGL_PFNGLTEXCOORD2HVNVPROC) (void* v);
typedef void (* ROGL_PFNGLTEXCOORD3HNVPROC) (unsigned short s, unsigned short t, unsigned short r);
typedef void (* ROGL_PFNGLTEXCOORD3HVNVPROC) (void* v);
typedef void (* ROGL_PFNGLTEXCOORD4HNVPROC) (unsigned short s, unsigned short t, unsigned short r, unsigned short q);
typedef void (* ROGL_PFNGLTEXCOORD4HVNVPROC) (void* v);
typedef void (* ROGL_PFNGLMULTITEXCOORD1HNVPROC) (unsigned int target, unsigned short s);
typedef void (* ROGL_PFNGLMULTITEXCOORD1HVNVPROC) (unsigned int target, void* v);
typedef void (* ROGL_PFNGLMULTITEXCOORD2HNVPROC) (unsigned int target, unsigned short s, unsigned short t);
typedef void (* ROGL_PFNGLMULTITEXCOORD2HVNVPROC) (unsigned int target, void* v);
typedef void (* ROGL_PFNGLMULTITEXCOORD3HNVPROC) (unsigned int target, unsigned short s, unsigned short t, unsigned short r);
typedef void (* ROGL_PFNGLMULTITEXCOORD3HVNVPROC) (unsigned int target, void* v);
typedef void (* ROGL_PFNGLMULTITEXCOORD4HNVPROC) (unsigned int target, unsigned short s, unsigned short t, unsigned short r, unsigned short q);
typedef void (* ROGL_PFNGLMULTITEXCOORD4HVNVPROC) (unsigned int target, void* v);
typedef void (* ROGL_PFNGLFOGCOORDHNVPROC) (unsigned short fog);
typedef void (* ROGL_PFNGLFOGCOORDHVNVPROC) (void* fog);
typedef void (* ROGL_PFNGLSECONDARYCOLOR3HNVPROC) (unsigned short red, unsigned short green, unsigned short blue);
typedef void (* ROGL_PFNGLSECONDARYCOLOR3HVNVPROC) (void* v);
typedef void (* ROGL_PFNGLVERTEXWEIGHTHNVPROC) (unsigned short weight);
typedef void (* ROGL_PFNGLVERTEXWEIGHTHVNVPROC) (void* weight);
typedef void (* ROGL_PFNGLVERTEXATTRIB1HNVPROC) (unsigned int index, unsigned short x);
typedef void (* ROGL_PFNGLVERTEXATTRIB1HVNVPROC) (unsigned int index, void* v);
typedef void (* ROGL_PFNGLVERTEXATTRIB2HNVPROC) (unsigned int index, unsigned short x, unsigned short y);
typedef void (* ROGL_PFNGLVERTEXATTRIB2HVNVPROC) (unsigned int index, void* v);
typedef void (* ROGL_PFNGLVERTEXATTRIB3HNVPROC) (unsigned int index, unsigned short x, unsigned short y, unsigned short z);
typedef void (* ROGL_PFNGLVERTEXATTRIB3HVNVPROC) (unsigned int index, void* v);
typedef void (* ROGL_PFNGLVERTEXATTRIB4HNVPROC) (unsigned int index, unsigned short x, unsigned short y, unsigned short z, unsigned short w);
typedef void (* ROGL_PFNGLVERTEXATTRIB4HVNVPROC) (unsigned int index, void* v);
typedef void (* ROGL_PFNGLVERTEXATTRIBS1HVNVPROC) (unsigned int index, int n, void* v);
typedef void (* ROGL_PFNGLVERTEXATTRIBS2HVNVPROC) (unsigned int index, int n, void* v);
typedef void (* ROGL_PFNGLVERTEXATTRIBS3HVNVPROC) (unsigned int index, int n, void* v);
typedef void (* ROGL_PFNGLVERTEXATTRIBS4HVNVPROC) (unsigned int index, int n, void* v);
typedef void (* ROGL_PFNGLGETINTERNALFORMATSAMPLEIVNVPROC) (unsigned int target, unsigned int internalformat, int samples, unsigned int pname, int bufSize, void* params);
typedef void (* ROGL_PFNGLGENOCCLUSIONQUERIESNVPROC) (int n, void* ids);
typedef void (* ROGL_PFNGLDELETEOCCLUSIONQUERIESNVPROC) (int n, void* ids);
typedef unsigned char (* ROGL_PFNGLISOCCLUSIONQUERYNVPROC) (unsigned int id);
typedef void (* ROGL_PFNGLBEGINOCCLUSIONQUERYNVPROC) (unsigned int id);
typedef void (* ROGL_PFNGLENDOCCLUSIONQUERYNVPROC) (void);
typedef void (* ROGL_PFNGLGETOCCLUSIONQUERYIVNVPROC) (unsigned int id, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETOCCLUSIONQUERYUIVNVPROC) (unsigned int id, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC) (unsigned int target, unsigned int bindingIndex, unsigned int wordIndex, int count, void* params);
typedef void (* ROGL_PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC) (unsigned int target, unsigned int bindingIndex, unsigned int wordIndex, int count, void* params);
typedef void (* ROGL_PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC) (unsigned int target, unsigned int bindingIndex, unsigned int wordIndex, int count, void* params);
typedef unsigned int (* ROGL_PFNGLGENPATHSNVPROC) (int range);
typedef void (* ROGL_PFNGLDELETEPATHSNVPROC) (unsigned int path, int range);
typedef unsigned char (* ROGL_PFNGLISPATHNVPROC) (unsigned int path);
typedef void (* ROGL_PFNGLPATHCOMMANDSNVPROC) (unsigned int path, int numCommands, void* commands, int numCoords, unsigned int coordType, void* coords);
typedef void (* ROGL_PFNGLPATHCOORDSNVPROC) (unsigned int path, int numCoords, unsigned int coordType, void* coords);
typedef void (* ROGL_PFNGLPATHSUBCOMMANDSNVPROC) (unsigned int path, int commandStart, int commandsToDelete, int numCommands, void* commands, int numCoords, unsigned int coordType, void* coords);
typedef void (* ROGL_PFNGLPATHSUBCOORDSNVPROC) (unsigned int path, int coordStart, int numCoords, unsigned int coordType, void* coords);
typedef void (* ROGL_PFNGLPATHSTRINGNVPROC) (unsigned int path, unsigned int format, int length, void* pathString);
typedef void (* ROGL_PFNGLPATHGLYPHSNVPROC) (unsigned int firstPathName, unsigned int fontTarget, void* fontName, unsigned int fontStyle, int numGlyphs, unsigned int type, void* charcodes, unsigned int handleMissingGlyphs, unsigned int pathParameterTemplate, float emScale);
typedef void (* ROGL_PFNGLPATHGLYPHRANGENVPROC) (unsigned int firstPathName, unsigned int fontTarget, void* fontName, unsigned int fontStyle, unsigned int firstGlyph, int numGlyphs, unsigned int handleMissingGlyphs, unsigned int pathParameterTemplate, float emScale);
typedef void (* ROGL_PFNGLWEIGHTPATHSNVPROC) (unsigned int resultPath, int numPaths, void* paths, void* weights);
typedef void (* ROGL_PFNGLCOPYPATHNVPROC) (unsigned int resultPath, unsigned int srcPath);
typedef void (* ROGL_PFNGLINTERPOLATEPATHSNVPROC) (unsigned int resultPath, unsigned int pathA, unsigned int pathB, float weight);
typedef void (* ROGL_PFNGLTRANSFORMPATHNVPROC) (unsigned int resultPath, unsigned int srcPath, unsigned int transformType, void* transformValues);
typedef void (* ROGL_PFNGLPATHPARAMETERIVNVPROC) (unsigned int path, unsigned int pname, void* value);
typedef void (* ROGL_PFNGLPATHPARAMETERINVPROC) (unsigned int path, unsigned int pname, int value);
typedef void (* ROGL_PFNGLPATHPARAMETERFVNVPROC) (unsigned int path, unsigned int pname, void* value);
typedef void (* ROGL_PFNGLPATHPARAMETERFNVPROC) (unsigned int path, unsigned int pname, float value);
typedef void (* ROGL_PFNGLPATHDASHARRAYNVPROC) (unsigned int path, int dashCount, void* dashArray);
typedef void (* ROGL_PFNGLPATHSTENCILFUNCNVPROC) (unsigned int func, int ref, unsigned int mask);
typedef void (* ROGL_PFNGLPATHSTENCILDEPTHOFFSETNVPROC) (float factor, float units);
typedef void (* ROGL_PFNGLSTENCILFILLPATHNVPROC) (unsigned int path, unsigned int fillMode, unsigned int mask);
typedef void (* ROGL_PFNGLSTENCILSTROKEPATHNVPROC) (unsigned int path, int reference, unsigned int mask);
typedef void (* ROGL_PFNGLSTENCILFILLPATHINSTANCEDNVPROC) (int numPaths, unsigned int pathNameType, void* paths, unsigned int pathBase, unsigned int fillMode, unsigned int mask, unsigned int transformType, void* transformValues);
typedef void (* ROGL_PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC) (int numPaths, unsigned int pathNameType, void* paths, unsigned int pathBase, int reference, unsigned int mask, unsigned int transformType, void* transformValues);
typedef void (* ROGL_PFNGLPATHCOVERDEPTHFUNCNVPROC) (unsigned int func);
typedef void (* ROGL_PFNGLCOVERFILLPATHNVPROC) (unsigned int path, unsigned int coverMode);
typedef void (* ROGL_PFNGLCOVERSTROKEPATHNVPROC) (unsigned int path, unsigned int coverMode);
typedef void (* ROGL_PFNGLCOVERFILLPATHINSTANCEDNVPROC) (int numPaths, unsigned int pathNameType, void* paths, unsigned int pathBase, unsigned int coverMode, unsigned int transformType, void* transformValues);
typedef void (* ROGL_PFNGLCOVERSTROKEPATHINSTANCEDNVPROC) (int numPaths, unsigned int pathNameType, void* paths, unsigned int pathBase, unsigned int coverMode, unsigned int transformType, void* transformValues);
typedef void (* ROGL_PFNGLGETPATHPARAMETERIVNVPROC) (unsigned int path, unsigned int pname, void* value);
typedef void (* ROGL_PFNGLGETPATHPARAMETERFVNVPROC) (unsigned int path, unsigned int pname, void* value);
typedef void (* ROGL_PFNGLGETPATHCOMMANDSNVPROC) (unsigned int path, void* commands);
typedef void (* ROGL_PFNGLGETPATHCOORDSNVPROC) (unsigned int path, void* coords);
typedef void (* ROGL_PFNGLGETPATHDASHARRAYNVPROC) (unsigned int path, void* dashArray);
typedef void (* ROGL_PFNGLGETPATHMETRICSNVPROC) (unsigned int metricQueryMask, int numPaths, unsigned int pathNameType, void* paths, unsigned int pathBase, int stride, void* metrics);
typedef void (* ROGL_PFNGLGETPATHMETRICRANGENVPROC) (unsigned int metricQueryMask, unsigned int firstPathName, int numPaths, int stride, void* metrics);
typedef void (* ROGL_PFNGLGETPATHSPACINGNVPROC) (unsigned int pathListMode, int numPaths, unsigned int pathNameType, void* paths, unsigned int pathBase, float advanceScale, float kerningScale, unsigned int transformType, void* returnedSpacing);
typedef unsigned char (* ROGL_PFNGLISPOINTINFILLPATHNVPROC) (unsigned int path, unsigned int mask, float x, float y);
typedef unsigned char (* ROGL_PFNGLISPOINTINSTROKEPATHNVPROC) (unsigned int path, float x, float y);
typedef float (* ROGL_PFNGLGETPATHLENGTHNVPROC) (unsigned int path, int startSegment, int numSegments);
typedef unsigned char (* ROGL_PFNGLPOINTALONGPATHNVPROC) (unsigned int path, int startSegment, int numSegments, float distance, void* x, void* y, void* tangentX, void* tangentY);
typedef void (* ROGL_PFNGLMATRIXLOAD3X2FNVPROC) (unsigned int matrixMode, void* m);
typedef void (* ROGL_PFNGLMATRIXLOAD3X3FNVPROC) (unsigned int matrixMode, void* m);
typedef void (* ROGL_PFNGLMATRIXLOADTRANSPOSE3X3FNVPROC) (unsigned int matrixMode, void* m);
typedef void (* ROGL_PFNGLMATRIXMULT3X2FNVPROC) (unsigned int matrixMode, void* m);
typedef void (* ROGL_PFNGLMATRIXMULT3X3FNVPROC) (unsigned int matrixMode, void* m);
typedef void (* ROGL_PFNGLMATRIXMULTTRANSPOSE3X3FNVPROC) (unsigned int matrixMode, void* m);
typedef void (* ROGL_PFNGLSTENCILTHENCOVERFILLPATHNVPROC) (unsigned int path, unsigned int fillMode, unsigned int mask, unsigned int coverMode);
typedef void (* ROGL_PFNGLSTENCILTHENCOVERSTROKEPATHNVPROC) (unsigned int path, int reference, unsigned int mask, unsigned int coverMode);
typedef void (* ROGL_PFNGLSTENCILTHENCOVERFILLPATHINSTANCEDNVPROC) (int numPaths, unsigned int pathNameType, void* paths, unsigned int pathBase, unsigned int fillMode, unsigned int mask, unsigned int coverMode, unsigned int transformType, void* transformValues);
typedef void (* ROGL_PFNGLSTENCILTHENCOVERSTROKEPATHINSTANCEDNVPROC) (int numPaths, unsigned int pathNameType, void* paths, unsigned int pathBase, int reference, unsigned int mask, unsigned int coverMode, unsigned int transformType, void* transformValues);
typedef unsigned int (* ROGL_PFNGLPATHGLYPHINDEXRANGENVPROC) (unsigned int fontTarget, void* fontName, unsigned int fontStyle, unsigned int pathParameterTemplate, float emScale, void* baseAndCount);
typedef unsigned int (* ROGL_PFNGLPATHGLYPHINDEXARRAYNVPROC) (unsigned int firstPathName, unsigned int fontTarget, void* fontName, unsigned int fontStyle, unsigned int firstGlyphIndex, int numGlyphs, unsigned int pathParameterTemplate, float emScale);
typedef unsigned int (* ROGL_PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC) (unsigned int firstPathName, unsigned int fontTarget, ptrdiff_t fontSize, void* fontData, int faceIndex, unsigned int firstGlyphIndex, int numGlyphs, unsigned int pathParameterTemplate, float emScale);
typedef void (* ROGL_PFNGLPROGRAMPATHFRAGMENTINPUTGENNVPROC) (unsigned int program, int location, unsigned int genMode, int components, void* coeffs);
typedef void (* ROGL_PFNGLGETPROGRAMRESOURCEFVNVPROC) (unsigned int program, unsigned int programInterface, unsigned int index, int propCount, void* props, int bufSize, void* length, void* params);
typedef void (* ROGL_PFNGLPATHCOLORGENNVPROC) (unsigned int color, unsigned int genMode, unsigned int colorFormat, void* coeffs);
typedef void (* ROGL_PFNGLPATHTEXGENNVPROC) (unsigned int texCoordSet, unsigned int genMode, int components, void* coeffs);
typedef void (* ROGL_PFNGLPATHFOGGENNVPROC) (unsigned int genMode);
typedef void (* ROGL_PFNGLGETPATHCOLORGENIVNVPROC) (unsigned int color, unsigned int pname, void* value);
typedef void (* ROGL_PFNGLGETPATHCOLORGENFVNVPROC) (unsigned int color, unsigned int pname, void* value);
typedef void (* ROGL_PFNGLGETPATHTEXGENIVNVPROC) (unsigned int texCoordSet, unsigned int pname, void* value);
typedef void (* ROGL_PFNGLGETPATHTEXGENFVNVPROC) (unsigned int texCoordSet, unsigned int pname, void* value);
typedef void (* ROGL_PFNGLPIXELDATARANGENVPROC) (unsigned int target, int length, void* pointer);
typedef void (* ROGL_PFNGLFLUSHPIXELDATARANGENVPROC) (unsigned int target);
typedef void (* ROGL_PFNGLPOINTPARAMETERINVPROC) (unsigned int pname, int param);
typedef void (* ROGL_PFNGLPOINTPARAMETERIVNVPROC) (unsigned int pname, void* params);
typedef void (* ROGL_PFNGLPRESENTFRAMEKEYEDNVPROC) (unsigned int video_slot, unsigned long long minPresentTime, unsigned int beginPresentTimeId, unsigned int presentDurationId, unsigned int type, unsigned int target0, unsigned int fill0, unsigned int key0, unsigned int target1, unsigned int fill1, unsigned int key1);
typedef void (* ROGL_PFNGLPRESENTFRAMEDUALFILLNVPROC) (unsigned int video_slot, unsigned long long minPresentTime, unsigned int beginPresentTimeId, unsigned int presentDurationId, unsigned int type, unsigned int target0, unsigned int fill0, unsigned int target1, unsigned int fill1, unsigned int target2, unsigned int fill2, unsigned int target3, unsigned int fill3);
typedef void (* ROGL_PFNGLGETVIDEOIVNVPROC) (unsigned int video_slot, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETVIDEOUIVNVPROC) (unsigned int video_slot, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETVIDEOI64VNVPROC) (unsigned int video_slot, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETVIDEOUI64VNVPROC) (unsigned int video_slot, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLPRIMITIVERESTARTNVPROC) (void);
typedef void (* ROGL_PFNGLPRIMITIVERESTARTINDEXNVPROC) (unsigned int index);
typedef void (* ROGL_PFNGLCOMBINERPARAMETERFVNVPROC) (unsigned int pname, void* params);
typedef void (* ROGL_PFNGLCOMBINERPARAMETERFNVPROC) (unsigned int pname, float param);
typedef void (* ROGL_PFNGLCOMBINERPARAMETERIVNVPROC) (unsigned int pname, void* params);
typedef void (* ROGL_PFNGLCOMBINERPARAMETERINVPROC) (unsigned int pname, int param);
typedef void (* ROGL_PFNGLCOMBINERINPUTNVPROC) (unsigned int stage, unsigned int portion, unsigned int variable, unsigned int input, unsigned int mapping, unsigned int componentUsage);
typedef void (* ROGL_PFNGLCOMBINEROUTPUTNVPROC) (unsigned int stage, unsigned int portion, unsigned int abOutput, unsigned int cdOutput, unsigned int sumOutput, unsigned int scale, unsigned int bias, unsigned char abDotProduct, unsigned char cdDotProduct, unsigned char muxSum);
typedef void (* ROGL_PFNGLFINALCOMBINERINPUTNVPROC) (unsigned int variable, unsigned int input, unsigned int mapping, unsigned int componentUsage);
typedef void (* ROGL_PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC) (unsigned int stage, unsigned int portion, unsigned int variable, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC) (unsigned int stage, unsigned int portion, unsigned int variable, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC) (unsigned int stage, unsigned int portion, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC) (unsigned int stage, unsigned int portion, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC) (unsigned int variable, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC) (unsigned int variable, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLCOMBINERSTAGEPARAMETERFVNVPROC) (unsigned int stage, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC) (unsigned int stage, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLFRAMEBUFFERSAMPLELOCATIONSFVNVPROC) (unsigned int target, unsigned int start, int count, void* v);
typedef void (* ROGL_PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVNVPROC) (unsigned int framebuffer, unsigned int start, int count, void* v);
typedef void (* ROGL_PFNGLRESOLVEDEPTHVALUESNVPROC) (void);
typedef void (* ROGL_PFNGLMAKEBUFFERRESIDENTNVPROC) (unsigned int target, unsigned int access);
typedef void (* ROGL_PFNGLMAKEBUFFERNONRESIDENTNVPROC) (unsigned int target);
typedef unsigned char (* ROGL_PFNGLISBUFFERRESIDENTNVPROC) (unsigned int target);
typedef void (* ROGL_PFNGLMAKENAMEDBUFFERRESIDENTNVPROC) (unsigned int buffer, unsigned int access);
typedef void (* ROGL_PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC) (unsigned int buffer);
typedef unsigned char (* ROGL_PFNGLISNAMEDBUFFERRESIDENTNVPROC) (unsigned int buffer);
typedef void (* ROGL_PFNGLGETBUFFERPARAMETERUI64VNVPROC) (unsigned int target, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC) (unsigned int buffer, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETINTEGERUI64VNVPROC) (unsigned int value, void* result);
typedef void (* ROGL_PFNGLUNIFORMUI64NVPROC) (int location, unsigned long long value);
typedef void (* ROGL_PFNGLUNIFORMUI64VNVPROC) (int location, int count, void* value);
typedef void (* ROGL_PFNGLPROGRAMUNIFORMUI64NVPROC) (unsigned int program, int location, unsigned long long value);
typedef void (* ROGL_PFNGLPROGRAMUNIFORMUI64VNVPROC) (unsigned int program, int location, int count, void* value);
typedef void (* ROGL_PFNGLTEXTUREBARRIERNVPROC) (void);
typedef void (* ROGL_PFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC) (unsigned int target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, unsigned char fixedSampleLocations);
typedef void (* ROGL_PFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC) (unsigned int target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, int depth, unsigned char fixedSampleLocations);
typedef void (* ROGL_PFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC) (unsigned int texture, unsigned int target, int samples, int internalFormat, int width, int height, unsigned char fixedSampleLocations);
typedef void (* ROGL_PFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC) (unsigned int texture, unsigned int target, int samples, int internalFormat, int width, int height, int depth, unsigned char fixedSampleLocations);
typedef void (* ROGL_PFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC) (unsigned int texture, unsigned int target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, unsigned char fixedSampleLocations);
typedef void (* ROGL_PFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC) (unsigned int texture, unsigned int target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, int depth, unsigned char fixedSampleLocations);
typedef void (* ROGL_PFNGLBEGINTRANSFORMFEEDBACKNVPROC) (unsigned int primitiveMode);
typedef void (* ROGL_PFNGLENDTRANSFORMFEEDBACKNVPROC) (void);
typedef void (* ROGL_PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC) (int count, void* attribs, unsigned int bufferMode);
typedef void (* ROGL_PFNGLBINDBUFFERRANGENVPROC) (unsigned int target, unsigned int index, unsigned int buffer, ptrdiff_t offset, ptrdiff_t size);
typedef void (* ROGL_PFNGLBINDBUFFEROFFSETNVPROC) (unsigned int target, unsigned int index, unsigned int buffer, ptrdiff_t offset);
typedef void (* ROGL_PFNGLBINDBUFFERBASENVPROC) (unsigned int target, unsigned int index, unsigned int buffer);
typedef void (* ROGL_PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC) (unsigned int program, int count, void* locations, unsigned int bufferMode);
typedef void (* ROGL_PFNGLACTIVEVARYINGNVPROC) (unsigned int program, void* name);
typedef int (* ROGL_PFNGLGETVARYINGLOCATIONNVPROC) (unsigned int program, void* name);
typedef void (* ROGL_PFNGLGETACTIVEVARYINGNVPROC) (unsigned int program, unsigned int index, int bufSize, void* length, void* size, void* type, void* name);
typedef void (* ROGL_PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC) (unsigned int program, unsigned int index, void* location);
typedef void (* ROGL_PFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC) (int count, void* attribs, int nbuffers, void* bufstreams, unsigned int bufferMode);
typedef void (* ROGL_PFNGLBINDTRANSFORMFEEDBACKNVPROC) (unsigned int target, unsigned int id);
typedef void (* ROGL_PFNGLDELETETRANSFORMFEEDBACKSNVPROC) (int n, void* ids);
typedef void (* ROGL_PFNGLGENTRANSFORMFEEDBACKSNVPROC) (int n, void* ids);
typedef unsigned char (* ROGL_PFNGLISTRANSFORMFEEDBACKNVPROC) (unsigned int id);
typedef void (* ROGL_PFNGLPAUSETRANSFORMFEEDBACKNVPROC) (void);
typedef void (* ROGL_PFNGLRESUMETRANSFORMFEEDBACKNVPROC) (void);
typedef void (* ROGL_PFNGLDRAWTRANSFORMFEEDBACKNVPROC) (unsigned int mode, unsigned int id);
typedef void (* ROGL_PFNGLVDPAUINITNVPROC) (void* vdpDevice, void* getProcAddress);
typedef void (* ROGL_PFNGLVDPAUFININVPROC) (void);
typedef ptrdiff_t (* ROGL_PFNGLVDPAUREGISTERVIDEOSURFACENVPROC) (void* vdpSurface, unsigned int target, int numTextureNames, void* textureNames);
typedef ptrdiff_t (* ROGL_PFNGLVDPAUREGISTEROUTPUTSURFACENVPROC) (void* vdpSurface, unsigned int target, int numTextureNames, void* textureNames);
typedef unsigned char (* ROGL_PFNGLVDPAUISSURFACENVPROC) (ptrdiff_t surface);
typedef void (* ROGL_PFNGLVDPAUUNREGISTERSURFACENVPROC) (ptrdiff_t surface);
typedef void (* ROGL_PFNGLVDPAUGETSURFACEIVNVPROC) (ptrdiff_t surface, unsigned int pname, int bufSize, void* length, void* values);
typedef void (* ROGL_PFNGLVDPAUSURFACEACCESSNVPROC) (ptrdiff_t surface, unsigned int access);
typedef void (* ROGL_PFNGLVDPAUMAPSURFACESNVPROC) (int numSurfaces, void* surfaces);
typedef void (* ROGL_PFNGLVDPAUUNMAPSURFACESNVPROC) (int numSurface, void* surfaces);
typedef void (* ROGL_PFNGLFLUSHVERTEXARRAYRANGENVPROC) (void);
typedef void (* ROGL_PFNGLVERTEXARRAYRANGENVPROC) (int length, void* pointer);
typedef void (* ROGL_PFNGLVERTEXATTRIBL1I64NVPROC) (unsigned int index, long long x);
typedef void (* ROGL_PFNGLVERTEXATTRIBL2I64NVPROC) (unsigned int index, long long x, long long y);
typedef void (* ROGL_PFNGLVERTEXATTRIBL3I64NVPROC) (unsigned int index, long long x, long long y, long long z);
typedef void (* ROGL_PFNGLVERTEXATTRIBL4I64NVPROC) (unsigned int index, long long x, long long y, long long z, long long w);
typedef void (* ROGL_PFNGLVERTEXATTRIBL1I64VNVPROC) (unsigned int index, void* v);
typedef void (* ROGL_PFNGLVERTEXATTRIBL2I64VNVPROC) (unsigned int index, void* v);
typedef void (* ROGL_PFNGLVERTEXATTRIBL3I64VNVPROC) (unsigned int index, void* v);
typedef void (* ROGL_PFNGLVERTEXATTRIBL4I64VNVPROC) (unsigned int index, void* v);
typedef void (* ROGL_PFNGLVERTEXATTRIBL1UI64NVPROC) (unsigned int index, unsigned long long x);
typedef void (* ROGL_PFNGLVERTEXATTRIBL2UI64NVPROC) (unsigned int index, unsigned long long x, unsigned long long y);
typedef void (* ROGL_PFNGLVERTEXATTRIBL3UI64NVPROC) (unsigned int index, unsigned long long x, unsigned long long y, unsigned long long z);
typedef void (* ROGL_PFNGLVERTEXATTRIBL4UI64NVPROC) (unsigned int index, unsigned long long x, unsigned long long y, unsigned long long z, unsigned long long w);
typedef void (* ROGL_PFNGLVERTEXATTRIBL1UI64VNVPROC) (unsigned int index, void* v);
typedef void (* ROGL_PFNGLVERTEXATTRIBL2UI64VNVPROC) (unsigned int index, void* v);
typedef void (* ROGL_PFNGLVERTEXATTRIBL3UI64VNVPROC) (unsigned int index, void* v);
typedef void (* ROGL_PFNGLVERTEXATTRIBL4UI64VNVPROC) (unsigned int index, void* v);
typedef void (* ROGL_PFNGLGETVERTEXATTRIBLI64VNVPROC) (unsigned int index, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETVERTEXATTRIBLUI64VNVPROC) (unsigned int index, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLVERTEXATTRIBLFORMATNVPROC) (unsigned int index, int size, unsigned int type, int stride);
typedef void (* ROGL_PFNGLBUFFERADDRESSRANGENVPROC) (unsigned int pname, unsigned int index, unsigned long long address, ptrdiff_t length);
typedef void (* ROGL_PFNGLVERTEXFORMATNVPROC) (int size, unsigned int type, int stride);
typedef void (* ROGL_PFNGLNORMALFORMATNVPROC) (unsigned int type, int stride);
typedef void (* ROGL_PFNGLCOLORFORMATNVPROC) (int size, unsigned int type, int stride);
typedef void (* ROGL_PFNGLINDEXFORMATNVPROC) (unsigned int type, int stride);
typedef void (* ROGL_PFNGLTEXCOORDFORMATNVPROC) (int size, unsigned int type, int stride);
typedef void (* ROGL_PFNGLEDGEFLAGFORMATNVPROC) (int stride);
typedef void (* ROGL_PFNGLSECONDARYCOLORFORMATNVPROC) (int size, unsigned int type, int stride);
typedef void (* ROGL_PFNGLFOGCOORDFORMATNVPROC) (unsigned int type, int stride);
typedef void (* ROGL_PFNGLVERTEXATTRIBFORMATNVPROC) (unsigned int index, int size, unsigned int type, unsigned char normalized, int stride);
typedef void (* ROGL_PFNGLVERTEXATTRIBIFORMATNVPROC) (unsigned int index, int size, unsigned int type, int stride);
typedef void (* ROGL_PFNGLGETINTEGERUI64I_VNVPROC) (unsigned int value, unsigned int index, void* result);
typedef unsigned char (* ROGL_PFNGLAREPROGRAMSRESIDENTNVPROC) (int n, void* programs, void* residences);
typedef void (* ROGL_PFNGLBINDPROGRAMNVPROC) (unsigned int target, unsigned int id);
typedef void (* ROGL_PFNGLDELETEPROGRAMSNVPROC) (int n, void* programs);
typedef void (* ROGL_PFNGLEXECUTEPROGRAMNVPROC) (unsigned int target, unsigned int id, void* params);
typedef void (* ROGL_PFNGLGENPROGRAMSNVPROC) (int n, void* programs);
typedef void (* ROGL_PFNGLGETPROGRAMPARAMETERDVNVPROC) (unsigned int target, unsigned int index, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETPROGRAMPARAMETERFVNVPROC) (unsigned int target, unsigned int index, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETPROGRAMIVNVPROC) (unsigned int id, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETPROGRAMSTRINGNVPROC) (unsigned int id, unsigned int pname, void* program);
typedef void (* ROGL_PFNGLGETTRACKMATRIXIVNVPROC) (unsigned int target, unsigned int address, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETVERTEXATTRIBDVNVPROC) (unsigned int index, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETVERTEXATTRIBFVNVPROC) (unsigned int index, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETVERTEXATTRIBIVNVPROC) (unsigned int index, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETVERTEXATTRIBPOINTERVNVPROC) (unsigned int index, unsigned int pname, void* pointer);
typedef unsigned char (* ROGL_PFNGLISPROGRAMNVPROC) (unsigned int id);
typedef void (* ROGL_PFNGLLOADPROGRAMNVPROC) (unsigned int target, unsigned int id, int len, void* program);
typedef void (* ROGL_PFNGLPROGRAMPARAMETER4DNVPROC) (unsigned int target, unsigned int index, double x, double y, double z, double w);
typedef void (* ROGL_PFNGLPROGRAMPARAMETER4DVNVPROC) (unsigned int target, unsigned int index, void* v);
typedef void (* ROGL_PFNGLPROGRAMPARAMETER4FNVPROC) (unsigned int target, unsigned int index, float x, float y, float z, float w);
typedef void (* ROGL_PFNGLPROGRAMPARAMETER4FVNVPROC) (unsigned int target, unsigned int index, void* v);
typedef void (* ROGL_PFNGLPROGRAMPARAMETERS4DVNVPROC) (unsigned int target, unsigned int index, int count, void* v);
typedef void (* ROGL_PFNGLPROGRAMPARAMETERS4FVNVPROC) (unsigned int target, unsigned int index, int count, void* v);
typedef void (* ROGL_PFNGLREQUESTRESIDENTPROGRAMSNVPROC) (int n, void* programs);
typedef void (* ROGL_PFNGLTRACKMATRIXNVPROC) (unsigned int target, unsigned int address, unsigned int matrix, unsigned int transform);
typedef void (* ROGL_PFNGLVERTEXATTRIBPOINTERNVPROC) (unsigned int index, int fsize, unsigned int type, int stride, void* pointer);
typedef void (* ROGL_PFNGLVERTEXATTRIB1DNVPROC) (unsigned int index, double x);
typedef void (* ROGL_PFNGLVERTEXATTRIB1DVNVPROC) (unsigned int index, void* v);
typedef void (* ROGL_PFNGLVERTEXATTRIB1FNVPROC) (unsigned int index, float x);
typedef void (* ROGL_PFNGLVERTEXATTRIB1FVNVPROC) (unsigned int index, void* v);
typedef void (* ROGL_PFNGLVERTEXATTRIB1SNVPROC) (unsigned int index, short x);
typedef void (* ROGL_PFNGLVERTEXATTRIB1SVNVPROC) (unsigned int index, void* v);
typedef void (* ROGL_PFNGLVERTEXATTRIB2DNVPROC) (unsigned int index, double x, double y);
typedef void (* ROGL_PFNGLVERTEXATTRIB2DVNVPROC) (unsigned int index, void* v);
typedef void (* ROGL_PFNGLVERTEXATTRIB2FNVPROC) (unsigned int index, float x, float y);
typedef void (* ROGL_PFNGLVERTEXATTRIB2FVNVPROC) (unsigned int index, void* v);
typedef void (* ROGL_PFNGLVERTEXATTRIB2SNVPROC) (unsigned int index, short x, short y);
typedef void (* ROGL_PFNGLVERTEXATTRIB2SVNVPROC) (unsigned int index, void* v);
typedef void (* ROGL_PFNGLVERTEXATTRIB3DNVPROC) (unsigned int index, double x, double y, double z);
typedef void (* ROGL_PFNGLVERTEXATTRIB3DVNVPROC) (unsigned int index, void* v);
typedef void (* ROGL_PFNGLVERTEXATTRIB3FNVPROC) (unsigned int index, float x, float y, float z);
typedef void (* ROGL_PFNGLVERTEXATTRIB3FVNVPROC) (unsigned int index, void* v);
typedef void (* ROGL_PFNGLVERTEXATTRIB3SNVPROC) (unsigned int index, short x, short y, short z);
typedef void (* ROGL_PFNGLVERTEXATTRIB3SVNVPROC) (unsigned int index, void* v);
typedef void (* ROGL_PFNGLVERTEXATTRIB4DNVPROC) (unsigned int index, double x, double y, double z, double w);
typedef void (* ROGL_PFNGLVERTEXATTRIB4DVNVPROC) (unsigned int index, void* v);
typedef void (* ROGL_PFNGLVERTEXATTRIB4FNVPROC) (unsigned int index, float x, float y, float z, float w);
typedef void (* ROGL_PFNGLVERTEXATTRIB4FVNVPROC) (unsigned int index, void* v);
typedef void (* ROGL_PFNGLVERTEXATTRIB4SNVPROC) (unsigned int index, short x, short y, short z, short w);
typedef void (* ROGL_PFNGLVERTEXATTRIB4SVNVPROC) (unsigned int index, void* v);
typedef void (* ROGL_PFNGLVERTEXATTRIB4UBNVPROC) (unsigned int index, unsigned char x, unsigned char y, unsigned char z, unsigned char w);
typedef void (* ROGL_PFNGLVERTEXATTRIB4UBVNVPROC) (unsigned int index, void* v);
typedef void (* ROGL_PFNGLVERTEXATTRIBS1DVNVPROC) (unsigned int index, int count, void* v);
typedef void (* ROGL_PFNGLVERTEXATTRIBS1FVNVPROC) (unsigned int index, int count, void* v);
typedef void (* ROGL_PFNGLVERTEXATTRIBS1SVNVPROC) (unsigned int index, int count, void* v);
typedef void (* ROGL_PFNGLVERTEXATTRIBS2DVNVPROC) (unsigned int index, int count, void* v);
typedef void (* ROGL_PFNGLVERTEXATTRIBS2FVNVPROC) (unsigned int index, int count, void* v);
typedef void (* ROGL_PFNGLVERTEXATTRIBS2SVNVPROC) (unsigned int index, int count, void* v);
typedef void (* ROGL_PFNGLVERTEXATTRIBS3DVNVPROC) (unsigned int index, int count, void* v);
typedef void (* ROGL_PFNGLVERTEXATTRIBS3FVNVPROC) (unsigned int index, int count, void* v);
typedef void (* ROGL_PFNGLVERTEXATTRIBS3SVNVPROC) (unsigned int index, int count, void* v);
typedef void (* ROGL_PFNGLVERTEXATTRIBS4DVNVPROC) (unsigned int index, int count, void* v);
typedef void (* ROGL_PFNGLVERTEXATTRIBS4FVNVPROC) (unsigned int index, int count, void* v);
typedef void (* ROGL_PFNGLVERTEXATTRIBS4SVNVPROC) (unsigned int index, int count, void* v);
typedef void (* ROGL_PFNGLVERTEXATTRIBS4UBVNVPROC) (unsigned int index, int count, void* v);
typedef void (* ROGL_PFNGLVERTEXATTRIBI1IEXTPROC) (unsigned int index, int x);
typedef void (* ROGL_PFNGLVERTEXATTRIBI2IEXTPROC) (unsigned int index, int x, int y);
typedef void (* ROGL_PFNGLVERTEXATTRIBI3IEXTPROC) (unsigned int index, int x, int y, int z);
typedef void (* ROGL_PFNGLVERTEXATTRIBI4IEXTPROC) (unsigned int index, int x, int y, int z, int w);
typedef void (* ROGL_PFNGLVERTEXATTRIBI1UIEXTPROC) (unsigned int index, unsigned int x);
typedef void (* ROGL_PFNGLVERTEXATTRIBI2UIEXTPROC) (unsigned int index, unsigned int x, unsigned int y);
typedef void (* ROGL_PFNGLVERTEXATTRIBI3UIEXTPROC) (unsigned int index, unsigned int x, unsigned int y, unsigned int z);
typedef void (* ROGL_PFNGLVERTEXATTRIBI4UIEXTPROC) (unsigned int index, unsigned int x, unsigned int y, unsigned int z, unsigned int w);
typedef void (* ROGL_PFNGLVERTEXATTRIBI1IVEXTPROC) (unsigned int index, void* v);
typedef void (* ROGL_PFNGLVERTEXATTRIBI2IVEXTPROC) (unsigned int index, void* v);
typedef void (* ROGL_PFNGLVERTEXATTRIBI3IVEXTPROC) (unsigned int index, void* v);
typedef void (* ROGL_PFNGLVERTEXATTRIBI4IVEXTPROC) (unsigned int index, void* v);
typedef void (* ROGL_PFNGLVERTEXATTRIBI1UIVEXTPROC) (unsigned int index, void* v);
typedef void (* ROGL_PFNGLVERTEXATTRIBI2UIVEXTPROC) (unsigned int index, void* v);
typedef void (* ROGL_PFNGLVERTEXATTRIBI3UIVEXTPROC) (unsigned int index, void* v);
typedef void (* ROGL_PFNGLVERTEXATTRIBI4UIVEXTPROC) (unsigned int index, void* v);
typedef void (* ROGL_PFNGLVERTEXATTRIBI4BVEXTPROC) (unsigned int index, void* v);
typedef void (* ROGL_PFNGLVERTEXATTRIBI4SVEXTPROC) (unsigned int index, void* v);
typedef void (* ROGL_PFNGLVERTEXATTRIBI4UBVEXTPROC) (unsigned int index, void* v);
typedef void (* ROGL_PFNGLVERTEXATTRIBI4USVEXTPROC) (unsigned int index, void* v);
typedef void (* ROGL_PFNGLVERTEXATTRIBIPOINTEREXTPROC) (unsigned int index, int size, unsigned int type, int stride, void* pointer);
typedef void (* ROGL_PFNGLGETVERTEXATTRIBIIVEXTPROC) (unsigned int index, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETVERTEXATTRIBIUIVEXTPROC) (unsigned int index, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLBEGINVIDEOCAPTURENVPROC) (unsigned int video_capture_slot);
typedef void (* ROGL_PFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC) (unsigned int video_capture_slot, unsigned int stream, unsigned int frame_region, ptrdiff_t offset);
typedef void (* ROGL_PFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC) (unsigned int video_capture_slot, unsigned int stream, unsigned int frame_region, unsigned int target, unsigned int texture);
typedef void (* ROGL_PFNGLENDVIDEOCAPTURENVPROC) (unsigned int video_capture_slot);
typedef void (* ROGL_PFNGLGETVIDEOCAPTUREIVNVPROC) (unsigned int video_capture_slot, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETVIDEOCAPTURESTREAMIVNVPROC) (unsigned int video_capture_slot, unsigned int stream, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETVIDEOCAPTURESTREAMFVNVPROC) (unsigned int video_capture_slot, unsigned int stream, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETVIDEOCAPTURESTREAMDVNVPROC) (unsigned int video_capture_slot, unsigned int stream, unsigned int pname, void* params);
typedef unsigned int (* ROGL_PFNGLVIDEOCAPTURENVPROC) (unsigned int video_capture_slot, void* sequence_num, void* capture_time);
typedef void (* ROGL_PFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC) (unsigned int video_capture_slot, unsigned int stream, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC) (unsigned int video_capture_slot, unsigned int stream, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC) (unsigned int video_capture_slot, unsigned int stream, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLMULTITEXCOORD1BOESPROC) (unsigned int texture, char s);
typedef void (* ROGL_PFNGLMULTITEXCOORD1BVOESPROC) (unsigned int texture, void* coords);
typedef void (* ROGL_PFNGLMULTITEXCOORD2BOESPROC) (unsigned int texture, char s, char t);
typedef void (* ROGL_PFNGLMULTITEXCOORD2BVOESPROC) (unsigned int texture, void* coords);
typedef void (* ROGL_PFNGLMULTITEXCOORD3BOESPROC) (unsigned int texture, char s, char t, char r);
typedef void (* ROGL_PFNGLMULTITEXCOORD3BVOESPROC) (unsigned int texture, void* coords);
typedef void (* ROGL_PFNGLMULTITEXCOORD4BOESPROC) (unsigned int texture, char s, char t, char r, char q);
typedef void (* ROGL_PFNGLMULTITEXCOORD4BVOESPROC) (unsigned int texture, void* coords);
typedef void (* ROGL_PFNGLTEXCOORD1BOESPROC) (char s);
typedef void (* ROGL_PFNGLTEXCOORD1BVOESPROC) (void* coords);
typedef void (* ROGL_PFNGLTEXCOORD2BOESPROC) (char s, char t);
typedef void (* ROGL_PFNGLTEXCOORD2BVOESPROC) (void* coords);
typedef void (* ROGL_PFNGLTEXCOORD3BOESPROC) (char s, char t, char r);
typedef void (* ROGL_PFNGLTEXCOORD3BVOESPROC) (void* coords);
typedef void (* ROGL_PFNGLTEXCOORD4BOESPROC) (char s, char t, char r, char q);
typedef void (* ROGL_PFNGLTEXCOORD4BVOESPROC) (void* coords);
typedef void (* ROGL_PFNGLVERTEX2BOESPROC) (char x, char y);
typedef void (* ROGL_PFNGLVERTEX2BVOESPROC) (void* coords);
typedef void (* ROGL_PFNGLVERTEX3BOESPROC) (char x, char y, char z);
typedef void (* ROGL_PFNGLVERTEX3BVOESPROC) (void* coords);
typedef void (* ROGL_PFNGLVERTEX4BOESPROC) (char x, char y, char z, char w);
typedef void (* ROGL_PFNGLVERTEX4BVOESPROC) (void* coords);
typedef void (* ROGL_PFNGLALPHAFUNCXOESPROC) (unsigned int func, int ref);
typedef void (* ROGL_PFNGLCLEARCOLORXOESPROC) (int red, int green, int blue, int alpha);
typedef void (* ROGL_PFNGLCLEARDEPTHXOESPROC) (int depth);
typedef void (* ROGL_PFNGLCLIPPLANEXOESPROC) (unsigned int plane, void* equation);
typedef void (* ROGL_PFNGLCOLOR4XOESPROC) (int red, int green, int blue, int alpha);
typedef void (* ROGL_PFNGLDEPTHRANGEXOESPROC) (int n, int f);
typedef void (* ROGL_PFNGLFOGXOESPROC) (unsigned int pname, int param);
typedef void (* ROGL_PFNGLFOGXVOESPROC) (unsigned int pname, void* param);
typedef void (* ROGL_PFNGLFRUSTUMXOESPROC) (int l, int r, int b, int t, int n, int f);
typedef void (* ROGL_PFNGLGETCLIPPLANEXOESPROC) (unsigned int plane, void* equation);
typedef void (* ROGL_PFNGLGETFIXEDVOESPROC) (unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETTEXENVXVOESPROC) (unsigned int target, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETTEXPARAMETERXVOESPROC) (unsigned int target, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLLIGHTMODELXOESPROC) (unsigned int pname, int param);
typedef void (* ROGL_PFNGLLIGHTMODELXVOESPROC) (unsigned int pname, void* param);
typedef void (* ROGL_PFNGLLIGHTXOESPROC) (unsigned int light, unsigned int pname, int param);
typedef void (* ROGL_PFNGLLIGHTXVOESPROC) (unsigned int light, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLLINEWIDTHXOESPROC) (int width);
typedef void (* ROGL_PFNGLLOADMATRIXXOESPROC) (void* m);
typedef void (* ROGL_PFNGLMATERIALXOESPROC) (unsigned int face, unsigned int pname, int param);
typedef void (* ROGL_PFNGLMATERIALXVOESPROC) (unsigned int face, unsigned int pname, void* param);
typedef void (* ROGL_PFNGLMULTMATRIXXOESPROC) (void* m);
typedef void (* ROGL_PFNGLMULTITEXCOORD4XOESPROC) (unsigned int texture, int s, int t, int r, int q);
typedef void (* ROGL_PFNGLNORMAL3XOESPROC) (int nx, int ny, int nz);
typedef void (* ROGL_PFNGLORTHOXOESPROC) (int l, int r, int b, int t, int n, int f);
typedef void (* ROGL_PFNGLPOINTPARAMETERXVOESPROC) (unsigned int pname, void* params);
typedef void (* ROGL_PFNGLPOINTSIZEXOESPROC) (int size);
typedef void (* ROGL_PFNGLPOLYGONOFFSETXOESPROC) (int factor, int units);
typedef void (* ROGL_PFNGLROTATEXOESPROC) (int angle, int x, int y, int z);
typedef void (* ROGL_PFNGLSCALEXOESPROC) (int x, int y, int z);
typedef void (* ROGL_PFNGLTEXENVXOESPROC) (unsigned int target, unsigned int pname, int param);
typedef void (* ROGL_PFNGLTEXENVXVOESPROC) (unsigned int target, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLTEXPARAMETERXOESPROC) (unsigned int target, unsigned int pname, int param);
typedef void (* ROGL_PFNGLTEXPARAMETERXVOESPROC) (unsigned int target, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLTRANSLATEXOESPROC) (int x, int y, int z);
typedef void (* ROGL_PFNGLGETLIGHTXVOESPROC) (unsigned int light, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETMATERIALXVOESPROC) (unsigned int face, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLPOINTPARAMETERXOESPROC) (unsigned int pname, int param);
typedef void (* ROGL_PFNGLSAMPLECOVERAGEXOESPROC) (int value, unsigned char invert);
typedef void (* ROGL_PFNGLACCUMXOESPROC) (unsigned int op, int value);
typedef void (* ROGL_PFNGLBITMAPXOESPROC) (int width, int height, int xorig, int yorig, int xmove, int ymove, void* bitmap);
typedef void (* ROGL_PFNGLBLENDCOLORXOESPROC) (int red, int green, int blue, int alpha);
typedef void (* ROGL_PFNGLCLEARACCUMXOESPROC) (int red, int green, int blue, int alpha);
typedef void (* ROGL_PFNGLCOLOR3XOESPROC) (int red, int green, int blue);
typedef void (* ROGL_PFNGLCOLOR3XVOESPROC) (void* components);
typedef void (* ROGL_PFNGLCOLOR4XVOESPROC) (void* components);
typedef void (* ROGL_PFNGLCONVOLUTIONPARAMETERXOESPROC) (unsigned int target, unsigned int pname, int param);
typedef void (* ROGL_PFNGLCONVOLUTIONPARAMETERXVOESPROC) (unsigned int target, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLEVALCOORD1XOESPROC) (int u);
typedef void (* ROGL_PFNGLEVALCOORD1XVOESPROC) (void* coords);
typedef void (* ROGL_PFNGLEVALCOORD2XOESPROC) (int u, int v);
typedef void (* ROGL_PFNGLEVALCOORD2XVOESPROC) (void* coords);
typedef void (* ROGL_PFNGLFEEDBACKBUFFERXOESPROC) (int n, unsigned int type, void* buffer);
typedef void (* ROGL_PFNGLGETCONVOLUTIONPARAMETERXVOESPROC) (unsigned int target, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETHISTOGRAMPARAMETERXVOESPROC) (unsigned int target, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETLIGHTXOESPROC) (unsigned int light, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETMAPXVOESPROC) (unsigned int target, unsigned int query, void* v);
typedef void (* ROGL_PFNGLGETMATERIALXOESPROC) (unsigned int face, unsigned int pname, int param);
typedef void (* ROGL_PFNGLGETPIXELMAPXVPROC) (unsigned int map, int size, void* values);
typedef void (* ROGL_PFNGLGETTEXGENXVOESPROC) (unsigned int coord, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETTEXLEVELPARAMETERXVOESPROC) (unsigned int target, int level, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLINDEXXOESPROC) (int component);
typedef void (* ROGL_PFNGLINDEXXVOESPROC) (void* component);
typedef void (* ROGL_PFNGLLOADTRANSPOSEMATRIXXOESPROC) (void* m);
typedef void (* ROGL_PFNGLMAP1XOESPROC) (unsigned int target, int u1, int u2, int stride, int order, int points);
typedef void (* ROGL_PFNGLMAP2XOESPROC) (unsigned int target, int u1, int u2, int ustride, int uorder, int v1, int v2, int vstride, int vorder, int points);
typedef void (* ROGL_PFNGLMAPGRID1XOESPROC) (int n, int u1, int u2);
typedef void (* ROGL_PFNGLMAPGRID2XOESPROC) (int n, int u1, int u2, int v1, int v2);
typedef void (* ROGL_PFNGLMULTTRANSPOSEMATRIXXOESPROC) (void* m);
typedef void (* ROGL_PFNGLMULTITEXCOORD1XOESPROC) (unsigned int texture, int s);
typedef void (* ROGL_PFNGLMULTITEXCOORD1XVOESPROC) (unsigned int texture, void* coords);
typedef void (* ROGL_PFNGLMULTITEXCOORD2XOESPROC) (unsigned int texture, int s, int t);
typedef void (* ROGL_PFNGLMULTITEXCOORD2XVOESPROC) (unsigned int texture, void* coords);
typedef void (* ROGL_PFNGLMULTITEXCOORD3XOESPROC) (unsigned int texture, int s, int t, int r);
typedef void (* ROGL_PFNGLMULTITEXCOORD3XVOESPROC) (unsigned int texture, void* coords);
typedef void (* ROGL_PFNGLMULTITEXCOORD4XVOESPROC) (unsigned int texture, void* coords);
typedef void (* ROGL_PFNGLNORMAL3XVOESPROC) (void* coords);
typedef void (* ROGL_PFNGLPASSTHROUGHXOESPROC) (int token);
typedef void (* ROGL_PFNGLPIXELMAPXPROC) (unsigned int map, int size, void* values);
typedef void (* ROGL_PFNGLPIXELSTOREXPROC) (unsigned int pname, int param);
typedef void (* ROGL_PFNGLPIXELTRANSFERXOESPROC) (unsigned int pname, int param);
typedef void (* ROGL_PFNGLPIXELZOOMXOESPROC) (int xfactor, int yfactor);
typedef void (* ROGL_PFNGLPRIORITIZETEXTURESXOESPROC) (int n, void* textures, void* priorities);
typedef void (* ROGL_PFNGLRASTERPOS2XOESPROC) (int x, int y);
typedef void (* ROGL_PFNGLRASTERPOS2XVOESPROC) (void* coords);
typedef void (* ROGL_PFNGLRASTERPOS3XOESPROC) (int x, int y, int z);
typedef void (* ROGL_PFNGLRASTERPOS3XVOESPROC) (void* coords);
typedef void (* ROGL_PFNGLRASTERPOS4XOESPROC) (int x, int y, int z, int w);
typedef void (* ROGL_PFNGLRASTERPOS4XVOESPROC) (void* coords);
typedef void (* ROGL_PFNGLRECTXOESPROC) (int x1, int y1, int x2, int y2);
typedef void (* ROGL_PFNGLRECTXVOESPROC) (void* v1, void* v2);
typedef void (* ROGL_PFNGLTEXCOORD1XOESPROC) (int s);
typedef void (* ROGL_PFNGLTEXCOORD1XVOESPROC) (void* coords);
typedef void (* ROGL_PFNGLTEXCOORD2XOESPROC) (int s, int t);
typedef void (* ROGL_PFNGLTEXCOORD2XVOESPROC) (void* coords);
typedef void (* ROGL_PFNGLTEXCOORD3XOESPROC) (int s, int t, int r);
typedef void (* ROGL_PFNGLTEXCOORD3XVOESPROC) (void* coords);
typedef void (* ROGL_PFNGLTEXCOORD4XOESPROC) (int s, int t, int r, int q);
typedef void (* ROGL_PFNGLTEXCOORD4XVOESPROC) (void* coords);
typedef void (* ROGL_PFNGLTEXGENXOESPROC) (unsigned int coord, unsigned int pname, int param);
typedef void (* ROGL_PFNGLTEXGENXVOESPROC) (unsigned int coord, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLVERTEX2XOESPROC) (int x);
typedef void (* ROGL_PFNGLVERTEX2XVOESPROC) (void* coords);
typedef void (* ROGL_PFNGLVERTEX3XOESPROC) (int x, int y);
typedef void (* ROGL_PFNGLVERTEX3XVOESPROC) (void* coords);
typedef void (* ROGL_PFNGLVERTEX4XOESPROC) (int x, int y, int z);
typedef void (* ROGL_PFNGLVERTEX4XVOESPROC) (void* coords);
typedef unsigned int (* ROGL_PFNGLQUERYMATRIXXOESPROC) (void* mantissa, void* exponent);
typedef void (* ROGL_PFNGLCLEARDEPTHFOESPROC) (float depth);
typedef void (* ROGL_PFNGLCLIPPLANEFOESPROC) (unsigned int plane, void* equation);
typedef void (* ROGL_PFNGLDEPTHRANGEFOESPROC) (float n, float f);
typedef void (* ROGL_PFNGLFRUSTUMFOESPROC) (float l, float r, float b, float t, float n, float f);
typedef void (* ROGL_PFNGLGETCLIPPLANEFOESPROC) (unsigned int plane, void* equation);
typedef void (* ROGL_PFNGLORTHOFOESPROC) (float l, float r, float b, float t, float n, float f);
typedef void (* ROGL_PFNGLFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC) (unsigned int target, unsigned int attachment, unsigned int texture, int level, int baseViewIndex, int numViews);
typedef void (* ROGL_PFNGLHINTPGIPROC) (unsigned int target, int mode);
typedef void (* ROGL_PFNGLDETAILTEXFUNCSGISPROC) (unsigned int target, int n, void* points);
typedef void (* ROGL_PFNGLGETDETAILTEXFUNCSGISPROC) (unsigned int target, void* points);
typedef void (* ROGL_PFNGLFOGFUNCSGISPROC) (int n, void* points);
typedef void (* ROGL_PFNGLGETFOGFUNCSGISPROC) (void* points);
typedef void (* ROGL_PFNGLSAMPLEMASKSGISPROC) (float value, unsigned char invert);
typedef void (* ROGL_PFNGLSAMPLEPATTERNSGISPROC) (unsigned int pattern);
typedef void (* ROGL_PFNGLPIXELTEXGENPARAMETERISGISPROC) (unsigned int pname, int param);
typedef void (* ROGL_PFNGLPIXELTEXGENPARAMETERIVSGISPROC) (unsigned int pname, void* params);
typedef void (* ROGL_PFNGLPIXELTEXGENPARAMETERFSGISPROC) (unsigned int pname, float param);
typedef void (* ROGL_PFNGLPIXELTEXGENPARAMETERFVSGISPROC) (unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETPIXELTEXGENPARAMETERIVSGISPROC) (unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETPIXELTEXGENPARAMETERFVSGISPROC) (unsigned int pname, void* params);
typedef void (* ROGL_PFNGLPOINTPARAMETERFSGISPROC) (unsigned int pname, float param);
typedef void (* ROGL_PFNGLPOINTPARAMETERFVSGISPROC) (unsigned int pname, void* params);
typedef void (* ROGL_PFNGLSHARPENTEXFUNCSGISPROC) (unsigned int target, int n, void* points);
typedef void (* ROGL_PFNGLGETSHARPENTEXFUNCSGISPROC) (unsigned int target, void* points);
typedef void (* ROGL_PFNGLTEXIMAGE4DSGISPROC) (unsigned int target, int level, unsigned int internalformat, int width, int height, int depth, int size4d, int border, unsigned int format, unsigned int type, void* pixels);
typedef void (* ROGL_PFNGLTEXSUBIMAGE4DSGISPROC) (unsigned int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, unsigned int format, unsigned int type, void* pixels);
typedef void (* ROGL_PFNGLTEXTURECOLORMASKSGISPROC) (unsigned char red, unsigned char green, unsigned char blue, unsigned char alpha);
typedef void (* ROGL_PFNGLGETTEXFILTERFUNCSGISPROC) (unsigned int target, unsigned int filter, void* weights);
typedef void (* ROGL_PFNGLTEXFILTERFUNCSGISPROC) (unsigned int target, unsigned int filter, int n, void* weights);
typedef void (* ROGL_PFNGLASYNCMARKERSGIXPROC) (unsigned int marker);
typedef int (* ROGL_PFNGLFINISHASYNCSGIXPROC) (void* markerp);
typedef int (* ROGL_PFNGLPOLLASYNCSGIXPROC) (void* markerp);
typedef unsigned int (* ROGL_PFNGLGENASYNCMARKERSSGIXPROC) (int range);
typedef void (* ROGL_PFNGLDELETEASYNCMARKERSSGIXPROC) (unsigned int marker, int range);
typedef unsigned char (* ROGL_PFNGLISASYNCMARKERSGIXPROC) (unsigned int marker);
typedef void (* ROGL_PFNGLFLUSHRASTERSGIXPROC) (void);
typedef void (* ROGL_PFNGLFRAGMENTCOLORMATERIALSGIXPROC) (unsigned int face, unsigned int mode);
typedef void (* ROGL_PFNGLFRAGMENTLIGHTFSGIXPROC) (unsigned int light, unsigned int pname, float param);
typedef void (* ROGL_PFNGLFRAGMENTLIGHTFVSGIXPROC) (unsigned int light, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLFRAGMENTLIGHTISGIXPROC) (unsigned int light, unsigned int pname, int param);
typedef void (* ROGL_PFNGLFRAGMENTLIGHTIVSGIXPROC) (unsigned int light, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLFRAGMENTLIGHTMODELFSGIXPROC) (unsigned int pname, float param);
typedef void (* ROGL_PFNGLFRAGMENTLIGHTMODELFVSGIXPROC) (unsigned int pname, void* params);
typedef void (* ROGL_PFNGLFRAGMENTLIGHTMODELISGIXPROC) (unsigned int pname, int param);
typedef void (* ROGL_PFNGLFRAGMENTLIGHTMODELIVSGIXPROC) (unsigned int pname, void* params);
typedef void (* ROGL_PFNGLFRAGMENTMATERIALFSGIXPROC) (unsigned int face, unsigned int pname, float param);
typedef void (* ROGL_PFNGLFRAGMENTMATERIALFVSGIXPROC) (unsigned int face, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLFRAGMENTMATERIALISGIXPROC) (unsigned int face, unsigned int pname, int param);
typedef void (* ROGL_PFNGLFRAGMENTMATERIALIVSGIXPROC) (unsigned int face, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETFRAGMENTLIGHTFVSGIXPROC) (unsigned int light, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETFRAGMENTLIGHTIVSGIXPROC) (unsigned int light, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETFRAGMENTMATERIALFVSGIXPROC) (unsigned int face, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETFRAGMENTMATERIALIVSGIXPROC) (unsigned int face, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLLIGHTENVISGIXPROC) (unsigned int pname, int param);
typedef void (* ROGL_PFNGLFRAMEZOOMSGIXPROC) (int factor);
typedef void (* ROGL_PFNGLIGLOOINTERFACESGIXPROC) (unsigned int pname, void* params);
typedef int (* ROGL_PFNGLGETINSTRUMENTSSGIXPROC) (void);
typedef void (* ROGL_PFNGLINSTRUMENTSBUFFERSGIXPROC) (int size, void* buffer);
typedef int (* ROGL_PFNGLPOLLINSTRUMENTSSGIXPROC) (void* marker_p);
typedef void (* ROGL_PFNGLREADINSTRUMENTSSGIXPROC) (int marker);
typedef void (* ROGL_PFNGLSTARTINSTRUMENTSSGIXPROC) (void);
typedef void (* ROGL_PFNGLSTOPINSTRUMENTSSGIXPROC) (int marker);
typedef void (* ROGL_PFNGLGETLISTPARAMETERFVSGIXPROC) (unsigned int list, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETLISTPARAMETERIVSGIXPROC) (unsigned int list, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLLISTPARAMETERFSGIXPROC) (unsigned int list, unsigned int pname, float param);
typedef void (* ROGL_PFNGLLISTPARAMETERFVSGIXPROC) (unsigned int list, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLLISTPARAMETERISGIXPROC) (unsigned int list, unsigned int pname, int param);
typedef void (* ROGL_PFNGLLISTPARAMETERIVSGIXPROC) (unsigned int list, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLPIXELTEXGENSGIXPROC) (unsigned int mode);
typedef void (* ROGL_PFNGLDEFORMATIONMAP3DSGIXPROC) (unsigned int target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double w1, double w2, int wstride, int worder, void* points);
typedef void (* ROGL_PFNGLDEFORMATIONMAP3FSGIXPROC) (unsigned int target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float w1, float w2, int wstride, int worder, void* points);
typedef void (* ROGL_PFNGLDEFORMSGIXPROC) (unsigned int mask);
typedef void (* ROGL_PFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC) (unsigned int mask);
typedef void (* ROGL_PFNGLREFERENCEPLANESGIXPROC) (void* equation);
typedef void (* ROGL_PFNGLSPRITEPARAMETERFSGIXPROC) (unsigned int pname, float param);
typedef void (* ROGL_PFNGLSPRITEPARAMETERFVSGIXPROC) (unsigned int pname, void* params);
typedef void (* ROGL_PFNGLSPRITEPARAMETERISGIXPROC) (unsigned int pname, int param);
typedef void (* ROGL_PFNGLSPRITEPARAMETERIVSGIXPROC) (unsigned int pname, void* params);
typedef void (* ROGL_PFNGLTAGSAMPLEBUFFERSGIXPROC) (void);
typedef void (* ROGL_PFNGLCOLORTABLESGIPROC) (unsigned int target, unsigned int internalformat, int width, unsigned int format, unsigned int type, void* table);
typedef void (* ROGL_PFNGLCOLORTABLEPARAMETERFVSGIPROC) (unsigned int target, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLCOLORTABLEPARAMETERIVSGIPROC) (unsigned int target, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLCOPYCOLORTABLESGIPROC) (unsigned int target, unsigned int internalformat, int x, int y, int width);
typedef void (* ROGL_PFNGLGETCOLORTABLESGIPROC) (unsigned int target, unsigned int format, unsigned int type, void* table);
typedef void (* ROGL_PFNGLGETCOLORTABLEPARAMETERFVSGIPROC) (unsigned int target, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLGETCOLORTABLEPARAMETERIVSGIPROC) (unsigned int target, unsigned int pname, void* params);
typedef void (* ROGL_PFNGLFINISHTEXTURESUNXPROC) (void);
typedef void (* ROGL_PFNGLGLOBALALPHAFACTORBSUNPROC) (char factor);
typedef void (* ROGL_PFNGLGLOBALALPHAFACTORSSUNPROC) (short factor);
typedef void (* ROGL_PFNGLGLOBALALPHAFACTORISUNPROC) (int factor);
typedef void (* ROGL_PFNGLGLOBALALPHAFACTORFSUNPROC) (float factor);
typedef void (* ROGL_PFNGLGLOBALALPHAFACTORDSUNPROC) (double factor);
typedef void (* ROGL_PFNGLGLOBALALPHAFACTORUBSUNPROC) (unsigned char factor);
typedef void (* ROGL_PFNGLGLOBALALPHAFACTORUSSUNPROC) (unsigned short factor);
typedef void (* ROGL_PFNGLGLOBALALPHAFACTORUISUNPROC) (unsigned int factor);
typedef void (* ROGL_PFNGLDRAWMESHARRAYSSUNPROC) (unsigned int mode, int first, int count, int width);
typedef void (* ROGL_PFNGLREPLACEMENTCODEUISUNPROC) (unsigned int code);
typedef void (* ROGL_PFNGLREPLACEMENTCODEUSSUNPROC) (unsigned short code);
typedef void (* ROGL_PFNGLREPLACEMENTCODEUBSUNPROC) (unsigned char code);
typedef void (* ROGL_PFNGLREPLACEMENTCODEUIVSUNPROC) (void* code);
typedef void (* ROGL_PFNGLREPLACEMENTCODEUSVSUNPROC) (void* code);
typedef void (* ROGL_PFNGLREPLACEMENTCODEUBVSUNPROC) (void* code);
typedef void (* ROGL_PFNGLREPLACEMENTCODEPOINTERSUNPROC) (unsigned int type, int stride, void* pointer);
typedef void (* ROGL_PFNGLCOLOR4UBVERTEX2FSUNPROC) (unsigned char r, unsigned char g, unsigned char b, unsigned char a, float x, float y);
typedef void (* ROGL_PFNGLCOLOR4UBVERTEX2FVSUNPROC) (void* c, void* v);
typedef void (* ROGL_PFNGLCOLOR4UBVERTEX3FSUNPROC) (unsigned char r, unsigned char g, unsigned char b, unsigned char a, float x, float y, float z);
typedef void (* ROGL_PFNGLCOLOR4UBVERTEX3FVSUNPROC) (void* c, void* v);
typedef void (* ROGL_PFNGLCOLOR3FVERTEX3FSUNPROC) (float r, float g, float b, float x, float y, float z);
typedef void (* ROGL_PFNGLCOLOR3FVERTEX3FVSUNPROC) (void* c, void* v);
typedef void (* ROGL_PFNGLNORMAL3FVERTEX3FSUNPROC) (float nx, float ny, float nz, float x, float y, float z);
typedef void (* ROGL_PFNGLNORMAL3FVERTEX3FVSUNPROC) (void* n, void* v);
typedef void (* ROGL_PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC) (float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z);
typedef void (* ROGL_PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC) (void* c, void* n, void* v);
typedef void (* ROGL_PFNGLTEXCOORD2FVERTEX3FSUNPROC) (float s, float t, float x, float y, float z);
typedef void (* ROGL_PFNGLTEXCOORD2FVERTEX3FVSUNPROC) (void* tc, void* v);
typedef void (* ROGL_PFNGLTEXCOORD4FVERTEX4FSUNPROC) (float s, float t, float p, float q, float x, float y, float z, float w);
typedef void (* ROGL_PFNGLTEXCOORD4FVERTEX4FVSUNPROC) (void* tc, void* v);
typedef void (* ROGL_PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC) (float s, float t, unsigned char r, unsigned char g, unsigned char b, unsigned char a, float x, float y, float z);
typedef void (* ROGL_PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC) (void* tc, void* c, void* v);
typedef void (* ROGL_PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC) (float s, float t, float r, float g, float b, float x, float y, float z);
typedef void (* ROGL_PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC) (void* tc, void* c, void* v);
typedef void (* ROGL_PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC) (float s, float t, float nx, float ny, float nz, float x, float y, float z);
typedef void (* ROGL_PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC) (void* tc, void* n, void* v);
typedef void (* ROGL_PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC) (float s, float t, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z);
typedef void (* ROGL_PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC) (void* tc, void* c, void* n, void* v);
typedef void (* ROGL_PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC) (float s, float t, float p, float q, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z, float w);
typedef void (* ROGL_PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC) (void* tc, void* c, void* n, void* v);
typedef void (* ROGL_PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC) (unsigned int rc, float x, float y, float z);
typedef void (* ROGL_PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC) (void* rc, void* v);
typedef void (* ROGL_PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC) (unsigned int rc, unsigned char r, unsigned char g, unsigned char b, unsigned char a, float x, float y, float z);
typedef void (* ROGL_PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC) (void* rc, void* c, void* v);
typedef void (* ROGL_PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC) (unsigned int rc, float r, float g, float b, float x, float y, float z);
typedef void (* ROGL_PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC) (void* rc, void* c, void* v);
typedef void (* ROGL_PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC) (unsigned int rc, float nx, float ny, float nz, float x, float y, float z);
typedef void (* ROGL_PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC) (void* rc, void* n, void* v);
typedef void (* ROGL_PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC) (unsigned int rc, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z);
typedef void (* ROGL_PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC) (void* rc, void* c, void* n, void* v);
typedef void (* ROGL_PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC) (unsigned int rc, float s, float t, float x, float y, float z);
typedef void (* ROGL_PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC) (void* rc, void* tc, void* v);
typedef void (* ROGL_PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC) (unsigned int rc, float s, float t, float nx, float ny, float nz, float x, float y, float z);
typedef void (* ROGL_PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC) (void* rc, void* tc, void* n, void* v);
typedef void (* ROGL_PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC) (unsigned int rc, float s, float t, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z);
typedef void (* ROGL_PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC) (void* rc, void* tc, void* c, void* n, void* v);

static ROGL_PFNGLTBUFFERMASK3DFXPROC rogl_pfn_glTbufferMask3DFX = NULL;
static ROGL_PFNGLDEBUGMESSAGEENABLEAMDPROC rogl_pfn_glDebugMessageEnableAMD = NULL;
static ROGL_PFNGLDEBUGMESSAGEINSERTAMDPROC rogl_pfn_glDebugMessageInsertAMD = NULL;
static ROGL_PFNGLDEBUGMESSAGECALLBACKAMDPROC rogl_pfn_glDebugMessageCallbackAMD = NULL;
static ROGL_PFNGLGETDEBUGMESSAGELOGAMDPROC rogl_pfn_glGetDebugMessageLogAMD = NULL;
static ROGL_PFNGLBLENDFUNCINDEXEDAMDPROC rogl_pfn_glBlendFuncIndexedAMD = NULL;
static ROGL_PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC rogl_pfn_glBlendFuncSeparateIndexedAMD = NULL;
static ROGL_PFNGLBLENDEQUATIONINDEXEDAMDPROC rogl_pfn_glBlendEquationIndexedAMD = NULL;
static ROGL_PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC rogl_pfn_glBlendEquationSeparateIndexedAMD = NULL;
static ROGL_PFNGLVERTEXATTRIBPARAMETERIAMDPROC rogl_pfn_glVertexAttribParameteriAMD = NULL;
static ROGL_PFNGLMULTIDRAWARRAYSINDIRECTAMDPROC rogl_pfn_glMultiDrawArraysIndirectAMD = NULL;
static ROGL_PFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC rogl_pfn_glMultiDrawElementsIndirectAMD = NULL;
static ROGL_PFNGLGENNAMESAMDPROC rogl_pfn_glGenNamesAMD = NULL;
static ROGL_PFNGLDELETENAMESAMDPROC rogl_pfn_glDeleteNamesAMD = NULL;
static ROGL_PFNGLISNAMEAMDPROC rogl_pfn_glIsNameAMD = NULL;
static ROGL_PFNGLQUERYOBJECTPARAMETERUIAMDPROC rogl_pfn_glQueryObjectParameteruiAMD = NULL;
static ROGL_PFNGLGETPERFMONITORGROUPSAMDPROC rogl_pfn_glGetPerfMonitorGroupsAMD = NULL;
static ROGL_PFNGLGETPERFMONITORCOUNTERSAMDPROC rogl_pfn_glGetPerfMonitorCountersAMD = NULL;
static ROGL_PFNGLGETPERFMONITORGROUPSTRINGAMDPROC rogl_pfn_glGetPerfMonitorGroupStringAMD = NULL;
static ROGL_PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC rogl_pfn_glGetPerfMonitorCounterStringAMD = NULL;
static ROGL_PFNGLGETPERFMONITORCOUNTERINFOAMDPROC rogl_pfn_glGetPerfMonitorCounterInfoAMD = NULL;
static ROGL_PFNGLGENPERFMONITORSAMDPROC rogl_pfn_glGenPerfMonitorsAMD = NULL;
static ROGL_PFNGLDELETEPERFMONITORSAMDPROC rogl_pfn_glDeletePerfMonitorsAMD = NULL;
static ROGL_PFNGLSELECTPERFMONITORCOUNTERSAMDPROC rogl_pfn_glSelectPerfMonitorCountersAMD = NULL;
static ROGL_PFNGLBEGINPERFMONITORAMDPROC rogl_pfn_glBeginPerfMonitorAMD = NULL;
static ROGL_PFNGLENDPERFMONITORAMDPROC rogl_pfn_glEndPerfMonitorAMD = NULL;
static ROGL_PFNGLGETPERFMONITORCOUNTERDATAAMDPROC rogl_pfn_glGetPerfMonitorCounterDataAMD = NULL;
static ROGL_PFNGLSETMULTISAMPLEFVAMDPROC rogl_pfn_glSetMultisamplefvAMD = NULL;
static ROGL_PFNGLTEXSTORAGESPARSEAMDPROC rogl_pfn_glTexStorageSparseAMD = NULL;
static ROGL_PFNGLTEXTURESTORAGESPARSEAMDPROC rogl_pfn_glTextureStorageSparseAMD = NULL;
static ROGL_PFNGLSTENCILOPVALUEAMDPROC rogl_pfn_glStencilOpValueAMD = NULL;
static ROGL_PFNGLTESSELLATIONFACTORAMDPROC rogl_pfn_glTessellationFactorAMD = NULL;
static ROGL_PFNGLTESSELLATIONMODEAMDPROC rogl_pfn_glTessellationModeAMD = NULL;
static ROGL_PFNGLELEMENTPOINTERAPPLEPROC rogl_pfn_glElementPointerAPPLE = NULL;
static ROGL_PFNGLDRAWELEMENTARRAYAPPLEPROC rogl_pfn_glDrawElementArrayAPPLE = NULL;
static ROGL_PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC rogl_pfn_glDrawRangeElementArrayAPPLE = NULL;
static ROGL_PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC rogl_pfn_glMultiDrawElementArrayAPPLE = NULL;
static ROGL_PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC rogl_pfn_glMultiDrawRangeElementArrayAPPLE = NULL;
static ROGL_PFNGLGENFENCESAPPLEPROC rogl_pfn_glGenFencesAPPLE = NULL;
static ROGL_PFNGLDELETEFENCESAPPLEPROC rogl_pfn_glDeleteFencesAPPLE = NULL;
static ROGL_PFNGLSETFENCEAPPLEPROC rogl_pfn_glSetFenceAPPLE = NULL;
static ROGL_PFNGLISFENCEAPPLEPROC rogl_pfn_glIsFenceAPPLE = NULL;
static ROGL_PFNGLTESTFENCEAPPLEPROC rogl_pfn_glTestFenceAPPLE = NULL;
static ROGL_PFNGLFINISHFENCEAPPLEPROC rogl_pfn_glFinishFenceAPPLE = NULL;
static ROGL_PFNGLTESTOBJECTAPPLEPROC rogl_pfn_glTestObjectAPPLE = NULL;
static ROGL_PFNGLFINISHOBJECTAPPLEPROC rogl_pfn_glFinishObjectAPPLE = NULL;
static ROGL_PFNGLBUFFERPARAMETERIAPPLEPROC rogl_pfn_glBufferParameteriAPPLE = NULL;
static ROGL_PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC rogl_pfn_glFlushMappedBufferRangeAPPLE = NULL;
static ROGL_PFNGLOBJECTPURGEABLEAPPLEPROC rogl_pfn_glObjectPurgeableAPPLE = NULL;
static ROGL_PFNGLOBJECTUNPURGEABLEAPPLEPROC rogl_pfn_glObjectUnpurgeableAPPLE = NULL;
static ROGL_PFNGLGETOBJECTPARAMETERIVAPPLEPROC rogl_pfn_glGetObjectParameterivAPPLE = NULL;
static ROGL_PFNGLTEXTURERANGEAPPLEPROC rogl_pfn_glTextureRangeAPPLE = NULL;
static ROGL_PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC rogl_pfn_glGetTexParameterPointervAPPLE = NULL;
static ROGL_PFNGLBINDVERTEXARRAYAPPLEPROC rogl_pfn_glBindVertexArrayAPPLE = NULL;
static ROGL_PFNGLDELETEVERTEXARRAYSAPPLEPROC rogl_pfn_glDeleteVertexArraysAPPLE = NULL;
static ROGL_PFNGLGENVERTEXARRAYSAPPLEPROC rogl_pfn_glGenVertexArraysAPPLE = NULL;
static ROGL_PFNGLISVERTEXARRAYAPPLEPROC rogl_pfn_glIsVertexArrayAPPLE = NULL;
static ROGL_PFNGLVERTEXARRAYRANGEAPPLEPROC rogl_pfn_glVertexArrayRangeAPPLE = NULL;
static ROGL_PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC rogl_pfn_glFlushVertexArrayRangeAPPLE = NULL;
static ROGL_PFNGLVERTEXARRAYPARAMETERIAPPLEPROC rogl_pfn_glVertexArrayParameteriAPPLE = NULL;
static ROGL_PFNGLENABLEVERTEXATTRIBAPPLEPROC rogl_pfn_glEnableVertexAttribAPPLE = NULL;
static ROGL_PFNGLDISABLEVERTEXATTRIBAPPLEPROC rogl_pfn_glDisableVertexAttribAPPLE = NULL;
static ROGL_PFNGLISVERTEXATTRIBENABLEDAPPLEPROC rogl_pfn_glIsVertexAttribEnabledAPPLE = NULL;
static ROGL_PFNGLMAPVERTEXATTRIB1DAPPLEPROC rogl_pfn_glMapVertexAttrib1dAPPLE = NULL;
static ROGL_PFNGLMAPVERTEXATTRIB1FAPPLEPROC rogl_pfn_glMapVertexAttrib1fAPPLE = NULL;
static ROGL_PFNGLMAPVERTEXATTRIB2DAPPLEPROC rogl_pfn_glMapVertexAttrib2dAPPLE = NULL;
static ROGL_PFNGLMAPVERTEXATTRIB2FAPPLEPROC rogl_pfn_glMapVertexAttrib2fAPPLE = NULL;
static ROGL_PFNGLPRIMITIVEBOUNDINGBOXARBPROC rogl_pfn_glPrimitiveBoundingBoxARB = NULL;
static ROGL_PFNGLGETTEXTUREHANDLEARBPROC rogl_pfn_glGetTextureHandleARB = NULL;
static ROGL_PFNGLGETTEXTURESAMPLERHANDLEARBPROC rogl_pfn_glGetTextureSamplerHandleARB = NULL;
static ROGL_PFNGLMAKETEXTUREHANDLERESIDENTARBPROC rogl_pfn_glMakeTextureHandleResidentARB = NULL;
static ROGL_PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC rogl_pfn_glMakeTextureHandleNonResidentARB = NULL;
static ROGL_PFNGLGETIMAGEHANDLEARBPROC rogl_pfn_glGetImageHandleARB = NULL;
static ROGL_PFNGLMAKEIMAGEHANDLERESIDENTARBPROC rogl_pfn_glMakeImageHandleResidentARB = NULL;
static ROGL_PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC rogl_pfn_glMakeImageHandleNonResidentARB = NULL;
static ROGL_PFNGLUNIFORMHANDLEUI64ARBPROC rogl_pfn_glUniformHandleui64ARB = NULL;
static ROGL_PFNGLUNIFORMHANDLEUI64VARBPROC rogl_pfn_glUniformHandleui64vARB = NULL;
static ROGL_PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC rogl_pfn_glProgramUniformHandleui64ARB = NULL;
static ROGL_PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC rogl_pfn_glProgramUniformHandleui64vARB = NULL;
static ROGL_PFNGLISTEXTUREHANDLERESIDENTARBPROC rogl_pfn_glIsTextureHandleResidentARB = NULL;
static ROGL_PFNGLISIMAGEHANDLERESIDENTARBPROC rogl_pfn_glIsImageHandleResidentARB = NULL;
static ROGL_PFNGLVERTEXATTRIBL1UI64ARBPROC rogl_pfn_glVertexAttribL1ui64ARB = NULL;
static ROGL_PFNGLVERTEXATTRIBL1UI64VARBPROC rogl_pfn_glVertexAttribL1ui64vARB = NULL;
static ROGL_PFNGLGETVERTEXATTRIBLUI64VARBPROC rogl_pfn_glGetVertexAttribLui64vARB = NULL;
static ROGL_PFNGLCREATESYNCFROMCLEVENTARBPROC rogl_pfn_glCreateSyncFromCLeventARB = NULL;
static ROGL_PFNGLCLAMPCOLORARBPROC rogl_pfn_glClampColorARB = NULL;
static ROGL_PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC rogl_pfn_glDispatchComputeGroupSizeARB = NULL;
static ROGL_PFNGLDEBUGMESSAGECONTROLARBPROC rogl_pfn_glDebugMessageControlARB = NULL;
static ROGL_PFNGLDEBUGMESSAGEINSERTARBPROC rogl_pfn_glDebugMessageInsertARB = NULL;
static ROGL_PFNGLDEBUGMESSAGECALLBACKARBPROC rogl_pfn_glDebugMessageCallbackARB = NULL;
static ROGL_PFNGLGETDEBUGMESSAGELOGARBPROC rogl_pfn_glGetDebugMessageLogARB = NULL;
static ROGL_PFNGLDRAWBUFFERSARBPROC rogl_pfn_glDrawBuffersARB = NULL;
static ROGL_PFNGLBLENDEQUATIONIARBPROC rogl_pfn_glBlendEquationiARB = NULL;
static ROGL_PFNGLBLENDEQUATIONSEPARATEIARBPROC rogl_pfn_glBlendEquationSeparateiARB = NULL;
static ROGL_PFNGLBLENDFUNCIARBPROC rogl_pfn_glBlendFunciARB = NULL;
static ROGL_PFNGLBLENDFUNCSEPARATEIARBPROC rogl_pfn_glBlendFuncSeparateiARB = NULL;
static ROGL_PFNGLDRAWARRAYSINSTANCEDARBPROC rogl_pfn_glDrawArraysInstancedARB = NULL;
static ROGL_PFNGLDRAWELEMENTSINSTANCEDARBPROC rogl_pfn_glDrawElementsInstancedARB = NULL;
static ROGL_PFNGLPROGRAMPARAMETERIARBPROC rogl_pfn_glProgramParameteriARB = NULL;
static ROGL_PFNGLFRAMEBUFFERTEXTUREARBPROC rogl_pfn_glFramebufferTextureARB = NULL;
static ROGL_PFNGLFRAMEBUFFERTEXTURELAYERARBPROC rogl_pfn_glFramebufferTextureLayerARB = NULL;
static ROGL_PFNGLFRAMEBUFFERTEXTUREFACEARBPROC rogl_pfn_glFramebufferTextureFaceARB = NULL;
static ROGL_PFNGLUNIFORM1I64ARBPROC rogl_pfn_glUniform1i64ARB = NULL;
static ROGL_PFNGLUNIFORM2I64ARBPROC rogl_pfn_glUniform2i64ARB = NULL;
static ROGL_PFNGLUNIFORM3I64ARBPROC rogl_pfn_glUniform3i64ARB = NULL;
static ROGL_PFNGLUNIFORM4I64ARBPROC rogl_pfn_glUniform4i64ARB = NULL;
static ROGL_PFNGLUNIFORM1I64VARBPROC rogl_pfn_glUniform1i64vARB = NULL;
static ROGL_PFNGLUNIFORM2I64VARBPROC rogl_pfn_glUniform2i64vARB = NULL;
static ROGL_PFNGLUNIFORM3I64VARBPROC rogl_pfn_glUniform3i64vARB = NULL;
static ROGL_PFNGLUNIFORM4I64VARBPROC rogl_pfn_glUniform4i64vARB = NULL;
static ROGL_PFNGLUNIFORM1UI64ARBPROC rogl_pfn_glUniform1ui64ARB = NULL;
static ROGL_PFNGLUNIFORM2UI64ARBPROC rogl_pfn_glUniform2ui64ARB = NULL;
static ROGL_PFNGLUNIFORM3UI64ARBPROC rogl_pfn_glUniform3ui64ARB = NULL;
static ROGL_PFNGLUNIFORM4UI64ARBPROC rogl_pfn_glUniform4ui64ARB = NULL;
static ROGL_PFNGLUNIFORM1UI64VARBPROC rogl_pfn_glUniform1ui64vARB = NULL;
static ROGL_PFNGLUNIFORM2UI64VARBPROC rogl_pfn_glUniform2ui64vARB = NULL;
static ROGL_PFNGLUNIFORM3UI64VARBPROC rogl_pfn_glUniform3ui64vARB = NULL;
static ROGL_PFNGLUNIFORM4UI64VARBPROC rogl_pfn_glUniform4ui64vARB = NULL;
static ROGL_PFNGLGETUNIFORMI64VARBPROC rogl_pfn_glGetUniformi64vARB = NULL;
static ROGL_PFNGLGETUNIFORMUI64VARBPROC rogl_pfn_glGetUniformui64vARB = NULL;
static ROGL_PFNGLGETNUNIFORMI64VARBPROC rogl_pfn_glGetnUniformi64vARB = NULL;
static ROGL_PFNGLGETNUNIFORMUI64VARBPROC rogl_pfn_glGetnUniformui64vARB = NULL;
static ROGL_PFNGLPROGRAMUNIFORM1I64ARBPROC rogl_pfn_glProgramUniform1i64ARB = NULL;
static ROGL_PFNGLPROGRAMUNIFORM2I64ARBPROC rogl_pfn_glProgramUniform2i64ARB = NULL;
static ROGL_PFNGLPROGRAMUNIFORM3I64ARBPROC rogl_pfn_glProgramUniform3i64ARB = NULL;
static ROGL_PFNGLPROGRAMUNIFORM4I64ARBPROC rogl_pfn_glProgramUniform4i64ARB = NULL;
static ROGL_PFNGLPROGRAMUNIFORM1I64VARBPROC rogl_pfn_glProgramUniform1i64vARB = NULL;
static ROGL_PFNGLPROGRAMUNIFORM2I64VARBPROC rogl_pfn_glProgramUniform2i64vARB = NULL;
static ROGL_PFNGLPROGRAMUNIFORM3I64VARBPROC rogl_pfn_glProgramUniform3i64vARB = NULL;
static ROGL_PFNGLPROGRAMUNIFORM4I64VARBPROC rogl_pfn_glProgramUniform4i64vARB = NULL;
static ROGL_PFNGLPROGRAMUNIFORM1UI64ARBPROC rogl_pfn_glProgramUniform1ui64ARB = NULL;
static ROGL_PFNGLPROGRAMUNIFORM2UI64ARBPROC rogl_pfn_glProgramUniform2ui64ARB = NULL;
static ROGL_PFNGLPROGRAMUNIFORM3UI64ARBPROC rogl_pfn_glProgramUniform3ui64ARB = NULL;
static ROGL_PFNGLPROGRAMUNIFORM4UI64ARBPROC rogl_pfn_glProgramUniform4ui64ARB = NULL;
static ROGL_PFNGLPROGRAMUNIFORM1UI64VARBPROC rogl_pfn_glProgramUniform1ui64vARB = NULL;
static ROGL_PFNGLPROGRAMUNIFORM2UI64VARBPROC rogl_pfn_glProgramUniform2ui64vARB = NULL;
static ROGL_PFNGLPROGRAMUNIFORM3UI64VARBPROC rogl_pfn_glProgramUniform3ui64vARB = NULL;
static ROGL_PFNGLPROGRAMUNIFORM4UI64VARBPROC rogl_pfn_glProgramUniform4ui64vARB = NULL;
static ROGL_PFNGLCOLORTABLEPROC rogl_pfn_glColorTable = NULL;
static ROGL_PFNGLCOLORTABLEPARAMETERFVPROC rogl_pfn_glColorTableParameterfv = NULL;
static ROGL_PFNGLCOLORTABLEPARAMETERIVPROC rogl_pfn_glColorTableParameteriv = NULL;
static ROGL_PFNGLCOPYCOLORTABLEPROC rogl_pfn_glCopyColorTable = NULL;
static ROGL_PFNGLGETCOLORTABLEPROC rogl_pfn_glGetColorTable = NULL;
static ROGL_PFNGLGETCOLORTABLEPARAMETERFVPROC rogl_pfn_glGetColorTableParameterfv = NULL;
static ROGL_PFNGLGETCOLORTABLEPARAMETERIVPROC rogl_pfn_glGetColorTableParameteriv = NULL;
static ROGL_PFNGLCOLORSUBTABLEPROC rogl_pfn_glColorSubTable = NULL;
static ROGL_PFNGLCOPYCOLORSUBTABLEPROC rogl_pfn_glCopyColorSubTable = NULL;
static ROGL_PFNGLCONVOLUTIONFILTER1DPROC rogl_pfn_glConvolutionFilter1D = NULL;
static ROGL_PFNGLCONVOLUTIONFILTER2DPROC rogl_pfn_glConvolutionFilter2D = NULL;
static ROGL_PFNGLCONVOLUTIONPARAMETERFPROC rogl_pfn_glConvolutionParameterf = NULL;
static ROGL_PFNGLCONVOLUTIONPARAMETERFVPROC rogl_pfn_glConvolutionParameterfv = NULL;
static ROGL_PFNGLCONVOLUTIONPARAMETERIPROC rogl_pfn_glConvolutionParameteri = NULL;
static ROGL_PFNGLCONVOLUTIONPARAMETERIVPROC rogl_pfn_glConvolutionParameteriv = NULL;
static ROGL_PFNGLCOPYCONVOLUTIONFILTER1DPROC rogl_pfn_glCopyConvolutionFilter1D = NULL;
static ROGL_PFNGLCOPYCONVOLUTIONFILTER2DPROC rogl_pfn_glCopyConvolutionFilter2D = NULL;
static ROGL_PFNGLGETCONVOLUTIONFILTERPROC rogl_pfn_glGetConvolutionFilter = NULL;
static ROGL_PFNGLGETCONVOLUTIONPARAMETERFVPROC rogl_pfn_glGetConvolutionParameterfv = NULL;
static ROGL_PFNGLGETCONVOLUTIONPARAMETERIVPROC rogl_pfn_glGetConvolutionParameteriv = NULL;
static ROGL_PFNGLGETSEPARABLEFILTERPROC rogl_pfn_glGetSeparableFilter = NULL;
static ROGL_PFNGLSEPARABLEFILTER2DPROC rogl_pfn_glSeparableFilter2D = NULL;
static ROGL_PFNGLGETHISTOGRAMPROC rogl_pfn_glGetHistogram = NULL;
static ROGL_PFNGLGETHISTOGRAMPARAMETERFVPROC rogl_pfn_glGetHistogramParameterfv = NULL;
static ROGL_PFNGLGETHISTOGRAMPARAMETERIVPROC rogl_pfn_glGetHistogramParameteriv = NULL;
static ROGL_PFNGLGETMINMAXPROC rogl_pfn_glGetMinmax = NULL;
static ROGL_PFNGLGETMINMAXPARAMETERFVPROC rogl_pfn_glGetMinmaxParameterfv = NULL;
static ROGL_PFNGLGETMINMAXPARAMETERIVPROC rogl_pfn_glGetMinmaxParameteriv = NULL;
static ROGL_PFNGLHISTOGRAMPROC rogl_pfn_glHistogram = NULL;
static ROGL_PFNGLMINMAXPROC rogl_pfn_glMinmax = NULL;
static ROGL_PFNGLRESETHISTOGRAMPROC rogl_pfn_glResetHistogram = NULL;
static ROGL_PFNGLRESETMINMAXPROC rogl_pfn_glResetMinmax = NULL;
static ROGL_PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC rogl_pfn_glMultiDrawArraysIndirectCountARB = NULL;
static ROGL_PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC rogl_pfn_glMultiDrawElementsIndirectCountARB = NULL;
static ROGL_PFNGLVERTEXATTRIBDIVISORARBPROC rogl_pfn_glVertexAttribDivisorARB = NULL;
static ROGL_PFNGLCURRENTPALETTEMATRIXARBPROC rogl_pfn_glCurrentPaletteMatrixARB = NULL;
static ROGL_PFNGLMATRIXINDEXUBVARBPROC rogl_pfn_glMatrixIndexubvARB = NULL;
static ROGL_PFNGLMATRIXINDEXUSVARBPROC rogl_pfn_glMatrixIndexusvARB = NULL;
static ROGL_PFNGLMATRIXINDEXUIVARBPROC rogl_pfn_glMatrixIndexuivARB = NULL;
static ROGL_PFNGLMATRIXINDEXPOINTERARBPROC rogl_pfn_glMatrixIndexPointerARB = NULL;
static ROGL_PFNGLSAMPLECOVERAGEARBPROC rogl_pfn_glSampleCoverageARB = NULL;
static ROGL_PFNGLACTIVETEXTUREARBPROC rogl_pfn_glActiveTextureARB = NULL;
static ROGL_PFNGLCLIENTACTIVETEXTUREARBPROC rogl_pfn_glClientActiveTextureARB = NULL;
static ROGL_PFNGLMULTITEXCOORD1DARBPROC rogl_pfn_glMultiTexCoord1dARB = NULL;
static ROGL_PFNGLMULTITEXCOORD1DVARBPROC rogl_pfn_glMultiTexCoord1dvARB = NULL;
static ROGL_PFNGLMULTITEXCOORD1FARBPROC rogl_pfn_glMultiTexCoord1fARB = NULL;
static ROGL_PFNGLMULTITEXCOORD1FVARBPROC rogl_pfn_glMultiTexCoord1fvARB = NULL;
static ROGL_PFNGLMULTITEXCOORD1IARBPROC rogl_pfn_glMultiTexCoord1iARB = NULL;
static ROGL_PFNGLMULTITEXCOORD1IVARBPROC rogl_pfn_glMultiTexCoord1ivARB = NULL;
static ROGL_PFNGLMULTITEXCOORD1SARBPROC rogl_pfn_glMultiTexCoord1sARB = NULL;
static ROGL_PFNGLMULTITEXCOORD1SVARBPROC rogl_pfn_glMultiTexCoord1svARB = NULL;
static ROGL_PFNGLMULTITEXCOORD2DARBPROC rogl_pfn_glMultiTexCoord2dARB = NULL;
static ROGL_PFNGLMULTITEXCOORD2DVARBPROC rogl_pfn_glMultiTexCoord2dvARB = NULL;
static ROGL_PFNGLMULTITEXCOORD2FARBPROC rogl_pfn_glMultiTexCoord2fARB = NULL;
static ROGL_PFNGLMULTITEXCOORD2FVARBPROC rogl_pfn_glMultiTexCoord2fvARB = NULL;
static ROGL_PFNGLMULTITEXCOORD2IARBPROC rogl_pfn_glMultiTexCoord2iARB = NULL;
static ROGL_PFNGLMULTITEXCOORD2IVARBPROC rogl_pfn_glMultiTexCoord2ivARB = NULL;
static ROGL_PFNGLMULTITEXCOORD2SARBPROC rogl_pfn_glMultiTexCoord2sARB = NULL;
static ROGL_PFNGLMULTITEXCOORD2SVARBPROC rogl_pfn_glMultiTexCoord2svARB = NULL;
static ROGL_PFNGLMULTITEXCOORD3DARBPROC rogl_pfn_glMultiTexCoord3dARB = NULL;
static ROGL_PFNGLMULTITEXCOORD3DVARBPROC rogl_pfn_glMultiTexCoord3dvARB = NULL;
static ROGL_PFNGLMULTITEXCOORD3FARBPROC rogl_pfn_glMultiTexCoord3fARB = NULL;
static ROGL_PFNGLMULTITEXCOORD3FVARBPROC rogl_pfn_glMultiTexCoord3fvARB = NULL;
static ROGL_PFNGLMULTITEXCOORD3IARBPROC rogl_pfn_glMultiTexCoord3iARB = NULL;
static ROGL_PFNGLMULTITEXCOORD3IVARBPROC rogl_pfn_glMultiTexCoord3ivARB = NULL;
static ROGL_PFNGLMULTITEXCOORD3SARBPROC rogl_pfn_glMultiTexCoord3sARB = NULL;
static ROGL_PFNGLMULTITEXCOORD3SVARBPROC rogl_pfn_glMultiTexCoord3svARB = NULL;
static ROGL_PFNGLMULTITEXCOORD4DARBPROC rogl_pfn_glMultiTexCoord4dARB = NULL;
static ROGL_PFNGLMULTITEXCOORD4DVARBPROC rogl_pfn_glMultiTexCoord4dvARB = NULL;
static ROGL_PFNGLMULTITEXCOORD4FARBPROC rogl_pfn_glMultiTexCoord4fARB = NULL;
static ROGL_PFNGLMULTITEXCOORD4FVARBPROC rogl_pfn_glMultiTexCoord4fvARB = NULL;
static ROGL_PFNGLMULTITEXCOORD4IARBPROC rogl_pfn_glMultiTexCoord4iARB = NULL;
static ROGL_PFNGLMULTITEXCOORD4IVARBPROC rogl_pfn_glMultiTexCoord4ivARB = NULL;
static ROGL_PFNGLMULTITEXCOORD4SARBPROC rogl_pfn_glMultiTexCoord4sARB = NULL;
static ROGL_PFNGLMULTITEXCOORD4SVARBPROC rogl_pfn_glMultiTexCoord4svARB = NULL;
static ROGL_PFNGLGENQUERIESARBPROC rogl_pfn_glGenQueriesARB = NULL;
static ROGL_PFNGLDELETEQUERIESARBPROC rogl_pfn_glDeleteQueriesARB = NULL;
static ROGL_PFNGLISQUERYARBPROC rogl_pfn_glIsQueryARB = NULL;
static ROGL_PFNGLBEGINQUERYARBPROC rogl_pfn_glBeginQueryARB = NULL;
static ROGL_PFNGLENDQUERYARBPROC rogl_pfn_glEndQueryARB = NULL;
static ROGL_PFNGLGETQUERYIVARBPROC rogl_pfn_glGetQueryivARB = NULL;
static ROGL_PFNGLGETQUERYOBJECTIVARBPROC rogl_pfn_glGetQueryObjectivARB = NULL;
static ROGL_PFNGLGETQUERYOBJECTUIVARBPROC rogl_pfn_glGetQueryObjectuivARB = NULL;
static ROGL_PFNGLMAXSHADERCOMPILERTHREADSARBPROC rogl_pfn_glMaxShaderCompilerThreadsARB = NULL;
static ROGL_PFNGLPOINTPARAMETERFARBPROC rogl_pfn_glPointParameterfARB = NULL;
static ROGL_PFNGLPOINTPARAMETERFVARBPROC rogl_pfn_glPointParameterfvARB = NULL;
static ROGL_PFNGLGETGRAPHICSRESETSTATUSARBPROC rogl_pfn_glGetGraphicsResetStatusARB = NULL;
static ROGL_PFNGLGETNTEXIMAGEARBPROC rogl_pfn_glGetnTexImageARB = NULL;
static ROGL_PFNGLREADNPIXELSARBPROC rogl_pfn_glReadnPixelsARB = NULL;
static ROGL_PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC rogl_pfn_glGetnCompressedTexImageARB = NULL;
static ROGL_PFNGLGETNUNIFORMFVARBPROC rogl_pfn_glGetnUniformfvARB = NULL;
static ROGL_PFNGLGETNUNIFORMIVARBPROC rogl_pfn_glGetnUniformivARB = NULL;
static ROGL_PFNGLGETNUNIFORMUIVARBPROC rogl_pfn_glGetnUniformuivARB = NULL;
static ROGL_PFNGLGETNUNIFORMDVARBPROC rogl_pfn_glGetnUniformdvARB = NULL;
static ROGL_PFNGLGETNMAPDVARBPROC rogl_pfn_glGetnMapdvARB = NULL;
static ROGL_PFNGLGETNMAPFVARBPROC rogl_pfn_glGetnMapfvARB = NULL;
static ROGL_PFNGLGETNMAPIVARBPROC rogl_pfn_glGetnMapivARB = NULL;
static ROGL_PFNGLGETNPIXELMAPFVARBPROC rogl_pfn_glGetnPixelMapfvARB = NULL;
static ROGL_PFNGLGETNPIXELMAPUIVARBPROC rogl_pfn_glGetnPixelMapuivARB = NULL;
static ROGL_PFNGLGETNPIXELMAPUSVARBPROC rogl_pfn_glGetnPixelMapusvARB = NULL;
static ROGL_PFNGLGETNPOLYGONSTIPPLEARBPROC rogl_pfn_glGetnPolygonStippleARB = NULL;
static ROGL_PFNGLGETNCOLORTABLEARBPROC rogl_pfn_glGetnColorTableARB = NULL;
static ROGL_PFNGLGETNCONVOLUTIONFILTERARBPROC rogl_pfn_glGetnConvolutionFilterARB = NULL;
static ROGL_PFNGLGETNSEPARABLEFILTERARBPROC rogl_pfn_glGetnSeparableFilterARB = NULL;
static ROGL_PFNGLGETNHISTOGRAMARBPROC rogl_pfn_glGetnHistogramARB = NULL;
static ROGL_PFNGLGETNMINMAXARBPROC rogl_pfn_glGetnMinmaxARB = NULL;
static ROGL_PFNGLFRAMEBUFFERSAMPLELOCATIONSFVARBPROC rogl_pfn_glFramebufferSampleLocationsfvARB = NULL;
static ROGL_PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVARBPROC rogl_pfn_glNamedFramebufferSampleLocationsfvARB = NULL;
static ROGL_PFNGLEVALUATEDEPTHVALUESARBPROC rogl_pfn_glEvaluateDepthValuesARB = NULL;
static ROGL_PFNGLMINSAMPLESHADINGARBPROC rogl_pfn_glMinSampleShadingARB = NULL;
static ROGL_PFNGLDELETEOBJECTARBPROC rogl_pfn_glDeleteObjectARB = NULL;
static ROGL_PFNGLGETHANDLEARBPROC rogl_pfn_glGetHandleARB = NULL;
static ROGL_PFNGLDETACHOBJECTARBPROC rogl_pfn_glDetachObjectARB = NULL;
static ROGL_PFNGLCREATESHADEROBJECTARBPROC rogl_pfn_glCreateShaderObjectARB = NULL;
static ROGL_PFNGLSHADERSOURCEARBPROC rogl_pfn_glShaderSourceARB = NULL;
static ROGL_PFNGLCOMPILESHADERARBPROC rogl_pfn_glCompileShaderARB = NULL;
static ROGL_PFNGLCREATEPROGRAMOBJECTARBPROC rogl_pfn_glCreateProgramObjectARB = NULL;
static ROGL_PFNGLATTACHOBJECTARBPROC rogl_pfn_glAttachObjectARB = NULL;
static ROGL_PFNGLLINKPROGRAMARBPROC rogl_pfn_glLinkProgramARB = NULL;
static ROGL_PFNGLUSEPROGRAMOBJECTARBPROC rogl_pfn_glUseProgramObjectARB = NULL;
static ROGL_PFNGLVALIDATEPROGRAMARBPROC rogl_pfn_glValidateProgramARB = NULL;
static ROGL_PFNGLUNIFORM1FARBPROC rogl_pfn_glUniform1fARB = NULL;
static ROGL_PFNGLUNIFORM2FARBPROC rogl_pfn_glUniform2fARB = NULL;
static ROGL_PFNGLUNIFORM3FARBPROC rogl_pfn_glUniform3fARB = NULL;
static ROGL_PFNGLUNIFORM4FARBPROC rogl_pfn_glUniform4fARB = NULL;
static ROGL_PFNGLUNIFORM1IARBPROC rogl_pfn_glUniform1iARB = NULL;
static ROGL_PFNGLUNIFORM2IARBPROC rogl_pfn_glUniform2iARB = NULL;
static ROGL_PFNGLUNIFORM3IARBPROC rogl_pfn_glUniform3iARB = NULL;
static ROGL_PFNGLUNIFORM4IARBPROC rogl_pfn_glUniform4iARB = NULL;
static ROGL_PFNGLUNIFORM1FVARBPROC rogl_pfn_glUniform1fvARB = NULL;
static ROGL_PFNGLUNIFORM2FVARBPROC rogl_pfn_glUniform2fvARB = NULL;
static ROGL_PFNGLUNIFORM3FVARBPROC rogl_pfn_glUniform3fvARB = NULL;
static ROGL_PFNGLUNIFORM4FVARBPROC rogl_pfn_glUniform4fvARB = NULL;
static ROGL_PFNGLUNIFORM1IVARBPROC rogl_pfn_glUniform1ivARB = NULL;
static ROGL_PFNGLUNIFORM2IVARBPROC rogl_pfn_glUniform2ivARB = NULL;
static ROGL_PFNGLUNIFORM3IVARBPROC rogl_pfn_glUniform3ivARB = NULL;
static ROGL_PFNGLUNIFORM4IVARBPROC rogl_pfn_glUniform4ivARB = NULL;
static ROGL_PFNGLUNIFORMMATRIX2FVARBPROC rogl_pfn_glUniformMatrix2fvARB = NULL;
static ROGL_PFNGLUNIFORMMATRIX3FVARBPROC rogl_pfn_glUniformMatrix3fvARB = NULL;
static ROGL_PFNGLUNIFORMMATRIX4FVARBPROC rogl_pfn_glUniformMatrix4fvARB = NULL;
static ROGL_PFNGLGETOBJECTPARAMETERFVARBPROC rogl_pfn_glGetObjectParameterfvARB = NULL;
static ROGL_PFNGLGETOBJECTPARAMETERIVARBPROC rogl_pfn_glGetObjectParameterivARB = NULL;
static ROGL_PFNGLGETINFOLOGARBPROC rogl_pfn_glGetInfoLogARB = NULL;
static ROGL_PFNGLGETATTACHEDOBJECTSARBPROC rogl_pfn_glGetAttachedObjectsARB = NULL;
static ROGL_PFNGLGETUNIFORMLOCATIONARBPROC rogl_pfn_glGetUniformLocationARB = NULL;
static ROGL_PFNGLGETACTIVEUNIFORMARBPROC rogl_pfn_glGetActiveUniformARB = NULL;
static ROGL_PFNGLGETUNIFORMFVARBPROC rogl_pfn_glGetUniformfvARB = NULL;
static ROGL_PFNGLGETUNIFORMIVARBPROC rogl_pfn_glGetUniformivARB = NULL;
static ROGL_PFNGLGETSHADERSOURCEARBPROC rogl_pfn_glGetShaderSourceARB = NULL;
static ROGL_PFNGLNAMEDSTRINGARBPROC rogl_pfn_glNamedStringARB = NULL;
static ROGL_PFNGLDELETENAMEDSTRINGARBPROC rogl_pfn_glDeleteNamedStringARB = NULL;
static ROGL_PFNGLCOMPILESHADERINCLUDEARBPROC rogl_pfn_glCompileShaderIncludeARB = NULL;
static ROGL_PFNGLISNAMEDSTRINGARBPROC rogl_pfn_glIsNamedStringARB = NULL;
static ROGL_PFNGLGETNAMEDSTRINGARBPROC rogl_pfn_glGetNamedStringARB = NULL;
static ROGL_PFNGLGETNAMEDSTRINGIVARBPROC rogl_pfn_glGetNamedStringivARB = NULL;
static ROGL_PFNGLBUFFERPAGECOMMITMENTARBPROC rogl_pfn_glBufferPageCommitmentARB = NULL;
static ROGL_PFNGLNAMEDBUFFERPAGECOMMITMENTEXTPROC rogl_pfn_glNamedBufferPageCommitmentEXT = NULL;
static ROGL_PFNGLNAMEDBUFFERPAGECOMMITMENTARBPROC rogl_pfn_glNamedBufferPageCommitmentARB = NULL;
static ROGL_PFNGLTEXPAGECOMMITMENTARBPROC rogl_pfn_glTexPageCommitmentARB = NULL;
static ROGL_PFNGLTEXBUFFERARBPROC rogl_pfn_glTexBufferARB = NULL;
static ROGL_PFNGLCOMPRESSEDTEXIMAGE3DARBPROC rogl_pfn_glCompressedTexImage3DARB = NULL;
static ROGL_PFNGLCOMPRESSEDTEXIMAGE2DARBPROC rogl_pfn_glCompressedTexImage2DARB = NULL;
static ROGL_PFNGLCOMPRESSEDTEXIMAGE1DARBPROC rogl_pfn_glCompressedTexImage1DARB = NULL;
static ROGL_PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC rogl_pfn_glCompressedTexSubImage3DARB = NULL;
static ROGL_PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC rogl_pfn_glCompressedTexSubImage2DARB = NULL;
static ROGL_PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC rogl_pfn_glCompressedTexSubImage1DARB = NULL;
static ROGL_PFNGLGETCOMPRESSEDTEXIMAGEARBPROC rogl_pfn_glGetCompressedTexImageARB = NULL;
static ROGL_PFNGLLOADTRANSPOSEMATRIXFARBPROC rogl_pfn_glLoadTransposeMatrixfARB = NULL;
static ROGL_PFNGLLOADTRANSPOSEMATRIXDARBPROC rogl_pfn_glLoadTransposeMatrixdARB = NULL;
static ROGL_PFNGLMULTTRANSPOSEMATRIXFARBPROC rogl_pfn_glMultTransposeMatrixfARB = NULL;
static ROGL_PFNGLMULTTRANSPOSEMATRIXDARBPROC rogl_pfn_glMultTransposeMatrixdARB = NULL;
static ROGL_PFNGLWEIGHTBVARBPROC rogl_pfn_glWeightbvARB = NULL;
static ROGL_PFNGLWEIGHTSVARBPROC rogl_pfn_glWeightsvARB = NULL;
static ROGL_PFNGLWEIGHTIVARBPROC rogl_pfn_glWeightivARB = NULL;
static ROGL_PFNGLWEIGHTFVARBPROC rogl_pfn_glWeightfvARB = NULL;
static ROGL_PFNGLWEIGHTDVARBPROC rogl_pfn_glWeightdvARB = NULL;
static ROGL_PFNGLWEIGHTUBVARBPROC rogl_pfn_glWeightubvARB = NULL;
static ROGL_PFNGLWEIGHTUSVARBPROC rogl_pfn_glWeightusvARB = NULL;
static ROGL_PFNGLWEIGHTUIVARBPROC rogl_pfn_glWeightuivARB = NULL;
static ROGL_PFNGLWEIGHTPOINTERARBPROC rogl_pfn_glWeightPointerARB = NULL;
static ROGL_PFNGLVERTEXBLENDARBPROC rogl_pfn_glVertexBlendARB = NULL;
static ROGL_PFNGLBINDBUFFERARBPROC rogl_pfn_glBindBufferARB = NULL;
static ROGL_PFNGLDELETEBUFFERSARBPROC rogl_pfn_glDeleteBuffersARB = NULL;
static ROGL_PFNGLGENBUFFERSARBPROC rogl_pfn_glGenBuffersARB = NULL;
static ROGL_PFNGLISBUFFERARBPROC rogl_pfn_glIsBufferARB = NULL;
static ROGL_PFNGLBUFFERDATAARBPROC rogl_pfn_glBufferDataARB = NULL;
static ROGL_PFNGLBUFFERSUBDATAARBPROC rogl_pfn_glBufferSubDataARB = NULL;
static ROGL_PFNGLGETBUFFERSUBDATAARBPROC rogl_pfn_glGetBufferSubDataARB = NULL;
static ROGL_PFNGLMAPBUFFERARBPROC rogl_pfn_glMapBufferARB = NULL;
static ROGL_PFNGLUNMAPBUFFERARBPROC rogl_pfn_glUnmapBufferARB = NULL;
static ROGL_PFNGLGETBUFFERPARAMETERIVARBPROC rogl_pfn_glGetBufferParameterivARB = NULL;
static ROGL_PFNGLGETBUFFERPOINTERVARBPROC rogl_pfn_glGetBufferPointervARB = NULL;
static ROGL_PFNGLBINDATTRIBLOCATIONARBPROC rogl_pfn_glBindAttribLocationARB = NULL;
static ROGL_PFNGLGETACTIVEATTRIBARBPROC rogl_pfn_glGetActiveAttribARB = NULL;
static ROGL_PFNGLGETATTRIBLOCATIONARBPROC rogl_pfn_glGetAttribLocationARB = NULL;
static ROGL_PFNGLWINDOWPOS2DARBPROC rogl_pfn_glWindowPos2dARB = NULL;
static ROGL_PFNGLWINDOWPOS2DVARBPROC rogl_pfn_glWindowPos2dvARB = NULL;
static ROGL_PFNGLWINDOWPOS2FARBPROC rogl_pfn_glWindowPos2fARB = NULL;
static ROGL_PFNGLWINDOWPOS2FVARBPROC rogl_pfn_glWindowPos2fvARB = NULL;
static ROGL_PFNGLWINDOWPOS2IARBPROC rogl_pfn_glWindowPos2iARB = NULL;
static ROGL_PFNGLWINDOWPOS2IVARBPROC rogl_pfn_glWindowPos2ivARB = NULL;
static ROGL_PFNGLWINDOWPOS2SARBPROC rogl_pfn_glWindowPos2sARB = NULL;
static ROGL_PFNGLWINDOWPOS2SVARBPROC rogl_pfn_glWindowPos2svARB = NULL;
static ROGL_PFNGLWINDOWPOS3DARBPROC rogl_pfn_glWindowPos3dARB = NULL;
static ROGL_PFNGLWINDOWPOS3DVARBPROC rogl_pfn_glWindowPos3dvARB = NULL;
static ROGL_PFNGLWINDOWPOS3FARBPROC rogl_pfn_glWindowPos3fARB = NULL;
static ROGL_PFNGLWINDOWPOS3FVARBPROC rogl_pfn_glWindowPos3fvARB = NULL;
static ROGL_PFNGLWINDOWPOS3IARBPROC rogl_pfn_glWindowPos3iARB = NULL;
static ROGL_PFNGLWINDOWPOS3IVARBPROC rogl_pfn_glWindowPos3ivARB = NULL;
static ROGL_PFNGLWINDOWPOS3SARBPROC rogl_pfn_glWindowPos3sARB = NULL;
static ROGL_PFNGLWINDOWPOS3SVARBPROC rogl_pfn_glWindowPos3svARB = NULL;
static ROGL_PFNGLDRAWBUFFERSATIPROC rogl_pfn_glDrawBuffersATI = NULL;
static ROGL_PFNGLELEMENTPOINTERATIPROC rogl_pfn_glElementPointerATI = NULL;
static ROGL_PFNGLDRAWELEMENTARRAYATIPROC rogl_pfn_glDrawElementArrayATI = NULL;
static ROGL_PFNGLDRAWRANGEELEMENTARRAYATIPROC rogl_pfn_glDrawRangeElementArrayATI = NULL;
static ROGL_PFNGLTEXBUMPPARAMETERIVATIPROC rogl_pfn_glTexBumpParameterivATI = NULL;
static ROGL_PFNGLTEXBUMPPARAMETERFVATIPROC rogl_pfn_glTexBumpParameterfvATI = NULL;
static ROGL_PFNGLGETTEXBUMPPARAMETERIVATIPROC rogl_pfn_glGetTexBumpParameterivATI = NULL;
static ROGL_PFNGLGETTEXBUMPPARAMETERFVATIPROC rogl_pfn_glGetTexBumpParameterfvATI = NULL;
static ROGL_PFNGLGENFRAGMENTSHADERSATIPROC rogl_pfn_glGenFragmentShadersATI = NULL;
static ROGL_PFNGLBINDFRAGMENTSHADERATIPROC rogl_pfn_glBindFragmentShaderATI = NULL;
static ROGL_PFNGLDELETEFRAGMENTSHADERATIPROC rogl_pfn_glDeleteFragmentShaderATI = NULL;
static ROGL_PFNGLBEGINFRAGMENTSHADERATIPROC rogl_pfn_glBeginFragmentShaderATI = NULL;
static ROGL_PFNGLENDFRAGMENTSHADERATIPROC rogl_pfn_glEndFragmentShaderATI = NULL;
static ROGL_PFNGLPASSTEXCOORDATIPROC rogl_pfn_glPassTexCoordATI = NULL;
static ROGL_PFNGLSAMPLEMAPATIPROC rogl_pfn_glSampleMapATI = NULL;
static ROGL_PFNGLCOLORFRAGMENTOP1ATIPROC rogl_pfn_glColorFragmentOp1ATI = NULL;
static ROGL_PFNGLCOLORFRAGMENTOP2ATIPROC rogl_pfn_glColorFragmentOp2ATI = NULL;
static ROGL_PFNGLCOLORFRAGMENTOP3ATIPROC rogl_pfn_glColorFragmentOp3ATI = NULL;
static ROGL_PFNGLALPHAFRAGMENTOP1ATIPROC rogl_pfn_glAlphaFragmentOp1ATI = NULL;
static ROGL_PFNGLALPHAFRAGMENTOP2ATIPROC rogl_pfn_glAlphaFragmentOp2ATI = NULL;
static ROGL_PFNGLALPHAFRAGMENTOP3ATIPROC rogl_pfn_glAlphaFragmentOp3ATI = NULL;
static ROGL_PFNGLSETFRAGMENTSHADERCONSTANTATIPROC rogl_pfn_glSetFragmentShaderConstantATI = NULL;
static ROGL_PFNGLMAPOBJECTBUFFERATIPROC rogl_pfn_glMapObjectBufferATI = NULL;
static ROGL_PFNGLUNMAPOBJECTBUFFERATIPROC rogl_pfn_glUnmapObjectBufferATI = NULL;
static ROGL_PFNGLPNTRIANGLESIATIPROC rogl_pfn_glPNTrianglesiATI = NULL;
static ROGL_PFNGLPNTRIANGLESFATIPROC rogl_pfn_glPNTrianglesfATI = NULL;
static ROGL_PFNGLSTENCILOPSEPARATEATIPROC rogl_pfn_glStencilOpSeparateATI = NULL;
static ROGL_PFNGLSTENCILFUNCSEPARATEATIPROC rogl_pfn_glStencilFuncSeparateATI = NULL;
static ROGL_PFNGLNEWOBJECTBUFFERATIPROC rogl_pfn_glNewObjectBufferATI = NULL;
static ROGL_PFNGLISOBJECTBUFFERATIPROC rogl_pfn_glIsObjectBufferATI = NULL;
static ROGL_PFNGLUPDATEOBJECTBUFFERATIPROC rogl_pfn_glUpdateObjectBufferATI = NULL;
static ROGL_PFNGLGETOBJECTBUFFERFVATIPROC rogl_pfn_glGetObjectBufferfvATI = NULL;
static ROGL_PFNGLGETOBJECTBUFFERIVATIPROC rogl_pfn_glGetObjectBufferivATI = NULL;
static ROGL_PFNGLFREEOBJECTBUFFERATIPROC rogl_pfn_glFreeObjectBufferATI = NULL;
static ROGL_PFNGLARRAYOBJECTATIPROC rogl_pfn_glArrayObjectATI = NULL;
static ROGL_PFNGLGETARRAYOBJECTFVATIPROC rogl_pfn_glGetArrayObjectfvATI = NULL;
static ROGL_PFNGLGETARRAYOBJECTIVATIPROC rogl_pfn_glGetArrayObjectivATI = NULL;
static ROGL_PFNGLVARIANTARRAYOBJECTATIPROC rogl_pfn_glVariantArrayObjectATI = NULL;
static ROGL_PFNGLGETVARIANTARRAYOBJECTFVATIPROC rogl_pfn_glGetVariantArrayObjectfvATI = NULL;
static ROGL_PFNGLGETVARIANTARRAYOBJECTIVATIPROC rogl_pfn_glGetVariantArrayObjectivATI = NULL;
static ROGL_PFNGLVERTEXATTRIBARRAYOBJECTATIPROC rogl_pfn_glVertexAttribArrayObjectATI = NULL;
static ROGL_PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC rogl_pfn_glGetVertexAttribArrayObjectfvATI = NULL;
static ROGL_PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC rogl_pfn_glGetVertexAttribArrayObjectivATI = NULL;
static ROGL_PFNGLVERTEXSTREAM1SATIPROC rogl_pfn_glVertexStream1sATI = NULL;
static ROGL_PFNGLVERTEXSTREAM1SVATIPROC rogl_pfn_glVertexStream1svATI = NULL;
static ROGL_PFNGLVERTEXSTREAM1IATIPROC rogl_pfn_glVertexStream1iATI = NULL;
static ROGL_PFNGLVERTEXSTREAM1IVATIPROC rogl_pfn_glVertexStream1ivATI = NULL;
static ROGL_PFNGLVERTEXSTREAM1FATIPROC rogl_pfn_glVertexStream1fATI = NULL;
static ROGL_PFNGLVERTEXSTREAM1FVATIPROC rogl_pfn_glVertexStream1fvATI = NULL;
static ROGL_PFNGLVERTEXSTREAM1DATIPROC rogl_pfn_glVertexStream1dATI = NULL;
static ROGL_PFNGLVERTEXSTREAM1DVATIPROC rogl_pfn_glVertexStream1dvATI = NULL;
static ROGL_PFNGLVERTEXSTREAM2SATIPROC rogl_pfn_glVertexStream2sATI = NULL;
static ROGL_PFNGLVERTEXSTREAM2SVATIPROC rogl_pfn_glVertexStream2svATI = NULL;
static ROGL_PFNGLVERTEXSTREAM2IATIPROC rogl_pfn_glVertexStream2iATI = NULL;
static ROGL_PFNGLVERTEXSTREAM2IVATIPROC rogl_pfn_glVertexStream2ivATI = NULL;
static ROGL_PFNGLVERTEXSTREAM2FATIPROC rogl_pfn_glVertexStream2fATI = NULL;
static ROGL_PFNGLVERTEXSTREAM2FVATIPROC rogl_pfn_glVertexStream2fvATI = NULL;
static ROGL_PFNGLVERTEXSTREAM2DATIPROC rogl_pfn_glVertexStream2dATI = NULL;
static ROGL_PFNGLVERTEXSTREAM2DVATIPROC rogl_pfn_glVertexStream2dvATI = NULL;
static ROGL_PFNGLVERTEXSTREAM3SATIPROC rogl_pfn_glVertexStream3sATI = NULL;
static ROGL_PFNGLVERTEXSTREAM3SVATIPROC rogl_pfn_glVertexStream3svATI = NULL;
static ROGL_PFNGLVERTEXSTREAM3IATIPROC rogl_pfn_glVertexStream3iATI = NULL;
static ROGL_PFNGLVERTEXSTREAM3IVATIPROC rogl_pfn_glVertexStream3ivATI = NULL;
static ROGL_PFNGLVERTEXSTREAM3FATIPROC rogl_pfn_glVertexStream3fATI = NULL;
static ROGL_PFNGLVERTEXSTREAM3FVATIPROC rogl_pfn_glVertexStream3fvATI = NULL;
static ROGL_PFNGLVERTEXSTREAM3DATIPROC rogl_pfn_glVertexStream3dATI = NULL;
static ROGL_PFNGLVERTEXSTREAM3DVATIPROC rogl_pfn_glVertexStream3dvATI = NULL;
static ROGL_PFNGLVERTEXSTREAM4SATIPROC rogl_pfn_glVertexStream4sATI = NULL;
static ROGL_PFNGLVERTEXSTREAM4SVATIPROC rogl_pfn_glVertexStream4svATI = NULL;
static ROGL_PFNGLVERTEXSTREAM4IATIPROC rogl_pfn_glVertexStream4iATI = NULL;
static ROGL_PFNGLVERTEXSTREAM4IVATIPROC rogl_pfn_glVertexStream4ivATI = NULL;
static ROGL_PFNGLVERTEXSTREAM4FATIPROC rogl_pfn_glVertexStream4fATI = NULL;
static ROGL_PFNGLVERTEXSTREAM4FVATIPROC rogl_pfn_glVertexStream4fvATI = NULL;
static ROGL_PFNGLVERTEXSTREAM4DATIPROC rogl_pfn_glVertexStream4dATI = NULL;
static ROGL_PFNGLVERTEXSTREAM4DVATIPROC rogl_pfn_glVertexStream4dvATI = NULL;
static ROGL_PFNGLNORMALSTREAM3BATIPROC rogl_pfn_glNormalStream3bATI = NULL;
static ROGL_PFNGLNORMALSTREAM3BVATIPROC rogl_pfn_glNormalStream3bvATI = NULL;
static ROGL_PFNGLNORMALSTREAM3SATIPROC rogl_pfn_glNormalStream3sATI = NULL;
static ROGL_PFNGLNORMALSTREAM3SVATIPROC rogl_pfn_glNormalStream3svATI = NULL;
static ROGL_PFNGLNORMALSTREAM3IATIPROC rogl_pfn_glNormalStream3iATI = NULL;
static ROGL_PFNGLNORMALSTREAM3IVATIPROC rogl_pfn_glNormalStream3ivATI = NULL;
static ROGL_PFNGLNORMALSTREAM3FATIPROC rogl_pfn_glNormalStream3fATI = NULL;
static ROGL_PFNGLNORMALSTREAM3FVATIPROC rogl_pfn_glNormalStream3fvATI = NULL;
static ROGL_PFNGLNORMALSTREAM3DATIPROC rogl_pfn_glNormalStream3dATI = NULL;
static ROGL_PFNGLNORMALSTREAM3DVATIPROC rogl_pfn_glNormalStream3dvATI = NULL;
static ROGL_PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC rogl_pfn_glClientActiveVertexStreamATI = NULL;
static ROGL_PFNGLVERTEXBLENDENVIATIPROC rogl_pfn_glVertexBlendEnviATI = NULL;
static ROGL_PFNGLVERTEXBLENDENVFATIPROC rogl_pfn_glVertexBlendEnvfATI = NULL;
static ROGL_PFNGLUNIFORMBUFFEREXTPROC rogl_pfn_glUniformBufferEXT = NULL;
static ROGL_PFNGLGETUNIFORMBUFFERSIZEEXTPROC rogl_pfn_glGetUniformBufferSizeEXT = NULL;
static ROGL_PFNGLGETUNIFORMOFFSETEXTPROC rogl_pfn_glGetUniformOffsetEXT = NULL;
static ROGL_PFNGLBLENDCOLOREXTPROC rogl_pfn_glBlendColorEXT = NULL;
static ROGL_PFNGLBLENDEQUATIONSEPARATEEXTPROC rogl_pfn_glBlendEquationSeparateEXT = NULL;
static ROGL_PFNGLBLENDFUNCSEPARATEEXTPROC rogl_pfn_glBlendFuncSeparateEXT = NULL;
static ROGL_PFNGLBLENDEQUATIONEXTPROC rogl_pfn_glBlendEquationEXT = NULL;
static ROGL_PFNGLCOLORSUBTABLEEXTPROC rogl_pfn_glColorSubTableEXT = NULL;
static ROGL_PFNGLCOPYCOLORSUBTABLEEXTPROC rogl_pfn_glCopyColorSubTableEXT = NULL;
static ROGL_PFNGLLOCKARRAYSEXTPROC rogl_pfn_glLockArraysEXT = NULL;
static ROGL_PFNGLUNLOCKARRAYSEXTPROC rogl_pfn_glUnlockArraysEXT = NULL;
static ROGL_PFNGLCONVOLUTIONFILTER1DEXTPROC rogl_pfn_glConvolutionFilter1DEXT = NULL;
static ROGL_PFNGLCONVOLUTIONFILTER2DEXTPROC rogl_pfn_glConvolutionFilter2DEXT = NULL;
static ROGL_PFNGLCONVOLUTIONPARAMETERFEXTPROC rogl_pfn_glConvolutionParameterfEXT = NULL;
static ROGL_PFNGLCONVOLUTIONPARAMETERFVEXTPROC rogl_pfn_glConvolutionParameterfvEXT = NULL;
static ROGL_PFNGLCONVOLUTIONPARAMETERIEXTPROC rogl_pfn_glConvolutionParameteriEXT = NULL;
static ROGL_PFNGLCONVOLUTIONPARAMETERIVEXTPROC rogl_pfn_glConvolutionParameterivEXT = NULL;
static ROGL_PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC rogl_pfn_glCopyConvolutionFilter1DEXT = NULL;
static ROGL_PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC rogl_pfn_glCopyConvolutionFilter2DEXT = NULL;
static ROGL_PFNGLGETCONVOLUTIONFILTEREXTPROC rogl_pfn_glGetConvolutionFilterEXT = NULL;
static ROGL_PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC rogl_pfn_glGetConvolutionParameterfvEXT = NULL;
static ROGL_PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC rogl_pfn_glGetConvolutionParameterivEXT = NULL;
static ROGL_PFNGLGETSEPARABLEFILTEREXTPROC rogl_pfn_glGetSeparableFilterEXT = NULL;
static ROGL_PFNGLSEPARABLEFILTER2DEXTPROC rogl_pfn_glSeparableFilter2DEXT = NULL;
static ROGL_PFNGLTANGENT3BEXTPROC rogl_pfn_glTangent3bEXT = NULL;
static ROGL_PFNGLTANGENT3BVEXTPROC rogl_pfn_glTangent3bvEXT = NULL;
static ROGL_PFNGLTANGENT3DEXTPROC rogl_pfn_glTangent3dEXT = NULL;
static ROGL_PFNGLTANGENT3DVEXTPROC rogl_pfn_glTangent3dvEXT = NULL;
static ROGL_PFNGLTANGENT3FEXTPROC rogl_pfn_glTangent3fEXT = NULL;
static ROGL_PFNGLTANGENT3FVEXTPROC rogl_pfn_glTangent3fvEXT = NULL;
static ROGL_PFNGLTANGENT3IEXTPROC rogl_pfn_glTangent3iEXT = NULL;
static ROGL_PFNGLTANGENT3IVEXTPROC rogl_pfn_glTangent3ivEXT = NULL;
static ROGL_PFNGLTANGENT3SEXTPROC rogl_pfn_glTangent3sEXT = NULL;
static ROGL_PFNGLTANGENT3SVEXTPROC rogl_pfn_glTangent3svEXT = NULL;
static ROGL_PFNGLBINORMAL3BEXTPROC rogl_pfn_glBinormal3bEXT = NULL;
static ROGL_PFNGLBINORMAL3BVEXTPROC rogl_pfn_glBinormal3bvEXT = NULL;
static ROGL_PFNGLBINORMAL3DEXTPROC rogl_pfn_glBinormal3dEXT = NULL;
static ROGL_PFNGLBINORMAL3DVEXTPROC rogl_pfn_glBinormal3dvEXT = NULL;
static ROGL_PFNGLBINORMAL3FEXTPROC rogl_pfn_glBinormal3fEXT = NULL;
static ROGL_PFNGLBINORMAL3FVEXTPROC rogl_pfn_glBinormal3fvEXT = NULL;
static ROGL_PFNGLBINORMAL3IEXTPROC rogl_pfn_glBinormal3iEXT = NULL;
static ROGL_PFNGLBINORMAL3IVEXTPROC rogl_pfn_glBinormal3ivEXT = NULL;
static ROGL_PFNGLBINORMAL3SEXTPROC rogl_pfn_glBinormal3sEXT = NULL;
static ROGL_PFNGLBINORMAL3SVEXTPROC rogl_pfn_glBinormal3svEXT = NULL;
static ROGL_PFNGLTANGENTPOINTEREXTPROC rogl_pfn_glTangentPointerEXT = NULL;
static ROGL_PFNGLBINORMALPOINTEREXTPROC rogl_pfn_glBinormalPointerEXT = NULL;
static ROGL_PFNGLCOPYTEXIMAGE1DEXTPROC rogl_pfn_glCopyTexImage1DEXT = NULL;
static ROGL_PFNGLCOPYTEXIMAGE2DEXTPROC rogl_pfn_glCopyTexImage2DEXT = NULL;
static ROGL_PFNGLCOPYTEXSUBIMAGE1DEXTPROC rogl_pfn_glCopyTexSubImage1DEXT = NULL;
static ROGL_PFNGLCOPYTEXSUBIMAGE2DEXTPROC rogl_pfn_glCopyTexSubImage2DEXT = NULL;
static ROGL_PFNGLCOPYTEXSUBIMAGE3DEXTPROC rogl_pfn_glCopyTexSubImage3DEXT = NULL;
static ROGL_PFNGLCULLPARAMETERDVEXTPROC rogl_pfn_glCullParameterdvEXT = NULL;
static ROGL_PFNGLCULLPARAMETERFVEXTPROC rogl_pfn_glCullParameterfvEXT = NULL;
static ROGL_PFNGLLABELOBJECTEXTPROC rogl_pfn_glLabelObjectEXT = NULL;
static ROGL_PFNGLGETOBJECTLABELEXTPROC rogl_pfn_glGetObjectLabelEXT = NULL;
static ROGL_PFNGLINSERTEVENTMARKEREXTPROC rogl_pfn_glInsertEventMarkerEXT = NULL;
static ROGL_PFNGLPUSHGROUPMARKEREXTPROC rogl_pfn_glPushGroupMarkerEXT = NULL;
static ROGL_PFNGLPOPGROUPMARKEREXTPROC rogl_pfn_glPopGroupMarkerEXT = NULL;
static ROGL_PFNGLDEPTHBOUNDSEXTPROC rogl_pfn_glDepthBoundsEXT = NULL;
static ROGL_PFNGLMATRIXLOADFEXTPROC rogl_pfn_glMatrixLoadfEXT = NULL;
static ROGL_PFNGLMATRIXLOADDEXTPROC rogl_pfn_glMatrixLoaddEXT = NULL;
static ROGL_PFNGLMATRIXMULTFEXTPROC rogl_pfn_glMatrixMultfEXT = NULL;
static ROGL_PFNGLMATRIXMULTDEXTPROC rogl_pfn_glMatrixMultdEXT = NULL;
static ROGL_PFNGLMATRIXLOADIDENTITYEXTPROC rogl_pfn_glMatrixLoadIdentityEXT = NULL;
static ROGL_PFNGLMATRIXROTATEFEXTPROC rogl_pfn_glMatrixRotatefEXT = NULL;
static ROGL_PFNGLMATRIXROTATEDEXTPROC rogl_pfn_glMatrixRotatedEXT = NULL;
static ROGL_PFNGLMATRIXSCALEFEXTPROC rogl_pfn_glMatrixScalefEXT = NULL;
static ROGL_PFNGLMATRIXSCALEDEXTPROC rogl_pfn_glMatrixScaledEXT = NULL;
static ROGL_PFNGLMATRIXTRANSLATEFEXTPROC rogl_pfn_glMatrixTranslatefEXT = NULL;
static ROGL_PFNGLMATRIXTRANSLATEDEXTPROC rogl_pfn_glMatrixTranslatedEXT = NULL;
static ROGL_PFNGLMATRIXFRUSTUMEXTPROC rogl_pfn_glMatrixFrustumEXT = NULL;
static ROGL_PFNGLMATRIXORTHOEXTPROC rogl_pfn_glMatrixOrthoEXT = NULL;
static ROGL_PFNGLMATRIXPOPEXTPROC rogl_pfn_glMatrixPopEXT = NULL;
static ROGL_PFNGLMATRIXPUSHEXTPROC rogl_pfn_glMatrixPushEXT = NULL;
static ROGL_PFNGLCLIENTATTRIBDEFAULTEXTPROC rogl_pfn_glClientAttribDefaultEXT = NULL;
static ROGL_PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC rogl_pfn_glPushClientAttribDefaultEXT = NULL;
static ROGL_PFNGLTEXTUREPARAMETERFEXTPROC rogl_pfn_glTextureParameterfEXT = NULL;
static ROGL_PFNGLTEXTUREPARAMETERFVEXTPROC rogl_pfn_glTextureParameterfvEXT = NULL;
static ROGL_PFNGLTEXTUREPARAMETERIEXTPROC rogl_pfn_glTextureParameteriEXT = NULL;
static ROGL_PFNGLTEXTUREPARAMETERIVEXTPROC rogl_pfn_glTextureParameterivEXT = NULL;
static ROGL_PFNGLTEXTUREIMAGE1DEXTPROC rogl_pfn_glTextureImage1DEXT = NULL;
static ROGL_PFNGLTEXTUREIMAGE2DEXTPROC rogl_pfn_glTextureImage2DEXT = NULL;
static ROGL_PFNGLTEXTURESUBIMAGE1DEXTPROC rogl_pfn_glTextureSubImage1DEXT = NULL;
static ROGL_PFNGLTEXTURESUBIMAGE2DEXTPROC rogl_pfn_glTextureSubImage2DEXT = NULL;
static ROGL_PFNGLCOPYTEXTUREIMAGE1DEXTPROC rogl_pfn_glCopyTextureImage1DEXT = NULL;
static ROGL_PFNGLCOPYTEXTUREIMAGE2DEXTPROC rogl_pfn_glCopyTextureImage2DEXT = NULL;
static ROGL_PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC rogl_pfn_glCopyTextureSubImage1DEXT = NULL;
static ROGL_PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC rogl_pfn_glCopyTextureSubImage2DEXT = NULL;
static ROGL_PFNGLGETTEXTUREIMAGEEXTPROC rogl_pfn_glGetTextureImageEXT = NULL;
static ROGL_PFNGLGETTEXTUREPARAMETERFVEXTPROC rogl_pfn_glGetTextureParameterfvEXT = NULL;
static ROGL_PFNGLGETTEXTUREPARAMETERIVEXTPROC rogl_pfn_glGetTextureParameterivEXT = NULL;
static ROGL_PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC rogl_pfn_glGetTextureLevelParameterfvEXT = NULL;
static ROGL_PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC rogl_pfn_glGetTextureLevelParameterivEXT = NULL;
static ROGL_PFNGLTEXTUREIMAGE3DEXTPROC rogl_pfn_glTextureImage3DEXT = NULL;
static ROGL_PFNGLTEXTURESUBIMAGE3DEXTPROC rogl_pfn_glTextureSubImage3DEXT = NULL;
static ROGL_PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC rogl_pfn_glCopyTextureSubImage3DEXT = NULL;
static ROGL_PFNGLBINDMULTITEXTUREEXTPROC rogl_pfn_glBindMultiTextureEXT = NULL;
static ROGL_PFNGLMULTITEXCOORDPOINTEREXTPROC rogl_pfn_glMultiTexCoordPointerEXT = NULL;
static ROGL_PFNGLMULTITEXENVFEXTPROC rogl_pfn_glMultiTexEnvfEXT = NULL;
static ROGL_PFNGLMULTITEXENVFVEXTPROC rogl_pfn_glMultiTexEnvfvEXT = NULL;
static ROGL_PFNGLMULTITEXENVIEXTPROC rogl_pfn_glMultiTexEnviEXT = NULL;
static ROGL_PFNGLMULTITEXENVIVEXTPROC rogl_pfn_glMultiTexEnvivEXT = NULL;
static ROGL_PFNGLMULTITEXGENDEXTPROC rogl_pfn_glMultiTexGendEXT = NULL;
static ROGL_PFNGLMULTITEXGENDVEXTPROC rogl_pfn_glMultiTexGendvEXT = NULL;
static ROGL_PFNGLMULTITEXGENFEXTPROC rogl_pfn_glMultiTexGenfEXT = NULL;
static ROGL_PFNGLMULTITEXGENFVEXTPROC rogl_pfn_glMultiTexGenfvEXT = NULL;
static ROGL_PFNGLMULTITEXGENIEXTPROC rogl_pfn_glMultiTexGeniEXT = NULL;
static ROGL_PFNGLMULTITEXGENIVEXTPROC rogl_pfn_glMultiTexGenivEXT = NULL;
static ROGL_PFNGLGETMULTITEXENVFVEXTPROC rogl_pfn_glGetMultiTexEnvfvEXT = NULL;
static ROGL_PFNGLGETMULTITEXENVIVEXTPROC rogl_pfn_glGetMultiTexEnvivEXT = NULL;
static ROGL_PFNGLGETMULTITEXGENDVEXTPROC rogl_pfn_glGetMultiTexGendvEXT = NULL;
static ROGL_PFNGLGETMULTITEXGENFVEXTPROC rogl_pfn_glGetMultiTexGenfvEXT = NULL;
static ROGL_PFNGLGETMULTITEXGENIVEXTPROC rogl_pfn_glGetMultiTexGenivEXT = NULL;
static ROGL_PFNGLMULTITEXPARAMETERIEXTPROC rogl_pfn_glMultiTexParameteriEXT = NULL;
static ROGL_PFNGLMULTITEXPARAMETERIVEXTPROC rogl_pfn_glMultiTexParameterivEXT = NULL;
static ROGL_PFNGLMULTITEXPARAMETERFEXTPROC rogl_pfn_glMultiTexParameterfEXT = NULL;
static ROGL_PFNGLMULTITEXPARAMETERFVEXTPROC rogl_pfn_glMultiTexParameterfvEXT = NULL;
static ROGL_PFNGLMULTITEXIMAGE1DEXTPROC rogl_pfn_glMultiTexImage1DEXT = NULL;
static ROGL_PFNGLMULTITEXIMAGE2DEXTPROC rogl_pfn_glMultiTexImage2DEXT = NULL;
static ROGL_PFNGLMULTITEXSUBIMAGE1DEXTPROC rogl_pfn_glMultiTexSubImage1DEXT = NULL;
static ROGL_PFNGLMULTITEXSUBIMAGE2DEXTPROC rogl_pfn_glMultiTexSubImage2DEXT = NULL;
static ROGL_PFNGLCOPYMULTITEXIMAGE1DEXTPROC rogl_pfn_glCopyMultiTexImage1DEXT = NULL;
static ROGL_PFNGLCOPYMULTITEXIMAGE2DEXTPROC rogl_pfn_glCopyMultiTexImage2DEXT = NULL;
static ROGL_PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC rogl_pfn_glCopyMultiTexSubImage1DEXT = NULL;
static ROGL_PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC rogl_pfn_glCopyMultiTexSubImage2DEXT = NULL;
static ROGL_PFNGLGETMULTITEXIMAGEEXTPROC rogl_pfn_glGetMultiTexImageEXT = NULL;
static ROGL_PFNGLGETMULTITEXPARAMETERFVEXTPROC rogl_pfn_glGetMultiTexParameterfvEXT = NULL;
static ROGL_PFNGLGETMULTITEXPARAMETERIVEXTPROC rogl_pfn_glGetMultiTexParameterivEXT = NULL;
static ROGL_PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC rogl_pfn_glGetMultiTexLevelParameterfvEXT = NULL;
static ROGL_PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC rogl_pfn_glGetMultiTexLevelParameterivEXT = NULL;
static ROGL_PFNGLMULTITEXIMAGE3DEXTPROC rogl_pfn_glMultiTexImage3DEXT = NULL;
static ROGL_PFNGLMULTITEXSUBIMAGE3DEXTPROC rogl_pfn_glMultiTexSubImage3DEXT = NULL;
static ROGL_PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC rogl_pfn_glCopyMultiTexSubImage3DEXT = NULL;
static ROGL_PFNGLENABLECLIENTSTATEINDEXEDEXTPROC rogl_pfn_glEnableClientStateIndexedEXT = NULL;
static ROGL_PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC rogl_pfn_glDisableClientStateIndexedEXT = NULL;
static ROGL_PFNGLGETFLOATINDEXEDVEXTPROC rogl_pfn_glGetFloatIndexedvEXT = NULL;
static ROGL_PFNGLGETDOUBLEINDEXEDVEXTPROC rogl_pfn_glGetDoubleIndexedvEXT = NULL;
static ROGL_PFNGLGETPOINTERINDEXEDVEXTPROC rogl_pfn_glGetPointerIndexedvEXT = NULL;
static ROGL_PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC rogl_pfn_glCompressedTextureImage3DEXT = NULL;
static ROGL_PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC rogl_pfn_glCompressedTextureImage2DEXT = NULL;
static ROGL_PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC rogl_pfn_glCompressedTextureImage1DEXT = NULL;
static ROGL_PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC rogl_pfn_glCompressedTextureSubImage3DEXT = NULL;
static ROGL_PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC rogl_pfn_glCompressedTextureSubImage2DEXT = NULL;
static ROGL_PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC rogl_pfn_glCompressedTextureSubImage1DEXT = NULL;
static ROGL_PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC rogl_pfn_glGetCompressedTextureImageEXT = NULL;
static ROGL_PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC rogl_pfn_glCompressedMultiTexImage3DEXT = NULL;
static ROGL_PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC rogl_pfn_glCompressedMultiTexImage2DEXT = NULL;
static ROGL_PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC rogl_pfn_glCompressedMultiTexImage1DEXT = NULL;
static ROGL_PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC rogl_pfn_glCompressedMultiTexSubImage3DEXT = NULL;
static ROGL_PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC rogl_pfn_glCompressedMultiTexSubImage2DEXT = NULL;
static ROGL_PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC rogl_pfn_glCompressedMultiTexSubImage1DEXT = NULL;
static ROGL_PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC rogl_pfn_glGetCompressedMultiTexImageEXT = NULL;
static ROGL_PFNGLMATRIXLOADTRANSPOSEFEXTPROC rogl_pfn_glMatrixLoadTransposefEXT = NULL;
static ROGL_PFNGLMATRIXLOADTRANSPOSEDEXTPROC rogl_pfn_glMatrixLoadTransposedEXT = NULL;
static ROGL_PFNGLMATRIXMULTTRANSPOSEFEXTPROC rogl_pfn_glMatrixMultTransposefEXT = NULL;
static ROGL_PFNGLMATRIXMULTTRANSPOSEDEXTPROC rogl_pfn_glMatrixMultTransposedEXT = NULL;
static ROGL_PFNGLNAMEDBUFFERDATAEXTPROC rogl_pfn_glNamedBufferDataEXT = NULL;
static ROGL_PFNGLNAMEDBUFFERSUBDATAEXTPROC rogl_pfn_glNamedBufferSubDataEXT = NULL;
static ROGL_PFNGLMAPNAMEDBUFFEREXTPROC rogl_pfn_glMapNamedBufferEXT = NULL;
static ROGL_PFNGLUNMAPNAMEDBUFFEREXTPROC rogl_pfn_glUnmapNamedBufferEXT = NULL;
static ROGL_PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC rogl_pfn_glGetNamedBufferParameterivEXT = NULL;
static ROGL_PFNGLGETNAMEDBUFFERPOINTERVEXTPROC rogl_pfn_glGetNamedBufferPointervEXT = NULL;
static ROGL_PFNGLGETNAMEDBUFFERSUBDATAEXTPROC rogl_pfn_glGetNamedBufferSubDataEXT = NULL;
static ROGL_PFNGLTEXTUREBUFFEREXTPROC rogl_pfn_glTextureBufferEXT = NULL;
static ROGL_PFNGLMULTITEXBUFFEREXTPROC rogl_pfn_glMultiTexBufferEXT = NULL;
static ROGL_PFNGLTEXTUREPARAMETERIIVEXTPROC rogl_pfn_glTextureParameterIivEXT = NULL;
static ROGL_PFNGLTEXTUREPARAMETERIUIVEXTPROC rogl_pfn_glTextureParameterIuivEXT = NULL;
static ROGL_PFNGLGETTEXTUREPARAMETERIIVEXTPROC rogl_pfn_glGetTextureParameterIivEXT = NULL;
static ROGL_PFNGLGETTEXTUREPARAMETERIUIVEXTPROC rogl_pfn_glGetTextureParameterIuivEXT = NULL;
static ROGL_PFNGLMULTITEXPARAMETERIIVEXTPROC rogl_pfn_glMultiTexParameterIivEXT = NULL;
static ROGL_PFNGLMULTITEXPARAMETERIUIVEXTPROC rogl_pfn_glMultiTexParameterIuivEXT = NULL;
static ROGL_PFNGLGETMULTITEXPARAMETERIIVEXTPROC rogl_pfn_glGetMultiTexParameterIivEXT = NULL;
static ROGL_PFNGLGETMULTITEXPARAMETERIUIVEXTPROC rogl_pfn_glGetMultiTexParameterIuivEXT = NULL;
static ROGL_PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC rogl_pfn_glNamedProgramLocalParameters4fvEXT = NULL;
static ROGL_PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC rogl_pfn_glNamedProgramLocalParameterI4iEXT = NULL;
static ROGL_PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC rogl_pfn_glNamedProgramLocalParameterI4ivEXT = NULL;
static ROGL_PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC rogl_pfn_glNamedProgramLocalParametersI4ivEXT = NULL;
static ROGL_PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC rogl_pfn_glNamedProgramLocalParameterI4uiEXT = NULL;
static ROGL_PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC rogl_pfn_glNamedProgramLocalParameterI4uivEXT = NULL;
static ROGL_PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC rogl_pfn_glNamedProgramLocalParametersI4uivEXT = NULL;
static ROGL_PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC rogl_pfn_glGetNamedProgramLocalParameterIivEXT = NULL;
static ROGL_PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC rogl_pfn_glGetNamedProgramLocalParameterIuivEXT = NULL;
static ROGL_PFNGLENABLECLIENTSTATEIEXTPROC rogl_pfn_glEnableClientStateiEXT = NULL;
static ROGL_PFNGLDISABLECLIENTSTATEIEXTPROC rogl_pfn_glDisableClientStateiEXT = NULL;
static ROGL_PFNGLGETFLOATI_VEXTPROC rogl_pfn_glGetFloati_vEXT = NULL;
static ROGL_PFNGLGETDOUBLEI_VEXTPROC rogl_pfn_glGetDoublei_vEXT = NULL;
static ROGL_PFNGLGETPOINTERI_VEXTPROC rogl_pfn_glGetPointeri_vEXT = NULL;
static ROGL_PFNGLNAMEDPROGRAMSTRINGEXTPROC rogl_pfn_glNamedProgramStringEXT = NULL;
static ROGL_PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC rogl_pfn_glNamedProgramLocalParameter4dEXT = NULL;
static ROGL_PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC rogl_pfn_glNamedProgramLocalParameter4dvEXT = NULL;
static ROGL_PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC rogl_pfn_glNamedProgramLocalParameter4fEXT = NULL;
static ROGL_PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC rogl_pfn_glNamedProgramLocalParameter4fvEXT = NULL;
static ROGL_PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC rogl_pfn_glGetNamedProgramLocalParameterdvEXT = NULL;
static ROGL_PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC rogl_pfn_glGetNamedProgramLocalParameterfvEXT = NULL;
static ROGL_PFNGLGETNAMEDPROGRAMIVEXTPROC rogl_pfn_glGetNamedProgramivEXT = NULL;
static ROGL_PFNGLGETNAMEDPROGRAMSTRINGEXTPROC rogl_pfn_glGetNamedProgramStringEXT = NULL;
static ROGL_PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC rogl_pfn_glNamedRenderbufferStorageEXT = NULL;
static ROGL_PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC rogl_pfn_glGetNamedRenderbufferParameterivEXT = NULL;
static ROGL_PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC rogl_pfn_glNamedRenderbufferStorageMultisampleEXT = NULL;
static ROGL_PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC rogl_pfn_glNamedRenderbufferStorageMultisampleCoverageEXT = NULL;
static ROGL_PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC rogl_pfn_glCheckNamedFramebufferStatusEXT = NULL;
static ROGL_PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC rogl_pfn_glNamedFramebufferTexture1DEXT = NULL;
static ROGL_PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC rogl_pfn_glNamedFramebufferTexture2DEXT = NULL;
static ROGL_PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC rogl_pfn_glNamedFramebufferTexture3DEXT = NULL;
static ROGL_PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC rogl_pfn_glNamedFramebufferRenderbufferEXT = NULL;
static ROGL_PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC rogl_pfn_glGetNamedFramebufferAttachmentParameterivEXT = NULL;
static ROGL_PFNGLGENERATETEXTUREMIPMAPEXTPROC rogl_pfn_glGenerateTextureMipmapEXT = NULL;
static ROGL_PFNGLGENERATEMULTITEXMIPMAPEXTPROC rogl_pfn_glGenerateMultiTexMipmapEXT = NULL;
static ROGL_PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC rogl_pfn_glFramebufferDrawBufferEXT = NULL;
static ROGL_PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC rogl_pfn_glFramebufferDrawBuffersEXT = NULL;
static ROGL_PFNGLFRAMEBUFFERREADBUFFEREXTPROC rogl_pfn_glFramebufferReadBufferEXT = NULL;
static ROGL_PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC rogl_pfn_glGetFramebufferParameterivEXT = NULL;
static ROGL_PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC rogl_pfn_glNamedCopyBufferSubDataEXT = NULL;
static ROGL_PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC rogl_pfn_glNamedFramebufferTextureEXT = NULL;
static ROGL_PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC rogl_pfn_glNamedFramebufferTextureLayerEXT = NULL;
static ROGL_PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC rogl_pfn_glNamedFramebufferTextureFaceEXT = NULL;
static ROGL_PFNGLTEXTURERENDERBUFFEREXTPROC rogl_pfn_glTextureRenderbufferEXT = NULL;
static ROGL_PFNGLMULTITEXRENDERBUFFEREXTPROC rogl_pfn_glMultiTexRenderbufferEXT = NULL;
static ROGL_PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC rogl_pfn_glVertexArrayVertexOffsetEXT = NULL;
static ROGL_PFNGLVERTEXARRAYCOLOROFFSETEXTPROC rogl_pfn_glVertexArrayColorOffsetEXT = NULL;
static ROGL_PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC rogl_pfn_glVertexArrayEdgeFlagOffsetEXT = NULL;
static ROGL_PFNGLVERTEXARRAYINDEXOFFSETEXTPROC rogl_pfn_glVertexArrayIndexOffsetEXT = NULL;
static ROGL_PFNGLVERTEXARRAYNORMALOFFSETEXTPROC rogl_pfn_glVertexArrayNormalOffsetEXT = NULL;
static ROGL_PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC rogl_pfn_glVertexArrayTexCoordOffsetEXT = NULL;
static ROGL_PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC rogl_pfn_glVertexArrayMultiTexCoordOffsetEXT = NULL;
static ROGL_PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC rogl_pfn_glVertexArrayFogCoordOffsetEXT = NULL;
static ROGL_PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC rogl_pfn_glVertexArraySecondaryColorOffsetEXT = NULL;
static ROGL_PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC rogl_pfn_glVertexArrayVertexAttribOffsetEXT = NULL;
static ROGL_PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC rogl_pfn_glVertexArrayVertexAttribIOffsetEXT = NULL;
static ROGL_PFNGLENABLEVERTEXARRAYEXTPROC rogl_pfn_glEnableVertexArrayEXT = NULL;
static ROGL_PFNGLDISABLEVERTEXARRAYEXTPROC rogl_pfn_glDisableVertexArrayEXT = NULL;
static ROGL_PFNGLENABLEVERTEXARRAYATTRIBEXTPROC rogl_pfn_glEnableVertexArrayAttribEXT = NULL;
static ROGL_PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC rogl_pfn_glDisableVertexArrayAttribEXT = NULL;
static ROGL_PFNGLGETVERTEXARRAYINTEGERVEXTPROC rogl_pfn_glGetVertexArrayIntegervEXT = NULL;
static ROGL_PFNGLGETVERTEXARRAYPOINTERVEXTPROC rogl_pfn_glGetVertexArrayPointervEXT = NULL;
static ROGL_PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC rogl_pfn_glGetVertexArrayIntegeri_vEXT = NULL;
static ROGL_PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC rogl_pfn_glGetVertexArrayPointeri_vEXT = NULL;
static ROGL_PFNGLMAPNAMEDBUFFERRANGEEXTPROC rogl_pfn_glMapNamedBufferRangeEXT = NULL;
static ROGL_PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC rogl_pfn_glFlushMappedNamedBufferRangeEXT = NULL;
static ROGL_PFNGLNAMEDBUFFERSTORAGEEXTPROC rogl_pfn_glNamedBufferStorageEXT = NULL;
static ROGL_PFNGLCLEARNAMEDBUFFERDATAEXTPROC rogl_pfn_glClearNamedBufferDataEXT = NULL;
static ROGL_PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC rogl_pfn_glClearNamedBufferSubDataEXT = NULL;
static ROGL_PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC rogl_pfn_glNamedFramebufferParameteriEXT = NULL;
static ROGL_PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC rogl_pfn_glGetNamedFramebufferParameterivEXT = NULL;
static ROGL_PFNGLPROGRAMUNIFORM1DEXTPROC rogl_pfn_glProgramUniform1dEXT = NULL;
static ROGL_PFNGLPROGRAMUNIFORM2DEXTPROC rogl_pfn_glProgramUniform2dEXT = NULL;
static ROGL_PFNGLPROGRAMUNIFORM3DEXTPROC rogl_pfn_glProgramUniform3dEXT = NULL;
static ROGL_PFNGLPROGRAMUNIFORM4DEXTPROC rogl_pfn_glProgramUniform4dEXT = NULL;
static ROGL_PFNGLPROGRAMUNIFORM1DVEXTPROC rogl_pfn_glProgramUniform1dvEXT = NULL;
static ROGL_PFNGLPROGRAMUNIFORM2DVEXTPROC rogl_pfn_glProgramUniform2dvEXT = NULL;
static ROGL_PFNGLPROGRAMUNIFORM3DVEXTPROC rogl_pfn_glProgramUniform3dvEXT = NULL;
static ROGL_PFNGLPROGRAMUNIFORM4DVEXTPROC rogl_pfn_glProgramUniform4dvEXT = NULL;
static ROGL_PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC rogl_pfn_glProgramUniformMatrix2dvEXT = NULL;
static ROGL_PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC rogl_pfn_glProgramUniformMatrix3dvEXT = NULL;
static ROGL_PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC rogl_pfn_glProgramUniformMatrix4dvEXT = NULL;
static ROGL_PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC rogl_pfn_glProgramUniformMatrix2x3dvEXT = NULL;
static ROGL_PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC rogl_pfn_glProgramUniformMatrix2x4dvEXT = NULL;
static ROGL_PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC rogl_pfn_glProgramUniformMatrix3x2dvEXT = NULL;
static ROGL_PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC rogl_pfn_glProgramUniformMatrix3x4dvEXT = NULL;
static ROGL_PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC rogl_pfn_glProgramUniformMatrix4x2dvEXT = NULL;
static ROGL_PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC rogl_pfn_glProgramUniformMatrix4x3dvEXT = NULL;
static ROGL_PFNGLTEXTUREBUFFERRANGEEXTPROC rogl_pfn_glTextureBufferRangeEXT = NULL;
static ROGL_PFNGLTEXTURESTORAGE1DEXTPROC rogl_pfn_glTextureStorage1DEXT = NULL;
static ROGL_PFNGLTEXTURESTORAGE2DEXTPROC rogl_pfn_glTextureStorage2DEXT = NULL;
static ROGL_PFNGLTEXTURESTORAGE3DEXTPROC rogl_pfn_glTextureStorage3DEXT = NULL;
static ROGL_PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC rogl_pfn_glTextureStorage2DMultisampleEXT = NULL;
static ROGL_PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC rogl_pfn_glTextureStorage3DMultisampleEXT = NULL;
static ROGL_PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC rogl_pfn_glVertexArrayBindVertexBufferEXT = NULL;
static ROGL_PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC rogl_pfn_glVertexArrayVertexAttribFormatEXT = NULL;
static ROGL_PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC rogl_pfn_glVertexArrayVertexAttribIFormatEXT = NULL;
static ROGL_PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC rogl_pfn_glVertexArrayVertexAttribLFormatEXT = NULL;
static ROGL_PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC rogl_pfn_glVertexArrayVertexAttribBindingEXT = NULL;
static ROGL_PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC rogl_pfn_glVertexArrayVertexBindingDivisorEXT = NULL;
static ROGL_PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC rogl_pfn_glVertexArrayVertexAttribLOffsetEXT = NULL;
static ROGL_PFNGLTEXTUREPAGECOMMITMENTEXTPROC rogl_pfn_glTexturePageCommitmentEXT = NULL;
static ROGL_PFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC rogl_pfn_glVertexArrayVertexAttribDivisorEXT = NULL;
static ROGL_PFNGLCOLORMASKINDEXEDEXTPROC rogl_pfn_glColorMaskIndexedEXT = NULL;
static ROGL_PFNGLDRAWARRAYSINSTANCEDEXTPROC rogl_pfn_glDrawArraysInstancedEXT = NULL;
static ROGL_PFNGLDRAWELEMENTSINSTANCEDEXTPROC rogl_pfn_glDrawElementsInstancedEXT = NULL;
static ROGL_PFNGLDRAWRANGEELEMENTSEXTPROC rogl_pfn_glDrawRangeElementsEXT = NULL;
static ROGL_PFNGLFOGCOORDFEXTPROC rogl_pfn_glFogCoordfEXT = NULL;
static ROGL_PFNGLFOGCOORDFVEXTPROC rogl_pfn_glFogCoordfvEXT = NULL;
static ROGL_PFNGLFOGCOORDDEXTPROC rogl_pfn_glFogCoorddEXT = NULL;
static ROGL_PFNGLFOGCOORDDVEXTPROC rogl_pfn_glFogCoorddvEXT = NULL;
static ROGL_PFNGLFOGCOORDPOINTEREXTPROC rogl_pfn_glFogCoordPointerEXT = NULL;
static ROGL_PFNGLBLITFRAMEBUFFEREXTPROC rogl_pfn_glBlitFramebufferEXT = NULL;
static ROGL_PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC rogl_pfn_glRenderbufferStorageMultisampleEXT = NULL;
static ROGL_PFNGLISRENDERBUFFEREXTPROC rogl_pfn_glIsRenderbufferEXT = NULL;
static ROGL_PFNGLBINDRENDERBUFFEREXTPROC rogl_pfn_glBindRenderbufferEXT = NULL;
static ROGL_PFNGLDELETERENDERBUFFERSEXTPROC rogl_pfn_glDeleteRenderbuffersEXT = NULL;
static ROGL_PFNGLGENRENDERBUFFERSEXTPROC rogl_pfn_glGenRenderbuffersEXT = NULL;
static ROGL_PFNGLRENDERBUFFERSTORAGEEXTPROC rogl_pfn_glRenderbufferStorageEXT = NULL;
static ROGL_PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC rogl_pfn_glGetRenderbufferParameterivEXT = NULL;
static ROGL_PFNGLISFRAMEBUFFEREXTPROC rogl_pfn_glIsFramebufferEXT = NULL;
static ROGL_PFNGLBINDFRAMEBUFFEREXTPROC rogl_pfn_glBindFramebufferEXT = NULL;
static ROGL_PFNGLDELETEFRAMEBUFFERSEXTPROC rogl_pfn_glDeleteFramebuffersEXT = NULL;
static ROGL_PFNGLGENFRAMEBUFFERSEXTPROC rogl_pfn_glGenFramebuffersEXT = NULL;
static ROGL_PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC rogl_pfn_glCheckFramebufferStatusEXT = NULL;
static ROGL_PFNGLFRAMEBUFFERTEXTURE1DEXTPROC rogl_pfn_glFramebufferTexture1DEXT = NULL;
static ROGL_PFNGLFRAMEBUFFERTEXTURE2DEXTPROC rogl_pfn_glFramebufferTexture2DEXT = NULL;
static ROGL_PFNGLFRAMEBUFFERTEXTURE3DEXTPROC rogl_pfn_glFramebufferTexture3DEXT = NULL;
static ROGL_PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC rogl_pfn_glFramebufferRenderbufferEXT = NULL;
static ROGL_PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC rogl_pfn_glGetFramebufferAttachmentParameterivEXT = NULL;
static ROGL_PFNGLGENERATEMIPMAPEXTPROC rogl_pfn_glGenerateMipmapEXT = NULL;
static ROGL_PFNGLPROGRAMENVPARAMETERS4FVEXTPROC rogl_pfn_glProgramEnvParameters4fvEXT = NULL;
static ROGL_PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC rogl_pfn_glProgramLocalParameters4fvEXT = NULL;
static ROGL_PFNGLGETUNIFORMUIVEXTPROC rogl_pfn_glGetUniformuivEXT = NULL;
static ROGL_PFNGLBINDFRAGDATALOCATIONEXTPROC rogl_pfn_glBindFragDataLocationEXT = NULL;
static ROGL_PFNGLGETFRAGDATALOCATIONEXTPROC rogl_pfn_glGetFragDataLocationEXT = NULL;
static ROGL_PFNGLUNIFORM1UIEXTPROC rogl_pfn_glUniform1uiEXT = NULL;
static ROGL_PFNGLUNIFORM2UIEXTPROC rogl_pfn_glUniform2uiEXT = NULL;
static ROGL_PFNGLUNIFORM3UIEXTPROC rogl_pfn_glUniform3uiEXT = NULL;
static ROGL_PFNGLUNIFORM4UIEXTPROC rogl_pfn_glUniform4uiEXT = NULL;
static ROGL_PFNGLUNIFORM1UIVEXTPROC rogl_pfn_glUniform1uivEXT = NULL;
static ROGL_PFNGLUNIFORM2UIVEXTPROC rogl_pfn_glUniform2uivEXT = NULL;
static ROGL_PFNGLUNIFORM3UIVEXTPROC rogl_pfn_glUniform3uivEXT = NULL;
static ROGL_PFNGLUNIFORM4UIVEXTPROC rogl_pfn_glUniform4uivEXT = NULL;
static ROGL_PFNGLGETHISTOGRAMEXTPROC rogl_pfn_glGetHistogramEXT = NULL;
static ROGL_PFNGLGETHISTOGRAMPARAMETERFVEXTPROC rogl_pfn_glGetHistogramParameterfvEXT = NULL;
static ROGL_PFNGLGETHISTOGRAMPARAMETERIVEXTPROC rogl_pfn_glGetHistogramParameterivEXT = NULL;
static ROGL_PFNGLGETMINMAXEXTPROC rogl_pfn_glGetMinmaxEXT = NULL;
static ROGL_PFNGLGETMINMAXPARAMETERFVEXTPROC rogl_pfn_glGetMinmaxParameterfvEXT = NULL;
static ROGL_PFNGLGETMINMAXPARAMETERIVEXTPROC rogl_pfn_glGetMinmaxParameterivEXT = NULL;
static ROGL_PFNGLHISTOGRAMEXTPROC rogl_pfn_glHistogramEXT = NULL;
static ROGL_PFNGLMINMAXEXTPROC rogl_pfn_glMinmaxEXT = NULL;
static ROGL_PFNGLRESETHISTOGRAMEXTPROC rogl_pfn_glResetHistogramEXT = NULL;
static ROGL_PFNGLRESETMINMAXEXTPROC rogl_pfn_glResetMinmaxEXT = NULL;
static ROGL_PFNGLINDEXFUNCEXTPROC rogl_pfn_glIndexFuncEXT = NULL;
static ROGL_PFNGLINDEXMATERIALEXTPROC rogl_pfn_glIndexMaterialEXT = NULL;
static ROGL_PFNGLAPPLYTEXTUREEXTPROC rogl_pfn_glApplyTextureEXT = NULL;
static ROGL_PFNGLTEXTURELIGHTEXTPROC rogl_pfn_glTextureLightEXT = NULL;
static ROGL_PFNGLTEXTUREMATERIALEXTPROC rogl_pfn_glTextureMaterialEXT = NULL;
static ROGL_PFNGLMULTIDRAWARRAYSEXTPROC rogl_pfn_glMultiDrawArraysEXT = NULL;
static ROGL_PFNGLMULTIDRAWELEMENTSEXTPROC rogl_pfn_glMultiDrawElementsEXT = NULL;
static ROGL_PFNGLSAMPLEMASKEXTPROC rogl_pfn_glSampleMaskEXT = NULL;
static ROGL_PFNGLSAMPLEPATTERNEXTPROC rogl_pfn_glSamplePatternEXT = NULL;
static ROGL_PFNGLCOLORTABLEEXTPROC rogl_pfn_glColorTableEXT = NULL;
static ROGL_PFNGLGETCOLORTABLEEXTPROC rogl_pfn_glGetColorTableEXT = NULL;
static ROGL_PFNGLGETCOLORTABLEPARAMETERIVEXTPROC rogl_pfn_glGetColorTableParameterivEXT = NULL;
static ROGL_PFNGLGETCOLORTABLEPARAMETERFVEXTPROC rogl_pfn_glGetColorTableParameterfvEXT = NULL;
static ROGL_PFNGLPIXELTRANSFORMPARAMETERIEXTPROC rogl_pfn_glPixelTransformParameteriEXT = NULL;
static ROGL_PFNGLPIXELTRANSFORMPARAMETERFEXTPROC rogl_pfn_glPixelTransformParameterfEXT = NULL;
static ROGL_PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC rogl_pfn_glPixelTransformParameterivEXT = NULL;
static ROGL_PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC rogl_pfn_glPixelTransformParameterfvEXT = NULL;
static ROGL_PFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC rogl_pfn_glGetPixelTransformParameterivEXT = NULL;
static ROGL_PFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC rogl_pfn_glGetPixelTransformParameterfvEXT = NULL;
static ROGL_PFNGLPOINTPARAMETERFEXTPROC rogl_pfn_glPointParameterfEXT = NULL;
static ROGL_PFNGLPOINTPARAMETERFVEXTPROC rogl_pfn_glPointParameterfvEXT = NULL;
static ROGL_PFNGLPOLYGONOFFSETEXTPROC rogl_pfn_glPolygonOffsetEXT = NULL;
static ROGL_PFNGLPOLYGONOFFSETCLAMPEXTPROC rogl_pfn_glPolygonOffsetClampEXT = NULL;
static ROGL_PFNGLPROVOKINGVERTEXEXTPROC rogl_pfn_glProvokingVertexEXT = NULL;
static ROGL_PFNGLSECONDARYCOLOR3BEXTPROC rogl_pfn_glSecondaryColor3bEXT = NULL;
static ROGL_PFNGLSECONDARYCOLOR3BVEXTPROC rogl_pfn_glSecondaryColor3bvEXT = NULL;
static ROGL_PFNGLSECONDARYCOLOR3DEXTPROC rogl_pfn_glSecondaryColor3dEXT = NULL;
static ROGL_PFNGLSECONDARYCOLOR3DVEXTPROC rogl_pfn_glSecondaryColor3dvEXT = NULL;
static ROGL_PFNGLSECONDARYCOLOR3FEXTPROC rogl_pfn_glSecondaryColor3fEXT = NULL;
static ROGL_PFNGLSECONDARYCOLOR3FVEXTPROC rogl_pfn_glSecondaryColor3fvEXT = NULL;
static ROGL_PFNGLSECONDARYCOLOR3IEXTPROC rogl_pfn_glSecondaryColor3iEXT = NULL;
static ROGL_PFNGLSECONDARYCOLOR3IVEXTPROC rogl_pfn_glSecondaryColor3ivEXT = NULL;
static ROGL_PFNGLSECONDARYCOLOR3SEXTPROC rogl_pfn_glSecondaryColor3sEXT = NULL;
static ROGL_PFNGLSECONDARYCOLOR3SVEXTPROC rogl_pfn_glSecondaryColor3svEXT = NULL;
static ROGL_PFNGLSECONDARYCOLOR3UBEXTPROC rogl_pfn_glSecondaryColor3ubEXT = NULL;
static ROGL_PFNGLSECONDARYCOLOR3UBVEXTPROC rogl_pfn_glSecondaryColor3ubvEXT = NULL;
static ROGL_PFNGLSECONDARYCOLOR3UIEXTPROC rogl_pfn_glSecondaryColor3uiEXT = NULL;
static ROGL_PFNGLSECONDARYCOLOR3UIVEXTPROC rogl_pfn_glSecondaryColor3uivEXT = NULL;
static ROGL_PFNGLSECONDARYCOLOR3USEXTPROC rogl_pfn_glSecondaryColor3usEXT = NULL;
static ROGL_PFNGLSECONDARYCOLOR3USVEXTPROC rogl_pfn_glSecondaryColor3usvEXT = NULL;
static ROGL_PFNGLSECONDARYCOLORPOINTEREXTPROC rogl_pfn_glSecondaryColorPointerEXT = NULL;
static ROGL_PFNGLUSESHADERPROGRAMEXTPROC rogl_pfn_glUseShaderProgramEXT = NULL;
static ROGL_PFNGLACTIVEPROGRAMEXTPROC rogl_pfn_glActiveProgramEXT = NULL;
static ROGL_PFNGLCREATESHADERPROGRAMEXTPROC rogl_pfn_glCreateShaderProgramEXT = NULL;
static ROGL_PFNGLACTIVESHADERPROGRAMEXTPROC rogl_pfn_glActiveShaderProgramEXT = NULL;
static ROGL_PFNGLBINDPROGRAMPIPELINEEXTPROC rogl_pfn_glBindProgramPipelineEXT = NULL;
static ROGL_PFNGLCREATESHADERPROGRAMVEXTPROC rogl_pfn_glCreateShaderProgramvEXT = NULL;
static ROGL_PFNGLDELETEPROGRAMPIPELINESEXTPROC rogl_pfn_glDeleteProgramPipelinesEXT = NULL;
static ROGL_PFNGLGENPROGRAMPIPELINESEXTPROC rogl_pfn_glGenProgramPipelinesEXT = NULL;
static ROGL_PFNGLGETPROGRAMPIPELINEINFOLOGEXTPROC rogl_pfn_glGetProgramPipelineInfoLogEXT = NULL;
static ROGL_PFNGLGETPROGRAMPIPELINEIVEXTPROC rogl_pfn_glGetProgramPipelineivEXT = NULL;
static ROGL_PFNGLISPROGRAMPIPELINEEXTPROC rogl_pfn_glIsProgramPipelineEXT = NULL;
static ROGL_PFNGLUSEPROGRAMSTAGESEXTPROC rogl_pfn_glUseProgramStagesEXT = NULL;
static ROGL_PFNGLVALIDATEPROGRAMPIPELINEEXTPROC rogl_pfn_glValidateProgramPipelineEXT = NULL;
static ROGL_PFNGLBINDIMAGETEXTUREEXTPROC rogl_pfn_glBindImageTextureEXT = NULL;
static ROGL_PFNGLMEMORYBARRIEREXTPROC rogl_pfn_glMemoryBarrierEXT = NULL;
static ROGL_PFNGLSTENCILCLEARTAGEXTPROC rogl_pfn_glStencilClearTagEXT = NULL;
static ROGL_PFNGLACTIVESTENCILFACEEXTPROC rogl_pfn_glActiveStencilFaceEXT = NULL;
static ROGL_PFNGLTEXSUBIMAGE1DEXTPROC rogl_pfn_glTexSubImage1DEXT = NULL;
static ROGL_PFNGLTEXSUBIMAGE2DEXTPROC rogl_pfn_glTexSubImage2DEXT = NULL;
static ROGL_PFNGLTEXIMAGE3DEXTPROC rogl_pfn_glTexImage3DEXT = NULL;
static ROGL_PFNGLTEXSUBIMAGE3DEXTPROC rogl_pfn_glTexSubImage3DEXT = NULL;
static ROGL_PFNGLTEXBUFFEREXTPROC rogl_pfn_glTexBufferEXT = NULL;
static ROGL_PFNGLTEXPARAMETERIIVEXTPROC rogl_pfn_glTexParameterIivEXT = NULL;
static ROGL_PFNGLTEXPARAMETERIUIVEXTPROC rogl_pfn_glTexParameterIuivEXT = NULL;
static ROGL_PFNGLGETTEXPARAMETERIIVEXTPROC rogl_pfn_glGetTexParameterIivEXT = NULL;
static ROGL_PFNGLGETTEXPARAMETERIUIVEXTPROC rogl_pfn_glGetTexParameterIuivEXT = NULL;
static ROGL_PFNGLCLEARCOLORIIEXTPROC rogl_pfn_glClearColorIiEXT = NULL;
static ROGL_PFNGLCLEARCOLORIUIEXTPROC rogl_pfn_glClearColorIuiEXT = NULL;
static ROGL_PFNGLARETEXTURESRESIDENTEXTPROC rogl_pfn_glAreTexturesResidentEXT = NULL;
static ROGL_PFNGLBINDTEXTUREEXTPROC rogl_pfn_glBindTextureEXT = NULL;
static ROGL_PFNGLDELETETEXTURESEXTPROC rogl_pfn_glDeleteTexturesEXT = NULL;
static ROGL_PFNGLGENTEXTURESEXTPROC rogl_pfn_glGenTexturesEXT = NULL;
static ROGL_PFNGLISTEXTUREEXTPROC rogl_pfn_glIsTextureEXT = NULL;
static ROGL_PFNGLPRIORITIZETEXTURESEXTPROC rogl_pfn_glPrioritizeTexturesEXT = NULL;
static ROGL_PFNGLTEXTURENORMALEXTPROC rogl_pfn_glTextureNormalEXT = NULL;
static ROGL_PFNGLGETQUERYOBJECTI64VEXTPROC rogl_pfn_glGetQueryObjecti64vEXT = NULL;
static ROGL_PFNGLGETQUERYOBJECTUI64VEXTPROC rogl_pfn_glGetQueryObjectui64vEXT = NULL;
static ROGL_PFNGLBEGINTRANSFORMFEEDBACKEXTPROC rogl_pfn_glBeginTransformFeedbackEXT = NULL;
static ROGL_PFNGLENDTRANSFORMFEEDBACKEXTPROC rogl_pfn_glEndTransformFeedbackEXT = NULL;
static ROGL_PFNGLBINDBUFFERRANGEEXTPROC rogl_pfn_glBindBufferRangeEXT = NULL;
static ROGL_PFNGLBINDBUFFEROFFSETEXTPROC rogl_pfn_glBindBufferOffsetEXT = NULL;
static ROGL_PFNGLBINDBUFFERBASEEXTPROC rogl_pfn_glBindBufferBaseEXT = NULL;
static ROGL_PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC rogl_pfn_glTransformFeedbackVaryingsEXT = NULL;
static ROGL_PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC rogl_pfn_glGetTransformFeedbackVaryingEXT = NULL;
static ROGL_PFNGLARRAYELEMENTEXTPROC rogl_pfn_glArrayElementEXT = NULL;
static ROGL_PFNGLCOLORPOINTEREXTPROC rogl_pfn_glColorPointerEXT = NULL;
static ROGL_PFNGLDRAWARRAYSEXTPROC rogl_pfn_glDrawArraysEXT = NULL;
static ROGL_PFNGLEDGEFLAGPOINTEREXTPROC rogl_pfn_glEdgeFlagPointerEXT = NULL;
static ROGL_PFNGLGETPOINTERVEXTPROC rogl_pfn_glGetPointervEXT = NULL;
static ROGL_PFNGLINDEXPOINTEREXTPROC rogl_pfn_glIndexPointerEXT = NULL;
static ROGL_PFNGLNORMALPOINTEREXTPROC rogl_pfn_glNormalPointerEXT = NULL;
static ROGL_PFNGLTEXCOORDPOINTEREXTPROC rogl_pfn_glTexCoordPointerEXT = NULL;
static ROGL_PFNGLVERTEXPOINTEREXTPROC rogl_pfn_glVertexPointerEXT = NULL;
static ROGL_PFNGLVERTEXATTRIBL1DEXTPROC rogl_pfn_glVertexAttribL1dEXT = NULL;
static ROGL_PFNGLVERTEXATTRIBL2DEXTPROC rogl_pfn_glVertexAttribL2dEXT = NULL;
static ROGL_PFNGLVERTEXATTRIBL3DEXTPROC rogl_pfn_glVertexAttribL3dEXT = NULL;
static ROGL_PFNGLVERTEXATTRIBL4DEXTPROC rogl_pfn_glVertexAttribL4dEXT = NULL;
static ROGL_PFNGLVERTEXATTRIBL1DVEXTPROC rogl_pfn_glVertexAttribL1dvEXT = NULL;
static ROGL_PFNGLVERTEXATTRIBL2DVEXTPROC rogl_pfn_glVertexAttribL2dvEXT = NULL;
static ROGL_PFNGLVERTEXATTRIBL3DVEXTPROC rogl_pfn_glVertexAttribL3dvEXT = NULL;
static ROGL_PFNGLVERTEXATTRIBL4DVEXTPROC rogl_pfn_glVertexAttribL4dvEXT = NULL;
static ROGL_PFNGLVERTEXATTRIBLPOINTEREXTPROC rogl_pfn_glVertexAttribLPointerEXT = NULL;
static ROGL_PFNGLGETVERTEXATTRIBLDVEXTPROC rogl_pfn_glGetVertexAttribLdvEXT = NULL;
static ROGL_PFNGLBEGINVERTEXSHADEREXTPROC rogl_pfn_glBeginVertexShaderEXT = NULL;
static ROGL_PFNGLENDVERTEXSHADEREXTPROC rogl_pfn_glEndVertexShaderEXT = NULL;
static ROGL_PFNGLBINDVERTEXSHADEREXTPROC rogl_pfn_glBindVertexShaderEXT = NULL;
static ROGL_PFNGLGENVERTEXSHADERSEXTPROC rogl_pfn_glGenVertexShadersEXT = NULL;
static ROGL_PFNGLDELETEVERTEXSHADEREXTPROC rogl_pfn_glDeleteVertexShaderEXT = NULL;
static ROGL_PFNGLSHADEROP1EXTPROC rogl_pfn_glShaderOp1EXT = NULL;
static ROGL_PFNGLSHADEROP2EXTPROC rogl_pfn_glShaderOp2EXT = NULL;
static ROGL_PFNGLSHADEROP3EXTPROC rogl_pfn_glShaderOp3EXT = NULL;
static ROGL_PFNGLSWIZZLEEXTPROC rogl_pfn_glSwizzleEXT = NULL;
static ROGL_PFNGLWRITEMASKEXTPROC rogl_pfn_glWriteMaskEXT = NULL;
static ROGL_PFNGLINSERTCOMPONENTEXTPROC rogl_pfn_glInsertComponentEXT = NULL;
static ROGL_PFNGLEXTRACTCOMPONENTEXTPROC rogl_pfn_glExtractComponentEXT = NULL;
static ROGL_PFNGLGENSYMBOLSEXTPROC rogl_pfn_glGenSymbolsEXT = NULL;
static ROGL_PFNGLSETINVARIANTEXTPROC rogl_pfn_glSetInvariantEXT = NULL;
static ROGL_PFNGLSETLOCALCONSTANTEXTPROC rogl_pfn_glSetLocalConstantEXT = NULL;
static ROGL_PFNGLVARIANTBVEXTPROC rogl_pfn_glVariantbvEXT = NULL;
static ROGL_PFNGLVARIANTSVEXTPROC rogl_pfn_glVariantsvEXT = NULL;
static ROGL_PFNGLVARIANTIVEXTPROC rogl_pfn_glVariantivEXT = NULL;
static ROGL_PFNGLVARIANTFVEXTPROC rogl_pfn_glVariantfvEXT = NULL;
static ROGL_PFNGLVARIANTDVEXTPROC rogl_pfn_glVariantdvEXT = NULL;
static ROGL_PFNGLVARIANTUBVEXTPROC rogl_pfn_glVariantubvEXT = NULL;
static ROGL_PFNGLVARIANTUSVEXTPROC rogl_pfn_glVariantusvEXT = NULL;
static ROGL_PFNGLVARIANTUIVEXTPROC rogl_pfn_glVariantuivEXT = NULL;
static ROGL_PFNGLVARIANTPOINTEREXTPROC rogl_pfn_glVariantPointerEXT = NULL;
static ROGL_PFNGLENABLEVARIANTCLIENTSTATEEXTPROC rogl_pfn_glEnableVariantClientStateEXT = NULL;
static ROGL_PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC rogl_pfn_glDisableVariantClientStateEXT = NULL;
static ROGL_PFNGLBINDLIGHTPARAMETEREXTPROC rogl_pfn_glBindLightParameterEXT = NULL;
static ROGL_PFNGLBINDMATERIALPARAMETEREXTPROC rogl_pfn_glBindMaterialParameterEXT = NULL;
static ROGL_PFNGLBINDTEXGENPARAMETEREXTPROC rogl_pfn_glBindTexGenParameterEXT = NULL;
static ROGL_PFNGLBINDTEXTUREUNITPARAMETEREXTPROC rogl_pfn_glBindTextureUnitParameterEXT = NULL;
static ROGL_PFNGLBINDPARAMETEREXTPROC rogl_pfn_glBindParameterEXT = NULL;
static ROGL_PFNGLISVARIANTENABLEDEXTPROC rogl_pfn_glIsVariantEnabledEXT = NULL;
static ROGL_PFNGLGETVARIANTBOOLEANVEXTPROC rogl_pfn_glGetVariantBooleanvEXT = NULL;
static ROGL_PFNGLGETVARIANTINTEGERVEXTPROC rogl_pfn_glGetVariantIntegervEXT = NULL;
static ROGL_PFNGLGETVARIANTFLOATVEXTPROC rogl_pfn_glGetVariantFloatvEXT = NULL;
static ROGL_PFNGLGETVARIANTPOINTERVEXTPROC rogl_pfn_glGetVariantPointervEXT = NULL;
static ROGL_PFNGLGETINVARIANTBOOLEANVEXTPROC rogl_pfn_glGetInvariantBooleanvEXT = NULL;
static ROGL_PFNGLGETINVARIANTINTEGERVEXTPROC rogl_pfn_glGetInvariantIntegervEXT = NULL;
static ROGL_PFNGLGETINVARIANTFLOATVEXTPROC rogl_pfn_glGetInvariantFloatvEXT = NULL;
static ROGL_PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC rogl_pfn_glGetLocalConstantBooleanvEXT = NULL;
static ROGL_PFNGLGETLOCALCONSTANTINTEGERVEXTPROC rogl_pfn_glGetLocalConstantIntegervEXT = NULL;
static ROGL_PFNGLGETLOCALCONSTANTFLOATVEXTPROC rogl_pfn_glGetLocalConstantFloatvEXT = NULL;
static ROGL_PFNGLVERTEXWEIGHTFEXTPROC rogl_pfn_glVertexWeightfEXT = NULL;
static ROGL_PFNGLVERTEXWEIGHTFVEXTPROC rogl_pfn_glVertexWeightfvEXT = NULL;
static ROGL_PFNGLVERTEXWEIGHTPOINTEREXTPROC rogl_pfn_glVertexWeightPointerEXT = NULL;
static ROGL_PFNGLIMPORTSYNCEXTPROC rogl_pfn_glImportSyncEXT = NULL;
static ROGL_PFNGLFRAMETERMINATORGREMEDYPROC rogl_pfn_glFrameTerminatorGREMEDY = NULL;
static ROGL_PFNGLSTRINGMARKERGREMEDYPROC rogl_pfn_glStringMarkerGREMEDY = NULL;
static ROGL_PFNGLIMAGETRANSFORMPARAMETERIHPPROC rogl_pfn_glImageTransformParameteriHP = NULL;
static ROGL_PFNGLIMAGETRANSFORMPARAMETERFHPPROC rogl_pfn_glImageTransformParameterfHP = NULL;
static ROGL_PFNGLIMAGETRANSFORMPARAMETERIVHPPROC rogl_pfn_glImageTransformParameterivHP = NULL;
static ROGL_PFNGLIMAGETRANSFORMPARAMETERFVHPPROC rogl_pfn_glImageTransformParameterfvHP = NULL;
static ROGL_PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC rogl_pfn_glGetImageTransformParameterivHP = NULL;
static ROGL_PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC rogl_pfn_glGetImageTransformParameterfvHP = NULL;
static ROGL_PFNGLMULTIMODEDRAWARRAYSIBMPROC rogl_pfn_glMultiModeDrawArraysIBM = NULL;
static ROGL_PFNGLMULTIMODEDRAWELEMENTSIBMPROC rogl_pfn_glMultiModeDrawElementsIBM = NULL;
static ROGL_PFNGLFLUSHSTATICDATAIBMPROC rogl_pfn_glFlushStaticDataIBM = NULL;
static ROGL_PFNGLCOLORPOINTERLISTIBMPROC rogl_pfn_glColorPointerListIBM = NULL;
static ROGL_PFNGLSECONDARYCOLORPOINTERLISTIBMPROC rogl_pfn_glSecondaryColorPointerListIBM = NULL;
static ROGL_PFNGLEDGEFLAGPOINTERLISTIBMPROC rogl_pfn_glEdgeFlagPointerListIBM = NULL;
static ROGL_PFNGLFOGCOORDPOINTERLISTIBMPROC rogl_pfn_glFogCoordPointerListIBM = NULL;
static ROGL_PFNGLINDEXPOINTERLISTIBMPROC rogl_pfn_glIndexPointerListIBM = NULL;
static ROGL_PFNGLNORMALPOINTERLISTIBMPROC rogl_pfn_glNormalPointerListIBM = NULL;
static ROGL_PFNGLTEXCOORDPOINTERLISTIBMPROC rogl_pfn_glTexCoordPointerListIBM = NULL;
static ROGL_PFNGLVERTEXPOINTERLISTIBMPROC rogl_pfn_glVertexPointerListIBM = NULL;
static ROGL_PFNGLBLENDFUNCSEPARATEINGRPROC rogl_pfn_glBlendFuncSeparateINGR = NULL;
static ROGL_PFNGLAPPLYFRAMEBUFFERATTACHMENTCMAAINTELPROC rogl_pfn_glApplyFramebufferAttachmentCMAAINTEL = NULL;
static ROGL_PFNGLSYNCTEXTUREINTELPROC rogl_pfn_glSyncTextureINTEL = NULL;
static ROGL_PFNGLUNMAPTEXTURE2DINTELPROC rogl_pfn_glUnmapTexture2DINTEL = NULL;
static ROGL_PFNGLMAPTEXTURE2DINTELPROC rogl_pfn_glMapTexture2DINTEL = NULL;
static ROGL_PFNGLVERTEXPOINTERVINTELPROC rogl_pfn_glVertexPointervINTEL = NULL;
static ROGL_PFNGLNORMALPOINTERVINTELPROC rogl_pfn_glNormalPointervINTEL = NULL;
static ROGL_PFNGLCOLORPOINTERVINTELPROC rogl_pfn_glColorPointervINTEL = NULL;
static ROGL_PFNGLTEXCOORDPOINTERVINTELPROC rogl_pfn_glTexCoordPointervINTEL = NULL;
static ROGL_PFNGLBEGINPERFQUERYINTELPROC rogl_pfn_glBeginPerfQueryINTEL = NULL;
static ROGL_PFNGLCREATEPERFQUERYINTELPROC rogl_pfn_glCreatePerfQueryINTEL = NULL;
static ROGL_PFNGLDELETEPERFQUERYINTELPROC rogl_pfn_glDeletePerfQueryINTEL = NULL;
static ROGL_PFNGLENDPERFQUERYINTELPROC rogl_pfn_glEndPerfQueryINTEL = NULL;
static ROGL_PFNGLGETFIRSTPERFQUERYIDINTELPROC rogl_pfn_glGetFirstPerfQueryIdINTEL = NULL;
static ROGL_PFNGLGETNEXTPERFQUERYIDINTELPROC rogl_pfn_glGetNextPerfQueryIdINTEL = NULL;
static ROGL_PFNGLGETPERFCOUNTERINFOINTELPROC rogl_pfn_glGetPerfCounterInfoINTEL = NULL;
static ROGL_PFNGLGETPERFQUERYDATAINTELPROC rogl_pfn_glGetPerfQueryDataINTEL = NULL;
static ROGL_PFNGLGETPERFQUERYIDBYNAMEINTELPROC rogl_pfn_glGetPerfQueryIdByNameINTEL = NULL;
static ROGL_PFNGLGETPERFQUERYINFOINTELPROC rogl_pfn_glGetPerfQueryInfoINTEL = NULL;
static ROGL_PFNGLBLENDBARRIERKHRPROC rogl_pfn_glBlendBarrierKHR = NULL;
static ROGL_PFNGLDEBUGMESSAGECONTROLKHRPROC rogl_pfn_glDebugMessageControlKHR = NULL;
static ROGL_PFNGLDEBUGMESSAGEINSERTKHRPROC rogl_pfn_glDebugMessageInsertKHR = NULL;
static ROGL_PFNGLDEBUGMESSAGECALLBACKKHRPROC rogl_pfn_glDebugMessageCallbackKHR = NULL;
static ROGL_PFNGLGETDEBUGMESSAGELOGKHRPROC rogl_pfn_glGetDebugMessageLogKHR = NULL;
static ROGL_PFNGLPUSHDEBUGGROUPKHRPROC rogl_pfn_glPushDebugGroupKHR = NULL;
static ROGL_PFNGLPOPDEBUGGROUPKHRPROC rogl_pfn_glPopDebugGroupKHR = NULL;
static ROGL_PFNGLOBJECTLABELKHRPROC rogl_pfn_glObjectLabelKHR = NULL;
static ROGL_PFNGLGETOBJECTLABELKHRPROC rogl_pfn_glGetObjectLabelKHR = NULL;
static ROGL_PFNGLOBJECTPTRLABELKHRPROC rogl_pfn_glObjectPtrLabelKHR = NULL;
static ROGL_PFNGLGETOBJECTPTRLABELKHRPROC rogl_pfn_glGetObjectPtrLabelKHR = NULL;
static ROGL_PFNGLGETPOINTERVKHRPROC rogl_pfn_glGetPointervKHR = NULL;
static ROGL_PFNGLGETGRAPHICSRESETSTATUSKHRPROC rogl_pfn_glGetGraphicsResetStatusKHR = NULL;
static ROGL_PFNGLREADNPIXELSKHRPROC rogl_pfn_glReadnPixelsKHR = NULL;
static ROGL_PFNGLGETNUNIFORMFVKHRPROC rogl_pfn_glGetnUniformfvKHR = NULL;
static ROGL_PFNGLGETNUNIFORMIVKHRPROC rogl_pfn_glGetnUniformivKHR = NULL;
static ROGL_PFNGLGETNUNIFORMUIVKHRPROC rogl_pfn_glGetnUniformuivKHR = NULL;
static ROGL_PFNGLRESIZEBUFFERSMESAPROC rogl_pfn_glResizeBuffersMESA = NULL;
static ROGL_PFNGLWINDOWPOS2DMESAPROC rogl_pfn_glWindowPos2dMESA = NULL;
static ROGL_PFNGLWINDOWPOS2DVMESAPROC rogl_pfn_glWindowPos2dvMESA = NULL;
static ROGL_PFNGLWINDOWPOS2FMESAPROC rogl_pfn_glWindowPos2fMESA = NULL;
static ROGL_PFNGLWINDOWPOS2FVMESAPROC rogl_pfn_glWindowPos2fvMESA = NULL;
static ROGL_PFNGLWINDOWPOS2IMESAPROC rogl_pfn_glWindowPos2iMESA = NULL;
static ROGL_PFNGLWINDOWPOS2IVMESAPROC rogl_pfn_glWindowPos2ivMESA = NULL;
static ROGL_PFNGLWINDOWPOS2SMESAPROC rogl_pfn_glWindowPos2sMESA = NULL;
static ROGL_PFNGLWINDOWPOS2SVMESAPROC rogl_pfn_glWindowPos2svMESA = NULL;
static ROGL_PFNGLWINDOWPOS3DMESAPROC rogl_pfn_glWindowPos3dMESA = NULL;
static ROGL_PFNGLWINDOWPOS3DVMESAPROC rogl_pfn_glWindowPos3dvMESA = NULL;
static ROGL_PFNGLWINDOWPOS3FMESAPROC rogl_pfn_glWindowPos3fMESA = NULL;
static ROGL_PFNGLWINDOWPOS3FVMESAPROC rogl_pfn_glWindowPos3fvMESA = NULL;
static ROGL_PFNGLWINDOWPOS3IMESAPROC rogl_pfn_glWindowPos3iMESA = NULL;
static ROGL_PFNGLWINDOWPOS3IVMESAPROC rogl_pfn_glWindowPos3ivMESA = NULL;
static ROGL_PFNGLWINDOWPOS3SMESAPROC rogl_pfn_glWindowPos3sMESA = NULL;
static ROGL_PFNGLWINDOWPOS3SVMESAPROC rogl_pfn_glWindowPos3svMESA = NULL;
static ROGL_PFNGLWINDOWPOS4DMESAPROC rogl_pfn_glWindowPos4dMESA = NULL;
static ROGL_PFNGLWINDOWPOS4DVMESAPROC rogl_pfn_glWindowPos4dvMESA = NULL;
static ROGL_PFNGLWINDOWPOS4FMESAPROC rogl_pfn_glWindowPos4fMESA = NULL;
static ROGL_PFNGLWINDOWPOS4FVMESAPROC rogl_pfn_glWindowPos4fvMESA = NULL;
static ROGL_PFNGLWINDOWPOS4IMESAPROC rogl_pfn_glWindowPos4iMESA = NULL;
static ROGL_PFNGLWINDOWPOS4IVMESAPROC rogl_pfn_glWindowPos4ivMESA = NULL;
static ROGL_PFNGLWINDOWPOS4SMESAPROC rogl_pfn_glWindowPos4sMESA = NULL;
static ROGL_PFNGLWINDOWPOS4SVMESAPROC rogl_pfn_glWindowPos4svMESA = NULL;
static ROGL_PFNGLBEGINCONDITIONALRENDERNVXPROC rogl_pfn_glBeginConditionalRenderNVX = NULL;
static ROGL_PFNGLENDCONDITIONALRENDERNVXPROC rogl_pfn_glEndConditionalRenderNVX = NULL;
static ROGL_PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSNVPROC rogl_pfn_glMultiDrawArraysIndirectBindlessNV = NULL;
static ROGL_PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSNVPROC rogl_pfn_glMultiDrawElementsIndirectBindlessNV = NULL;
static ROGL_PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSCOUNTNVPROC rogl_pfn_glMultiDrawArraysIndirectBindlessCountNV = NULL;
static ROGL_PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSCOUNTNVPROC rogl_pfn_glMultiDrawElementsIndirectBindlessCountNV = NULL;
static ROGL_PFNGLGETTEXTUREHANDLENVPROC rogl_pfn_glGetTextureHandleNV = NULL;
static ROGL_PFNGLGETTEXTURESAMPLERHANDLENVPROC rogl_pfn_glGetTextureSamplerHandleNV = NULL;
static ROGL_PFNGLMAKETEXTUREHANDLERESIDENTNVPROC rogl_pfn_glMakeTextureHandleResidentNV = NULL;
static ROGL_PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC rogl_pfn_glMakeTextureHandleNonResidentNV = NULL;
static ROGL_PFNGLGETIMAGEHANDLENVPROC rogl_pfn_glGetImageHandleNV = NULL;
static ROGL_PFNGLMAKEIMAGEHANDLERESIDENTNVPROC rogl_pfn_glMakeImageHandleResidentNV = NULL;
static ROGL_PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC rogl_pfn_glMakeImageHandleNonResidentNV = NULL;
static ROGL_PFNGLUNIFORMHANDLEUI64NVPROC rogl_pfn_glUniformHandleui64NV = NULL;
static ROGL_PFNGLUNIFORMHANDLEUI64VNVPROC rogl_pfn_glUniformHandleui64vNV = NULL;
static ROGL_PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC rogl_pfn_glProgramUniformHandleui64NV = NULL;
static ROGL_PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC rogl_pfn_glProgramUniformHandleui64vNV = NULL;
static ROGL_PFNGLISTEXTUREHANDLERESIDENTNVPROC rogl_pfn_glIsTextureHandleResidentNV = NULL;
static ROGL_PFNGLISIMAGEHANDLERESIDENTNVPROC rogl_pfn_glIsImageHandleResidentNV = NULL;
static ROGL_PFNGLBLENDPARAMETERINVPROC rogl_pfn_glBlendParameteriNV = NULL;
static ROGL_PFNGLBLENDBARRIERNVPROC rogl_pfn_glBlendBarrierNV = NULL;
static ROGL_PFNGLCREATESTATESNVPROC rogl_pfn_glCreateStatesNV = NULL;
static ROGL_PFNGLDELETESTATESNVPROC rogl_pfn_glDeleteStatesNV = NULL;
static ROGL_PFNGLISSTATENVPROC rogl_pfn_glIsStateNV = NULL;
static ROGL_PFNGLSTATECAPTURENVPROC rogl_pfn_glStateCaptureNV = NULL;
static ROGL_PFNGLGETCOMMANDHEADERNVPROC rogl_pfn_glGetCommandHeaderNV = NULL;
static ROGL_PFNGLGETSTAGEINDEXNVPROC rogl_pfn_glGetStageIndexNV = NULL;
static ROGL_PFNGLDRAWCOMMANDSNVPROC rogl_pfn_glDrawCommandsNV = NULL;
static ROGL_PFNGLDRAWCOMMANDSADDRESSNVPROC rogl_pfn_glDrawCommandsAddressNV = NULL;
static ROGL_PFNGLDRAWCOMMANDSSTATESNVPROC rogl_pfn_glDrawCommandsStatesNV = NULL;
static ROGL_PFNGLDRAWCOMMANDSSTATESADDRESSNVPROC rogl_pfn_glDrawCommandsStatesAddressNV = NULL;
static ROGL_PFNGLCREATECOMMANDLISTSNVPROC rogl_pfn_glCreateCommandListsNV = NULL;
static ROGL_PFNGLDELETECOMMANDLISTSNVPROC rogl_pfn_glDeleteCommandListsNV = NULL;
static ROGL_PFNGLISCOMMANDLISTNVPROC rogl_pfn_glIsCommandListNV = NULL;
static ROGL_PFNGLLISTDRAWCOMMANDSSTATESCLIENTNVPROC rogl_pfn_glListDrawCommandsStatesClientNV = NULL;
static ROGL_PFNGLCOMMANDLISTSEGMENTSNVPROC rogl_pfn_glCommandListSegmentsNV = NULL;
static ROGL_PFNGLCOMPILECOMMANDLISTNVPROC rogl_pfn_glCompileCommandListNV = NULL;
static ROGL_PFNGLCALLCOMMANDLISTNVPROC rogl_pfn_glCallCommandListNV = NULL;
static ROGL_PFNGLBEGINCONDITIONALRENDERNVPROC rogl_pfn_glBeginConditionalRenderNV = NULL;
static ROGL_PFNGLENDCONDITIONALRENDERNVPROC rogl_pfn_glEndConditionalRenderNV = NULL;
static ROGL_PFNGLSUBPIXELPRECISIONBIASNVPROC rogl_pfn_glSubpixelPrecisionBiasNV = NULL;
static ROGL_PFNGLCONSERVATIVERASTERPARAMETERFNVPROC rogl_pfn_glConservativeRasterParameterfNV = NULL;
static ROGL_PFNGLCOPYIMAGESUBDATANVPROC rogl_pfn_glCopyImageSubDataNV = NULL;
static ROGL_PFNGLDEPTHRANGEDNVPROC rogl_pfn_glDepthRangedNV = NULL;
static ROGL_PFNGLCLEARDEPTHDNVPROC rogl_pfn_glClearDepthdNV = NULL;
static ROGL_PFNGLDEPTHBOUNDSDNVPROC rogl_pfn_glDepthBoundsdNV = NULL;
static ROGL_PFNGLDRAWTEXTURENVPROC rogl_pfn_glDrawTextureNV = NULL;
static ROGL_PFNGLMAPCONTROLPOINTSNVPROC rogl_pfn_glMapControlPointsNV = NULL;
static ROGL_PFNGLMAPPARAMETERIVNVPROC rogl_pfn_glMapParameterivNV = NULL;
static ROGL_PFNGLMAPPARAMETERFVNVPROC rogl_pfn_glMapParameterfvNV = NULL;
static ROGL_PFNGLGETMAPCONTROLPOINTSNVPROC rogl_pfn_glGetMapControlPointsNV = NULL;
static ROGL_PFNGLGETMAPPARAMETERIVNVPROC rogl_pfn_glGetMapParameterivNV = NULL;
static ROGL_PFNGLGETMAPPARAMETERFVNVPROC rogl_pfn_glGetMapParameterfvNV = NULL;
static ROGL_PFNGLGETMAPATTRIBPARAMETERIVNVPROC rogl_pfn_glGetMapAttribParameterivNV = NULL;
static ROGL_PFNGLGETMAPATTRIBPARAMETERFVNVPROC rogl_pfn_glGetMapAttribParameterfvNV = NULL;
static ROGL_PFNGLEVALMAPSNVPROC rogl_pfn_glEvalMapsNV = NULL;
static ROGL_PFNGLGETMULTISAMPLEFVNVPROC rogl_pfn_glGetMultisamplefvNV = NULL;
static ROGL_PFNGLSAMPLEMASKINDEXEDNVPROC rogl_pfn_glSampleMaskIndexedNV = NULL;
static ROGL_PFNGLTEXRENDERBUFFERNVPROC rogl_pfn_glTexRenderbufferNV = NULL;
static ROGL_PFNGLDELETEFENCESNVPROC rogl_pfn_glDeleteFencesNV = NULL;
static ROGL_PFNGLGENFENCESNVPROC rogl_pfn_glGenFencesNV = NULL;
static ROGL_PFNGLISFENCENVPROC rogl_pfn_glIsFenceNV = NULL;
static ROGL_PFNGLTESTFENCENVPROC rogl_pfn_glTestFenceNV = NULL;
static ROGL_PFNGLGETFENCEIVNVPROC rogl_pfn_glGetFenceivNV = NULL;
static ROGL_PFNGLFINISHFENCENVPROC rogl_pfn_glFinishFenceNV = NULL;
static ROGL_PFNGLSETFENCENVPROC rogl_pfn_glSetFenceNV = NULL;
static ROGL_PFNGLFRAGMENTCOVERAGECOLORNVPROC rogl_pfn_glFragmentCoverageColorNV = NULL;
static ROGL_PFNGLPROGRAMNAMEDPARAMETER4FNVPROC rogl_pfn_glProgramNamedParameter4fNV = NULL;
static ROGL_PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC rogl_pfn_glProgramNamedParameter4fvNV = NULL;
static ROGL_PFNGLPROGRAMNAMEDPARAMETER4DNVPROC rogl_pfn_glProgramNamedParameter4dNV = NULL;
static ROGL_PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC rogl_pfn_glProgramNamedParameter4dvNV = NULL;
static ROGL_PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC rogl_pfn_glGetProgramNamedParameterfvNV = NULL;
static ROGL_PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC rogl_pfn_glGetProgramNamedParameterdvNV = NULL;
static ROGL_PFNGLCOVERAGEMODULATIONTABLENVPROC rogl_pfn_glCoverageModulationTableNV = NULL;
static ROGL_PFNGLGETCOVERAGEMODULATIONTABLENVPROC rogl_pfn_glGetCoverageModulationTableNV = NULL;
static ROGL_PFNGLCOVERAGEMODULATIONNVPROC rogl_pfn_glCoverageModulationNV = NULL;
static ROGL_PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC rogl_pfn_glRenderbufferStorageMultisampleCoverageNV = NULL;
static ROGL_PFNGLPROGRAMVERTEXLIMITNVPROC rogl_pfn_glProgramVertexLimitNV = NULL;
static ROGL_PFNGLFRAMEBUFFERTEXTUREEXTPROC rogl_pfn_glFramebufferTextureEXT = NULL;
static ROGL_PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC rogl_pfn_glFramebufferTextureFaceEXT = NULL;
static ROGL_PFNGLPROGRAMLOCALPARAMETERI4INVPROC rogl_pfn_glProgramLocalParameterI4iNV = NULL;
static ROGL_PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC rogl_pfn_glProgramLocalParameterI4ivNV = NULL;
static ROGL_PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC rogl_pfn_glProgramLocalParametersI4ivNV = NULL;
static ROGL_PFNGLPROGRAMLOCALPARAMETERI4UINVPROC rogl_pfn_glProgramLocalParameterI4uiNV = NULL;
static ROGL_PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC rogl_pfn_glProgramLocalParameterI4uivNV = NULL;
static ROGL_PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC rogl_pfn_glProgramLocalParametersI4uivNV = NULL;
static ROGL_PFNGLPROGRAMENVPARAMETERI4INVPROC rogl_pfn_glProgramEnvParameterI4iNV = NULL;
static ROGL_PFNGLPROGRAMENVPARAMETERI4IVNVPROC rogl_pfn_glProgramEnvParameterI4ivNV = NULL;
static ROGL_PFNGLPROGRAMENVPARAMETERSI4IVNVPROC rogl_pfn_glProgramEnvParametersI4ivNV = NULL;
static ROGL_PFNGLPROGRAMENVPARAMETERI4UINVPROC rogl_pfn_glProgramEnvParameterI4uiNV = NULL;
static ROGL_PFNGLPROGRAMENVPARAMETERI4UIVNVPROC rogl_pfn_glProgramEnvParameterI4uivNV = NULL;
static ROGL_PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC rogl_pfn_glProgramEnvParametersI4uivNV = NULL;
static ROGL_PFNGLGETPROGRAMLOCALPARAMETERIIVNVPROC rogl_pfn_glGetProgramLocalParameterIivNV = NULL;
static ROGL_PFNGLGETPROGRAMLOCALPARAMETERIUIVNVPROC rogl_pfn_glGetProgramLocalParameterIuivNV = NULL;
static ROGL_PFNGLGETPROGRAMENVPARAMETERIIVNVPROC rogl_pfn_glGetProgramEnvParameterIivNV = NULL;
static ROGL_PFNGLGETPROGRAMENVPARAMETERIUIVNVPROC rogl_pfn_glGetProgramEnvParameterIuivNV = NULL;
static ROGL_PFNGLPROGRAMSUBROUTINEPARAMETERSUIVNVPROC rogl_pfn_glProgramSubroutineParametersuivNV = NULL;
static ROGL_PFNGLGETPROGRAMSUBROUTINEPARAMETERUIVNVPROC rogl_pfn_glGetProgramSubroutineParameteruivNV = NULL;
static ROGL_PFNGLVERTEX2HNVPROC rogl_pfn_glVertex2hNV = NULL;
static ROGL_PFNGLVERTEX2HVNVPROC rogl_pfn_glVertex2hvNV = NULL;
static ROGL_PFNGLVERTEX3HNVPROC rogl_pfn_glVertex3hNV = NULL;
static ROGL_PFNGLVERTEX3HVNVPROC rogl_pfn_glVertex3hvNV = NULL;
static ROGL_PFNGLVERTEX4HNVPROC rogl_pfn_glVertex4hNV = NULL;
static ROGL_PFNGLVERTEX4HVNVPROC rogl_pfn_glVertex4hvNV = NULL;
static ROGL_PFNGLNORMAL3HNVPROC rogl_pfn_glNormal3hNV = NULL;
static ROGL_PFNGLNORMAL3HVNVPROC rogl_pfn_glNormal3hvNV = NULL;
static ROGL_PFNGLCOLOR3HNVPROC rogl_pfn_glColor3hNV = NULL;
static ROGL_PFNGLCOLOR3HVNVPROC rogl_pfn_glColor3hvNV = NULL;
static ROGL_PFNGLCOLOR4HNVPROC rogl_pfn_glColor4hNV = NULL;
static ROGL_PFNGLCOLOR4HVNVPROC rogl_pfn_glColor4hvNV = NULL;
static ROGL_PFNGLTEXCOORD1HNVPROC rogl_pfn_glTexCoord1hNV = NULL;
static ROGL_PFNGLTEXCOORD1HVNVPROC rogl_pfn_glTexCoord1hvNV = NULL;
static ROGL_PFNGLTEXCOORD2HNVPROC rogl_pfn_glTexCoord2hNV = NULL;
static ROGL_PFNGLTEXCOORD2HVNVPROC rogl_pfn_glTexCoord2hvNV = NULL;
static ROGL_PFNGLTEXCOORD3HNVPROC rogl_pfn_glTexCoord3hNV = NULL;
static ROGL_PFNGLTEXCOORD3HVNVPROC rogl_pfn_glTexCoord3hvNV = NULL;
static ROGL_PFNGLTEXCOORD4HNVPROC rogl_pfn_glTexCoord4hNV = NULL;
static ROGL_PFNGLTEXCOORD4HVNVPROC rogl_pfn_glTexCoord4hvNV = NULL;
static ROGL_PFNGLMULTITEXCOORD1HNVPROC rogl_pfn_glMultiTexCoord1hNV = NULL;
static ROGL_PFNGLMULTITEXCOORD1HVNVPROC rogl_pfn_glMultiTexCoord1hvNV = NULL;
static ROGL_PFNGLMULTITEXCOORD2HNVPROC rogl_pfn_glMultiTexCoord2hNV = NULL;
static ROGL_PFNGLMULTITEXCOORD2HVNVPROC rogl_pfn_glMultiTexCoord2hvNV = NULL;
static ROGL_PFNGLMULTITEXCOORD3HNVPROC rogl_pfn_glMultiTexCoord3hNV = NULL;
static ROGL_PFNGLMULTITEXCOORD3HVNVPROC rogl_pfn_glMultiTexCoord3hvNV = NULL;
static ROGL_PFNGLMULTITEXCOORD4HNVPROC rogl_pfn_glMultiTexCoord4hNV = NULL;
static ROGL_PFNGLMULTITEXCOORD4HVNVPROC rogl_pfn_glMultiTexCoord4hvNV = NULL;
static ROGL_PFNGLFOGCOORDHNVPROC rogl_pfn_glFogCoordhNV = NULL;
static ROGL_PFNGLFOGCOORDHVNVPROC rogl_pfn_glFogCoordhvNV = NULL;
static ROGL_PFNGLSECONDARYCOLOR3HNVPROC rogl_pfn_glSecondaryColor3hNV = NULL;
static ROGL_PFNGLSECONDARYCOLOR3HVNVPROC rogl_pfn_glSecondaryColor3hvNV = NULL;
static ROGL_PFNGLVERTEXWEIGHTHNVPROC rogl_pfn_glVertexWeighthNV = NULL;
static ROGL_PFNGLVERTEXWEIGHTHVNVPROC rogl_pfn_glVertexWeighthvNV = NULL;
static ROGL_PFNGLVERTEXATTRIB1HNVPROC rogl_pfn_glVertexAttrib1hNV = NULL;
static ROGL_PFNGLVERTEXATTRIB1HVNVPROC rogl_pfn_glVertexAttrib1hvNV = NULL;
static ROGL_PFNGLVERTEXATTRIB2HNVPROC rogl_pfn_glVertexAttrib2hNV = NULL;
static ROGL_PFNGLVERTEXATTRIB2HVNVPROC rogl_pfn_glVertexAttrib2hvNV = NULL;
static ROGL_PFNGLVERTEXATTRIB3HNVPROC rogl_pfn_glVertexAttrib3hNV = NULL;
static ROGL_PFNGLVERTEXATTRIB3HVNVPROC rogl_pfn_glVertexAttrib3hvNV = NULL;
static ROGL_PFNGLVERTEXATTRIB4HNVPROC rogl_pfn_glVertexAttrib4hNV = NULL;
static ROGL_PFNGLVERTEXATTRIB4HVNVPROC rogl_pfn_glVertexAttrib4hvNV = NULL;
static ROGL_PFNGLVERTEXATTRIBS1HVNVPROC rogl_pfn_glVertexAttribs1hvNV = NULL;
static ROGL_PFNGLVERTEXATTRIBS2HVNVPROC rogl_pfn_glVertexAttribs2hvNV = NULL;
static ROGL_PFNGLVERTEXATTRIBS3HVNVPROC rogl_pfn_glVertexAttribs3hvNV = NULL;
static ROGL_PFNGLVERTEXATTRIBS4HVNVPROC rogl_pfn_glVertexAttribs4hvNV = NULL;
static ROGL_PFNGLGETINTERNALFORMATSAMPLEIVNVPROC rogl_pfn_glGetInternalformatSampleivNV = NULL;
static ROGL_PFNGLGENOCCLUSIONQUERIESNVPROC rogl_pfn_glGenOcclusionQueriesNV = NULL;
static ROGL_PFNGLDELETEOCCLUSIONQUERIESNVPROC rogl_pfn_glDeleteOcclusionQueriesNV = NULL;
static ROGL_PFNGLISOCCLUSIONQUERYNVPROC rogl_pfn_glIsOcclusionQueryNV = NULL;
static ROGL_PFNGLBEGINOCCLUSIONQUERYNVPROC rogl_pfn_glBeginOcclusionQueryNV = NULL;
static ROGL_PFNGLENDOCCLUSIONQUERYNVPROC rogl_pfn_glEndOcclusionQueryNV = NULL;
static ROGL_PFNGLGETOCCLUSIONQUERYIVNVPROC rogl_pfn_glGetOcclusionQueryivNV = NULL;
static ROGL_PFNGLGETOCCLUSIONQUERYUIVNVPROC rogl_pfn_glGetOcclusionQueryuivNV = NULL;
static ROGL_PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC rogl_pfn_glProgramBufferParametersfvNV = NULL;
static ROGL_PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC rogl_pfn_glProgramBufferParametersIivNV = NULL;
static ROGL_PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC rogl_pfn_glProgramBufferParametersIuivNV = NULL;
static ROGL_PFNGLGENPATHSNVPROC rogl_pfn_glGenPathsNV = NULL;
static ROGL_PFNGLDELETEPATHSNVPROC rogl_pfn_glDeletePathsNV = NULL;
static ROGL_PFNGLISPATHNVPROC rogl_pfn_glIsPathNV = NULL;
static ROGL_PFNGLPATHCOMMANDSNVPROC rogl_pfn_glPathCommandsNV = NULL;
static ROGL_PFNGLPATHCOORDSNVPROC rogl_pfn_glPathCoordsNV = NULL;
static ROGL_PFNGLPATHSUBCOMMANDSNVPROC rogl_pfn_glPathSubCommandsNV = NULL;
static ROGL_PFNGLPATHSUBCOORDSNVPROC rogl_pfn_glPathSubCoordsNV = NULL;
static ROGL_PFNGLPATHSTRINGNVPROC rogl_pfn_glPathStringNV = NULL;
static ROGL_PFNGLPATHGLYPHSNVPROC rogl_pfn_glPathGlyphsNV = NULL;
static ROGL_PFNGLPATHGLYPHRANGENVPROC rogl_pfn_glPathGlyphRangeNV = NULL;
static ROGL_PFNGLWEIGHTPATHSNVPROC rogl_pfn_glWeightPathsNV = NULL;
static ROGL_PFNGLCOPYPATHNVPROC rogl_pfn_glCopyPathNV = NULL;
static ROGL_PFNGLINTERPOLATEPATHSNVPROC rogl_pfn_glInterpolatePathsNV = NULL;
static ROGL_PFNGLTRANSFORMPATHNVPROC rogl_pfn_glTransformPathNV = NULL;
static ROGL_PFNGLPATHPARAMETERIVNVPROC rogl_pfn_glPathParameterivNV = NULL;
static ROGL_PFNGLPATHPARAMETERINVPROC rogl_pfn_glPathParameteriNV = NULL;
static ROGL_PFNGLPATHPARAMETERFVNVPROC rogl_pfn_glPathParameterfvNV = NULL;
static ROGL_PFNGLPATHPARAMETERFNVPROC rogl_pfn_glPathParameterfNV = NULL;
static ROGL_PFNGLPATHDASHARRAYNVPROC rogl_pfn_glPathDashArrayNV = NULL;
static ROGL_PFNGLPATHSTENCILFUNCNVPROC rogl_pfn_glPathStencilFuncNV = NULL;
static ROGL_PFNGLPATHSTENCILDEPTHOFFSETNVPROC rogl_pfn_glPathStencilDepthOffsetNV = NULL;
static ROGL_PFNGLSTENCILFILLPATHNVPROC rogl_pfn_glStencilFillPathNV = NULL;
static ROGL_PFNGLSTENCILSTROKEPATHNVPROC rogl_pfn_glStencilStrokePathNV = NULL;
static ROGL_PFNGLSTENCILFILLPATHINSTANCEDNVPROC rogl_pfn_glStencilFillPathInstancedNV = NULL;
static ROGL_PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC rogl_pfn_glStencilStrokePathInstancedNV = NULL;
static ROGL_PFNGLPATHCOVERDEPTHFUNCNVPROC rogl_pfn_glPathCoverDepthFuncNV = NULL;
static ROGL_PFNGLCOVERFILLPATHNVPROC rogl_pfn_glCoverFillPathNV = NULL;
static ROGL_PFNGLCOVERSTROKEPATHNVPROC rogl_pfn_glCoverStrokePathNV = NULL;
static ROGL_PFNGLCOVERFILLPATHINSTANCEDNVPROC rogl_pfn_glCoverFillPathInstancedNV = NULL;
static ROGL_PFNGLCOVERSTROKEPATHINSTANCEDNVPROC rogl_pfn_glCoverStrokePathInstancedNV = NULL;
static ROGL_PFNGLGETPATHPARAMETERIVNVPROC rogl_pfn_glGetPathParameterivNV = NULL;
static ROGL_PFNGLGETPATHPARAMETERFVNVPROC rogl_pfn_glGetPathParameterfvNV = NULL;
static ROGL_PFNGLGETPATHCOMMANDSNVPROC rogl_pfn_glGetPathCommandsNV = NULL;
static ROGL_PFNGLGETPATHCOORDSNVPROC rogl_pfn_glGetPathCoordsNV = NULL;
static ROGL_PFNGLGETPATHDASHARRAYNVPROC rogl_pfn_glGetPathDashArrayNV = NULL;
static ROGL_PFNGLGETPATHMETRICSNVPROC rogl_pfn_glGetPathMetricsNV = NULL;
static ROGL_PFNGLGETPATHMETRICRANGENVPROC rogl_pfn_glGetPathMetricRangeNV = NULL;
static ROGL_PFNGLGETPATHSPACINGNVPROC rogl_pfn_glGetPathSpacingNV = NULL;
static ROGL_PFNGLISPOINTINFILLPATHNVPROC rogl_pfn_glIsPointInFillPathNV = NULL;
static ROGL_PFNGLISPOINTINSTROKEPATHNVPROC rogl_pfn_glIsPointInStrokePathNV = NULL;
static ROGL_PFNGLGETPATHLENGTHNVPROC rogl_pfn_glGetPathLengthNV = NULL;
static ROGL_PFNGLPOINTALONGPATHNVPROC rogl_pfn_glPointAlongPathNV = NULL;
static ROGL_PFNGLMATRIXLOAD3X2FNVPROC rogl_pfn_glMatrixLoad3x2fNV = NULL;
static ROGL_PFNGLMATRIXLOAD3X3FNVPROC rogl_pfn_glMatrixLoad3x3fNV = NULL;
static ROGL_PFNGLMATRIXLOADTRANSPOSE3X3FNVPROC rogl_pfn_glMatrixLoadTranspose3x3fNV = NULL;
static ROGL_PFNGLMATRIXMULT3X2FNVPROC rogl_pfn_glMatrixMult3x2fNV = NULL;
static ROGL_PFNGLMATRIXMULT3X3FNVPROC rogl_pfn_glMatrixMult3x3fNV = NULL;
static ROGL_PFNGLMATRIXMULTTRANSPOSE3X3FNVPROC rogl_pfn_glMatrixMultTranspose3x3fNV = NULL;
static ROGL_PFNGLSTENCILTHENCOVERFILLPATHNVPROC rogl_pfn_glStencilThenCoverFillPathNV = NULL;
static ROGL_PFNGLSTENCILTHENCOVERSTROKEPATHNVPROC rogl_pfn_glStencilThenCoverStrokePathNV = NULL;
static ROGL_PFNGLSTENCILTHENCOVERFILLPATHINSTANCEDNVPROC rogl_pfn_glStencilThenCoverFillPathInstancedNV = NULL;
static ROGL_PFNGLSTENCILTHENCOVERSTROKEPATHINSTANCEDNVPROC rogl_pfn_glStencilThenCoverStrokePathInstancedNV = NULL;
static ROGL_PFNGLPATHGLYPHINDEXRANGENVPROC rogl_pfn_glPathGlyphIndexRangeNV = NULL;
static ROGL_PFNGLPATHGLYPHINDEXARRAYNVPROC rogl_pfn_glPathGlyphIndexArrayNV = NULL;
static ROGL_PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC rogl_pfn_glPathMemoryGlyphIndexArrayNV = NULL;
static ROGL_PFNGLPROGRAMPATHFRAGMENTINPUTGENNVPROC rogl_pfn_glProgramPathFragmentInputGenNV = NULL;
static ROGL_PFNGLGETPROGRAMRESOURCEFVNVPROC rogl_pfn_glGetProgramResourcefvNV = NULL;
static ROGL_PFNGLPATHCOLORGENNVPROC rogl_pfn_glPathColorGenNV = NULL;
static ROGL_PFNGLPATHTEXGENNVPROC rogl_pfn_glPathTexGenNV = NULL;
static ROGL_PFNGLPATHFOGGENNVPROC rogl_pfn_glPathFogGenNV = NULL;
static ROGL_PFNGLGETPATHCOLORGENIVNVPROC rogl_pfn_glGetPathColorGenivNV = NULL;
static ROGL_PFNGLGETPATHCOLORGENFVNVPROC rogl_pfn_glGetPathColorGenfvNV = NULL;
static ROGL_PFNGLGETPATHTEXGENIVNVPROC rogl_pfn_glGetPathTexGenivNV = NULL;
static ROGL_PFNGLGETPATHTEXGENFVNVPROC rogl_pfn_glGetPathTexGenfvNV = NULL;
static ROGL_PFNGLPIXELDATARANGENVPROC rogl_pfn_glPixelDataRangeNV = NULL;
static ROGL_PFNGLFLUSHPIXELDATARANGENVPROC rogl_pfn_glFlushPixelDataRangeNV = NULL;
static ROGL_PFNGLPOINTPARAMETERINVPROC rogl_pfn_glPointParameteriNV = NULL;
static ROGL_PFNGLPOINTPARAMETERIVNVPROC rogl_pfn_glPointParameterivNV = NULL;
static ROGL_PFNGLPRESENTFRAMEKEYEDNVPROC rogl_pfn_glPresentFrameKeyedNV = NULL;
static ROGL_PFNGLPRESENTFRAMEDUALFILLNVPROC rogl_pfn_glPresentFrameDualFillNV = NULL;
static ROGL_PFNGLGETVIDEOIVNVPROC rogl_pfn_glGetVideoivNV = NULL;
static ROGL_PFNGLGETVIDEOUIVNVPROC rogl_pfn_glGetVideouivNV = NULL;
static ROGL_PFNGLGETVIDEOI64VNVPROC rogl_pfn_glGetVideoi64vNV = NULL;
static ROGL_PFNGLGETVIDEOUI64VNVPROC rogl_pfn_glGetVideoui64vNV = NULL;
static ROGL_PFNGLPRIMITIVERESTARTNVPROC rogl_pfn_glPrimitiveRestartNV = NULL;
static ROGL_PFNGLPRIMITIVERESTARTINDEXNVPROC rogl_pfn_glPrimitiveRestartIndexNV = NULL;
static ROGL_PFNGLCOMBINERPARAMETERFVNVPROC rogl_pfn_glCombinerParameterfvNV = NULL;
static ROGL_PFNGLCOMBINERPARAMETERFNVPROC rogl_pfn_glCombinerParameterfNV = NULL;
static ROGL_PFNGLCOMBINERPARAMETERIVNVPROC rogl_pfn_glCombinerParameterivNV = NULL;
static ROGL_PFNGLCOMBINERPARAMETERINVPROC rogl_pfn_glCombinerParameteriNV = NULL;
static ROGL_PFNGLCOMBINERINPUTNVPROC rogl_pfn_glCombinerInputNV = NULL;
static ROGL_PFNGLCOMBINEROUTPUTNVPROC rogl_pfn_glCombinerOutputNV = NULL;
static ROGL_PFNGLFINALCOMBINERINPUTNVPROC rogl_pfn_glFinalCombinerInputNV = NULL;
static ROGL_PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC rogl_pfn_glGetCombinerInputParameterfvNV = NULL;
static ROGL_PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC rogl_pfn_glGetCombinerInputParameterivNV = NULL;
static ROGL_PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC rogl_pfn_glGetCombinerOutputParameterfvNV = NULL;
static ROGL_PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC rogl_pfn_glGetCombinerOutputParameterivNV = NULL;
static ROGL_PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC rogl_pfn_glGetFinalCombinerInputParameterfvNV = NULL;
static ROGL_PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC rogl_pfn_glGetFinalCombinerInputParameterivNV = NULL;
static ROGL_PFNGLCOMBINERSTAGEPARAMETERFVNVPROC rogl_pfn_glCombinerStageParameterfvNV = NULL;
static ROGL_PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC rogl_pfn_glGetCombinerStageParameterfvNV = NULL;
static ROGL_PFNGLFRAMEBUFFERSAMPLELOCATIONSFVNVPROC rogl_pfn_glFramebufferSampleLocationsfvNV = NULL;
static ROGL_PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVNVPROC rogl_pfn_glNamedFramebufferSampleLocationsfvNV = NULL;
static ROGL_PFNGLRESOLVEDEPTHVALUESNVPROC rogl_pfn_glResolveDepthValuesNV = NULL;
static ROGL_PFNGLMAKEBUFFERRESIDENTNVPROC rogl_pfn_glMakeBufferResidentNV = NULL;
static ROGL_PFNGLMAKEBUFFERNONRESIDENTNVPROC rogl_pfn_glMakeBufferNonResidentNV = NULL;
static ROGL_PFNGLISBUFFERRESIDENTNVPROC rogl_pfn_glIsBufferResidentNV = NULL;
static ROGL_PFNGLMAKENAMEDBUFFERRESIDENTNVPROC rogl_pfn_glMakeNamedBufferResidentNV = NULL;
static ROGL_PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC rogl_pfn_glMakeNamedBufferNonResidentNV = NULL;
static ROGL_PFNGLISNAMEDBUFFERRESIDENTNVPROC rogl_pfn_glIsNamedBufferResidentNV = NULL;
static ROGL_PFNGLGETBUFFERPARAMETERUI64VNVPROC rogl_pfn_glGetBufferParameterui64vNV = NULL;
static ROGL_PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC rogl_pfn_glGetNamedBufferParameterui64vNV = NULL;
static ROGL_PFNGLGETINTEGERUI64VNVPROC rogl_pfn_glGetIntegerui64vNV = NULL;
static ROGL_PFNGLUNIFORMUI64NVPROC rogl_pfn_glUniformui64NV = NULL;
static ROGL_PFNGLUNIFORMUI64VNVPROC rogl_pfn_glUniformui64vNV = NULL;
static ROGL_PFNGLPROGRAMUNIFORMUI64NVPROC rogl_pfn_glProgramUniformui64NV = NULL;
static ROGL_PFNGLPROGRAMUNIFORMUI64VNVPROC rogl_pfn_glProgramUniformui64vNV = NULL;
static ROGL_PFNGLTEXTUREBARRIERNVPROC rogl_pfn_glTextureBarrierNV = NULL;
static ROGL_PFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC rogl_pfn_glTexImage2DMultisampleCoverageNV = NULL;
static ROGL_PFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC rogl_pfn_glTexImage3DMultisampleCoverageNV = NULL;
static ROGL_PFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC rogl_pfn_glTextureImage2DMultisampleNV = NULL;
static ROGL_PFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC rogl_pfn_glTextureImage3DMultisampleNV = NULL;
static ROGL_PFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC rogl_pfn_glTextureImage2DMultisampleCoverageNV = NULL;
static ROGL_PFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC rogl_pfn_glTextureImage3DMultisampleCoverageNV = NULL;
static ROGL_PFNGLBEGINTRANSFORMFEEDBACKNVPROC rogl_pfn_glBeginTransformFeedbackNV = NULL;
static ROGL_PFNGLENDTRANSFORMFEEDBACKNVPROC rogl_pfn_glEndTransformFeedbackNV = NULL;
static ROGL_PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC rogl_pfn_glTransformFeedbackAttribsNV = NULL;
static ROGL_PFNGLBINDBUFFERRANGENVPROC rogl_pfn_glBindBufferRangeNV = NULL;
static ROGL_PFNGLBINDBUFFEROFFSETNVPROC rogl_pfn_glBindBufferOffsetNV = NULL;
static ROGL_PFNGLBINDBUFFERBASENVPROC rogl_pfn_glBindBufferBaseNV = NULL;
static ROGL_PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC rogl_pfn_glTransformFeedbackVaryingsNV = NULL;
static ROGL_PFNGLACTIVEVARYINGNVPROC rogl_pfn_glActiveVaryingNV = NULL;
static ROGL_PFNGLGETVARYINGLOCATIONNVPROC rogl_pfn_glGetVaryingLocationNV = NULL;
static ROGL_PFNGLGETACTIVEVARYINGNVPROC rogl_pfn_glGetActiveVaryingNV = NULL;
static ROGL_PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC rogl_pfn_glGetTransformFeedbackVaryingNV = NULL;
static ROGL_PFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC rogl_pfn_glTransformFeedbackStreamAttribsNV = NULL;
static ROGL_PFNGLBINDTRANSFORMFEEDBACKNVPROC rogl_pfn_glBindTransformFeedbackNV = NULL;
static ROGL_PFNGLDELETETRANSFORMFEEDBACKSNVPROC rogl_pfn_glDeleteTransformFeedbacksNV = NULL;
static ROGL_PFNGLGENTRANSFORMFEEDBACKSNVPROC rogl_pfn_glGenTransformFeedbacksNV = NULL;
static ROGL_PFNGLISTRANSFORMFEEDBACKNVPROC rogl_pfn_glIsTransformFeedbackNV = NULL;
static ROGL_PFNGLPAUSETRANSFORMFEEDBACKNVPROC rogl_pfn_glPauseTransformFeedbackNV = NULL;
static ROGL_PFNGLRESUMETRANSFORMFEEDBACKNVPROC rogl_pfn_glResumeTransformFeedbackNV = NULL;
static ROGL_PFNGLDRAWTRANSFORMFEEDBACKNVPROC rogl_pfn_glDrawTransformFeedbackNV = NULL;
static ROGL_PFNGLVDPAUINITNVPROC rogl_pfn_glVDPAUInitNV = NULL;
static ROGL_PFNGLVDPAUFININVPROC rogl_pfn_glVDPAUFiniNV = NULL;
static ROGL_PFNGLVDPAUREGISTERVIDEOSURFACENVPROC rogl_pfn_glVDPAURegisterVideoSurfaceNV = NULL;
static ROGL_PFNGLVDPAUREGISTEROUTPUTSURFACENVPROC rogl_pfn_glVDPAURegisterOutputSurfaceNV = NULL;
static ROGL_PFNGLVDPAUISSURFACENVPROC rogl_pfn_glVDPAUIsSurfaceNV = NULL;
static ROGL_PFNGLVDPAUUNREGISTERSURFACENVPROC rogl_pfn_glVDPAUUnregisterSurfaceNV = NULL;
static ROGL_PFNGLVDPAUGETSURFACEIVNVPROC rogl_pfn_glVDPAUGetSurfaceivNV = NULL;
static ROGL_PFNGLVDPAUSURFACEACCESSNVPROC rogl_pfn_glVDPAUSurfaceAccessNV = NULL;
static ROGL_PFNGLVDPAUMAPSURFACESNVPROC rogl_pfn_glVDPAUMapSurfacesNV = NULL;
static ROGL_PFNGLVDPAUUNMAPSURFACESNVPROC rogl_pfn_glVDPAUUnmapSurfacesNV = NULL;
static ROGL_PFNGLFLUSHVERTEXARRAYRANGENVPROC rogl_pfn_glFlushVertexArrayRangeNV = NULL;
static ROGL_PFNGLVERTEXARRAYRANGENVPROC rogl_pfn_glVertexArrayRangeNV = NULL;
static ROGL_PFNGLVERTEXATTRIBL1I64NVPROC rogl_pfn_glVertexAttribL1i64NV = NULL;
static ROGL_PFNGLVERTEXATTRIBL2I64NVPROC rogl_pfn_glVertexAttribL2i64NV = NULL;
static ROGL_PFNGLVERTEXATTRIBL3I64NVPROC rogl_pfn_glVertexAttribL3i64NV = NULL;
static ROGL_PFNGLVERTEXATTRIBL4I64NVPROC rogl_pfn_glVertexAttribL4i64NV = NULL;
static ROGL_PFNGLVERTEXATTRIBL1I64VNVPROC rogl_pfn_glVertexAttribL1i64vNV = NULL;
static ROGL_PFNGLVERTEXATTRIBL2I64VNVPROC rogl_pfn_glVertexAttribL2i64vNV = NULL;
static ROGL_PFNGLVERTEXATTRIBL3I64VNVPROC rogl_pfn_glVertexAttribL3i64vNV = NULL;
static ROGL_PFNGLVERTEXATTRIBL4I64VNVPROC rogl_pfn_glVertexAttribL4i64vNV = NULL;
static ROGL_PFNGLVERTEXATTRIBL1UI64NVPROC rogl_pfn_glVertexAttribL1ui64NV = NULL;
static ROGL_PFNGLVERTEXATTRIBL2UI64NVPROC rogl_pfn_glVertexAttribL2ui64NV = NULL;
static ROGL_PFNGLVERTEXATTRIBL3UI64NVPROC rogl_pfn_glVertexAttribL3ui64NV = NULL;
static ROGL_PFNGLVERTEXATTRIBL4UI64NVPROC rogl_pfn_glVertexAttribL4ui64NV = NULL;
static ROGL_PFNGLVERTEXATTRIBL1UI64VNVPROC rogl_pfn_glVertexAttribL1ui64vNV = NULL;
static ROGL_PFNGLVERTEXATTRIBL2UI64VNVPROC rogl_pfn_glVertexAttribL2ui64vNV = NULL;
static ROGL_PFNGLVERTEXATTRIBL3UI64VNVPROC rogl_pfn_glVertexAttribL3ui64vNV = NULL;
static ROGL_PFNGLVERTEXATTRIBL4UI64VNVPROC rogl_pfn_glVertexAttribL4ui64vNV = NULL;
static ROGL_PFNGLGETVERTEXATTRIBLI64VNVPROC rogl_pfn_glGetVertexAttribLi64vNV = NULL;
static ROGL_PFNGLGETVERTEXATTRIBLUI64VNVPROC rogl_pfn_glGetVertexAttribLui64vNV = NULL;
static ROGL_PFNGLVERTEXATTRIBLFORMATNVPROC rogl_pfn_glVertexAttribLFormatNV = NULL;
static ROGL_PFNGLBUFFERADDRESSRANGENVPROC rogl_pfn_glBufferAddressRangeNV = NULL;
static ROGL_PFNGLVERTEXFORMATNVPROC rogl_pfn_glVertexFormatNV = NULL;
static ROGL_PFNGLNORMALFORMATNVPROC rogl_pfn_glNormalFormatNV = NULL;
static ROGL_PFNGLCOLORFORMATNVPROC rogl_pfn_glColorFormatNV = NULL;
static ROGL_PFNGLINDEXFORMATNVPROC rogl_pfn_glIndexFormatNV = NULL;
static ROGL_PFNGLTEXCOORDFORMATNVPROC rogl_pfn_glTexCoordFormatNV = NULL;
static ROGL_PFNGLEDGEFLAGFORMATNVPROC rogl_pfn_glEdgeFlagFormatNV = NULL;
static ROGL_PFNGLSECONDARYCOLORFORMATNVPROC rogl_pfn_glSecondaryColorFormatNV = NULL;
static ROGL_PFNGLFOGCOORDFORMATNVPROC rogl_pfn_glFogCoordFormatNV = NULL;
static ROGL_PFNGLVERTEXATTRIBFORMATNVPROC rogl_pfn_glVertexAttribFormatNV = NULL;
static ROGL_PFNGLVERTEXATTRIBIFORMATNVPROC rogl_pfn_glVertexAttribIFormatNV = NULL;
static ROGL_PFNGLGETINTEGERUI64I_VNVPROC rogl_pfn_glGetIntegerui64i_vNV = NULL;
static ROGL_PFNGLAREPROGRAMSRESIDENTNVPROC rogl_pfn_glAreProgramsResidentNV = NULL;
static ROGL_PFNGLBINDPROGRAMNVPROC rogl_pfn_glBindProgramNV = NULL;
static ROGL_PFNGLDELETEPROGRAMSNVPROC rogl_pfn_glDeleteProgramsNV = NULL;
static ROGL_PFNGLEXECUTEPROGRAMNVPROC rogl_pfn_glExecuteProgramNV = NULL;
static ROGL_PFNGLGENPROGRAMSNVPROC rogl_pfn_glGenProgramsNV = NULL;
static ROGL_PFNGLGETPROGRAMPARAMETERDVNVPROC rogl_pfn_glGetProgramParameterdvNV = NULL;
static ROGL_PFNGLGETPROGRAMPARAMETERFVNVPROC rogl_pfn_glGetProgramParameterfvNV = NULL;
static ROGL_PFNGLGETPROGRAMIVNVPROC rogl_pfn_glGetProgramivNV = NULL;
static ROGL_PFNGLGETPROGRAMSTRINGNVPROC rogl_pfn_glGetProgramStringNV = NULL;
static ROGL_PFNGLGETTRACKMATRIXIVNVPROC rogl_pfn_glGetTrackMatrixivNV = NULL;
static ROGL_PFNGLGETVERTEXATTRIBDVNVPROC rogl_pfn_glGetVertexAttribdvNV = NULL;
static ROGL_PFNGLGETVERTEXATTRIBFVNVPROC rogl_pfn_glGetVertexAttribfvNV = NULL;
static ROGL_PFNGLGETVERTEXATTRIBIVNVPROC rogl_pfn_glGetVertexAttribivNV = NULL;
static ROGL_PFNGLGETVERTEXATTRIBPOINTERVNVPROC rogl_pfn_glGetVertexAttribPointervNV = NULL;
static ROGL_PFNGLISPROGRAMNVPROC rogl_pfn_glIsProgramNV = NULL;
static ROGL_PFNGLLOADPROGRAMNVPROC rogl_pfn_glLoadProgramNV = NULL;
static ROGL_PFNGLPROGRAMPARAMETER4DNVPROC rogl_pfn_glProgramParameter4dNV = NULL;
static ROGL_PFNGLPROGRAMPARAMETER4DVNVPROC rogl_pfn_glProgramParameter4dvNV = NULL;
static ROGL_PFNGLPROGRAMPARAMETER4FNVPROC rogl_pfn_glProgramParameter4fNV = NULL;
static ROGL_PFNGLPROGRAMPARAMETER4FVNVPROC rogl_pfn_glProgramParameter4fvNV = NULL;
static ROGL_PFNGLPROGRAMPARAMETERS4DVNVPROC rogl_pfn_glProgramParameters4dvNV = NULL;
static ROGL_PFNGLPROGRAMPARAMETERS4FVNVPROC rogl_pfn_glProgramParameters4fvNV = NULL;
static ROGL_PFNGLREQUESTRESIDENTPROGRAMSNVPROC rogl_pfn_glRequestResidentProgramsNV = NULL;
static ROGL_PFNGLTRACKMATRIXNVPROC rogl_pfn_glTrackMatrixNV = NULL;
static ROGL_PFNGLVERTEXATTRIBPOINTERNVPROC rogl_pfn_glVertexAttribPointerNV = NULL;
static ROGL_PFNGLVERTEXATTRIB1DNVPROC rogl_pfn_glVertexAttrib1dNV = NULL;
static ROGL_PFNGLVERTEXATTRIB1DVNVPROC rogl_pfn_glVertexAttrib1dvNV = NULL;
static ROGL_PFNGLVERTEXATTRIB1FNVPROC rogl_pfn_glVertexAttrib1fNV = NULL;
static ROGL_PFNGLVERTEXATTRIB1FVNVPROC rogl_pfn_glVertexAttrib1fvNV = NULL;
static ROGL_PFNGLVERTEXATTRIB1SNVPROC rogl_pfn_glVertexAttrib1sNV = NULL;
static ROGL_PFNGLVERTEXATTRIB1SVNVPROC rogl_pfn_glVertexAttrib1svNV = NULL;
static ROGL_PFNGLVERTEXATTRIB2DNVPROC rogl_pfn_glVertexAttrib2dNV = NULL;
static ROGL_PFNGLVERTEXATTRIB2DVNVPROC rogl_pfn_glVertexAttrib2dvNV = NULL;
static ROGL_PFNGLVERTEXATTRIB2FNVPROC rogl_pfn_glVertexAttrib2fNV = NULL;
static ROGL_PFNGLVERTEXATTRIB2FVNVPROC rogl_pfn_glVertexAttrib2fvNV = NULL;
static ROGL_PFNGLVERTEXATTRIB2SNVPROC rogl_pfn_glVertexAttrib2sNV = NULL;
static ROGL_PFNGLVERTEXATTRIB2SVNVPROC rogl_pfn_glVertexAttrib2svNV = NULL;
static ROGL_PFNGLVERTEXATTRIB3DNVPROC rogl_pfn_glVertexAttrib3dNV = NULL;
static ROGL_PFNGLVERTEXATTRIB3DVNVPROC rogl_pfn_glVertexAttrib3dvNV = NULL;
static ROGL_PFNGLVERTEXATTRIB3FNVPROC rogl_pfn_glVertexAttrib3fNV = NULL;
static ROGL_PFNGLVERTEXATTRIB3FVNVPROC rogl_pfn_glVertexAttrib3fvNV = NULL;
static ROGL_PFNGLVERTEXATTRIB3SNVPROC rogl_pfn_glVertexAttrib3sNV = NULL;
static ROGL_PFNGLVERTEXATTRIB3SVNVPROC rogl_pfn_glVertexAttrib3svNV = NULL;
static ROGL_PFNGLVERTEXATTRIB4DNVPROC rogl_pfn_glVertexAttrib4dNV = NULL;
static ROGL_PFNGLVERTEXATTRIB4DVNVPROC rogl_pfn_glVertexAttrib4dvNV = NULL;
static ROGL_PFNGLVERTEXATTRIB4FNVPROC rogl_pfn_glVertexAttrib4fNV = NULL;
static ROGL_PFNGLVERTEXATTRIB4FVNVPROC rogl_pfn_glVertexAttrib4fvNV = NULL;
static ROGL_PFNGLVERTEXATTRIB4SNVPROC rogl_pfn_glVertexAttrib4sNV = NULL;
static ROGL_PFNGLVERTEXATTRIB4SVNVPROC rogl_pfn_glVertexAttrib4svNV = NULL;
static ROGL_PFNGLVERTEXATTRIB4UBNVPROC rogl_pfn_glVertexAttrib4ubNV = NULL;
static ROGL_PFNGLVERTEXATTRIB4UBVNVPROC rogl_pfn_glVertexAttrib4ubvNV = NULL;
static ROGL_PFNGLVERTEXATTRIBS1DVNVPROC rogl_pfn_glVertexAttribs1dvNV = NULL;
static ROGL_PFNGLVERTEXATTRIBS1FVNVPROC rogl_pfn_glVertexAttribs1fvNV = NULL;
static ROGL_PFNGLVERTEXATTRIBS1SVNVPROC rogl_pfn_glVertexAttribs1svNV = NULL;
static ROGL_PFNGLVERTEXATTRIBS2DVNVPROC rogl_pfn_glVertexAttribs2dvNV = NULL;
static ROGL_PFNGLVERTEXATTRIBS2FVNVPROC rogl_pfn_glVertexAttribs2fvNV = NULL;
static ROGL_PFNGLVERTEXATTRIBS2SVNVPROC rogl_pfn_glVertexAttribs2svNV = NULL;
static ROGL_PFNGLVERTEXATTRIBS3DVNVPROC rogl_pfn_glVertexAttribs3dvNV = NULL;
static ROGL_PFNGLVERTEXATTRIBS3FVNVPROC rogl_pfn_glVertexAttribs3fvNV = NULL;
static ROGL_PFNGLVERTEXATTRIBS3SVNVPROC rogl_pfn_glVertexAttribs3svNV = NULL;
static ROGL_PFNGLVERTEXATTRIBS4DVNVPROC rogl_pfn_glVertexAttribs4dvNV = NULL;
static ROGL_PFNGLVERTEXATTRIBS4FVNVPROC rogl_pfn_glVertexAttribs4fvNV = NULL;
static ROGL_PFNGLVERTEXATTRIBS4SVNVPROC rogl_pfn_glVertexAttribs4svNV = NULL;
static ROGL_PFNGLVERTEXATTRIBS4UBVNVPROC rogl_pfn_glVertexAttribs4ubvNV = NULL;
static ROGL_PFNGLVERTEXATTRIBI1IEXTPROC rogl_pfn_glVertexAttribI1iEXT = NULL;
static ROGL_PFNGLVERTEXATTRIBI2IEXTPROC rogl_pfn_glVertexAttribI2iEXT = NULL;
static ROGL_PFNGLVERTEXATTRIBI3IEXTPROC rogl_pfn_glVertexAttribI3iEXT = NULL;
static ROGL_PFNGLVERTEXATTRIBI4IEXTPROC rogl_pfn_glVertexAttribI4iEXT = NULL;
static ROGL_PFNGLVERTEXATTRIBI1UIEXTPROC rogl_pfn_glVertexAttribI1uiEXT = NULL;
static ROGL_PFNGLVERTEXATTRIBI2UIEXTPROC rogl_pfn_glVertexAttribI2uiEXT = NULL;
static ROGL_PFNGLVERTEXATTRIBI3UIEXTPROC rogl_pfn_glVertexAttribI3uiEXT = NULL;
static ROGL_PFNGLVERTEXATTRIBI4UIEXTPROC rogl_pfn_glVertexAttribI4uiEXT = NULL;
static ROGL_PFNGLVERTEXATTRIBI1IVEXTPROC rogl_pfn_glVertexAttribI1ivEXT = NULL;
static ROGL_PFNGLVERTEXATTRIBI2IVEXTPROC rogl_pfn_glVertexAttribI2ivEXT = NULL;
static ROGL_PFNGLVERTEXATTRIBI3IVEXTPROC rogl_pfn_glVertexAttribI3ivEXT = NULL;
static ROGL_PFNGLVERTEXATTRIBI4IVEXTPROC rogl_pfn_glVertexAttribI4ivEXT = NULL;
static ROGL_PFNGLVERTEXATTRIBI1UIVEXTPROC rogl_pfn_glVertexAttribI1uivEXT = NULL;
static ROGL_PFNGLVERTEXATTRIBI2UIVEXTPROC rogl_pfn_glVertexAttribI2uivEXT = NULL;
static ROGL_PFNGLVERTEXATTRIBI3UIVEXTPROC rogl_pfn_glVertexAttribI3uivEXT = NULL;
static ROGL_PFNGLVERTEXATTRIBI4UIVEXTPROC rogl_pfn_glVertexAttribI4uivEXT = NULL;
static ROGL_PFNGLVERTEXATTRIBI4BVEXTPROC rogl_pfn_glVertexAttribI4bvEXT = NULL;
static ROGL_PFNGLVERTEXATTRIBI4SVEXTPROC rogl_pfn_glVertexAttribI4svEXT = NULL;
static ROGL_PFNGLVERTEXATTRIBI4UBVEXTPROC rogl_pfn_glVertexAttribI4ubvEXT = NULL;
static ROGL_PFNGLVERTEXATTRIBI4USVEXTPROC rogl_pfn_glVertexAttribI4usvEXT = NULL;
static ROGL_PFNGLVERTEXATTRIBIPOINTEREXTPROC rogl_pfn_glVertexAttribIPointerEXT = NULL;
static ROGL_PFNGLGETVERTEXATTRIBIIVEXTPROC rogl_pfn_glGetVertexAttribIivEXT = NULL;
static ROGL_PFNGLGETVERTEXATTRIBIUIVEXTPROC rogl_pfn_glGetVertexAttribIuivEXT = NULL;
static ROGL_PFNGLBEGINVIDEOCAPTURENVPROC rogl_pfn_glBeginVideoCaptureNV = NULL;
static ROGL_PFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC rogl_pfn_glBindVideoCaptureStreamBufferNV = NULL;
static ROGL_PFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC rogl_pfn_glBindVideoCaptureStreamTextureNV = NULL;
static ROGL_PFNGLENDVIDEOCAPTURENVPROC rogl_pfn_glEndVideoCaptureNV = NULL;
static ROGL_PFNGLGETVIDEOCAPTUREIVNVPROC rogl_pfn_glGetVideoCaptureivNV = NULL;
static ROGL_PFNGLGETVIDEOCAPTURESTREAMIVNVPROC rogl_pfn_glGetVideoCaptureStreamivNV = NULL;
static ROGL_PFNGLGETVIDEOCAPTURESTREAMFVNVPROC rogl_pfn_glGetVideoCaptureStreamfvNV = NULL;
static ROGL_PFNGLGETVIDEOCAPTURESTREAMDVNVPROC rogl_pfn_glGetVideoCaptureStreamdvNV = NULL;
static ROGL_PFNGLVIDEOCAPTURENVPROC rogl_pfn_glVideoCaptureNV = NULL;
static ROGL_PFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC rogl_pfn_glVideoCaptureStreamParameterivNV = NULL;
static ROGL_PFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC rogl_pfn_glVideoCaptureStreamParameterfvNV = NULL;
static ROGL_PFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC rogl_pfn_glVideoCaptureStreamParameterdvNV = NULL;
static ROGL_PFNGLMULTITEXCOORD1BOESPROC rogl_pfn_glMultiTexCoord1bOES = NULL;
static ROGL_PFNGLMULTITEXCOORD1BVOESPROC rogl_pfn_glMultiTexCoord1bvOES = NULL;
static ROGL_PFNGLMULTITEXCOORD2BOESPROC rogl_pfn_glMultiTexCoord2bOES = NULL;
static ROGL_PFNGLMULTITEXCOORD2BVOESPROC rogl_pfn_glMultiTexCoord2bvOES = NULL;
static ROGL_PFNGLMULTITEXCOORD3BOESPROC rogl_pfn_glMultiTexCoord3bOES = NULL;
static ROGL_PFNGLMULTITEXCOORD3BVOESPROC rogl_pfn_glMultiTexCoord3bvOES = NULL;
static ROGL_PFNGLMULTITEXCOORD4BOESPROC rogl_pfn_glMultiTexCoord4bOES = NULL;
static ROGL_PFNGLMULTITEXCOORD4BVOESPROC rogl_pfn_glMultiTexCoord4bvOES = NULL;
static ROGL_PFNGLTEXCOORD1BOESPROC rogl_pfn_glTexCoord1bOES = NULL;
static ROGL_PFNGLTEXCOORD1BVOESPROC rogl_pfn_glTexCoord1bvOES = NULL;
static ROGL_PFNGLTEXCOORD2BOESPROC rogl_pfn_glTexCoord2bOES = NULL;
static ROGL_PFNGLTEXCOORD2BVOESPROC rogl_pfn_glTexCoord2bvOES = NULL;
static ROGL_PFNGLTEXCOORD3BOESPROC rogl_pfn_glTexCoord3bOES = NULL;
static ROGL_PFNGLTEXCOORD3BVOESPROC rogl_pfn_glTexCoord3bvOES = NULL;
static ROGL_PFNGLTEXCOORD4BOESPROC rogl_pfn_glTexCoord4bOES = NULL;
static ROGL_PFNGLTEXCOORD4BVOESPROC rogl_pfn_glTexCoord4bvOES = NULL;
static ROGL_PFNGLVERTEX2BOESPROC rogl_pfn_glVertex2bOES = NULL;
static ROGL_PFNGLVERTEX2BVOESPROC rogl_pfn_glVertex2bvOES = NULL;
static ROGL_PFNGLVERTEX3BOESPROC rogl_pfn_glVertex3bOES = NULL;
static ROGL_PFNGLVERTEX3BVOESPROC rogl_pfn_glVertex3bvOES = NULL;
static ROGL_PFNGLVERTEX4BOESPROC rogl_pfn_glVertex4bOES = NULL;
static ROGL_PFNGLVERTEX4BVOESPROC rogl_pfn_glVertex4bvOES = NULL;
static ROGL_PFNGLALPHAFUNCXOESPROC rogl_pfn_glAlphaFuncxOES = NULL;
static ROGL_PFNGLCLEARCOLORXOESPROC rogl_pfn_glClearColorxOES = NULL;
static ROGL_PFNGLCLEARDEPTHXOESPROC rogl_pfn_glClearDepthxOES = NULL;
static ROGL_PFNGLCLIPPLANEXOESPROC rogl_pfn_glClipPlanexOES = NULL;
static ROGL_PFNGLCOLOR4XOESPROC rogl_pfn_glColor4xOES = NULL;
static ROGL_PFNGLDEPTHRANGEXOESPROC rogl_pfn_glDepthRangexOES = NULL;
static ROGL_PFNGLFOGXOESPROC rogl_pfn_glFogxOES = NULL;
static ROGL_PFNGLFOGXVOESPROC rogl_pfn_glFogxvOES = NULL;
static ROGL_PFNGLFRUSTUMXOESPROC rogl_pfn_glFrustumxOES = NULL;
static ROGL_PFNGLGETCLIPPLANEXOESPROC rogl_pfn_glGetClipPlanexOES = NULL;
static ROGL_PFNGLGETFIXEDVOESPROC rogl_pfn_glGetFixedvOES = NULL;
static ROGL_PFNGLGETTEXENVXVOESPROC rogl_pfn_glGetTexEnvxvOES = NULL;
static ROGL_PFNGLGETTEXPARAMETERXVOESPROC rogl_pfn_glGetTexParameterxvOES = NULL;
static ROGL_PFNGLLIGHTMODELXOESPROC rogl_pfn_glLightModelxOES = NULL;
static ROGL_PFNGLLIGHTMODELXVOESPROC rogl_pfn_glLightModelxvOES = NULL;
static ROGL_PFNGLLIGHTXOESPROC rogl_pfn_glLightxOES = NULL;
static ROGL_PFNGLLIGHTXVOESPROC rogl_pfn_glLightxvOES = NULL;
static ROGL_PFNGLLINEWIDTHXOESPROC rogl_pfn_glLineWidthxOES = NULL;
static ROGL_PFNGLLOADMATRIXXOESPROC rogl_pfn_glLoadMatrixxOES = NULL;
static ROGL_PFNGLMATERIALXOESPROC rogl_pfn_glMaterialxOES = NULL;
static ROGL_PFNGLMATERIALXVOESPROC rogl_pfn_glMaterialxvOES = NULL;
static ROGL_PFNGLMULTMATRIXXOESPROC rogl_pfn_glMultMatrixxOES = NULL;
static ROGL_PFNGLMULTITEXCOORD4XOESPROC rogl_pfn_glMultiTexCoord4xOES = NULL;
static ROGL_PFNGLNORMAL3XOESPROC rogl_pfn_glNormal3xOES = NULL;
static ROGL_PFNGLORTHOXOESPROC rogl_pfn_glOrthoxOES = NULL;
static ROGL_PFNGLPOINTPARAMETERXVOESPROC rogl_pfn_glPointParameterxvOES = NULL;
static ROGL_PFNGLPOINTSIZEXOESPROC rogl_pfn_glPointSizexOES = NULL;
static ROGL_PFNGLPOLYGONOFFSETXOESPROC rogl_pfn_glPolygonOffsetxOES = NULL;
static ROGL_PFNGLROTATEXOESPROC rogl_pfn_glRotatexOES = NULL;
static ROGL_PFNGLSCALEXOESPROC rogl_pfn_glScalexOES = NULL;
static ROGL_PFNGLTEXENVXOESPROC rogl_pfn_glTexEnvxOES = NULL;
static ROGL_PFNGLTEXENVXVOESPROC rogl_pfn_glTexEnvxvOES = NULL;
static ROGL_PFNGLTEXPARAMETERXOESPROC rogl_pfn_glTexParameterxOES = NULL;
static ROGL_PFNGLTEXPARAMETERXVOESPROC rogl_pfn_glTexParameterxvOES = NULL;
static ROGL_PFNGLTRANSLATEXOESPROC rogl_pfn_glTranslatexOES = NULL;
static ROGL_PFNGLGETLIGHTXVOESPROC rogl_pfn_glGetLightxvOES = NULL;
static ROGL_PFNGLGETMATERIALXVOESPROC rogl_pfn_glGetMaterialxvOES = NULL;
static ROGL_PFNGLPOINTPARAMETERXOESPROC rogl_pfn_glPointParameterxOES = NULL;
static ROGL_PFNGLSAMPLECOVERAGEXOESPROC rogl_pfn_glSampleCoveragexOES = NULL;
static ROGL_PFNGLACCUMXOESPROC rogl_pfn_glAccumxOES = NULL;
static ROGL_PFNGLBITMAPXOESPROC rogl_pfn_glBitmapxOES = NULL;
static ROGL_PFNGLBLENDCOLORXOESPROC rogl_pfn_glBlendColorxOES = NULL;
static ROGL_PFNGLCLEARACCUMXOESPROC rogl_pfn_glClearAccumxOES = NULL;
static ROGL_PFNGLCOLOR3XOESPROC rogl_pfn_glColor3xOES = NULL;
static ROGL_PFNGLCOLOR3XVOESPROC rogl_pfn_glColor3xvOES = NULL;
static ROGL_PFNGLCOLOR4XVOESPROC rogl_pfn_glColor4xvOES = NULL;
static ROGL_PFNGLCONVOLUTIONPARAMETERXOESPROC rogl_pfn_glConvolutionParameterxOES = NULL;
static ROGL_PFNGLCONVOLUTIONPARAMETERXVOESPROC rogl_pfn_glConvolutionParameterxvOES = NULL;
static ROGL_PFNGLEVALCOORD1XOESPROC rogl_pfn_glEvalCoord1xOES = NULL;
static ROGL_PFNGLEVALCOORD1XVOESPROC rogl_pfn_glEvalCoord1xvOES = NULL;
static ROGL_PFNGLEVALCOORD2XOESPROC rogl_pfn_glEvalCoord2xOES = NULL;
static ROGL_PFNGLEVALCOORD2XVOESPROC rogl_pfn_glEvalCoord2xvOES = NULL;
static ROGL_PFNGLFEEDBACKBUFFERXOESPROC rogl_pfn_glFeedbackBufferxOES = NULL;
static ROGL_PFNGLGETCONVOLUTIONPARAMETERXVOESPROC rogl_pfn_glGetConvolutionParameterxvOES = NULL;
static ROGL_PFNGLGETHISTOGRAMPARAMETERXVOESPROC rogl_pfn_glGetHistogramParameterxvOES = NULL;
static ROGL_PFNGLGETLIGHTXOESPROC rogl_pfn_glGetLightxOES = NULL;
static ROGL_PFNGLGETMAPXVOESPROC rogl_pfn_glGetMapxvOES = NULL;
static ROGL_PFNGLGETMATERIALXOESPROC rogl_pfn_glGetMaterialxOES = NULL;
static ROGL_PFNGLGETPIXELMAPXVPROC rogl_pfn_glGetPixelMapxv = NULL;
static ROGL_PFNGLGETTEXGENXVOESPROC rogl_pfn_glGetTexGenxvOES = NULL;
static ROGL_PFNGLGETTEXLEVELPARAMETERXVOESPROC rogl_pfn_glGetTexLevelParameterxvOES = NULL;
static ROGL_PFNGLINDEXXOESPROC rogl_pfn_glIndexxOES = NULL;
static ROGL_PFNGLINDEXXVOESPROC rogl_pfn_glIndexxvOES = NULL;
static ROGL_PFNGLLOADTRANSPOSEMATRIXXOESPROC rogl_pfn_glLoadTransposeMatrixxOES = NULL;
static ROGL_PFNGLMAP1XOESPROC rogl_pfn_glMap1xOES = NULL;
static ROGL_PFNGLMAP2XOESPROC rogl_pfn_glMap2xOES = NULL;
static ROGL_PFNGLMAPGRID1XOESPROC rogl_pfn_glMapGrid1xOES = NULL;
static ROGL_PFNGLMAPGRID2XOESPROC rogl_pfn_glMapGrid2xOES = NULL;
static ROGL_PFNGLMULTTRANSPOSEMATRIXXOESPROC rogl_pfn_glMultTransposeMatrixxOES = NULL;
static ROGL_PFNGLMULTITEXCOORD1XOESPROC rogl_pfn_glMultiTexCoord1xOES = NULL;
static ROGL_PFNGLMULTITEXCOORD1XVOESPROC rogl_pfn_glMultiTexCoord1xvOES = NULL;
static ROGL_PFNGLMULTITEXCOORD2XOESPROC rogl_pfn_glMultiTexCoord2xOES = NULL;
static ROGL_PFNGLMULTITEXCOORD2XVOESPROC rogl_pfn_glMultiTexCoord2xvOES = NULL;
static ROGL_PFNGLMULTITEXCOORD3XOESPROC rogl_pfn_glMultiTexCoord3xOES = NULL;
static ROGL_PFNGLMULTITEXCOORD3XVOESPROC rogl_pfn_glMultiTexCoord3xvOES = NULL;
static ROGL_PFNGLMULTITEXCOORD4XVOESPROC rogl_pfn_glMultiTexCoord4xvOES = NULL;
static ROGL_PFNGLNORMAL3XVOESPROC rogl_pfn_glNormal3xvOES = NULL;
static ROGL_PFNGLPASSTHROUGHXOESPROC rogl_pfn_glPassThroughxOES = NULL;
static ROGL_PFNGLPIXELMAPXPROC rogl_pfn_glPixelMapx = NULL;
static ROGL_PFNGLPIXELSTOREXPROC rogl_pfn_glPixelStorex = NULL;
static ROGL_PFNGLPIXELTRANSFERXOESPROC rogl_pfn_glPixelTransferxOES = NULL;
static ROGL_PFNGLPIXELZOOMXOESPROC rogl_pfn_glPixelZoomxOES = NULL;
static ROGL_PFNGLPRIORITIZETEXTURESXOESPROC rogl_pfn_glPrioritizeTexturesxOES = NULL;
static ROGL_PFNGLRASTERPOS2XOESPROC rogl_pfn_glRasterPos2xOES = NULL;
static ROGL_PFNGLRASTERPOS2XVOESPROC rogl_pfn_glRasterPos2xvOES = NULL;
static ROGL_PFNGLRASTERPOS3XOESPROC rogl_pfn_glRasterPos3xOES = NULL;
static ROGL_PFNGLRASTERPOS3XVOESPROC rogl_pfn_glRasterPos3xvOES = NULL;
static ROGL_PFNGLRASTERPOS4XOESPROC rogl_pfn_glRasterPos4xOES = NULL;
static ROGL_PFNGLRASTERPOS4XVOESPROC rogl_pfn_glRasterPos4xvOES = NULL;
static ROGL_PFNGLRECTXOESPROC rogl_pfn_glRectxOES = NULL;
static ROGL_PFNGLRECTXVOESPROC rogl_pfn_glRectxvOES = NULL;
static ROGL_PFNGLTEXCOORD1XOESPROC rogl_pfn_glTexCoord1xOES = NULL;
static ROGL_PFNGLTEXCOORD1XVOESPROC rogl_pfn_glTexCoord1xvOES = NULL;
static ROGL_PFNGLTEXCOORD2XOESPROC rogl_pfn_glTexCoord2xOES = NULL;
static ROGL_PFNGLTEXCOORD2XVOESPROC rogl_pfn_glTexCoord2xvOES = NULL;
static ROGL_PFNGLTEXCOORD3XOESPROC rogl_pfn_glTexCoord3xOES = NULL;
static ROGL_PFNGLTEXCOORD3XVOESPROC rogl_pfn_glTexCoord3xvOES = NULL;
static ROGL_PFNGLTEXCOORD4XOESPROC rogl_pfn_glTexCoord4xOES = NULL;
static ROGL_PFNGLTEXCOORD4XVOESPROC rogl_pfn_glTexCoord4xvOES = NULL;
static ROGL_PFNGLTEXGENXOESPROC rogl_pfn_glTexGenxOES = NULL;
static ROGL_PFNGLTEXGENXVOESPROC rogl_pfn_glTexGenxvOES = NULL;
static ROGL_PFNGLVERTEX2XOESPROC rogl_pfn_glVertex2xOES = NULL;
static ROGL_PFNGLVERTEX2XVOESPROC rogl_pfn_glVertex2xvOES = NULL;
static ROGL_PFNGLVERTEX3XOESPROC rogl_pfn_glVertex3xOES = NULL;
static ROGL_PFNGLVERTEX3XVOESPROC rogl_pfn_glVertex3xvOES = NULL;
static ROGL_PFNGLVERTEX4XOESPROC rogl_pfn_glVertex4xOES = NULL;
static ROGL_PFNGLVERTEX4XVOESPROC rogl_pfn_glVertex4xvOES = NULL;
static ROGL_PFNGLQUERYMATRIXXOESPROC rogl_pfn_glQueryMatrixxOES = NULL;
static ROGL_PFNGLCLEARDEPTHFOESPROC rogl_pfn_glClearDepthfOES = NULL;
static ROGL_PFNGLCLIPPLANEFOESPROC rogl_pfn_glClipPlanefOES = NULL;
static ROGL_PFNGLDEPTHRANGEFOESPROC rogl_pfn_glDepthRangefOES = NULL;
static ROGL_PFNGLFRUSTUMFOESPROC rogl_pfn_glFrustumfOES = NULL;
static ROGL_PFNGLGETCLIPPLANEFOESPROC rogl_pfn_glGetClipPlanefOES = NULL;
static ROGL_PFNGLORTHOFOESPROC rogl_pfn_glOrthofOES = NULL;
static ROGL_PFNGLFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC rogl_pfn_glFramebufferTextureMultiviewOVR = NULL;
static ROGL_PFNGLHINTPGIPROC rogl_pfn_glHintPGI = NULL;
static ROGL_PFNGLDETAILTEXFUNCSGISPROC rogl_pfn_glDetailTexFuncSGIS = NULL;
static ROGL_PFNGLGETDETAILTEXFUNCSGISPROC rogl_pfn_glGetDetailTexFuncSGIS = NULL;
static ROGL_PFNGLFOGFUNCSGISPROC rogl_pfn_glFogFuncSGIS = NULL;
static ROGL_PFNGLGETFOGFUNCSGISPROC rogl_pfn_glGetFogFuncSGIS = NULL;
static ROGL_PFNGLSAMPLEMASKSGISPROC rogl_pfn_glSampleMaskSGIS = NULL;
static ROGL_PFNGLSAMPLEPATTERNSGISPROC rogl_pfn_glSamplePatternSGIS = NULL;
static ROGL_PFNGLPIXELTEXGENPARAMETERISGISPROC rogl_pfn_glPixelTexGenParameteriSGIS = NULL;
static ROGL_PFNGLPIXELTEXGENPARAMETERIVSGISPROC rogl_pfn_glPixelTexGenParameterivSGIS = NULL;
static ROGL_PFNGLPIXELTEXGENPARAMETERFSGISPROC rogl_pfn_glPixelTexGenParameterfSGIS = NULL;
static ROGL_PFNGLPIXELTEXGENPARAMETERFVSGISPROC rogl_pfn_glPixelTexGenParameterfvSGIS = NULL;
static ROGL_PFNGLGETPIXELTEXGENPARAMETERIVSGISPROC rogl_pfn_glGetPixelTexGenParameterivSGIS = NULL;
static ROGL_PFNGLGETPIXELTEXGENPARAMETERFVSGISPROC rogl_pfn_glGetPixelTexGenParameterfvSGIS = NULL;
static ROGL_PFNGLPOINTPARAMETERFSGISPROC rogl_pfn_glPointParameterfSGIS = NULL;
static ROGL_PFNGLPOINTPARAMETERFVSGISPROC rogl_pfn_glPointParameterfvSGIS = NULL;
static ROGL_PFNGLSHARPENTEXFUNCSGISPROC rogl_pfn_glSharpenTexFuncSGIS = NULL;
static ROGL_PFNGLGETSHARPENTEXFUNCSGISPROC rogl_pfn_glGetSharpenTexFuncSGIS = NULL;
static ROGL_PFNGLTEXIMAGE4DSGISPROC rogl_pfn_glTexImage4DSGIS = NULL;
static ROGL_PFNGLTEXSUBIMAGE4DSGISPROC rogl_pfn_glTexSubImage4DSGIS = NULL;
static ROGL_PFNGLTEXTURECOLORMASKSGISPROC rogl_pfn_glTextureColorMaskSGIS = NULL;
static ROGL_PFNGLGETTEXFILTERFUNCSGISPROC rogl_pfn_glGetTexFilterFuncSGIS = NULL;
static ROGL_PFNGLTEXFILTERFUNCSGISPROC rogl_pfn_glTexFilterFuncSGIS = NULL;
static ROGL_PFNGLASYNCMARKERSGIXPROC rogl_pfn_glAsyncMarkerSGIX = NULL;
static ROGL_PFNGLFINISHASYNCSGIXPROC rogl_pfn_glFinishAsyncSGIX = NULL;
static ROGL_PFNGLPOLLASYNCSGIXPROC rogl_pfn_glPollAsyncSGIX = NULL;
static ROGL_PFNGLGENASYNCMARKERSSGIXPROC rogl_pfn_glGenAsyncMarkersSGIX = NULL;
static ROGL_PFNGLDELETEASYNCMARKERSSGIXPROC rogl_pfn_glDeleteAsyncMarkersSGIX = NULL;
static ROGL_PFNGLISASYNCMARKERSGIXPROC rogl_pfn_glIsAsyncMarkerSGIX = NULL;
static ROGL_PFNGLFLUSHRASTERSGIXPROC rogl_pfn_glFlushRasterSGIX = NULL;
static ROGL_PFNGLFRAGMENTCOLORMATERIALSGIXPROC rogl_pfn_glFragmentColorMaterialSGIX = NULL;
static ROGL_PFNGLFRAGMENTLIGHTFSGIXPROC rogl_pfn_glFragmentLightfSGIX = NULL;
static ROGL_PFNGLFRAGMENTLIGHTFVSGIXPROC rogl_pfn_glFragmentLightfvSGIX = NULL;
static ROGL_PFNGLFRAGMENTLIGHTISGIXPROC rogl_pfn_glFragmentLightiSGIX = NULL;
static ROGL_PFNGLFRAGMENTLIGHTIVSGIXPROC rogl_pfn_glFragmentLightivSGIX = NULL;
static ROGL_PFNGLFRAGMENTLIGHTMODELFSGIXPROC rogl_pfn_glFragmentLightModelfSGIX = NULL;
static ROGL_PFNGLFRAGMENTLIGHTMODELFVSGIXPROC rogl_pfn_glFragmentLightModelfvSGIX = NULL;
static ROGL_PFNGLFRAGMENTLIGHTMODELISGIXPROC rogl_pfn_glFragmentLightModeliSGIX = NULL;
static ROGL_PFNGLFRAGMENTLIGHTMODELIVSGIXPROC rogl_pfn_glFragmentLightModelivSGIX = NULL;
static ROGL_PFNGLFRAGMENTMATERIALFSGIXPROC rogl_pfn_glFragmentMaterialfSGIX = NULL;
static ROGL_PFNGLFRAGMENTMATERIALFVSGIXPROC rogl_pfn_glFragmentMaterialfvSGIX = NULL;
static ROGL_PFNGLFRAGMENTMATERIALISGIXPROC rogl_pfn_glFragmentMaterialiSGIX = NULL;
static ROGL_PFNGLFRAGMENTMATERIALIVSGIXPROC rogl_pfn_glFragmentMaterialivSGIX = NULL;
static ROGL_PFNGLGETFRAGMENTLIGHTFVSGIXPROC rogl_pfn_glGetFragmentLightfvSGIX = NULL;
static ROGL_PFNGLGETFRAGMENTLIGHTIVSGIXPROC rogl_pfn_glGetFragmentLightivSGIX = NULL;
static ROGL_PFNGLGETFRAGMENTMATERIALFVSGIXPROC rogl_pfn_glGetFragmentMaterialfvSGIX = NULL;
static ROGL_PFNGLGETFRAGMENTMATERIALIVSGIXPROC rogl_pfn_glGetFragmentMaterialivSGIX = NULL;
static ROGL_PFNGLLIGHTENVISGIXPROC rogl_pfn_glLightEnviSGIX = NULL;
static ROGL_PFNGLFRAMEZOOMSGIXPROC rogl_pfn_glFrameZoomSGIX = NULL;
static ROGL_PFNGLIGLOOINTERFACESGIXPROC rogl_pfn_glIglooInterfaceSGIX = NULL;
static ROGL_PFNGLGETINSTRUMENTSSGIXPROC rogl_pfn_glGetInstrumentsSGIX = NULL;
static ROGL_PFNGLINSTRUMENTSBUFFERSGIXPROC rogl_pfn_glInstrumentsBufferSGIX = NULL;
static ROGL_PFNGLPOLLINSTRUMENTSSGIXPROC rogl_pfn_glPollInstrumentsSGIX = NULL;
static ROGL_PFNGLREADINSTRUMENTSSGIXPROC rogl_pfn_glReadInstrumentsSGIX = NULL;
static ROGL_PFNGLSTARTINSTRUMENTSSGIXPROC rogl_pfn_glStartInstrumentsSGIX = NULL;
static ROGL_PFNGLSTOPINSTRUMENTSSGIXPROC rogl_pfn_glStopInstrumentsSGIX = NULL;
static ROGL_PFNGLGETLISTPARAMETERFVSGIXPROC rogl_pfn_glGetListParameterfvSGIX = NULL;
static ROGL_PFNGLGETLISTPARAMETERIVSGIXPROC rogl_pfn_glGetListParameterivSGIX = NULL;
static ROGL_PFNGLLISTPARAMETERFSGIXPROC rogl_pfn_glListParameterfSGIX = NULL;
static ROGL_PFNGLLISTPARAMETERFVSGIXPROC rogl_pfn_glListParameterfvSGIX = NULL;
static ROGL_PFNGLLISTPARAMETERISGIXPROC rogl_pfn_glListParameteriSGIX = NULL;
static ROGL_PFNGLLISTPARAMETERIVSGIXPROC rogl_pfn_glListParameterivSGIX = NULL;
static ROGL_PFNGLPIXELTEXGENSGIXPROC rogl_pfn_glPixelTexGenSGIX = NULL;
static ROGL_PFNGLDEFORMATIONMAP3DSGIXPROC rogl_pfn_glDeformationMap3dSGIX = NULL;
static ROGL_PFNGLDEFORMATIONMAP3FSGIXPROC rogl_pfn_glDeformationMap3fSGIX = NULL;
static ROGL_PFNGLDEFORMSGIXPROC rogl_pfn_glDeformSGIX = NULL;
static ROGL_PFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC rogl_pfn_glLoadIdentityDeformationMapSGIX = NULL;
static ROGL_PFNGLREFERENCEPLANESGIXPROC rogl_pfn_glReferencePlaneSGIX = NULL;
static ROGL_PFNGLSPRITEPARAMETERFSGIXPROC rogl_pfn_glSpriteParameterfSGIX = NULL;
static ROGL_PFNGLSPRITEPARAMETERFVSGIXPROC rogl_pfn_glSpriteParameterfvSGIX = NULL;
static ROGL_PFNGLSPRITEPARAMETERISGIXPROC rogl_pfn_glSpriteParameteriSGIX = NULL;
static ROGL_PFNGLSPRITEPARAMETERIVSGIXPROC rogl_pfn_glSpriteParameterivSGIX = NULL;
static ROGL_PFNGLTAGSAMPLEBUFFERSGIXPROC rogl_pfn_glTagSampleBufferSGIX = NULL;
static ROGL_PFNGLCOLORTABLESGIPROC rogl_pfn_glColorTableSGI = NULL;
static ROGL_PFNGLCOLORTABLEPARAMETERFVSGIPROC rogl_pfn_glColorTableParameterfvSGI = NULL;
static ROGL_PFNGLCOLORTABLEPARAMETERIVSGIPROC rogl_pfn_glColorTableParameterivSGI = NULL;
static ROGL_PFNGLCOPYCOLORTABLESGIPROC rogl_pfn_glCopyColorTableSGI = NULL;
static ROGL_PFNGLGETCOLORTABLESGIPROC rogl_pfn_glGetColorTableSGI = NULL;
static ROGL_PFNGLGETCOLORTABLEPARAMETERFVSGIPROC rogl_pfn_glGetColorTableParameterfvSGI = NULL;
static ROGL_PFNGLGETCOLORTABLEPARAMETERIVSGIPROC rogl_pfn_glGetColorTableParameterivSGI = NULL;
static ROGL_PFNGLFINISHTEXTURESUNXPROC rogl_pfn_glFinishTextureSUNX = NULL;
static ROGL_PFNGLGLOBALALPHAFACTORBSUNPROC rogl_pfn_glGlobalAlphaFactorbSUN = NULL;
static ROGL_PFNGLGLOBALALPHAFACTORSSUNPROC rogl_pfn_glGlobalAlphaFactorsSUN = NULL;
static ROGL_PFNGLGLOBALALPHAFACTORISUNPROC rogl_pfn_glGlobalAlphaFactoriSUN = NULL;
static ROGL_PFNGLGLOBALALPHAFACTORFSUNPROC rogl_pfn_glGlobalAlphaFactorfSUN = NULL;
static ROGL_PFNGLGLOBALALPHAFACTORDSUNPROC rogl_pfn_glGlobalAlphaFactordSUN = NULL;
static ROGL_PFNGLGLOBALALPHAFACTORUBSUNPROC rogl_pfn_glGlobalAlphaFactorubSUN = NULL;
static ROGL_PFNGLGLOBALALPHAFACTORUSSUNPROC rogl_pfn_glGlobalAlphaFactorusSUN = NULL;
static ROGL_PFNGLGLOBALALPHAFACTORUISUNPROC rogl_pfn_glGlobalAlphaFactoruiSUN = NULL;
static ROGL_PFNGLDRAWMESHARRAYSSUNPROC rogl_pfn_glDrawMeshArraysSUN = NULL;
static ROGL_PFNGLREPLACEMENTCODEUISUNPROC rogl_pfn_glReplacementCodeuiSUN = NULL;
static ROGL_PFNGLREPLACEMENTCODEUSSUNPROC rogl_pfn_glReplacementCodeusSUN = NULL;
static ROGL_PFNGLREPLACEMENTCODEUBSUNPROC rogl_pfn_glReplacementCodeubSUN = NULL;
static ROGL_PFNGLREPLACEMENTCODEUIVSUNPROC rogl_pfn_glReplacementCodeuivSUN = NULL;
static ROGL_PFNGLREPLACEMENTCODEUSVSUNPROC rogl_pfn_glReplacementCodeusvSUN = NULL;
static ROGL_PFNGLREPLACEMENTCODEUBVSUNPROC rogl_pfn_glReplacementCodeubvSUN = NULL;
static ROGL_PFNGLREPLACEMENTCODEPOINTERSUNPROC rogl_pfn_glReplacementCodePointerSUN = NULL;
static ROGL_PFNGLCOLOR4UBVERTEX2FSUNPROC rogl_pfn_glColor4ubVertex2fSUN = NULL;
static ROGL_PFNGLCOLOR4UBVERTEX2FVSUNPROC rogl_pfn_glColor4ubVertex2fvSUN = NULL;
static ROGL_PFNGLCOLOR4UBVERTEX3FSUNPROC rogl_pfn_glColor4ubVertex3fSUN = NULL;
static ROGL_PFNGLCOLOR4UBVERTEX3FVSUNPROC rogl_pfn_glColor4ubVertex3fvSUN = NULL;
static ROGL_PFNGLCOLOR3FVERTEX3FSUNPROC rogl_pfn_glColor3fVertex3fSUN = NULL;
static ROGL_PFNGLCOLOR3FVERTEX3FVSUNPROC rogl_pfn_glColor3fVertex3fvSUN = NULL;
static ROGL_PFNGLNORMAL3FVERTEX3FSUNPROC rogl_pfn_glNormal3fVertex3fSUN = NULL;
static ROGL_PFNGLNORMAL3FVERTEX3FVSUNPROC rogl_pfn_glNormal3fVertex3fvSUN = NULL;
static ROGL_PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC rogl_pfn_glColor4fNormal3fVertex3fSUN = NULL;
static ROGL_PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC rogl_pfn_glColor4fNormal3fVertex3fvSUN = NULL;
static ROGL_PFNGLTEXCOORD2FVERTEX3FSUNPROC rogl_pfn_glTexCoord2fVertex3fSUN = NULL;
static ROGL_PFNGLTEXCOORD2FVERTEX3FVSUNPROC rogl_pfn_glTexCoord2fVertex3fvSUN = NULL;
static ROGL_PFNGLTEXCOORD4FVERTEX4FSUNPROC rogl_pfn_glTexCoord4fVertex4fSUN = NULL;
static ROGL_PFNGLTEXCOORD4FVERTEX4FVSUNPROC rogl_pfn_glTexCoord4fVertex4fvSUN = NULL;
static ROGL_PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC rogl_pfn_glTexCoord2fColor4ubVertex3fSUN = NULL;
static ROGL_PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC rogl_pfn_glTexCoord2fColor4ubVertex3fvSUN = NULL;
static ROGL_PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC rogl_pfn_glTexCoord2fColor3fVertex3fSUN = NULL;
static ROGL_PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC rogl_pfn_glTexCoord2fColor3fVertex3fvSUN = NULL;
static ROGL_PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC rogl_pfn_glTexCoord2fNormal3fVertex3fSUN = NULL;
static ROGL_PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC rogl_pfn_glTexCoord2fNormal3fVertex3fvSUN = NULL;
static ROGL_PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC rogl_pfn_glTexCoord2fColor4fNormal3fVertex3fSUN = NULL;
static ROGL_PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC rogl_pfn_glTexCoord2fColor4fNormal3fVertex3fvSUN = NULL;
static ROGL_PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC rogl_pfn_glTexCoord4fColor4fNormal3fVertex4fSUN = NULL;
static ROGL_PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC rogl_pfn_glTexCoord4fColor4fNormal3fVertex4fvSUN = NULL;
static ROGL_PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC rogl_pfn_glReplacementCodeuiVertex3fSUN = NULL;
static ROGL_PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC rogl_pfn_glReplacementCodeuiVertex3fvSUN = NULL;
static ROGL_PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC rogl_pfn_glReplacementCodeuiColor4ubVertex3fSUN = NULL;
static ROGL_PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC rogl_pfn_glReplacementCodeuiColor4ubVertex3fvSUN = NULL;
static ROGL_PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC rogl_pfn_glReplacementCodeuiColor3fVertex3fSUN = NULL;
static ROGL_PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC rogl_pfn_glReplacementCodeuiColor3fVertex3fvSUN = NULL;
static ROGL_PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC rogl_pfn_glReplacementCodeuiNormal3fVertex3fSUN = NULL;
static ROGL_PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC rogl_pfn_glReplacementCodeuiNormal3fVertex3fvSUN = NULL;
static ROGL_PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC rogl_pfn_glReplacementCodeuiColor4fNormal3fVertex3fSUN = NULL;
static ROGL_PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC rogl_pfn_glReplacementCodeuiColor4fNormal3fVertex3fvSUN = NULL;
static ROGL_PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC rogl_pfn_glReplacementCodeuiTexCoord2fVertex3fSUN = NULL;
static ROGL_PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC rogl_pfn_glReplacementCodeuiTexCoord2fVertex3fvSUN = NULL;
static ROGL_PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC rogl_pfn_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = NULL;
static ROGL_PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC rogl_pfn_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = NULL;
static ROGL_PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC rogl_pfn_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = NULL;
static ROGL_PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC rogl_pfn_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = NULL;

static VALUE rogl_glTbufferMask3DFX(VALUE _obj_, VALUE _arg1_)
{
    unsigned int mask = (unsigned int)NUM2UINT(_arg1_);

    rogl_pfn_glTbufferMask3DFX(mask);

    return Qnil;
}

static VALUE rogl_glDebugMessageEnableAMD(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int category = (unsigned int)NUM2UINT(_arg1_);
    unsigned int severity = (unsigned int)NUM2UINT(_arg2_);
    int count = (int)NUM2INT(_arg3_);
    void* ids = (void*)val2ptr(_arg4_);
    unsigned char enabled = (unsigned char)NUM2UINT(_arg5_);

    rogl_pfn_glDebugMessageEnableAMD(category, severity, count, ids, enabled);

    return Qnil;
}

static VALUE rogl_glDebugMessageInsertAMD(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int category = (unsigned int)NUM2UINT(_arg1_);
    unsigned int severity = (unsigned int)NUM2UINT(_arg2_);
    unsigned int id = (unsigned int)NUM2UINT(_arg3_);
    int length = (int)NUM2INT(_arg4_);
    void* buf = (void*)val2ptr(_arg5_);

    rogl_pfn_glDebugMessageInsertAMD(category, severity, id, length, buf);

    return Qnil;
}

static VALUE rogl_glDebugMessageCallbackAMD(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    void* callback = (void*)val2ptr(_arg1_);
    void* userParam = (void*)val2ptr(_arg2_);

    rogl_pfn_glDebugMessageCallbackAMD(callback, userParam);

    return Qnil;
}

static VALUE rogl_glGetDebugMessageLogAMD(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_)
{
    unsigned int count = (unsigned int)NUM2UINT(_arg1_);
    int bufsize = (int)NUM2INT(_arg2_);
    void* categories = (void*)val2ptr(_arg3_);
    void* severities = (void*)val2ptr(_arg4_);
    void* ids = (void*)val2ptr(_arg5_);
    void* lengths = (void*)val2ptr(_arg6_);
    void* message = (void*)val2ptr(_arg7_);

    unsigned int retval = rogl_pfn_glGetDebugMessageLogAMD(count, bufsize, categories, severities, ids, lengths, message);

    return UINT2NUM(retval);
}

static VALUE rogl_glBlendFuncIndexedAMD(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int buf = (unsigned int)NUM2UINT(_arg1_);
    unsigned int src = (unsigned int)NUM2UINT(_arg2_);
    unsigned int dst = (unsigned int)NUM2UINT(_arg3_);

    rogl_pfn_glBlendFuncIndexedAMD(buf, src, dst);

    return Qnil;
}

static VALUE rogl_glBlendFuncSeparateIndexedAMD(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int buf = (unsigned int)NUM2UINT(_arg1_);
    unsigned int srcRGB = (unsigned int)NUM2UINT(_arg2_);
    unsigned int dstRGB = (unsigned int)NUM2UINT(_arg3_);
    unsigned int srcAlpha = (unsigned int)NUM2UINT(_arg4_);
    unsigned int dstAlpha = (unsigned int)NUM2UINT(_arg5_);

    rogl_pfn_glBlendFuncSeparateIndexedAMD(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);

    return Qnil;
}

static VALUE rogl_glBlendEquationIndexedAMD(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int buf = (unsigned int)NUM2UINT(_arg1_);
    unsigned int mode = (unsigned int)NUM2UINT(_arg2_);

    rogl_pfn_glBlendEquationIndexedAMD(buf, mode);

    return Qnil;
}

static VALUE rogl_glBlendEquationSeparateIndexedAMD(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int buf = (unsigned int)NUM2UINT(_arg1_);
    unsigned int modeRGB = (unsigned int)NUM2UINT(_arg2_);
    unsigned int modeAlpha = (unsigned int)NUM2UINT(_arg3_);

    rogl_pfn_glBlendEquationSeparateIndexedAMD(buf, modeRGB, modeAlpha);

    return Qnil;
}

static VALUE rogl_glVertexAttribParameteriAMD(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    int param = (int)NUM2INT(_arg3_);

    rogl_pfn_glVertexAttribParameteriAMD(index, pname, param);

    return Qnil;
}

static VALUE rogl_glMultiDrawArraysIndirectAMD(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int mode = (unsigned int)NUM2UINT(_arg1_);
    void* indirect = (void*)val2ptr(_arg2_);
    int primcount = (int)NUM2INT(_arg3_);
    int stride = (int)NUM2INT(_arg4_);

    rogl_pfn_glMultiDrawArraysIndirectAMD(mode, indirect, primcount, stride);

    return Qnil;
}

static VALUE rogl_glMultiDrawElementsIndirectAMD(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int mode = (unsigned int)NUM2UINT(_arg1_);
    unsigned int type = (unsigned int)NUM2UINT(_arg2_);
    void* indirect = (void*)val2ptr(_arg3_);
    int primcount = (int)NUM2INT(_arg4_);
    int stride = (int)NUM2INT(_arg5_);

    rogl_pfn_glMultiDrawElementsIndirectAMD(mode, type, indirect, primcount, stride);

    return Qnil;
}

static VALUE rogl_glGenNamesAMD(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int identifier = (unsigned int)NUM2UINT(_arg1_);
    unsigned int num = (unsigned int)NUM2UINT(_arg2_);
    void* names = (void*)val2ptr(_arg3_);

    rogl_pfn_glGenNamesAMD(identifier, num, names);

    return Qnil;
}

static VALUE rogl_glDeleteNamesAMD(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int identifier = (unsigned int)NUM2UINT(_arg1_);
    unsigned int num = (unsigned int)NUM2UINT(_arg2_);
    void* names = (void*)val2ptr(_arg3_);

    rogl_pfn_glDeleteNamesAMD(identifier, num, names);

    return Qnil;
}

static VALUE rogl_glIsNameAMD(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int identifier = (unsigned int)NUM2UINT(_arg1_);
    unsigned int name = (unsigned int)NUM2UINT(_arg2_);

    unsigned char retval = rogl_pfn_glIsNameAMD(identifier, name);

    return UINT2NUM(retval);
}

static VALUE rogl_glQueryObjectParameteruiAMD(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int id = (unsigned int)NUM2UINT(_arg2_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg3_);
    unsigned int param = (unsigned int)NUM2UINT(_arg4_);

    rogl_pfn_glQueryObjectParameteruiAMD(target, id, pname, param);

    return Qnil;
}

static VALUE rogl_glGetPerfMonitorGroupsAMD(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    void* numGroups = (void*)val2ptr(_arg1_);
    int groupsSize = (int)NUM2INT(_arg2_);
    void* groups = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetPerfMonitorGroupsAMD(numGroups, groupsSize, groups);

    return Qnil;
}

static VALUE rogl_glGetPerfMonitorCountersAMD(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int group = (unsigned int)NUM2UINT(_arg1_);
    void* numCounters = (void*)val2ptr(_arg2_);
    void* maxActiveCounters = (void*)val2ptr(_arg3_);
    int counterSize = (int)NUM2INT(_arg4_);
    void* counters = (void*)val2ptr(_arg5_);

    rogl_pfn_glGetPerfMonitorCountersAMD(group, numCounters, maxActiveCounters, counterSize, counters);

    return Qnil;
}

static VALUE rogl_glGetPerfMonitorGroupStringAMD(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int group = (unsigned int)NUM2UINT(_arg1_);
    int bufSize = (int)NUM2INT(_arg2_);
    void* length = (void*)val2ptr(_arg3_);
    void* groupString = (void*)val2ptr(_arg4_);

    rogl_pfn_glGetPerfMonitorGroupStringAMD(group, bufSize, length, groupString);

    return Qnil;
}

static VALUE rogl_glGetPerfMonitorCounterStringAMD(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int group = (unsigned int)NUM2UINT(_arg1_);
    unsigned int counter = (unsigned int)NUM2UINT(_arg2_);
    int bufSize = (int)NUM2INT(_arg3_);
    void* length = (void*)val2ptr(_arg4_);
    void* counterString = (void*)val2ptr(_arg5_);

    rogl_pfn_glGetPerfMonitorCounterStringAMD(group, counter, bufSize, length, counterString);

    return Qnil;
}

static VALUE rogl_glGetPerfMonitorCounterInfoAMD(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int group = (unsigned int)NUM2UINT(_arg1_);
    unsigned int counter = (unsigned int)NUM2UINT(_arg2_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg3_);
    void* data = (void*)val2ptr(_arg4_);

    rogl_pfn_glGetPerfMonitorCounterInfoAMD(group, counter, pname, data);

    return Qnil;
}

static VALUE rogl_glGenPerfMonitorsAMD(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int n = (int)NUM2INT(_arg1_);
    void* monitors = (void*)val2ptr(_arg2_);

    rogl_pfn_glGenPerfMonitorsAMD(n, monitors);

    return Qnil;
}

static VALUE rogl_glDeletePerfMonitorsAMD(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int n = (int)NUM2INT(_arg1_);
    void* monitors = (void*)val2ptr(_arg2_);

    rogl_pfn_glDeletePerfMonitorsAMD(n, monitors);

    return Qnil;
}

static VALUE rogl_glSelectPerfMonitorCountersAMD(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int monitor = (unsigned int)NUM2UINT(_arg1_);
    unsigned char enable = (unsigned char)NUM2UINT(_arg2_);
    unsigned int group = (unsigned int)NUM2UINT(_arg3_);
    int numCounters = (int)NUM2INT(_arg4_);
    void* counterList = (void*)val2ptr(_arg5_);

    rogl_pfn_glSelectPerfMonitorCountersAMD(monitor, enable, group, numCounters, counterList);

    return Qnil;
}

static VALUE rogl_glBeginPerfMonitorAMD(VALUE _obj_, VALUE _arg1_)
{
    unsigned int monitor = (unsigned int)NUM2UINT(_arg1_);

    rogl_pfn_glBeginPerfMonitorAMD(monitor);

    return Qnil;
}

static VALUE rogl_glEndPerfMonitorAMD(VALUE _obj_, VALUE _arg1_)
{
    unsigned int monitor = (unsigned int)NUM2UINT(_arg1_);

    rogl_pfn_glEndPerfMonitorAMD(monitor);

    return Qnil;
}

static VALUE rogl_glGetPerfMonitorCounterDataAMD(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int monitor = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    int dataSize = (int)NUM2INT(_arg3_);
    void* data = (void*)val2ptr(_arg4_);
    void* bytesWritten = (void*)val2ptr(_arg5_);

    rogl_pfn_glGetPerfMonitorCounterDataAMD(monitor, pname, dataSize, data, bytesWritten);

    return Qnil;
}

static VALUE rogl_glSetMultisamplefvAMD(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int pname = (unsigned int)NUM2UINT(_arg1_);
    unsigned int index = (unsigned int)NUM2UINT(_arg2_);
    void* val = (void*)val2ptr(_arg3_);

    rogl_pfn_glSetMultisamplefvAMD(pname, index, val);

    return Qnil;
}

static VALUE rogl_glTexStorageSparseAMD(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int internalFormat = (unsigned int)NUM2UINT(_arg2_);
    int width = (int)NUM2INT(_arg3_);
    int height = (int)NUM2INT(_arg4_);
    int depth = (int)NUM2INT(_arg5_);
    int layers = (int)NUM2INT(_arg6_);
    unsigned int flags = (unsigned int)NUM2UINT(_arg7_);

    rogl_pfn_glTexStorageSparseAMD(target, internalFormat, width, height, depth, layers, flags);

    return Qnil;
}

static VALUE rogl_glTextureStorageSparseAMD(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_)
{
    unsigned int texture = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    unsigned int internalFormat = (unsigned int)NUM2UINT(_arg3_);
    int width = (int)NUM2INT(_arg4_);
    int height = (int)NUM2INT(_arg5_);
    int depth = (int)NUM2INT(_arg6_);
    int layers = (int)NUM2INT(_arg7_);
    unsigned int flags = (unsigned int)NUM2UINT(_arg8_);

    rogl_pfn_glTextureStorageSparseAMD(texture, target, internalFormat, width, height, depth, layers, flags);

    return Qnil;
}

static VALUE rogl_glStencilOpValueAMD(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int face = (unsigned int)NUM2UINT(_arg1_);
    unsigned int value = (unsigned int)NUM2UINT(_arg2_);

    rogl_pfn_glStencilOpValueAMD(face, value);

    return Qnil;
}

static VALUE rogl_glTessellationFactorAMD(VALUE _obj_, VALUE _arg1_)
{
    float factor = (float)NUM2DBL(_arg1_);

    rogl_pfn_glTessellationFactorAMD(factor);

    return Qnil;
}

static VALUE rogl_glTessellationModeAMD(VALUE _obj_, VALUE _arg1_)
{
    unsigned int mode = (unsigned int)NUM2UINT(_arg1_);

    rogl_pfn_glTessellationModeAMD(mode);

    return Qnil;
}

static VALUE rogl_glElementPointerAPPLE(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int type = (unsigned int)NUM2UINT(_arg1_);
    void* pointer = (void*)val2ptr(_arg2_);

    rogl_pfn_glElementPointerAPPLE(type, pointer);

    return Qnil;
}

static VALUE rogl_glDrawElementArrayAPPLE(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int mode = (unsigned int)NUM2UINT(_arg1_);
    int first = (int)NUM2INT(_arg2_);
    int count = (int)NUM2INT(_arg3_);

    rogl_pfn_glDrawElementArrayAPPLE(mode, first, count);

    return Qnil;
}

static VALUE rogl_glDrawRangeElementArrayAPPLE(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int mode = (unsigned int)NUM2UINT(_arg1_);
    unsigned int start = (unsigned int)NUM2UINT(_arg2_);
    unsigned int end = (unsigned int)NUM2UINT(_arg3_);
    int first = (int)NUM2INT(_arg4_);
    int count = (int)NUM2INT(_arg5_);

    rogl_pfn_glDrawRangeElementArrayAPPLE(mode, start, end, first, count);

    return Qnil;
}

static VALUE rogl_glMultiDrawElementArrayAPPLE(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int mode = (unsigned int)NUM2UINT(_arg1_);
    void* first = (void*)val2ptr(_arg2_);
    void* count = (void*)val2ptr(_arg3_);
    int primcount = (int)NUM2INT(_arg4_);

    rogl_pfn_glMultiDrawElementArrayAPPLE(mode, first, count, primcount);

    return Qnil;
}

static VALUE rogl_glMultiDrawRangeElementArrayAPPLE(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_)
{
    unsigned int mode = (unsigned int)NUM2UINT(_arg1_);
    unsigned int start = (unsigned int)NUM2UINT(_arg2_);
    unsigned int end = (unsigned int)NUM2UINT(_arg3_);
    void* first = (void*)val2ptr(_arg4_);
    void* count = (void*)val2ptr(_arg5_);
    int primcount = (int)NUM2INT(_arg6_);

    rogl_pfn_glMultiDrawRangeElementArrayAPPLE(mode, start, end, first, count, primcount);

    return Qnil;
}

static VALUE rogl_glGenFencesAPPLE(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int n = (int)NUM2INT(_arg1_);
    void* fences = (void*)val2ptr(_arg2_);

    rogl_pfn_glGenFencesAPPLE(n, fences);

    return Qnil;
}

static VALUE rogl_glDeleteFencesAPPLE(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int n = (int)NUM2INT(_arg1_);
    void* fences = (void*)val2ptr(_arg2_);

    rogl_pfn_glDeleteFencesAPPLE(n, fences);

    return Qnil;
}

static VALUE rogl_glSetFenceAPPLE(VALUE _obj_, VALUE _arg1_)
{
    unsigned int fence = (unsigned int)NUM2UINT(_arg1_);

    rogl_pfn_glSetFenceAPPLE(fence);

    return Qnil;
}

static VALUE rogl_glIsFenceAPPLE(VALUE _obj_, VALUE _arg1_)
{
    unsigned int fence = (unsigned int)NUM2UINT(_arg1_);

    unsigned char retval = rogl_pfn_glIsFenceAPPLE(fence);

    return UINT2NUM(retval);
}

static VALUE rogl_glTestFenceAPPLE(VALUE _obj_, VALUE _arg1_)
{
    unsigned int fence = (unsigned int)NUM2UINT(_arg1_);

    unsigned char retval = rogl_pfn_glTestFenceAPPLE(fence);

    return UINT2NUM(retval);
}

static VALUE rogl_glFinishFenceAPPLE(VALUE _obj_, VALUE _arg1_)
{
    unsigned int fence = (unsigned int)NUM2UINT(_arg1_);

    rogl_pfn_glFinishFenceAPPLE(fence);

    return Qnil;
}

static VALUE rogl_glTestObjectAPPLE(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int object = (unsigned int)NUM2UINT(_arg1_);
    unsigned int name = (unsigned int)NUM2UINT(_arg2_);

    unsigned char retval = rogl_pfn_glTestObjectAPPLE(object, name);

    return UINT2NUM(retval);
}

static VALUE rogl_glFinishObjectAPPLE(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int object = (unsigned int)NUM2UINT(_arg1_);
    int name = (int)NUM2INT(_arg2_);

    rogl_pfn_glFinishObjectAPPLE(object, name);

    return Qnil;
}

static VALUE rogl_glBufferParameteriAPPLE(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    int param = (int)NUM2INT(_arg3_);

    rogl_pfn_glBufferParameteriAPPLE(target, pname, param);

    return Qnil;
}

static VALUE rogl_glFlushMappedBufferRangeAPPLE(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    ptrdiff_t offset = (ptrdiff_t)(_arg2_);
    ptrdiff_t size = (ptrdiff_t)(_arg3_);

    rogl_pfn_glFlushMappedBufferRangeAPPLE(target, offset, size);

    return Qnil;
}

static VALUE rogl_glObjectPurgeableAPPLE(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int objectType = (unsigned int)NUM2UINT(_arg1_);
    unsigned int name = (unsigned int)NUM2UINT(_arg2_);
    unsigned int option = (unsigned int)NUM2UINT(_arg3_);

    unsigned int retval = rogl_pfn_glObjectPurgeableAPPLE(objectType, name, option);

    return UINT2NUM(retval);
}

static VALUE rogl_glObjectUnpurgeableAPPLE(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int objectType = (unsigned int)NUM2UINT(_arg1_);
    unsigned int name = (unsigned int)NUM2UINT(_arg2_);
    unsigned int option = (unsigned int)NUM2UINT(_arg3_);

    unsigned int retval = rogl_pfn_glObjectUnpurgeableAPPLE(objectType, name, option);

    return UINT2NUM(retval);
}

static VALUE rogl_glGetObjectParameterivAPPLE(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int objectType = (unsigned int)NUM2UINT(_arg1_);
    unsigned int name = (unsigned int)NUM2UINT(_arg2_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg3_);
    void* params = (void*)val2ptr(_arg4_);

    rogl_pfn_glGetObjectParameterivAPPLE(objectType, name, pname, params);

    return Qnil;
}

static VALUE rogl_glTextureRangeAPPLE(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    int length = (int)NUM2INT(_arg2_);
    void* pointer = (void*)val2ptr(_arg3_);

    rogl_pfn_glTextureRangeAPPLE(target, length, pointer);

    return Qnil;
}

static VALUE rogl_glGetTexParameterPointervAPPLE(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetTexParameterPointervAPPLE(target, pname, params);

    return Qnil;
}

static VALUE rogl_glBindVertexArrayAPPLE(VALUE _obj_, VALUE _arg1_)
{
    unsigned int array = (unsigned int)NUM2UINT(_arg1_);

    rogl_pfn_glBindVertexArrayAPPLE(array);

    return Qnil;
}

static VALUE rogl_glDeleteVertexArraysAPPLE(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int n = (int)NUM2INT(_arg1_);
    void* arrays = (void*)val2ptr(_arg2_);

    rogl_pfn_glDeleteVertexArraysAPPLE(n, arrays);

    return Qnil;
}

static VALUE rogl_glGenVertexArraysAPPLE(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int n = (int)NUM2INT(_arg1_);
    void* arrays = (void*)val2ptr(_arg2_);

    rogl_pfn_glGenVertexArraysAPPLE(n, arrays);

    return Qnil;
}

static VALUE rogl_glIsVertexArrayAPPLE(VALUE _obj_, VALUE _arg1_)
{
    unsigned int array = (unsigned int)NUM2UINT(_arg1_);

    unsigned char retval = rogl_pfn_glIsVertexArrayAPPLE(array);

    return UINT2NUM(retval);
}

static VALUE rogl_glVertexArrayRangeAPPLE(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int length = (int)NUM2INT(_arg1_);
    void* pointer = (void*)val2ptr(_arg2_);

    rogl_pfn_glVertexArrayRangeAPPLE(length, pointer);

    return Qnil;
}

static VALUE rogl_glFlushVertexArrayRangeAPPLE(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int length = (int)NUM2INT(_arg1_);
    void* pointer = (void*)val2ptr(_arg2_);

    rogl_pfn_glFlushVertexArrayRangeAPPLE(length, pointer);

    return Qnil;
}

static VALUE rogl_glVertexArrayParameteriAPPLE(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int pname = (unsigned int)NUM2UINT(_arg1_);
    int param = (int)NUM2INT(_arg2_);

    rogl_pfn_glVertexArrayParameteriAPPLE(pname, param);

    return Qnil;
}

static VALUE rogl_glEnableVertexAttribAPPLE(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);

    rogl_pfn_glEnableVertexAttribAPPLE(index, pname);

    return Qnil;
}

static VALUE rogl_glDisableVertexAttribAPPLE(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);

    rogl_pfn_glDisableVertexAttribAPPLE(index, pname);

    return Qnil;
}

static VALUE rogl_glIsVertexAttribEnabledAPPLE(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);

    unsigned char retval = rogl_pfn_glIsVertexAttribEnabledAPPLE(index, pname);

    return UINT2NUM(retval);
}

static VALUE rogl_glMapVertexAttrib1dAPPLE(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    unsigned int size = (unsigned int)NUM2UINT(_arg2_);
    double u1 = (double)NUM2DBL(_arg3_);
    double u2 = (double)NUM2DBL(_arg4_);
    int stride = (int)NUM2INT(_arg5_);
    int order = (int)NUM2INT(_arg6_);
    void* points = (void*)val2ptr(_arg7_);

    rogl_pfn_glMapVertexAttrib1dAPPLE(index, size, u1, u2, stride, order, points);

    return Qnil;
}

static VALUE rogl_glMapVertexAttrib1fAPPLE(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    unsigned int size = (unsigned int)NUM2UINT(_arg2_);
    float u1 = (float)NUM2DBL(_arg3_);
    float u2 = (float)NUM2DBL(_arg4_);
    int stride = (int)NUM2INT(_arg5_);
    int order = (int)NUM2INT(_arg6_);
    void* points = (void*)val2ptr(_arg7_);

    rogl_pfn_glMapVertexAttrib1fAPPLE(index, size, u1, u2, stride, order, points);

    return Qnil;
}

static VALUE rogl_glMapVertexAttrib2dAPPLE(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_, VALUE _arg9_, VALUE _arg10_, VALUE _arg11_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    unsigned int size = (unsigned int)NUM2UINT(_arg2_);
    double u1 = (double)NUM2DBL(_arg3_);
    double u2 = (double)NUM2DBL(_arg4_);
    int ustride = (int)NUM2INT(_arg5_);
    int uorder = (int)NUM2INT(_arg6_);
    double v1 = (double)NUM2DBL(_arg7_);
    double v2 = (double)NUM2DBL(_arg8_);
    int vstride = (int)NUM2INT(_arg9_);
    int vorder = (int)NUM2INT(_arg10_);
    void* points = (void*)val2ptr(_arg11_);

    rogl_pfn_glMapVertexAttrib2dAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);

    return Qnil;
}

static VALUE rogl_glMapVertexAttrib2fAPPLE(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_, VALUE _arg9_, VALUE _arg10_, VALUE _arg11_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    unsigned int size = (unsigned int)NUM2UINT(_arg2_);
    float u1 = (float)NUM2DBL(_arg3_);
    float u2 = (float)NUM2DBL(_arg4_);
    int ustride = (int)NUM2INT(_arg5_);
    int uorder = (int)NUM2INT(_arg6_);
    float v1 = (float)NUM2DBL(_arg7_);
    float v2 = (float)NUM2DBL(_arg8_);
    int vstride = (int)NUM2INT(_arg9_);
    int vorder = (int)NUM2INT(_arg10_);
    void* points = (void*)val2ptr(_arg11_);

    rogl_pfn_glMapVertexAttrib2fAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);

    return Qnil;
}

static VALUE rogl_glPrimitiveBoundingBoxARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_)
{
    float minX = (float)NUM2DBL(_arg1_);
    float minY = (float)NUM2DBL(_arg2_);
    float minZ = (float)NUM2DBL(_arg3_);
    float minW = (float)NUM2DBL(_arg4_);
    float maxX = (float)NUM2DBL(_arg5_);
    float maxY = (float)NUM2DBL(_arg6_);
    float maxZ = (float)NUM2DBL(_arg7_);
    float maxW = (float)NUM2DBL(_arg8_);

    rogl_pfn_glPrimitiveBoundingBoxARB(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);

    return Qnil;
}

static VALUE rogl_glGetTextureHandleARB(VALUE _obj_, VALUE _arg1_)
{
    unsigned int texture = (unsigned int)NUM2UINT(_arg1_);

    unsigned long long retval = rogl_pfn_glGetTextureHandleARB(texture);

    return ULL2NUM(retval);
}

static VALUE rogl_glGetTextureSamplerHandleARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int texture = (unsigned int)NUM2UINT(_arg1_);
    unsigned int sampler = (unsigned int)NUM2UINT(_arg2_);

    unsigned long long retval = rogl_pfn_glGetTextureSamplerHandleARB(texture, sampler);

    return ULL2NUM(retval);
}

static VALUE rogl_glMakeTextureHandleResidentARB(VALUE _obj_, VALUE _arg1_)
{
    unsigned long long handle = (unsigned long long)NUM2ULL(_arg1_);

    rogl_pfn_glMakeTextureHandleResidentARB(handle);

    return Qnil;
}

static VALUE rogl_glMakeTextureHandleNonResidentARB(VALUE _obj_, VALUE _arg1_)
{
    unsigned long long handle = (unsigned long long)NUM2ULL(_arg1_);

    rogl_pfn_glMakeTextureHandleNonResidentARB(handle);

    return Qnil;
}

static VALUE rogl_glGetImageHandleARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int texture = (unsigned int)NUM2UINT(_arg1_);
    int level = (int)NUM2INT(_arg2_);
    unsigned char layered = (unsigned char)NUM2UINT(_arg3_);
    int layer = (int)NUM2INT(_arg4_);
    unsigned int format = (unsigned int)NUM2UINT(_arg5_);

    unsigned long long retval = rogl_pfn_glGetImageHandleARB(texture, level, layered, layer, format);

    return ULL2NUM(retval);
}

static VALUE rogl_glMakeImageHandleResidentARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned long long handle = (unsigned long long)NUM2ULL(_arg1_);
    unsigned int access = (unsigned int)NUM2UINT(_arg2_);

    rogl_pfn_glMakeImageHandleResidentARB(handle, access);

    return Qnil;
}

static VALUE rogl_glMakeImageHandleNonResidentARB(VALUE _obj_, VALUE _arg1_)
{
    unsigned long long handle = (unsigned long long)NUM2ULL(_arg1_);

    rogl_pfn_glMakeImageHandleNonResidentARB(handle);

    return Qnil;
}

static VALUE rogl_glUniformHandleui64ARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int location = (int)NUM2INT(_arg1_);
    unsigned long long value = (unsigned long long)NUM2ULL(_arg2_);

    rogl_pfn_glUniformHandleui64ARB(location, value);

    return Qnil;
}

static VALUE rogl_glUniformHandleui64vARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    int location = (int)NUM2INT(_arg1_);
    int count = (int)NUM2INT(_arg2_);
    void* value = (void*)val2ptr(_arg3_);

    rogl_pfn_glUniformHandleui64vARB(location, count, value);

    return Qnil;
}

static VALUE rogl_glProgramUniformHandleui64ARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    int location = (int)NUM2INT(_arg2_);
    unsigned long long value = (unsigned long long)NUM2ULL(_arg3_);

    rogl_pfn_glProgramUniformHandleui64ARB(program, location, value);

    return Qnil;
}

static VALUE rogl_glProgramUniformHandleui64vARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    int location = (int)NUM2INT(_arg2_);
    int count = (int)NUM2INT(_arg3_);
    void* values = (void*)val2ptr(_arg4_);

    rogl_pfn_glProgramUniformHandleui64vARB(program, location, count, values);

    return Qnil;
}

static VALUE rogl_glIsTextureHandleResidentARB(VALUE _obj_, VALUE _arg1_)
{
    unsigned long long handle = (unsigned long long)NUM2ULL(_arg1_);

    unsigned char retval = rogl_pfn_glIsTextureHandleResidentARB(handle);

    return UINT2NUM(retval);
}

static VALUE rogl_glIsImageHandleResidentARB(VALUE _obj_, VALUE _arg1_)
{
    unsigned long long handle = (unsigned long long)NUM2ULL(_arg1_);

    unsigned char retval = rogl_pfn_glIsImageHandleResidentARB(handle);

    return UINT2NUM(retval);
}

static VALUE rogl_glVertexAttribL1ui64ARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    unsigned long long x = (unsigned long long)NUM2ULL(_arg2_);

    rogl_pfn_glVertexAttribL1ui64ARB(index, x);

    return Qnil;
}

static VALUE rogl_glVertexAttribL1ui64vARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    void* v = (void*)val2ptr(_arg2_);

    rogl_pfn_glVertexAttribL1ui64vARB(index, v);

    return Qnil;
}

static VALUE rogl_glGetVertexAttribLui64vARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetVertexAttribLui64vARB(index, pname, params);

    return Qnil;
}

static VALUE rogl_glCreateSyncFromCLeventARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    void* context = (void*)val2ptr(_arg1_);
    void* event = (void*)val2ptr(_arg2_);
    unsigned int flags = (unsigned int)NUM2UINT(_arg3_);

    void* retval = rogl_pfn_glCreateSyncFromCLeventARB(context, event, flags);

    return CPOINTER_AS_VALUE(retval);
}

static VALUE rogl_glClampColorARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int clamp = (unsigned int)NUM2UINT(_arg2_);

    rogl_pfn_glClampColorARB(target, clamp);

    return Qnil;
}

static VALUE rogl_glDispatchComputeGroupSizeARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_)
{
    unsigned int num_groups_x = (unsigned int)NUM2UINT(_arg1_);
    unsigned int num_groups_y = (unsigned int)NUM2UINT(_arg2_);
    unsigned int num_groups_z = (unsigned int)NUM2UINT(_arg3_);
    unsigned int group_size_x = (unsigned int)NUM2UINT(_arg4_);
    unsigned int group_size_y = (unsigned int)NUM2UINT(_arg5_);
    unsigned int group_size_z = (unsigned int)NUM2UINT(_arg6_);

    rogl_pfn_glDispatchComputeGroupSizeARB(num_groups_x, num_groups_y, num_groups_z, group_size_x, group_size_y, group_size_z);

    return Qnil;
}

static VALUE rogl_glDebugMessageControlARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_)
{
    unsigned int source = (unsigned int)NUM2UINT(_arg1_);
    unsigned int type = (unsigned int)NUM2UINT(_arg2_);
    unsigned int severity = (unsigned int)NUM2UINT(_arg3_);
    int count = (int)NUM2INT(_arg4_);
    void* ids = (void*)val2ptr(_arg5_);
    unsigned char enabled = (unsigned char)NUM2UINT(_arg6_);

    rogl_pfn_glDebugMessageControlARB(source, type, severity, count, ids, enabled);

    return Qnil;
}

static VALUE rogl_glDebugMessageInsertARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_)
{
    unsigned int source = (unsigned int)NUM2UINT(_arg1_);
    unsigned int type = (unsigned int)NUM2UINT(_arg2_);
    unsigned int id = (unsigned int)NUM2UINT(_arg3_);
    unsigned int severity = (unsigned int)NUM2UINT(_arg4_);
    int length = (int)NUM2INT(_arg5_);
    void* buf = (void*)val2ptr(_arg6_);

    rogl_pfn_glDebugMessageInsertARB(source, type, id, severity, length, buf);

    return Qnil;
}

static VALUE rogl_glDebugMessageCallbackARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    void* callback = (void*)val2ptr(_arg1_);
    void* userParam = (void*)val2ptr(_arg2_);

    rogl_pfn_glDebugMessageCallbackARB(callback, userParam);

    return Qnil;
}

static VALUE rogl_glGetDebugMessageLogARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_)
{
    unsigned int count = (unsigned int)NUM2UINT(_arg1_);
    int bufSize = (int)NUM2INT(_arg2_);
    void* sources = (void*)val2ptr(_arg3_);
    void* types = (void*)val2ptr(_arg4_);
    void* ids = (void*)val2ptr(_arg5_);
    void* severities = (void*)val2ptr(_arg6_);
    void* lengths = (void*)val2ptr(_arg7_);
    void* messageLog = (void*)val2ptr(_arg8_);

    unsigned int retval = rogl_pfn_glGetDebugMessageLogARB(count, bufSize, sources, types, ids, severities, lengths, messageLog);

    return UINT2NUM(retval);
}

static VALUE rogl_glDrawBuffersARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int n = (int)NUM2INT(_arg1_);
    void* bufs = (void*)val2ptr(_arg2_);

    rogl_pfn_glDrawBuffersARB(n, bufs);

    return Qnil;
}

static VALUE rogl_glBlendEquationiARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int buf = (unsigned int)NUM2UINT(_arg1_);
    unsigned int mode = (unsigned int)NUM2UINT(_arg2_);

    rogl_pfn_glBlendEquationiARB(buf, mode);

    return Qnil;
}

static VALUE rogl_glBlendEquationSeparateiARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int buf = (unsigned int)NUM2UINT(_arg1_);
    unsigned int modeRGB = (unsigned int)NUM2UINT(_arg2_);
    unsigned int modeAlpha = (unsigned int)NUM2UINT(_arg3_);

    rogl_pfn_glBlendEquationSeparateiARB(buf, modeRGB, modeAlpha);

    return Qnil;
}

static VALUE rogl_glBlendFunciARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int buf = (unsigned int)NUM2UINT(_arg1_);
    unsigned int src = (unsigned int)NUM2UINT(_arg2_);
    unsigned int dst = (unsigned int)NUM2UINT(_arg3_);

    rogl_pfn_glBlendFunciARB(buf, src, dst);

    return Qnil;
}

static VALUE rogl_glBlendFuncSeparateiARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int buf = (unsigned int)NUM2UINT(_arg1_);
    unsigned int srcRGB = (unsigned int)NUM2UINT(_arg2_);
    unsigned int dstRGB = (unsigned int)NUM2UINT(_arg3_);
    unsigned int srcAlpha = (unsigned int)NUM2UINT(_arg4_);
    unsigned int dstAlpha = (unsigned int)NUM2UINT(_arg5_);

    rogl_pfn_glBlendFuncSeparateiARB(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);

    return Qnil;
}

static VALUE rogl_glDrawArraysInstancedARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int mode = (unsigned int)NUM2UINT(_arg1_);
    int first = (int)NUM2INT(_arg2_);
    int count = (int)NUM2INT(_arg3_);
    int primcount = (int)NUM2INT(_arg4_);

    rogl_pfn_glDrawArraysInstancedARB(mode, first, count, primcount);

    return Qnil;
}

static VALUE rogl_glDrawElementsInstancedARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int mode = (unsigned int)NUM2UINT(_arg1_);
    int count = (int)NUM2INT(_arg2_);
    unsigned int type = (unsigned int)NUM2UINT(_arg3_);
    void* indices = (void*)val2ptr(_arg4_);
    int primcount = (int)NUM2INT(_arg5_);

    rogl_pfn_glDrawElementsInstancedARB(mode, count, type, indices, primcount);

    return Qnil;
}

static VALUE rogl_glProgramParameteriARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    int value = (int)NUM2INT(_arg3_);

    rogl_pfn_glProgramParameteriARB(program, pname, value);

    return Qnil;
}

static VALUE rogl_glFramebufferTextureARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int attachment = (unsigned int)NUM2UINT(_arg2_);
    unsigned int texture = (unsigned int)NUM2UINT(_arg3_);
    int level = (int)NUM2INT(_arg4_);

    rogl_pfn_glFramebufferTextureARB(target, attachment, texture, level);

    return Qnil;
}

static VALUE rogl_glFramebufferTextureLayerARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int attachment = (unsigned int)NUM2UINT(_arg2_);
    unsigned int texture = (unsigned int)NUM2UINT(_arg3_);
    int level = (int)NUM2INT(_arg4_);
    int layer = (int)NUM2INT(_arg5_);

    rogl_pfn_glFramebufferTextureLayerARB(target, attachment, texture, level, layer);

    return Qnil;
}

static VALUE rogl_glFramebufferTextureFaceARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int attachment = (unsigned int)NUM2UINT(_arg2_);
    unsigned int texture = (unsigned int)NUM2UINT(_arg3_);
    int level = (int)NUM2INT(_arg4_);
    unsigned int face = (unsigned int)NUM2UINT(_arg5_);

    rogl_pfn_glFramebufferTextureFaceARB(target, attachment, texture, level, face);

    return Qnil;
}

static VALUE rogl_glUniform1i64ARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int location = (int)NUM2INT(_arg1_);
    long long x = (long long)NUM2LL(_arg2_);

    rogl_pfn_glUniform1i64ARB(location, x);

    return Qnil;
}

static VALUE rogl_glUniform2i64ARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    int location = (int)NUM2INT(_arg1_);
    long long x = (long long)NUM2LL(_arg2_);
    long long y = (long long)NUM2LL(_arg3_);

    rogl_pfn_glUniform2i64ARB(location, x, y);

    return Qnil;
}

static VALUE rogl_glUniform3i64ARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    int location = (int)NUM2INT(_arg1_);
    long long x = (long long)NUM2LL(_arg2_);
    long long y = (long long)NUM2LL(_arg3_);
    long long z = (long long)NUM2LL(_arg4_);

    rogl_pfn_glUniform3i64ARB(location, x, y, z);

    return Qnil;
}

static VALUE rogl_glUniform4i64ARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    int location = (int)NUM2INT(_arg1_);
    long long x = (long long)NUM2LL(_arg2_);
    long long y = (long long)NUM2LL(_arg3_);
    long long z = (long long)NUM2LL(_arg4_);
    long long w = (long long)NUM2LL(_arg5_);

    rogl_pfn_glUniform4i64ARB(location, x, y, z, w);

    return Qnil;
}

static VALUE rogl_glUniform1i64vARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    int location = (int)NUM2INT(_arg1_);
    int count = (int)NUM2INT(_arg2_);
    void* value = (void*)val2ptr(_arg3_);

    rogl_pfn_glUniform1i64vARB(location, count, value);

    return Qnil;
}

static VALUE rogl_glUniform2i64vARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    int location = (int)NUM2INT(_arg1_);
    int count = (int)NUM2INT(_arg2_);
    void* value = (void*)val2ptr(_arg3_);

    rogl_pfn_glUniform2i64vARB(location, count, value);

    return Qnil;
}

static VALUE rogl_glUniform3i64vARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    int location = (int)NUM2INT(_arg1_);
    int count = (int)NUM2INT(_arg2_);
    void* value = (void*)val2ptr(_arg3_);

    rogl_pfn_glUniform3i64vARB(location, count, value);

    return Qnil;
}

static VALUE rogl_glUniform4i64vARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    int location = (int)NUM2INT(_arg1_);
    int count = (int)NUM2INT(_arg2_);
    void* value = (void*)val2ptr(_arg3_);

    rogl_pfn_glUniform4i64vARB(location, count, value);

    return Qnil;
}

static VALUE rogl_glUniform1ui64ARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int location = (int)NUM2INT(_arg1_);
    unsigned long long x = (unsigned long long)NUM2ULL(_arg2_);

    rogl_pfn_glUniform1ui64ARB(location, x);

    return Qnil;
}

static VALUE rogl_glUniform2ui64ARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    int location = (int)NUM2INT(_arg1_);
    unsigned long long x = (unsigned long long)NUM2ULL(_arg2_);
    unsigned long long y = (unsigned long long)NUM2ULL(_arg3_);

    rogl_pfn_glUniform2ui64ARB(location, x, y);

    return Qnil;
}

static VALUE rogl_glUniform3ui64ARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    int location = (int)NUM2INT(_arg1_);
    unsigned long long x = (unsigned long long)NUM2ULL(_arg2_);
    unsigned long long y = (unsigned long long)NUM2ULL(_arg3_);
    unsigned long long z = (unsigned long long)NUM2ULL(_arg4_);

    rogl_pfn_glUniform3ui64ARB(location, x, y, z);

    return Qnil;
}

static VALUE rogl_glUniform4ui64ARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    int location = (int)NUM2INT(_arg1_);
    unsigned long long x = (unsigned long long)NUM2ULL(_arg2_);
    unsigned long long y = (unsigned long long)NUM2ULL(_arg3_);
    unsigned long long z = (unsigned long long)NUM2ULL(_arg4_);
    unsigned long long w = (unsigned long long)NUM2ULL(_arg5_);

    rogl_pfn_glUniform4ui64ARB(location, x, y, z, w);

    return Qnil;
}

static VALUE rogl_glUniform1ui64vARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    int location = (int)NUM2INT(_arg1_);
    int count = (int)NUM2INT(_arg2_);
    void* value = (void*)val2ptr(_arg3_);

    rogl_pfn_glUniform1ui64vARB(location, count, value);

    return Qnil;
}

static VALUE rogl_glUniform2ui64vARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    int location = (int)NUM2INT(_arg1_);
    int count = (int)NUM2INT(_arg2_);
    void* value = (void*)val2ptr(_arg3_);

    rogl_pfn_glUniform2ui64vARB(location, count, value);

    return Qnil;
}

static VALUE rogl_glUniform3ui64vARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    int location = (int)NUM2INT(_arg1_);
    int count = (int)NUM2INT(_arg2_);
    void* value = (void*)val2ptr(_arg3_);

    rogl_pfn_glUniform3ui64vARB(location, count, value);

    return Qnil;
}

static VALUE rogl_glUniform4ui64vARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    int location = (int)NUM2INT(_arg1_);
    int count = (int)NUM2INT(_arg2_);
    void* value = (void*)val2ptr(_arg3_);

    rogl_pfn_glUniform4ui64vARB(location, count, value);

    return Qnil;
}

static VALUE rogl_glGetUniformi64vARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    int location = (int)NUM2INT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetUniformi64vARB(program, location, params);

    return Qnil;
}

static VALUE rogl_glGetUniformui64vARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    int location = (int)NUM2INT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetUniformui64vARB(program, location, params);

    return Qnil;
}

static VALUE rogl_glGetnUniformi64vARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    int location = (int)NUM2INT(_arg2_);
    int bufSize = (int)NUM2INT(_arg3_);
    void* params = (void*)val2ptr(_arg4_);

    rogl_pfn_glGetnUniformi64vARB(program, location, bufSize, params);

    return Qnil;
}

static VALUE rogl_glGetnUniformui64vARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    int location = (int)NUM2INT(_arg2_);
    int bufSize = (int)NUM2INT(_arg3_);
    void* params = (void*)val2ptr(_arg4_);

    rogl_pfn_glGetnUniformui64vARB(program, location, bufSize, params);

    return Qnil;
}

static VALUE rogl_glProgramUniform1i64ARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    int location = (int)NUM2INT(_arg2_);
    long long x = (long long)NUM2LL(_arg3_);

    rogl_pfn_glProgramUniform1i64ARB(program, location, x);

    return Qnil;
}

static VALUE rogl_glProgramUniform2i64ARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    int location = (int)NUM2INT(_arg2_);
    long long x = (long long)NUM2LL(_arg3_);
    long long y = (long long)NUM2LL(_arg4_);

    rogl_pfn_glProgramUniform2i64ARB(program, location, x, y);

    return Qnil;
}

static VALUE rogl_glProgramUniform3i64ARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    int location = (int)NUM2INT(_arg2_);
    long long x = (long long)NUM2LL(_arg3_);
    long long y = (long long)NUM2LL(_arg4_);
    long long z = (long long)NUM2LL(_arg5_);

    rogl_pfn_glProgramUniform3i64ARB(program, location, x, y, z);

    return Qnil;
}

static VALUE rogl_glProgramUniform4i64ARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    int location = (int)NUM2INT(_arg2_);
    long long x = (long long)NUM2LL(_arg3_);
    long long y = (long long)NUM2LL(_arg4_);
    long long z = (long long)NUM2LL(_arg5_);
    long long w = (long long)NUM2LL(_arg6_);

    rogl_pfn_glProgramUniform4i64ARB(program, location, x, y, z, w);

    return Qnil;
}

static VALUE rogl_glProgramUniform1i64vARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    int location = (int)NUM2INT(_arg2_);
    int count = (int)NUM2INT(_arg3_);
    void* value = (void*)val2ptr(_arg4_);

    rogl_pfn_glProgramUniform1i64vARB(program, location, count, value);

    return Qnil;
}

static VALUE rogl_glProgramUniform2i64vARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    int location = (int)NUM2INT(_arg2_);
    int count = (int)NUM2INT(_arg3_);
    void* value = (void*)val2ptr(_arg4_);

    rogl_pfn_glProgramUniform2i64vARB(program, location, count, value);

    return Qnil;
}

static VALUE rogl_glProgramUniform3i64vARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    int location = (int)NUM2INT(_arg2_);
    int count = (int)NUM2INT(_arg3_);
    void* value = (void*)val2ptr(_arg4_);

    rogl_pfn_glProgramUniform3i64vARB(program, location, count, value);

    return Qnil;
}

static VALUE rogl_glProgramUniform4i64vARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    int location = (int)NUM2INT(_arg2_);
    int count = (int)NUM2INT(_arg3_);
    void* value = (void*)val2ptr(_arg4_);

    rogl_pfn_glProgramUniform4i64vARB(program, location, count, value);

    return Qnil;
}

static VALUE rogl_glProgramUniform1ui64ARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    int location = (int)NUM2INT(_arg2_);
    unsigned long long x = (unsigned long long)NUM2ULL(_arg3_);

    rogl_pfn_glProgramUniform1ui64ARB(program, location, x);

    return Qnil;
}

static VALUE rogl_glProgramUniform2ui64ARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    int location = (int)NUM2INT(_arg2_);
    unsigned long long x = (unsigned long long)NUM2ULL(_arg3_);
    unsigned long long y = (unsigned long long)NUM2ULL(_arg4_);

    rogl_pfn_glProgramUniform2ui64ARB(program, location, x, y);

    return Qnil;
}

static VALUE rogl_glProgramUniform3ui64ARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    int location = (int)NUM2INT(_arg2_);
    unsigned long long x = (unsigned long long)NUM2ULL(_arg3_);
    unsigned long long y = (unsigned long long)NUM2ULL(_arg4_);
    unsigned long long z = (unsigned long long)NUM2ULL(_arg5_);

    rogl_pfn_glProgramUniform3ui64ARB(program, location, x, y, z);

    return Qnil;
}

static VALUE rogl_glProgramUniform4ui64ARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    int location = (int)NUM2INT(_arg2_);
    unsigned long long x = (unsigned long long)NUM2ULL(_arg3_);
    unsigned long long y = (unsigned long long)NUM2ULL(_arg4_);
    unsigned long long z = (unsigned long long)NUM2ULL(_arg5_);
    unsigned long long w = (unsigned long long)NUM2ULL(_arg6_);

    rogl_pfn_glProgramUniform4ui64ARB(program, location, x, y, z, w);

    return Qnil;
}

static VALUE rogl_glProgramUniform1ui64vARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    int location = (int)NUM2INT(_arg2_);
    int count = (int)NUM2INT(_arg3_);
    void* value = (void*)val2ptr(_arg4_);

    rogl_pfn_glProgramUniform1ui64vARB(program, location, count, value);

    return Qnil;
}

static VALUE rogl_glProgramUniform2ui64vARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    int location = (int)NUM2INT(_arg2_);
    int count = (int)NUM2INT(_arg3_);
    void* value = (void*)val2ptr(_arg4_);

    rogl_pfn_glProgramUniform2ui64vARB(program, location, count, value);

    return Qnil;
}

static VALUE rogl_glProgramUniform3ui64vARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    int location = (int)NUM2INT(_arg2_);
    int count = (int)NUM2INT(_arg3_);
    void* value = (void*)val2ptr(_arg4_);

    rogl_pfn_glProgramUniform3ui64vARB(program, location, count, value);

    return Qnil;
}

static VALUE rogl_glProgramUniform4ui64vARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    int location = (int)NUM2INT(_arg2_);
    int count = (int)NUM2INT(_arg3_);
    void* value = (void*)val2ptr(_arg4_);

    rogl_pfn_glProgramUniform4ui64vARB(program, location, count, value);

    return Qnil;
}

static VALUE rogl_glColorTable(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int internalformat = (unsigned int)NUM2UINT(_arg2_);
    int width = (int)NUM2INT(_arg3_);
    unsigned int format = (unsigned int)NUM2UINT(_arg4_);
    unsigned int type = (unsigned int)NUM2UINT(_arg5_);
    void* table = (void*)val2ptr(_arg6_);

    rogl_pfn_glColorTable(target, internalformat, width, format, type, table);

    return Qnil;
}

static VALUE rogl_glColorTableParameterfv(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glColorTableParameterfv(target, pname, params);

    return Qnil;
}

static VALUE rogl_glColorTableParameteriv(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glColorTableParameteriv(target, pname, params);

    return Qnil;
}

static VALUE rogl_glCopyColorTable(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int internalformat = (unsigned int)NUM2UINT(_arg2_);
    int x = (int)NUM2INT(_arg3_);
    int y = (int)NUM2INT(_arg4_);
    int width = (int)NUM2INT(_arg5_);

    rogl_pfn_glCopyColorTable(target, internalformat, x, y, width);

    return Qnil;
}

static VALUE rogl_glGetColorTable(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int format = (unsigned int)NUM2UINT(_arg2_);
    unsigned int type = (unsigned int)NUM2UINT(_arg3_);
    void* table = (void*)val2ptr(_arg4_);

    rogl_pfn_glGetColorTable(target, format, type, table);

    return Qnil;
}

static VALUE rogl_glGetColorTableParameterfv(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetColorTableParameterfv(target, pname, params);

    return Qnil;
}

static VALUE rogl_glGetColorTableParameteriv(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetColorTableParameteriv(target, pname, params);

    return Qnil;
}

static VALUE rogl_glColorSubTable(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    int start = (int)NUM2INT(_arg2_);
    int count = (int)NUM2INT(_arg3_);
    unsigned int format = (unsigned int)NUM2UINT(_arg4_);
    unsigned int type = (unsigned int)NUM2UINT(_arg5_);
    void* data = (void*)val2ptr(_arg6_);

    rogl_pfn_glColorSubTable(target, start, count, format, type, data);

    return Qnil;
}

static VALUE rogl_glCopyColorSubTable(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    int start = (int)NUM2INT(_arg2_);
    int x = (int)NUM2INT(_arg3_);
    int y = (int)NUM2INT(_arg4_);
    int width = (int)NUM2INT(_arg5_);

    rogl_pfn_glCopyColorSubTable(target, start, x, y, width);

    return Qnil;
}

static VALUE rogl_glConvolutionFilter1D(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int internalformat = (unsigned int)NUM2UINT(_arg2_);
    int width = (int)NUM2INT(_arg3_);
    unsigned int format = (unsigned int)NUM2UINT(_arg4_);
    unsigned int type = (unsigned int)NUM2UINT(_arg5_);
    void* image = (void*)val2ptr(_arg6_);

    rogl_pfn_glConvolutionFilter1D(target, internalformat, width, format, type, image);

    return Qnil;
}

static VALUE rogl_glConvolutionFilter2D(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int internalformat = (unsigned int)NUM2UINT(_arg2_);
    int width = (int)NUM2INT(_arg3_);
    int height = (int)NUM2INT(_arg4_);
    unsigned int format = (unsigned int)NUM2UINT(_arg5_);
    unsigned int type = (unsigned int)NUM2UINT(_arg6_);
    void* image = (void*)val2ptr(_arg7_);

    rogl_pfn_glConvolutionFilter2D(target, internalformat, width, height, format, type, image);

    return Qnil;
}

static VALUE rogl_glConvolutionParameterf(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    float params = (float)NUM2DBL(_arg3_);

    rogl_pfn_glConvolutionParameterf(target, pname, params);

    return Qnil;
}

static VALUE rogl_glConvolutionParameterfv(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glConvolutionParameterfv(target, pname, params);

    return Qnil;
}

static VALUE rogl_glConvolutionParameteri(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    int params = (int)NUM2INT(_arg3_);

    rogl_pfn_glConvolutionParameteri(target, pname, params);

    return Qnil;
}

static VALUE rogl_glConvolutionParameteriv(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glConvolutionParameteriv(target, pname, params);

    return Qnil;
}

static VALUE rogl_glCopyConvolutionFilter1D(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int internalformat = (unsigned int)NUM2UINT(_arg2_);
    int x = (int)NUM2INT(_arg3_);
    int y = (int)NUM2INT(_arg4_);
    int width = (int)NUM2INT(_arg5_);

    rogl_pfn_glCopyConvolutionFilter1D(target, internalformat, x, y, width);

    return Qnil;
}

static VALUE rogl_glCopyConvolutionFilter2D(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int internalformat = (unsigned int)NUM2UINT(_arg2_);
    int x = (int)NUM2INT(_arg3_);
    int y = (int)NUM2INT(_arg4_);
    int width = (int)NUM2INT(_arg5_);
    int height = (int)NUM2INT(_arg6_);

    rogl_pfn_glCopyConvolutionFilter2D(target, internalformat, x, y, width, height);

    return Qnil;
}

static VALUE rogl_glGetConvolutionFilter(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int format = (unsigned int)NUM2UINT(_arg2_);
    unsigned int type = (unsigned int)NUM2UINT(_arg3_);
    void* image = (void*)val2ptr(_arg4_);

    rogl_pfn_glGetConvolutionFilter(target, format, type, image);

    return Qnil;
}

static VALUE rogl_glGetConvolutionParameterfv(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetConvolutionParameterfv(target, pname, params);

    return Qnil;
}

static VALUE rogl_glGetConvolutionParameteriv(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetConvolutionParameteriv(target, pname, params);

    return Qnil;
}

static VALUE rogl_glGetSeparableFilter(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int format = (unsigned int)NUM2UINT(_arg2_);
    unsigned int type = (unsigned int)NUM2UINT(_arg3_);
    void* row = (void*)val2ptr(_arg4_);
    void* column = (void*)val2ptr(_arg5_);
    void* span = (void*)val2ptr(_arg6_);

    rogl_pfn_glGetSeparableFilter(target, format, type, row, column, span);

    return Qnil;
}

static VALUE rogl_glSeparableFilter2D(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int internalformat = (unsigned int)NUM2UINT(_arg2_);
    int width = (int)NUM2INT(_arg3_);
    int height = (int)NUM2INT(_arg4_);
    unsigned int format = (unsigned int)NUM2UINT(_arg5_);
    unsigned int type = (unsigned int)NUM2UINT(_arg6_);
    void* row = (void*)val2ptr(_arg7_);
    void* column = (void*)val2ptr(_arg8_);

    rogl_pfn_glSeparableFilter2D(target, internalformat, width, height, format, type, row, column);

    return Qnil;
}

static VALUE rogl_glGetHistogram(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned char reset = (unsigned char)NUM2UINT(_arg2_);
    unsigned int format = (unsigned int)NUM2UINT(_arg3_);
    unsigned int type = (unsigned int)NUM2UINT(_arg4_);
    void* values = (void*)val2ptr(_arg5_);

    rogl_pfn_glGetHistogram(target, reset, format, type, values);

    return Qnil;
}

static VALUE rogl_glGetHistogramParameterfv(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetHistogramParameterfv(target, pname, params);

    return Qnil;
}

static VALUE rogl_glGetHistogramParameteriv(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetHistogramParameteriv(target, pname, params);

    return Qnil;
}

static VALUE rogl_glGetMinmax(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned char reset = (unsigned char)NUM2UINT(_arg2_);
    unsigned int format = (unsigned int)NUM2UINT(_arg3_);
    unsigned int type = (unsigned int)NUM2UINT(_arg4_);
    void* values = (void*)val2ptr(_arg5_);

    rogl_pfn_glGetMinmax(target, reset, format, type, values);

    return Qnil;
}

static VALUE rogl_glGetMinmaxParameterfv(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetMinmaxParameterfv(target, pname, params);

    return Qnil;
}

static VALUE rogl_glGetMinmaxParameteriv(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetMinmaxParameteriv(target, pname, params);

    return Qnil;
}

static VALUE rogl_glHistogram(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    int width = (int)NUM2INT(_arg2_);
    unsigned int internalformat = (unsigned int)NUM2UINT(_arg3_);
    unsigned char sink = (unsigned char)NUM2UINT(_arg4_);

    rogl_pfn_glHistogram(target, width, internalformat, sink);

    return Qnil;
}

static VALUE rogl_glMinmax(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int internalformat = (unsigned int)NUM2UINT(_arg2_);
    unsigned char sink = (unsigned char)NUM2UINT(_arg3_);

    rogl_pfn_glMinmax(target, internalformat, sink);

    return Qnil;
}

static VALUE rogl_glResetHistogram(VALUE _obj_, VALUE _arg1_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);

    rogl_pfn_glResetHistogram(target);

    return Qnil;
}

static VALUE rogl_glResetMinmax(VALUE _obj_, VALUE _arg1_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);

    rogl_pfn_glResetMinmax(target);

    return Qnil;
}

static VALUE rogl_glMultiDrawArraysIndirectCountARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int mode = (unsigned int)NUM2UINT(_arg1_);
    ptrdiff_t indirect = (ptrdiff_t)(_arg2_);
    ptrdiff_t drawcount = (ptrdiff_t)(_arg3_);
    int maxdrawcount = (int)NUM2INT(_arg4_);
    int stride = (int)NUM2INT(_arg5_);

    rogl_pfn_glMultiDrawArraysIndirectCountARB(mode, indirect, drawcount, maxdrawcount, stride);

    return Qnil;
}

static VALUE rogl_glMultiDrawElementsIndirectCountARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_)
{
    unsigned int mode = (unsigned int)NUM2UINT(_arg1_);
    unsigned int type = (unsigned int)NUM2UINT(_arg2_);
    ptrdiff_t indirect = (ptrdiff_t)(_arg3_);
    ptrdiff_t drawcount = (ptrdiff_t)(_arg4_);
    int maxdrawcount = (int)NUM2INT(_arg5_);
    int stride = (int)NUM2INT(_arg6_);

    rogl_pfn_glMultiDrawElementsIndirectCountARB(mode, type, indirect, drawcount, maxdrawcount, stride);

    return Qnil;
}

static VALUE rogl_glVertexAttribDivisorARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    unsigned int divisor = (unsigned int)NUM2UINT(_arg2_);

    rogl_pfn_glVertexAttribDivisorARB(index, divisor);

    return Qnil;
}

static VALUE rogl_glCurrentPaletteMatrixARB(VALUE _obj_, VALUE _arg1_)
{
    int index = (int)NUM2INT(_arg1_);

    rogl_pfn_glCurrentPaletteMatrixARB(index);

    return Qnil;
}

static VALUE rogl_glMatrixIndexubvARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int size = (int)NUM2INT(_arg1_);
    void* indices = (void*)val2ptr(_arg2_);

    rogl_pfn_glMatrixIndexubvARB(size, indices);

    return Qnil;
}

static VALUE rogl_glMatrixIndexusvARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int size = (int)NUM2INT(_arg1_);
    void* indices = (void*)val2ptr(_arg2_);

    rogl_pfn_glMatrixIndexusvARB(size, indices);

    return Qnil;
}

static VALUE rogl_glMatrixIndexuivARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int size = (int)NUM2INT(_arg1_);
    void* indices = (void*)val2ptr(_arg2_);

    rogl_pfn_glMatrixIndexuivARB(size, indices);

    return Qnil;
}

static VALUE rogl_glMatrixIndexPointerARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    int size = (int)NUM2INT(_arg1_);
    unsigned int type = (unsigned int)NUM2UINT(_arg2_);
    int stride = (int)NUM2INT(_arg3_);
    void* pointer = (void*)val2ptr(_arg4_);

    rogl_pfn_glMatrixIndexPointerARB(size, type, stride, pointer);

    return Qnil;
}

static VALUE rogl_glSampleCoverageARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    float value = (float)NUM2DBL(_arg1_);
    unsigned char invert = (unsigned char)NUM2UINT(_arg2_);

    rogl_pfn_glSampleCoverageARB(value, invert);

    return Qnil;
}

static VALUE rogl_glActiveTextureARB(VALUE _obj_, VALUE _arg1_)
{
    unsigned int texture = (unsigned int)NUM2UINT(_arg1_);

    rogl_pfn_glActiveTextureARB(texture);

    return Qnil;
}

static VALUE rogl_glClientActiveTextureARB(VALUE _obj_, VALUE _arg1_)
{
    unsigned int texture = (unsigned int)NUM2UINT(_arg1_);

    rogl_pfn_glClientActiveTextureARB(texture);

    return Qnil;
}

static VALUE rogl_glMultiTexCoord1dARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    double s = (double)NUM2DBL(_arg2_);

    rogl_pfn_glMultiTexCoord1dARB(target, s);

    return Qnil;
}

static VALUE rogl_glMultiTexCoord1dvARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    void* v = (void*)val2ptr(_arg2_);

    rogl_pfn_glMultiTexCoord1dvARB(target, v);

    return Qnil;
}

static VALUE rogl_glMultiTexCoord1fARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    float s = (float)NUM2DBL(_arg2_);

    rogl_pfn_glMultiTexCoord1fARB(target, s);

    return Qnil;
}

static VALUE rogl_glMultiTexCoord1fvARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    void* v = (void*)val2ptr(_arg2_);

    rogl_pfn_glMultiTexCoord1fvARB(target, v);

    return Qnil;
}

static VALUE rogl_glMultiTexCoord1iARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    int s = (int)NUM2INT(_arg2_);

    rogl_pfn_glMultiTexCoord1iARB(target, s);

    return Qnil;
}

static VALUE rogl_glMultiTexCoord1ivARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    void* v = (void*)val2ptr(_arg2_);

    rogl_pfn_glMultiTexCoord1ivARB(target, v);

    return Qnil;
}

static VALUE rogl_glMultiTexCoord1sARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    short s = (short)NUM2INT(_arg2_);

    rogl_pfn_glMultiTexCoord1sARB(target, s);

    return Qnil;
}

static VALUE rogl_glMultiTexCoord1svARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    void* v = (void*)val2ptr(_arg2_);

    rogl_pfn_glMultiTexCoord1svARB(target, v);

    return Qnil;
}

static VALUE rogl_glMultiTexCoord2dARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    double s = (double)NUM2DBL(_arg2_);
    double t = (double)NUM2DBL(_arg3_);

    rogl_pfn_glMultiTexCoord2dARB(target, s, t);

    return Qnil;
}

static VALUE rogl_glMultiTexCoord2dvARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    void* v = (void*)val2ptr(_arg2_);

    rogl_pfn_glMultiTexCoord2dvARB(target, v);

    return Qnil;
}

static VALUE rogl_glMultiTexCoord2fARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    float s = (float)NUM2DBL(_arg2_);
    float t = (float)NUM2DBL(_arg3_);

    rogl_pfn_glMultiTexCoord2fARB(target, s, t);

    return Qnil;
}

static VALUE rogl_glMultiTexCoord2fvARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    void* v = (void*)val2ptr(_arg2_);

    rogl_pfn_glMultiTexCoord2fvARB(target, v);

    return Qnil;
}

static VALUE rogl_glMultiTexCoord2iARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    int s = (int)NUM2INT(_arg2_);
    int t = (int)NUM2INT(_arg3_);

    rogl_pfn_glMultiTexCoord2iARB(target, s, t);

    return Qnil;
}

static VALUE rogl_glMultiTexCoord2ivARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    void* v = (void*)val2ptr(_arg2_);

    rogl_pfn_glMultiTexCoord2ivARB(target, v);

    return Qnil;
}

static VALUE rogl_glMultiTexCoord2sARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    short s = (short)NUM2INT(_arg2_);
    short t = (short)NUM2INT(_arg3_);

    rogl_pfn_glMultiTexCoord2sARB(target, s, t);

    return Qnil;
}

static VALUE rogl_glMultiTexCoord2svARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    void* v = (void*)val2ptr(_arg2_);

    rogl_pfn_glMultiTexCoord2svARB(target, v);

    return Qnil;
}

static VALUE rogl_glMultiTexCoord3dARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    double s = (double)NUM2DBL(_arg2_);
    double t = (double)NUM2DBL(_arg3_);
    double r = (double)NUM2DBL(_arg4_);

    rogl_pfn_glMultiTexCoord3dARB(target, s, t, r);

    return Qnil;
}

static VALUE rogl_glMultiTexCoord3dvARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    void* v = (void*)val2ptr(_arg2_);

    rogl_pfn_glMultiTexCoord3dvARB(target, v);

    return Qnil;
}

static VALUE rogl_glMultiTexCoord3fARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    float s = (float)NUM2DBL(_arg2_);
    float t = (float)NUM2DBL(_arg3_);
    float r = (float)NUM2DBL(_arg4_);

    rogl_pfn_glMultiTexCoord3fARB(target, s, t, r);

    return Qnil;
}

static VALUE rogl_glMultiTexCoord3fvARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    void* v = (void*)val2ptr(_arg2_);

    rogl_pfn_glMultiTexCoord3fvARB(target, v);

    return Qnil;
}

static VALUE rogl_glMultiTexCoord3iARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    int s = (int)NUM2INT(_arg2_);
    int t = (int)NUM2INT(_arg3_);
    int r = (int)NUM2INT(_arg4_);

    rogl_pfn_glMultiTexCoord3iARB(target, s, t, r);

    return Qnil;
}

static VALUE rogl_glMultiTexCoord3ivARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    void* v = (void*)val2ptr(_arg2_);

    rogl_pfn_glMultiTexCoord3ivARB(target, v);

    return Qnil;
}

static VALUE rogl_glMultiTexCoord3sARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    short s = (short)NUM2INT(_arg2_);
    short t = (short)NUM2INT(_arg3_);
    short r = (short)NUM2INT(_arg4_);

    rogl_pfn_glMultiTexCoord3sARB(target, s, t, r);

    return Qnil;
}

static VALUE rogl_glMultiTexCoord3svARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    void* v = (void*)val2ptr(_arg2_);

    rogl_pfn_glMultiTexCoord3svARB(target, v);

    return Qnil;
}

static VALUE rogl_glMultiTexCoord4dARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    double s = (double)NUM2DBL(_arg2_);
    double t = (double)NUM2DBL(_arg3_);
    double r = (double)NUM2DBL(_arg4_);
    double q = (double)NUM2DBL(_arg5_);

    rogl_pfn_glMultiTexCoord4dARB(target, s, t, r, q);

    return Qnil;
}

static VALUE rogl_glMultiTexCoord4dvARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    void* v = (void*)val2ptr(_arg2_);

    rogl_pfn_glMultiTexCoord4dvARB(target, v);

    return Qnil;
}

static VALUE rogl_glMultiTexCoord4fARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    float s = (float)NUM2DBL(_arg2_);
    float t = (float)NUM2DBL(_arg3_);
    float r = (float)NUM2DBL(_arg4_);
    float q = (float)NUM2DBL(_arg5_);

    rogl_pfn_glMultiTexCoord4fARB(target, s, t, r, q);

    return Qnil;
}

static VALUE rogl_glMultiTexCoord4fvARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    void* v = (void*)val2ptr(_arg2_);

    rogl_pfn_glMultiTexCoord4fvARB(target, v);

    return Qnil;
}

static VALUE rogl_glMultiTexCoord4iARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    int s = (int)NUM2INT(_arg2_);
    int t = (int)NUM2INT(_arg3_);
    int r = (int)NUM2INT(_arg4_);
    int q = (int)NUM2INT(_arg5_);

    rogl_pfn_glMultiTexCoord4iARB(target, s, t, r, q);

    return Qnil;
}

static VALUE rogl_glMultiTexCoord4ivARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    void* v = (void*)val2ptr(_arg2_);

    rogl_pfn_glMultiTexCoord4ivARB(target, v);

    return Qnil;
}

static VALUE rogl_glMultiTexCoord4sARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    short s = (short)NUM2INT(_arg2_);
    short t = (short)NUM2INT(_arg3_);
    short r = (short)NUM2INT(_arg4_);
    short q = (short)NUM2INT(_arg5_);

    rogl_pfn_glMultiTexCoord4sARB(target, s, t, r, q);

    return Qnil;
}

static VALUE rogl_glMultiTexCoord4svARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    void* v = (void*)val2ptr(_arg2_);

    rogl_pfn_glMultiTexCoord4svARB(target, v);

    return Qnil;
}

static VALUE rogl_glGenQueriesARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int n = (int)NUM2INT(_arg1_);
    void* ids = (void*)val2ptr(_arg2_);

    rogl_pfn_glGenQueriesARB(n, ids);

    return Qnil;
}

static VALUE rogl_glDeleteQueriesARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int n = (int)NUM2INT(_arg1_);
    void* ids = (void*)val2ptr(_arg2_);

    rogl_pfn_glDeleteQueriesARB(n, ids);

    return Qnil;
}

static VALUE rogl_glIsQueryARB(VALUE _obj_, VALUE _arg1_)
{
    unsigned int id = (unsigned int)NUM2UINT(_arg1_);

    unsigned char retval = rogl_pfn_glIsQueryARB(id);

    return UINT2NUM(retval);
}

static VALUE rogl_glBeginQueryARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int id = (unsigned int)NUM2UINT(_arg2_);

    rogl_pfn_glBeginQueryARB(target, id);

    return Qnil;
}

static VALUE rogl_glEndQueryARB(VALUE _obj_, VALUE _arg1_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);

    rogl_pfn_glEndQueryARB(target);

    return Qnil;
}

static VALUE rogl_glGetQueryivARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetQueryivARB(target, pname, params);

    return Qnil;
}

static VALUE rogl_glGetQueryObjectivARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int id = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetQueryObjectivARB(id, pname, params);

    return Qnil;
}

static VALUE rogl_glGetQueryObjectuivARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int id = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetQueryObjectuivARB(id, pname, params);

    return Qnil;
}

static VALUE rogl_glMaxShaderCompilerThreadsARB(VALUE _obj_, VALUE _arg1_)
{
    unsigned int count = (unsigned int)NUM2UINT(_arg1_);

    rogl_pfn_glMaxShaderCompilerThreadsARB(count);

    return Qnil;
}

static VALUE rogl_glPointParameterfARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int pname = (unsigned int)NUM2UINT(_arg1_);
    float param = (float)NUM2DBL(_arg2_);

    rogl_pfn_glPointParameterfARB(pname, param);

    return Qnil;
}

static VALUE rogl_glPointParameterfvARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int pname = (unsigned int)NUM2UINT(_arg1_);
    void* params = (void*)val2ptr(_arg2_);

    rogl_pfn_glPointParameterfvARB(pname, params);

    return Qnil;
}

static VALUE rogl_glGetGraphicsResetStatusARB(VALUE _obj_)
{
    unsigned int retval = rogl_pfn_glGetGraphicsResetStatusARB();

    return UINT2NUM(retval);
}

static VALUE rogl_glGetnTexImageARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    int level = (int)NUM2INT(_arg2_);
    unsigned int format = (unsigned int)NUM2UINT(_arg3_);
    unsigned int type = (unsigned int)NUM2UINT(_arg4_);
    int bufSize = (int)NUM2INT(_arg5_);
    void* img = (void*)val2ptr(_arg6_);

    rogl_pfn_glGetnTexImageARB(target, level, format, type, bufSize, img);

    return Qnil;
}

static VALUE rogl_glReadnPixelsARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_)
{
    int x = (int)NUM2INT(_arg1_);
    int y = (int)NUM2INT(_arg2_);
    int width = (int)NUM2INT(_arg3_);
    int height = (int)NUM2INT(_arg4_);
    unsigned int format = (unsigned int)NUM2UINT(_arg5_);
    unsigned int type = (unsigned int)NUM2UINT(_arg6_);
    int bufSize = (int)NUM2INT(_arg7_);
    void* data = (void*)val2ptr(_arg8_);

    rogl_pfn_glReadnPixelsARB(x, y, width, height, format, type, bufSize, data);

    return Qnil;
}

static VALUE rogl_glGetnCompressedTexImageARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    int lod = (int)NUM2INT(_arg2_);
    int bufSize = (int)NUM2INT(_arg3_);
    void* img = (void*)val2ptr(_arg4_);

    rogl_pfn_glGetnCompressedTexImageARB(target, lod, bufSize, img);

    return Qnil;
}

static VALUE rogl_glGetnUniformfvARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    int location = (int)NUM2INT(_arg2_);
    int bufSize = (int)NUM2INT(_arg3_);
    void* params = (void*)val2ptr(_arg4_);

    rogl_pfn_glGetnUniformfvARB(program, location, bufSize, params);

    return Qnil;
}

static VALUE rogl_glGetnUniformivARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    int location = (int)NUM2INT(_arg2_);
    int bufSize = (int)NUM2INT(_arg3_);
    void* params = (void*)val2ptr(_arg4_);

    rogl_pfn_glGetnUniformivARB(program, location, bufSize, params);

    return Qnil;
}

static VALUE rogl_glGetnUniformuivARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    int location = (int)NUM2INT(_arg2_);
    int bufSize = (int)NUM2INT(_arg3_);
    void* params = (void*)val2ptr(_arg4_);

    rogl_pfn_glGetnUniformuivARB(program, location, bufSize, params);

    return Qnil;
}

static VALUE rogl_glGetnUniformdvARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    int location = (int)NUM2INT(_arg2_);
    int bufSize = (int)NUM2INT(_arg3_);
    void* params = (void*)val2ptr(_arg4_);

    rogl_pfn_glGetnUniformdvARB(program, location, bufSize, params);

    return Qnil;
}

static VALUE rogl_glGetnMapdvARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int query = (unsigned int)NUM2UINT(_arg2_);
    int bufSize = (int)NUM2INT(_arg3_);
    void* v = (void*)val2ptr(_arg4_);

    rogl_pfn_glGetnMapdvARB(target, query, bufSize, v);

    return Qnil;
}

static VALUE rogl_glGetnMapfvARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int query = (unsigned int)NUM2UINT(_arg2_);
    int bufSize = (int)NUM2INT(_arg3_);
    void* v = (void*)val2ptr(_arg4_);

    rogl_pfn_glGetnMapfvARB(target, query, bufSize, v);

    return Qnil;
}

static VALUE rogl_glGetnMapivARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int query = (unsigned int)NUM2UINT(_arg2_);
    int bufSize = (int)NUM2INT(_arg3_);
    void* v = (void*)val2ptr(_arg4_);

    rogl_pfn_glGetnMapivARB(target, query, bufSize, v);

    return Qnil;
}

static VALUE rogl_glGetnPixelMapfvARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int map = (unsigned int)NUM2UINT(_arg1_);
    int bufSize = (int)NUM2INT(_arg2_);
    void* values = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetnPixelMapfvARB(map, bufSize, values);

    return Qnil;
}

static VALUE rogl_glGetnPixelMapuivARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int map = (unsigned int)NUM2UINT(_arg1_);
    int bufSize = (int)NUM2INT(_arg2_);
    void* values = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetnPixelMapuivARB(map, bufSize, values);

    return Qnil;
}

static VALUE rogl_glGetnPixelMapusvARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int map = (unsigned int)NUM2UINT(_arg1_);
    int bufSize = (int)NUM2INT(_arg2_);
    void* values = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetnPixelMapusvARB(map, bufSize, values);

    return Qnil;
}

static VALUE rogl_glGetnPolygonStippleARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int bufSize = (int)NUM2INT(_arg1_);
    void* pattern = (void*)val2ptr(_arg2_);

    rogl_pfn_glGetnPolygonStippleARB(bufSize, pattern);

    return Qnil;
}

static VALUE rogl_glGetnColorTableARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int format = (unsigned int)NUM2UINT(_arg2_);
    unsigned int type = (unsigned int)NUM2UINT(_arg3_);
    int bufSize = (int)NUM2INT(_arg4_);
    void* table = (void*)val2ptr(_arg5_);

    rogl_pfn_glGetnColorTableARB(target, format, type, bufSize, table);

    return Qnil;
}

static VALUE rogl_glGetnConvolutionFilterARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int format = (unsigned int)NUM2UINT(_arg2_);
    unsigned int type = (unsigned int)NUM2UINT(_arg3_);
    int bufSize = (int)NUM2INT(_arg4_);
    void* image = (void*)val2ptr(_arg5_);

    rogl_pfn_glGetnConvolutionFilterARB(target, format, type, bufSize, image);

    return Qnil;
}

static VALUE rogl_glGetnSeparableFilterARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int format = (unsigned int)NUM2UINT(_arg2_);
    unsigned int type = (unsigned int)NUM2UINT(_arg3_);
    int rowBufSize = (int)NUM2INT(_arg4_);
    void* row = (void*)val2ptr(_arg5_);
    int columnBufSize = (int)NUM2INT(_arg6_);
    void* column = (void*)val2ptr(_arg7_);
    void* span = (void*)val2ptr(_arg8_);

    rogl_pfn_glGetnSeparableFilterARB(target, format, type, rowBufSize, row, columnBufSize, column, span);

    return Qnil;
}

static VALUE rogl_glGetnHistogramARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned char reset = (unsigned char)NUM2UINT(_arg2_);
    unsigned int format = (unsigned int)NUM2UINT(_arg3_);
    unsigned int type = (unsigned int)NUM2UINT(_arg4_);
    int bufSize = (int)NUM2INT(_arg5_);
    void* values = (void*)val2ptr(_arg6_);

    rogl_pfn_glGetnHistogramARB(target, reset, format, type, bufSize, values);

    return Qnil;
}

static VALUE rogl_glGetnMinmaxARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned char reset = (unsigned char)NUM2UINT(_arg2_);
    unsigned int format = (unsigned int)NUM2UINT(_arg3_);
    unsigned int type = (unsigned int)NUM2UINT(_arg4_);
    int bufSize = (int)NUM2INT(_arg5_);
    void* values = (void*)val2ptr(_arg6_);

    rogl_pfn_glGetnMinmaxARB(target, reset, format, type, bufSize, values);

    return Qnil;
}

static VALUE rogl_glFramebufferSampleLocationsfvARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int start = (unsigned int)NUM2UINT(_arg2_);
    int count = (int)NUM2INT(_arg3_);
    void* v = (void*)val2ptr(_arg4_);

    rogl_pfn_glFramebufferSampleLocationsfvARB(target, start, count, v);

    return Qnil;
}

static VALUE rogl_glNamedFramebufferSampleLocationsfvARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int framebuffer = (unsigned int)NUM2UINT(_arg1_);
    unsigned int start = (unsigned int)NUM2UINT(_arg2_);
    int count = (int)NUM2INT(_arg3_);
    void* v = (void*)val2ptr(_arg4_);

    rogl_pfn_glNamedFramebufferSampleLocationsfvARB(framebuffer, start, count, v);

    return Qnil;
}

static VALUE rogl_glEvaluateDepthValuesARB(VALUE _obj_)
{
    rogl_pfn_glEvaluateDepthValuesARB();

    return Qnil;
}

static VALUE rogl_glMinSampleShadingARB(VALUE _obj_, VALUE _arg1_)
{
    float value = (float)NUM2DBL(_arg1_);

    rogl_pfn_glMinSampleShadingARB(value);

    return Qnil;
}

static VALUE rogl_glDeleteObjectARB(VALUE _obj_, VALUE _arg1_)
{
    void* obj = (void*)val2ptr(_arg1_);

    rogl_pfn_glDeleteObjectARB(obj);

    return Qnil;
}

static VALUE rogl_glGetHandleARB(VALUE _obj_, VALUE _arg1_)
{
    unsigned int pname = (unsigned int)NUM2UINT(_arg1_);

    void* retval = rogl_pfn_glGetHandleARB(pname);

    return CPOINTER_AS_VALUE(retval);
}

static VALUE rogl_glDetachObjectARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    void* containerObj = (void*)val2ptr(_arg1_);
    void* attachedObj = (void*)val2ptr(_arg2_);

    rogl_pfn_glDetachObjectARB(containerObj, attachedObj);

    return Qnil;
}

static VALUE rogl_glCreateShaderObjectARB(VALUE _obj_, VALUE _arg1_)
{
    unsigned int shaderType = (unsigned int)NUM2UINT(_arg1_);

    void* retval = rogl_pfn_glCreateShaderObjectARB(shaderType);

    return CPOINTER_AS_VALUE(retval);
}

static VALUE rogl_glShaderSourceARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    void* shaderObj = (void*)val2ptr(_arg1_);
    int count = (int)NUM2INT(_arg2_);
    void* string = (void*)val2ptr(_arg3_);
    void* length = (void*)val2ptr(_arg4_);

    rogl_pfn_glShaderSourceARB(shaderObj, count, string, length);

    return Qnil;
}

static VALUE rogl_glCompileShaderARB(VALUE _obj_, VALUE _arg1_)
{
    void* shaderObj = (void*)val2ptr(_arg1_);

    rogl_pfn_glCompileShaderARB(shaderObj);

    return Qnil;
}

static VALUE rogl_glCreateProgramObjectARB(VALUE _obj_)
{
    void* retval = rogl_pfn_glCreateProgramObjectARB();

    return CPOINTER_AS_VALUE(retval);
}

static VALUE rogl_glAttachObjectARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    void* containerObj = (void*)val2ptr(_arg1_);
    void* obj = (void*)val2ptr(_arg2_);

    rogl_pfn_glAttachObjectARB(containerObj, obj);

    return Qnil;
}

static VALUE rogl_glLinkProgramARB(VALUE _obj_, VALUE _arg1_)
{
    void* programObj = (void*)val2ptr(_arg1_);

    rogl_pfn_glLinkProgramARB(programObj);

    return Qnil;
}

static VALUE rogl_glUseProgramObjectARB(VALUE _obj_, VALUE _arg1_)
{
    void* programObj = (void*)val2ptr(_arg1_);

    rogl_pfn_glUseProgramObjectARB(programObj);

    return Qnil;
}

static VALUE rogl_glValidateProgramARB(VALUE _obj_, VALUE _arg1_)
{
    void* programObj = (void*)val2ptr(_arg1_);

    rogl_pfn_glValidateProgramARB(programObj);

    return Qnil;
}

static VALUE rogl_glUniform1fARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int location = (int)NUM2INT(_arg1_);
    float v0 = (float)NUM2DBL(_arg2_);

    rogl_pfn_glUniform1fARB(location, v0);

    return Qnil;
}

static VALUE rogl_glUniform2fARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    int location = (int)NUM2INT(_arg1_);
    float v0 = (float)NUM2DBL(_arg2_);
    float v1 = (float)NUM2DBL(_arg3_);

    rogl_pfn_glUniform2fARB(location, v0, v1);

    return Qnil;
}

static VALUE rogl_glUniform3fARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    int location = (int)NUM2INT(_arg1_);
    float v0 = (float)NUM2DBL(_arg2_);
    float v1 = (float)NUM2DBL(_arg3_);
    float v2 = (float)NUM2DBL(_arg4_);

    rogl_pfn_glUniform3fARB(location, v0, v1, v2);

    return Qnil;
}

static VALUE rogl_glUniform4fARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    int location = (int)NUM2INT(_arg1_);
    float v0 = (float)NUM2DBL(_arg2_);
    float v1 = (float)NUM2DBL(_arg3_);
    float v2 = (float)NUM2DBL(_arg4_);
    float v3 = (float)NUM2DBL(_arg5_);

    rogl_pfn_glUniform4fARB(location, v0, v1, v2, v3);

    return Qnil;
}

static VALUE rogl_glUniform1iARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int location = (int)NUM2INT(_arg1_);
    int v0 = (int)NUM2INT(_arg2_);

    rogl_pfn_glUniform1iARB(location, v0);

    return Qnil;
}

static VALUE rogl_glUniform2iARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    int location = (int)NUM2INT(_arg1_);
    int v0 = (int)NUM2INT(_arg2_);
    int v1 = (int)NUM2INT(_arg3_);

    rogl_pfn_glUniform2iARB(location, v0, v1);

    return Qnil;
}

static VALUE rogl_glUniform3iARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    int location = (int)NUM2INT(_arg1_);
    int v0 = (int)NUM2INT(_arg2_);
    int v1 = (int)NUM2INT(_arg3_);
    int v2 = (int)NUM2INT(_arg4_);

    rogl_pfn_glUniform3iARB(location, v0, v1, v2);

    return Qnil;
}

static VALUE rogl_glUniform4iARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    int location = (int)NUM2INT(_arg1_);
    int v0 = (int)NUM2INT(_arg2_);
    int v1 = (int)NUM2INT(_arg3_);
    int v2 = (int)NUM2INT(_arg4_);
    int v3 = (int)NUM2INT(_arg5_);

    rogl_pfn_glUniform4iARB(location, v0, v1, v2, v3);

    return Qnil;
}

static VALUE rogl_glUniform1fvARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    int location = (int)NUM2INT(_arg1_);
    int count = (int)NUM2INT(_arg2_);
    void* value = (void*)val2ptr(_arg3_);

    rogl_pfn_glUniform1fvARB(location, count, value);

    return Qnil;
}

static VALUE rogl_glUniform2fvARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    int location = (int)NUM2INT(_arg1_);
    int count = (int)NUM2INT(_arg2_);
    void* value = (void*)val2ptr(_arg3_);

    rogl_pfn_glUniform2fvARB(location, count, value);

    return Qnil;
}

static VALUE rogl_glUniform3fvARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    int location = (int)NUM2INT(_arg1_);
    int count = (int)NUM2INT(_arg2_);
    void* value = (void*)val2ptr(_arg3_);

    rogl_pfn_glUniform3fvARB(location, count, value);

    return Qnil;
}

static VALUE rogl_glUniform4fvARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    int location = (int)NUM2INT(_arg1_);
    int count = (int)NUM2INT(_arg2_);
    void* value = (void*)val2ptr(_arg3_);

    rogl_pfn_glUniform4fvARB(location, count, value);

    return Qnil;
}

static VALUE rogl_glUniform1ivARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    int location = (int)NUM2INT(_arg1_);
    int count = (int)NUM2INT(_arg2_);
    void* value = (void*)val2ptr(_arg3_);

    rogl_pfn_glUniform1ivARB(location, count, value);

    return Qnil;
}

static VALUE rogl_glUniform2ivARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    int location = (int)NUM2INT(_arg1_);
    int count = (int)NUM2INT(_arg2_);
    void* value = (void*)val2ptr(_arg3_);

    rogl_pfn_glUniform2ivARB(location, count, value);

    return Qnil;
}

static VALUE rogl_glUniform3ivARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    int location = (int)NUM2INT(_arg1_);
    int count = (int)NUM2INT(_arg2_);
    void* value = (void*)val2ptr(_arg3_);

    rogl_pfn_glUniform3ivARB(location, count, value);

    return Qnil;
}

static VALUE rogl_glUniform4ivARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    int location = (int)NUM2INT(_arg1_);
    int count = (int)NUM2INT(_arg2_);
    void* value = (void*)val2ptr(_arg3_);

    rogl_pfn_glUniform4ivARB(location, count, value);

    return Qnil;
}

static VALUE rogl_glUniformMatrix2fvARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    int location = (int)NUM2INT(_arg1_);
    int count = (int)NUM2INT(_arg2_);
    unsigned char transpose = (unsigned char)NUM2UINT(_arg3_);
    void* value = (void*)val2ptr(_arg4_);

    rogl_pfn_glUniformMatrix2fvARB(location, count, transpose, value);

    return Qnil;
}

static VALUE rogl_glUniformMatrix3fvARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    int location = (int)NUM2INT(_arg1_);
    int count = (int)NUM2INT(_arg2_);
    unsigned char transpose = (unsigned char)NUM2UINT(_arg3_);
    void* value = (void*)val2ptr(_arg4_);

    rogl_pfn_glUniformMatrix3fvARB(location, count, transpose, value);

    return Qnil;
}

static VALUE rogl_glUniformMatrix4fvARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    int location = (int)NUM2INT(_arg1_);
    int count = (int)NUM2INT(_arg2_);
    unsigned char transpose = (unsigned char)NUM2UINT(_arg3_);
    void* value = (void*)val2ptr(_arg4_);

    rogl_pfn_glUniformMatrix4fvARB(location, count, transpose, value);

    return Qnil;
}

static VALUE rogl_glGetObjectParameterfvARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    void* obj = (void*)val2ptr(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetObjectParameterfvARB(obj, pname, params);

    return Qnil;
}

static VALUE rogl_glGetObjectParameterivARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    void* obj = (void*)val2ptr(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetObjectParameterivARB(obj, pname, params);

    return Qnil;
}

static VALUE rogl_glGetInfoLogARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    void* obj = (void*)val2ptr(_arg1_);
    int maxLength = (int)NUM2INT(_arg2_);
    void* length = (void*)val2ptr(_arg3_);
    void* infoLog = (void*)val2ptr(_arg4_);

    rogl_pfn_glGetInfoLogARB(obj, maxLength, length, infoLog);

    return Qnil;
}

static VALUE rogl_glGetAttachedObjectsARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    void* containerObj = (void*)val2ptr(_arg1_);
    int maxCount = (int)NUM2INT(_arg2_);
    void* count = (void*)val2ptr(_arg3_);
    void* obj = (void*)val2ptr(_arg4_);

    rogl_pfn_glGetAttachedObjectsARB(containerObj, maxCount, count, obj);

    return Qnil;
}

static VALUE rogl_glGetUniformLocationARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    void* programObj = (void*)val2ptr(_arg1_);
    void* name = (void*)val2ptr(_arg2_);

    int retval = rogl_pfn_glGetUniformLocationARB(programObj, name);

    return INT2NUM(retval);
}

static VALUE rogl_glGetActiveUniformARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_)
{
    void* programObj = (void*)val2ptr(_arg1_);
    unsigned int index = (unsigned int)NUM2UINT(_arg2_);
    int maxLength = (int)NUM2INT(_arg3_);
    void* length = (void*)val2ptr(_arg4_);
    void* size = (void*)val2ptr(_arg5_);
    void* type = (void*)val2ptr(_arg6_);
    void* name = (void*)val2ptr(_arg7_);

    rogl_pfn_glGetActiveUniformARB(programObj, index, maxLength, length, size, type, name);

    return Qnil;
}

static VALUE rogl_glGetUniformfvARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    void* programObj = (void*)val2ptr(_arg1_);
    int location = (int)NUM2INT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetUniformfvARB(programObj, location, params);

    return Qnil;
}

static VALUE rogl_glGetUniformivARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    void* programObj = (void*)val2ptr(_arg1_);
    int location = (int)NUM2INT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetUniformivARB(programObj, location, params);

    return Qnil;
}

static VALUE rogl_glGetShaderSourceARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    void* obj = (void*)val2ptr(_arg1_);
    int maxLength = (int)NUM2INT(_arg2_);
    void* length = (void*)val2ptr(_arg3_);
    void* source = (void*)val2ptr(_arg4_);

    rogl_pfn_glGetShaderSourceARB(obj, maxLength, length, source);

    return Qnil;
}

static VALUE rogl_glNamedStringARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int type = (unsigned int)NUM2UINT(_arg1_);
    int namelen = (int)NUM2INT(_arg2_);
    void* name = (void*)val2ptr(_arg3_);
    int stringlen = (int)NUM2INT(_arg4_);
    void* string = (void*)val2ptr(_arg5_);

    rogl_pfn_glNamedStringARB(type, namelen, name, stringlen, string);

    return Qnil;
}

static VALUE rogl_glDeleteNamedStringARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int namelen = (int)NUM2INT(_arg1_);
    void* name = (void*)val2ptr(_arg2_);

    rogl_pfn_glDeleteNamedStringARB(namelen, name);

    return Qnil;
}

static VALUE rogl_glCompileShaderIncludeARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int shader = (unsigned int)NUM2UINT(_arg1_);
    int count = (int)NUM2INT(_arg2_);
    void* path = (void*)val2ptr(_arg3_);
    void* length = (void*)val2ptr(_arg4_);

    rogl_pfn_glCompileShaderIncludeARB(shader, count, path, length);

    return Qnil;
}

static VALUE rogl_glIsNamedStringARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int namelen = (int)NUM2INT(_arg1_);
    void* name = (void*)val2ptr(_arg2_);

    unsigned char retval = rogl_pfn_glIsNamedStringARB(namelen, name);

    return UINT2NUM(retval);
}

static VALUE rogl_glGetNamedStringARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    int namelen = (int)NUM2INT(_arg1_);
    void* name = (void*)val2ptr(_arg2_);
    int bufSize = (int)NUM2INT(_arg3_);
    void* stringlen = (void*)val2ptr(_arg4_);
    void* string = (void*)val2ptr(_arg5_);

    rogl_pfn_glGetNamedStringARB(namelen, name, bufSize, stringlen, string);

    return Qnil;
}

static VALUE rogl_glGetNamedStringivARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    int namelen = (int)NUM2INT(_arg1_);
    void* name = (void*)val2ptr(_arg2_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg3_);
    void* params = (void*)val2ptr(_arg4_);

    rogl_pfn_glGetNamedStringivARB(namelen, name, pname, params);

    return Qnil;
}

static VALUE rogl_glBufferPageCommitmentARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    ptrdiff_t offset = (ptrdiff_t)(_arg2_);
    ptrdiff_t size = (ptrdiff_t)(_arg3_);
    unsigned char commit = (unsigned char)NUM2UINT(_arg4_);

    rogl_pfn_glBufferPageCommitmentARB(target, offset, size, commit);

    return Qnil;
}

static VALUE rogl_glNamedBufferPageCommitmentEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int buffer = (unsigned int)NUM2UINT(_arg1_);
    ptrdiff_t offset = (ptrdiff_t)(_arg2_);
    ptrdiff_t size = (ptrdiff_t)(_arg3_);
    unsigned char commit = (unsigned char)NUM2UINT(_arg4_);

    rogl_pfn_glNamedBufferPageCommitmentEXT(buffer, offset, size, commit);

    return Qnil;
}

static VALUE rogl_glNamedBufferPageCommitmentARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int buffer = (unsigned int)NUM2UINT(_arg1_);
    ptrdiff_t offset = (ptrdiff_t)(_arg2_);
    ptrdiff_t size = (ptrdiff_t)(_arg3_);
    unsigned char commit = (unsigned char)NUM2UINT(_arg4_);

    rogl_pfn_glNamedBufferPageCommitmentARB(buffer, offset, size, commit);

    return Qnil;
}

static VALUE rogl_glTexPageCommitmentARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_, VALUE _arg9_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    int level = (int)NUM2INT(_arg2_);
    int xoffset = (int)NUM2INT(_arg3_);
    int yoffset = (int)NUM2INT(_arg4_);
    int zoffset = (int)NUM2INT(_arg5_);
    int width = (int)NUM2INT(_arg6_);
    int height = (int)NUM2INT(_arg7_);
    int depth = (int)NUM2INT(_arg8_);
    unsigned char commit = (unsigned char)NUM2UINT(_arg9_);

    rogl_pfn_glTexPageCommitmentARB(target, level, xoffset, yoffset, zoffset, width, height, depth, commit);

    return Qnil;
}

static VALUE rogl_glTexBufferARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int internalformat = (unsigned int)NUM2UINT(_arg2_);
    unsigned int buffer = (unsigned int)NUM2UINT(_arg3_);

    rogl_pfn_glTexBufferARB(target, internalformat, buffer);

    return Qnil;
}

static VALUE rogl_glCompressedTexImage3DARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_, VALUE _arg9_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    int level = (int)NUM2INT(_arg2_);
    unsigned int internalformat = (unsigned int)NUM2UINT(_arg3_);
    int width = (int)NUM2INT(_arg4_);
    int height = (int)NUM2INT(_arg5_);
    int depth = (int)NUM2INT(_arg6_);
    int border = (int)NUM2INT(_arg7_);
    int imageSize = (int)NUM2INT(_arg8_);
    void* data = (void*)val2ptr(_arg9_);

    rogl_pfn_glCompressedTexImage3DARB(target, level, internalformat, width, height, depth, border, imageSize, data);

    return Qnil;
}

static VALUE rogl_glCompressedTexImage2DARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    int level = (int)NUM2INT(_arg2_);
    unsigned int internalformat = (unsigned int)NUM2UINT(_arg3_);
    int width = (int)NUM2INT(_arg4_);
    int height = (int)NUM2INT(_arg5_);
    int border = (int)NUM2INT(_arg6_);
    int imageSize = (int)NUM2INT(_arg7_);
    void* data = (void*)val2ptr(_arg8_);

    rogl_pfn_glCompressedTexImage2DARB(target, level, internalformat, width, height, border, imageSize, data);

    return Qnil;
}

static VALUE rogl_glCompressedTexImage1DARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    int level = (int)NUM2INT(_arg2_);
    unsigned int internalformat = (unsigned int)NUM2UINT(_arg3_);
    int width = (int)NUM2INT(_arg4_);
    int border = (int)NUM2INT(_arg5_);
    int imageSize = (int)NUM2INT(_arg6_);
    void* data = (void*)val2ptr(_arg7_);

    rogl_pfn_glCompressedTexImage1DARB(target, level, internalformat, width, border, imageSize, data);

    return Qnil;
}

static VALUE rogl_glCompressedTexSubImage3DARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_, VALUE _arg9_, VALUE _arg10_, VALUE _arg11_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    int level = (int)NUM2INT(_arg2_);
    int xoffset = (int)NUM2INT(_arg3_);
    int yoffset = (int)NUM2INT(_arg4_);
    int zoffset = (int)NUM2INT(_arg5_);
    int width = (int)NUM2INT(_arg6_);
    int height = (int)NUM2INT(_arg7_);
    int depth = (int)NUM2INT(_arg8_);
    unsigned int format = (unsigned int)NUM2UINT(_arg9_);
    int imageSize = (int)NUM2INT(_arg10_);
    void* data = (void*)val2ptr(_arg11_);

    rogl_pfn_glCompressedTexSubImage3DARB(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);

    return Qnil;
}

static VALUE rogl_glCompressedTexSubImage2DARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_, VALUE _arg9_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    int level = (int)NUM2INT(_arg2_);
    int xoffset = (int)NUM2INT(_arg3_);
    int yoffset = (int)NUM2INT(_arg4_);
    int width = (int)NUM2INT(_arg5_);
    int height = (int)NUM2INT(_arg6_);
    unsigned int format = (unsigned int)NUM2UINT(_arg7_);
    int imageSize = (int)NUM2INT(_arg8_);
    void* data = (void*)val2ptr(_arg9_);

    rogl_pfn_glCompressedTexSubImage2DARB(target, level, xoffset, yoffset, width, height, format, imageSize, data);

    return Qnil;
}

static VALUE rogl_glCompressedTexSubImage1DARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    int level = (int)NUM2INT(_arg2_);
    int xoffset = (int)NUM2INT(_arg3_);
    int width = (int)NUM2INT(_arg4_);
    unsigned int format = (unsigned int)NUM2UINT(_arg5_);
    int imageSize = (int)NUM2INT(_arg6_);
    void* data = (void*)val2ptr(_arg7_);

    rogl_pfn_glCompressedTexSubImage1DARB(target, level, xoffset, width, format, imageSize, data);

    return Qnil;
}

static VALUE rogl_glGetCompressedTexImageARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    int level = (int)NUM2INT(_arg2_);
    void* img = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetCompressedTexImageARB(target, level, img);

    return Qnil;
}

static VALUE rogl_glLoadTransposeMatrixfARB(VALUE _obj_, VALUE _arg1_)
{
    void* m = (void*)val2ptr(_arg1_);

    rogl_pfn_glLoadTransposeMatrixfARB(m);

    return Qnil;
}

static VALUE rogl_glLoadTransposeMatrixdARB(VALUE _obj_, VALUE _arg1_)
{
    void* m = (void*)val2ptr(_arg1_);

    rogl_pfn_glLoadTransposeMatrixdARB(m);

    return Qnil;
}

static VALUE rogl_glMultTransposeMatrixfARB(VALUE _obj_, VALUE _arg1_)
{
    void* m = (void*)val2ptr(_arg1_);

    rogl_pfn_glMultTransposeMatrixfARB(m);

    return Qnil;
}

static VALUE rogl_glMultTransposeMatrixdARB(VALUE _obj_, VALUE _arg1_)
{
    void* m = (void*)val2ptr(_arg1_);

    rogl_pfn_glMultTransposeMatrixdARB(m);

    return Qnil;
}

static VALUE rogl_glWeightbvARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int size = (int)NUM2INT(_arg1_);
    void* weights = (void*)val2ptr(_arg2_);

    rogl_pfn_glWeightbvARB(size, weights);

    return Qnil;
}

static VALUE rogl_glWeightsvARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int size = (int)NUM2INT(_arg1_);
    void* weights = (void*)val2ptr(_arg2_);

    rogl_pfn_glWeightsvARB(size, weights);

    return Qnil;
}

static VALUE rogl_glWeightivARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int size = (int)NUM2INT(_arg1_);
    void* weights = (void*)val2ptr(_arg2_);

    rogl_pfn_glWeightivARB(size, weights);

    return Qnil;
}

static VALUE rogl_glWeightfvARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int size = (int)NUM2INT(_arg1_);
    void* weights = (void*)val2ptr(_arg2_);

    rogl_pfn_glWeightfvARB(size, weights);

    return Qnil;
}

static VALUE rogl_glWeightdvARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int size = (int)NUM2INT(_arg1_);
    void* weights = (void*)val2ptr(_arg2_);

    rogl_pfn_glWeightdvARB(size, weights);

    return Qnil;
}

static VALUE rogl_glWeightubvARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int size = (int)NUM2INT(_arg1_);
    void* weights = (void*)val2ptr(_arg2_);

    rogl_pfn_glWeightubvARB(size, weights);

    return Qnil;
}

static VALUE rogl_glWeightusvARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int size = (int)NUM2INT(_arg1_);
    void* weights = (void*)val2ptr(_arg2_);

    rogl_pfn_glWeightusvARB(size, weights);

    return Qnil;
}

static VALUE rogl_glWeightuivARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int size = (int)NUM2INT(_arg1_);
    void* weights = (void*)val2ptr(_arg2_);

    rogl_pfn_glWeightuivARB(size, weights);

    return Qnil;
}

static VALUE rogl_glWeightPointerARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    int size = (int)NUM2INT(_arg1_);
    unsigned int type = (unsigned int)NUM2UINT(_arg2_);
    int stride = (int)NUM2INT(_arg3_);
    void* pointer = (void*)val2ptr(_arg4_);

    rogl_pfn_glWeightPointerARB(size, type, stride, pointer);

    return Qnil;
}

static VALUE rogl_glVertexBlendARB(VALUE _obj_, VALUE _arg1_)
{
    int count = (int)NUM2INT(_arg1_);

    rogl_pfn_glVertexBlendARB(count);

    return Qnil;
}

static VALUE rogl_glBindBufferARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int buffer = (unsigned int)NUM2UINT(_arg2_);

    rogl_pfn_glBindBufferARB(target, buffer);

    return Qnil;
}

static VALUE rogl_glDeleteBuffersARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int n = (int)NUM2INT(_arg1_);
    void* buffers = (void*)val2ptr(_arg2_);

    rogl_pfn_glDeleteBuffersARB(n, buffers);

    return Qnil;
}

static VALUE rogl_glGenBuffersARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int n = (int)NUM2INT(_arg1_);
    void* buffers = (void*)val2ptr(_arg2_);

    rogl_pfn_glGenBuffersARB(n, buffers);

    return Qnil;
}

static VALUE rogl_glIsBufferARB(VALUE _obj_, VALUE _arg1_)
{
    unsigned int buffer = (unsigned int)NUM2UINT(_arg1_);

    unsigned char retval = rogl_pfn_glIsBufferARB(buffer);

    return UINT2NUM(retval);
}

static VALUE rogl_glBufferDataARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    ptrdiff_t size = (ptrdiff_t)(_arg2_);
    void* data = (void*)val2ptr(_arg3_);
    unsigned int usage = (unsigned int)NUM2UINT(_arg4_);

    rogl_pfn_glBufferDataARB(target, size, data, usage);

    return Qnil;
}

static VALUE rogl_glBufferSubDataARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    ptrdiff_t offset = (ptrdiff_t)(_arg2_);
    ptrdiff_t size = (ptrdiff_t)(_arg3_);
    void* data = (void*)val2ptr(_arg4_);

    rogl_pfn_glBufferSubDataARB(target, offset, size, data);

    return Qnil;
}

static VALUE rogl_glGetBufferSubDataARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    ptrdiff_t offset = (ptrdiff_t)(_arg2_);
    ptrdiff_t size = (ptrdiff_t)(_arg3_);
    void* data = (void*)val2ptr(_arg4_);

    rogl_pfn_glGetBufferSubDataARB(target, offset, size, data);

    return Qnil;
}

static VALUE rogl_glMapBufferARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int access = (unsigned int)NUM2UINT(_arg2_);

    void* retval = rogl_pfn_glMapBufferARB(target, access);

    return CPOINTER_AS_VALUE(retval);
}

static VALUE rogl_glUnmapBufferARB(VALUE _obj_, VALUE _arg1_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);

    unsigned char retval = rogl_pfn_glUnmapBufferARB(target);

    return UINT2NUM(retval);
}

static VALUE rogl_glGetBufferParameterivARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetBufferParameterivARB(target, pname, params);

    return Qnil;
}

static VALUE rogl_glGetBufferPointervARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetBufferPointervARB(target, pname, params);

    return Qnil;
}

static VALUE rogl_glBindAttribLocationARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    void* programObj = (void*)val2ptr(_arg1_);
    unsigned int index = (unsigned int)NUM2UINT(_arg2_);
    void* name = (void*)val2ptr(_arg3_);

    rogl_pfn_glBindAttribLocationARB(programObj, index, name);

    return Qnil;
}

static VALUE rogl_glGetActiveAttribARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_)
{
    void* programObj = (void*)val2ptr(_arg1_);
    unsigned int index = (unsigned int)NUM2UINT(_arg2_);
    int maxLength = (int)NUM2INT(_arg3_);
    void* length = (void*)val2ptr(_arg4_);
    void* size = (void*)val2ptr(_arg5_);
    void* type = (void*)val2ptr(_arg6_);
    void* name = (void*)val2ptr(_arg7_);

    rogl_pfn_glGetActiveAttribARB(programObj, index, maxLength, length, size, type, name);

    return Qnil;
}

static VALUE rogl_glGetAttribLocationARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    void* programObj = (void*)val2ptr(_arg1_);
    void* name = (void*)val2ptr(_arg2_);

    int retval = rogl_pfn_glGetAttribLocationARB(programObj, name);

    return INT2NUM(retval);
}

static VALUE rogl_glWindowPos2dARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    double x = (double)NUM2DBL(_arg1_);
    double y = (double)NUM2DBL(_arg2_);

    rogl_pfn_glWindowPos2dARB(x, y);

    return Qnil;
}

static VALUE rogl_glWindowPos2dvARB(VALUE _obj_, VALUE _arg1_)
{
    void* v = (void*)val2ptr(_arg1_);

    rogl_pfn_glWindowPos2dvARB(v);

    return Qnil;
}

static VALUE rogl_glWindowPos2fARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    float x = (float)NUM2DBL(_arg1_);
    float y = (float)NUM2DBL(_arg2_);

    rogl_pfn_glWindowPos2fARB(x, y);

    return Qnil;
}

static VALUE rogl_glWindowPos2fvARB(VALUE _obj_, VALUE _arg1_)
{
    void* v = (void*)val2ptr(_arg1_);

    rogl_pfn_glWindowPos2fvARB(v);

    return Qnil;
}

static VALUE rogl_glWindowPos2iARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int x = (int)NUM2INT(_arg1_);
    int y = (int)NUM2INT(_arg2_);

    rogl_pfn_glWindowPos2iARB(x, y);

    return Qnil;
}

static VALUE rogl_glWindowPos2ivARB(VALUE _obj_, VALUE _arg1_)
{
    void* v = (void*)val2ptr(_arg1_);

    rogl_pfn_glWindowPos2ivARB(v);

    return Qnil;
}

static VALUE rogl_glWindowPos2sARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    short x = (short)NUM2INT(_arg1_);
    short y = (short)NUM2INT(_arg2_);

    rogl_pfn_glWindowPos2sARB(x, y);

    return Qnil;
}

static VALUE rogl_glWindowPos2svARB(VALUE _obj_, VALUE _arg1_)
{
    void* v = (void*)val2ptr(_arg1_);

    rogl_pfn_glWindowPos2svARB(v);

    return Qnil;
}

static VALUE rogl_glWindowPos3dARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    double x = (double)NUM2DBL(_arg1_);
    double y = (double)NUM2DBL(_arg2_);
    double z = (double)NUM2DBL(_arg3_);

    rogl_pfn_glWindowPos3dARB(x, y, z);

    return Qnil;
}

static VALUE rogl_glWindowPos3dvARB(VALUE _obj_, VALUE _arg1_)
{
    void* v = (void*)val2ptr(_arg1_);

    rogl_pfn_glWindowPos3dvARB(v);

    return Qnil;
}

static VALUE rogl_glWindowPos3fARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    float x = (float)NUM2DBL(_arg1_);
    float y = (float)NUM2DBL(_arg2_);
    float z = (float)NUM2DBL(_arg3_);

    rogl_pfn_glWindowPos3fARB(x, y, z);

    return Qnil;
}

static VALUE rogl_glWindowPos3fvARB(VALUE _obj_, VALUE _arg1_)
{
    void* v = (void*)val2ptr(_arg1_);

    rogl_pfn_glWindowPos3fvARB(v);

    return Qnil;
}

static VALUE rogl_glWindowPos3iARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    int x = (int)NUM2INT(_arg1_);
    int y = (int)NUM2INT(_arg2_);
    int z = (int)NUM2INT(_arg3_);

    rogl_pfn_glWindowPos3iARB(x, y, z);

    return Qnil;
}

static VALUE rogl_glWindowPos3ivARB(VALUE _obj_, VALUE _arg1_)
{
    void* v = (void*)val2ptr(_arg1_);

    rogl_pfn_glWindowPos3ivARB(v);

    return Qnil;
}

static VALUE rogl_glWindowPos3sARB(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    short x = (short)NUM2INT(_arg1_);
    short y = (short)NUM2INT(_arg2_);
    short z = (short)NUM2INT(_arg3_);

    rogl_pfn_glWindowPos3sARB(x, y, z);

    return Qnil;
}

static VALUE rogl_glWindowPos3svARB(VALUE _obj_, VALUE _arg1_)
{
    void* v = (void*)val2ptr(_arg1_);

    rogl_pfn_glWindowPos3svARB(v);

    return Qnil;
}

static VALUE rogl_glDrawBuffersATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int n = (int)NUM2INT(_arg1_);
    void* bufs = (void*)val2ptr(_arg2_);

    rogl_pfn_glDrawBuffersATI(n, bufs);

    return Qnil;
}

static VALUE rogl_glElementPointerATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int type = (unsigned int)NUM2UINT(_arg1_);
    void* pointer = (void*)val2ptr(_arg2_);

    rogl_pfn_glElementPointerATI(type, pointer);

    return Qnil;
}

static VALUE rogl_glDrawElementArrayATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int mode = (unsigned int)NUM2UINT(_arg1_);
    int count = (int)NUM2INT(_arg2_);

    rogl_pfn_glDrawElementArrayATI(mode, count);

    return Qnil;
}

static VALUE rogl_glDrawRangeElementArrayATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int mode = (unsigned int)NUM2UINT(_arg1_);
    unsigned int start = (unsigned int)NUM2UINT(_arg2_);
    unsigned int end = (unsigned int)NUM2UINT(_arg3_);
    int count = (int)NUM2INT(_arg4_);

    rogl_pfn_glDrawRangeElementArrayATI(mode, start, end, count);

    return Qnil;
}

static VALUE rogl_glTexBumpParameterivATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int pname = (unsigned int)NUM2UINT(_arg1_);
    void* param = (void*)val2ptr(_arg2_);

    rogl_pfn_glTexBumpParameterivATI(pname, param);

    return Qnil;
}

static VALUE rogl_glTexBumpParameterfvATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int pname = (unsigned int)NUM2UINT(_arg1_);
    void* param = (void*)val2ptr(_arg2_);

    rogl_pfn_glTexBumpParameterfvATI(pname, param);

    return Qnil;
}

static VALUE rogl_glGetTexBumpParameterivATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int pname = (unsigned int)NUM2UINT(_arg1_);
    void* param = (void*)val2ptr(_arg2_);

    rogl_pfn_glGetTexBumpParameterivATI(pname, param);

    return Qnil;
}

static VALUE rogl_glGetTexBumpParameterfvATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int pname = (unsigned int)NUM2UINT(_arg1_);
    void* param = (void*)val2ptr(_arg2_);

    rogl_pfn_glGetTexBumpParameterfvATI(pname, param);

    return Qnil;
}

static VALUE rogl_glGenFragmentShadersATI(VALUE _obj_, VALUE _arg1_)
{
    unsigned int range = (unsigned int)NUM2UINT(_arg1_);

    unsigned int retval = rogl_pfn_glGenFragmentShadersATI(range);

    return UINT2NUM(retval);
}

static VALUE rogl_glBindFragmentShaderATI(VALUE _obj_, VALUE _arg1_)
{
    unsigned int id = (unsigned int)NUM2UINT(_arg1_);

    rogl_pfn_glBindFragmentShaderATI(id);

    return Qnil;
}

static VALUE rogl_glDeleteFragmentShaderATI(VALUE _obj_, VALUE _arg1_)
{
    unsigned int id = (unsigned int)NUM2UINT(_arg1_);

    rogl_pfn_glDeleteFragmentShaderATI(id);

    return Qnil;
}

static VALUE rogl_glBeginFragmentShaderATI(VALUE _obj_)
{
    rogl_pfn_glBeginFragmentShaderATI();

    return Qnil;
}

static VALUE rogl_glEndFragmentShaderATI(VALUE _obj_)
{
    rogl_pfn_glEndFragmentShaderATI();

    return Qnil;
}

static VALUE rogl_glPassTexCoordATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int dst = (unsigned int)NUM2UINT(_arg1_);
    unsigned int coord = (unsigned int)NUM2UINT(_arg2_);
    unsigned int swizzle = (unsigned int)NUM2UINT(_arg3_);

    rogl_pfn_glPassTexCoordATI(dst, coord, swizzle);

    return Qnil;
}

static VALUE rogl_glSampleMapATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int dst = (unsigned int)NUM2UINT(_arg1_);
    unsigned int interp = (unsigned int)NUM2UINT(_arg2_);
    unsigned int swizzle = (unsigned int)NUM2UINT(_arg3_);

    rogl_pfn_glSampleMapATI(dst, interp, swizzle);

    return Qnil;
}

static VALUE rogl_glColorFragmentOp1ATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_)
{
    unsigned int op = (unsigned int)NUM2UINT(_arg1_);
    unsigned int dst = (unsigned int)NUM2UINT(_arg2_);
    unsigned int dstMask = (unsigned int)NUM2UINT(_arg3_);
    unsigned int dstMod = (unsigned int)NUM2UINT(_arg4_);
    unsigned int arg1 = (unsigned int)NUM2UINT(_arg5_);
    unsigned int arg1Rep = (unsigned int)NUM2UINT(_arg6_);
    unsigned int arg1Mod = (unsigned int)NUM2UINT(_arg7_);

    rogl_pfn_glColorFragmentOp1ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod);

    return Qnil;
}

static VALUE rogl_glColorFragmentOp2ATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_, VALUE _arg9_, VALUE _arg10_)
{
    unsigned int op = (unsigned int)NUM2UINT(_arg1_);
    unsigned int dst = (unsigned int)NUM2UINT(_arg2_);
    unsigned int dstMask = (unsigned int)NUM2UINT(_arg3_);
    unsigned int dstMod = (unsigned int)NUM2UINT(_arg4_);
    unsigned int arg1 = (unsigned int)NUM2UINT(_arg5_);
    unsigned int arg1Rep = (unsigned int)NUM2UINT(_arg6_);
    unsigned int arg1Mod = (unsigned int)NUM2UINT(_arg7_);
    unsigned int arg2 = (unsigned int)NUM2UINT(_arg8_);
    unsigned int arg2Rep = (unsigned int)NUM2UINT(_arg9_);
    unsigned int arg2Mod = (unsigned int)NUM2UINT(_arg10_);

    rogl_pfn_glColorFragmentOp2ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);

    return Qnil;
}

static VALUE rogl_glColorFragmentOp3ATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_, VALUE _arg9_, VALUE _arg10_, VALUE _arg11_, VALUE _arg12_, VALUE _arg13_)
{
    unsigned int op = (unsigned int)NUM2UINT(_arg1_);
    unsigned int dst = (unsigned int)NUM2UINT(_arg2_);
    unsigned int dstMask = (unsigned int)NUM2UINT(_arg3_);
    unsigned int dstMod = (unsigned int)NUM2UINT(_arg4_);
    unsigned int arg1 = (unsigned int)NUM2UINT(_arg5_);
    unsigned int arg1Rep = (unsigned int)NUM2UINT(_arg6_);
    unsigned int arg1Mod = (unsigned int)NUM2UINT(_arg7_);
    unsigned int arg2 = (unsigned int)NUM2UINT(_arg8_);
    unsigned int arg2Rep = (unsigned int)NUM2UINT(_arg9_);
    unsigned int arg2Mod = (unsigned int)NUM2UINT(_arg10_);
    unsigned int arg3 = (unsigned int)NUM2UINT(_arg11_);
    unsigned int arg3Rep = (unsigned int)NUM2UINT(_arg12_);
    unsigned int arg3Mod = (unsigned int)NUM2UINT(_arg13_);

    rogl_pfn_glColorFragmentOp3ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);

    return Qnil;
}

static VALUE rogl_glAlphaFragmentOp1ATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_)
{
    unsigned int op = (unsigned int)NUM2UINT(_arg1_);
    unsigned int dst = (unsigned int)NUM2UINT(_arg2_);
    unsigned int dstMod = (unsigned int)NUM2UINT(_arg3_);
    unsigned int arg1 = (unsigned int)NUM2UINT(_arg4_);
    unsigned int arg1Rep = (unsigned int)NUM2UINT(_arg5_);
    unsigned int arg1Mod = (unsigned int)NUM2UINT(_arg6_);

    rogl_pfn_glAlphaFragmentOp1ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod);

    return Qnil;
}

static VALUE rogl_glAlphaFragmentOp2ATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_, VALUE _arg9_)
{
    unsigned int op = (unsigned int)NUM2UINT(_arg1_);
    unsigned int dst = (unsigned int)NUM2UINT(_arg2_);
    unsigned int dstMod = (unsigned int)NUM2UINT(_arg3_);
    unsigned int arg1 = (unsigned int)NUM2UINT(_arg4_);
    unsigned int arg1Rep = (unsigned int)NUM2UINT(_arg5_);
    unsigned int arg1Mod = (unsigned int)NUM2UINT(_arg6_);
    unsigned int arg2 = (unsigned int)NUM2UINT(_arg7_);
    unsigned int arg2Rep = (unsigned int)NUM2UINT(_arg8_);
    unsigned int arg2Mod = (unsigned int)NUM2UINT(_arg9_);

    rogl_pfn_glAlphaFragmentOp2ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);

    return Qnil;
}

static VALUE rogl_glAlphaFragmentOp3ATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_, VALUE _arg9_, VALUE _arg10_, VALUE _arg11_, VALUE _arg12_)
{
    unsigned int op = (unsigned int)NUM2UINT(_arg1_);
    unsigned int dst = (unsigned int)NUM2UINT(_arg2_);
    unsigned int dstMod = (unsigned int)NUM2UINT(_arg3_);
    unsigned int arg1 = (unsigned int)NUM2UINT(_arg4_);
    unsigned int arg1Rep = (unsigned int)NUM2UINT(_arg5_);
    unsigned int arg1Mod = (unsigned int)NUM2UINT(_arg6_);
    unsigned int arg2 = (unsigned int)NUM2UINT(_arg7_);
    unsigned int arg2Rep = (unsigned int)NUM2UINT(_arg8_);
    unsigned int arg2Mod = (unsigned int)NUM2UINT(_arg9_);
    unsigned int arg3 = (unsigned int)NUM2UINT(_arg10_);
    unsigned int arg3Rep = (unsigned int)NUM2UINT(_arg11_);
    unsigned int arg3Mod = (unsigned int)NUM2UINT(_arg12_);

    rogl_pfn_glAlphaFragmentOp3ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);

    return Qnil;
}

static VALUE rogl_glSetFragmentShaderConstantATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int dst = (unsigned int)NUM2UINT(_arg1_);
    void* value = (void*)val2ptr(_arg2_);

    rogl_pfn_glSetFragmentShaderConstantATI(dst, value);

    return Qnil;
}

static VALUE rogl_glMapObjectBufferATI(VALUE _obj_, VALUE _arg1_)
{
    unsigned int buffer = (unsigned int)NUM2UINT(_arg1_);

    void* retval = rogl_pfn_glMapObjectBufferATI(buffer);

    return CPOINTER_AS_VALUE(retval);
}

static VALUE rogl_glUnmapObjectBufferATI(VALUE _obj_, VALUE _arg1_)
{
    unsigned int buffer = (unsigned int)NUM2UINT(_arg1_);

    rogl_pfn_glUnmapObjectBufferATI(buffer);

    return Qnil;
}

static VALUE rogl_glPNTrianglesiATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int pname = (unsigned int)NUM2UINT(_arg1_);
    int param = (int)NUM2INT(_arg2_);

    rogl_pfn_glPNTrianglesiATI(pname, param);

    return Qnil;
}

static VALUE rogl_glPNTrianglesfATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int pname = (unsigned int)NUM2UINT(_arg1_);
    float param = (float)NUM2DBL(_arg2_);

    rogl_pfn_glPNTrianglesfATI(pname, param);

    return Qnil;
}

static VALUE rogl_glStencilOpSeparateATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int face = (unsigned int)NUM2UINT(_arg1_);
    unsigned int sfail = (unsigned int)NUM2UINT(_arg2_);
    unsigned int dpfail = (unsigned int)NUM2UINT(_arg3_);
    unsigned int dppass = (unsigned int)NUM2UINT(_arg4_);

    rogl_pfn_glStencilOpSeparateATI(face, sfail, dpfail, dppass);

    return Qnil;
}

static VALUE rogl_glStencilFuncSeparateATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int frontfunc = (unsigned int)NUM2UINT(_arg1_);
    unsigned int backfunc = (unsigned int)NUM2UINT(_arg2_);
    int ref = (int)NUM2INT(_arg3_);
    unsigned int mask = (unsigned int)NUM2UINT(_arg4_);

    rogl_pfn_glStencilFuncSeparateATI(frontfunc, backfunc, ref, mask);

    return Qnil;
}

static VALUE rogl_glNewObjectBufferATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    int size = (int)NUM2INT(_arg1_);
    void* pointer = (void*)val2ptr(_arg2_);
    unsigned int usage = (unsigned int)NUM2UINT(_arg3_);

    unsigned int retval = rogl_pfn_glNewObjectBufferATI(size, pointer, usage);

    return UINT2NUM(retval);
}

static VALUE rogl_glIsObjectBufferATI(VALUE _obj_, VALUE _arg1_)
{
    unsigned int buffer = (unsigned int)NUM2UINT(_arg1_);

    unsigned char retval = rogl_pfn_glIsObjectBufferATI(buffer);

    return UINT2NUM(retval);
}

static VALUE rogl_glUpdateObjectBufferATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int buffer = (unsigned int)NUM2UINT(_arg1_);
    unsigned int offset = (unsigned int)NUM2UINT(_arg2_);
    int size = (int)NUM2INT(_arg3_);
    void* pointer = (void*)val2ptr(_arg4_);
    unsigned int preserve = (unsigned int)NUM2UINT(_arg5_);

    rogl_pfn_glUpdateObjectBufferATI(buffer, offset, size, pointer, preserve);

    return Qnil;
}

static VALUE rogl_glGetObjectBufferfvATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int buffer = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetObjectBufferfvATI(buffer, pname, params);

    return Qnil;
}

static VALUE rogl_glGetObjectBufferivATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int buffer = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetObjectBufferivATI(buffer, pname, params);

    return Qnil;
}

static VALUE rogl_glFreeObjectBufferATI(VALUE _obj_, VALUE _arg1_)
{
    unsigned int buffer = (unsigned int)NUM2UINT(_arg1_);

    rogl_pfn_glFreeObjectBufferATI(buffer);

    return Qnil;
}

static VALUE rogl_glArrayObjectATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_)
{
    unsigned int array = (unsigned int)NUM2UINT(_arg1_);
    int size = (int)NUM2INT(_arg2_);
    unsigned int type = (unsigned int)NUM2UINT(_arg3_);
    int stride = (int)NUM2INT(_arg4_);
    unsigned int buffer = (unsigned int)NUM2UINT(_arg5_);
    unsigned int offset = (unsigned int)NUM2UINT(_arg6_);

    rogl_pfn_glArrayObjectATI(array, size, type, stride, buffer, offset);

    return Qnil;
}

static VALUE rogl_glGetArrayObjectfvATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int array = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetArrayObjectfvATI(array, pname, params);

    return Qnil;
}

static VALUE rogl_glGetArrayObjectivATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int array = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetArrayObjectivATI(array, pname, params);

    return Qnil;
}

static VALUE rogl_glVariantArrayObjectATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int id = (unsigned int)NUM2UINT(_arg1_);
    unsigned int type = (unsigned int)NUM2UINT(_arg2_);
    int stride = (int)NUM2INT(_arg3_);
    unsigned int buffer = (unsigned int)NUM2UINT(_arg4_);
    unsigned int offset = (unsigned int)NUM2UINT(_arg5_);

    rogl_pfn_glVariantArrayObjectATI(id, type, stride, buffer, offset);

    return Qnil;
}

static VALUE rogl_glGetVariantArrayObjectfvATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int id = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetVariantArrayObjectfvATI(id, pname, params);

    return Qnil;
}

static VALUE rogl_glGetVariantArrayObjectivATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int id = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetVariantArrayObjectivATI(id, pname, params);

    return Qnil;
}

static VALUE rogl_glVertexAttribArrayObjectATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    int size = (int)NUM2INT(_arg2_);
    unsigned int type = (unsigned int)NUM2UINT(_arg3_);
    unsigned char normalized = (unsigned char)NUM2UINT(_arg4_);
    int stride = (int)NUM2INT(_arg5_);
    unsigned int buffer = (unsigned int)NUM2UINT(_arg6_);
    unsigned int offset = (unsigned int)NUM2UINT(_arg7_);

    rogl_pfn_glVertexAttribArrayObjectATI(index, size, type, normalized, stride, buffer, offset);

    return Qnil;
}

static VALUE rogl_glGetVertexAttribArrayObjectfvATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetVertexAttribArrayObjectfvATI(index, pname, params);

    return Qnil;
}

static VALUE rogl_glGetVertexAttribArrayObjectivATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetVertexAttribArrayObjectivATI(index, pname, params);

    return Qnil;
}

static VALUE rogl_glVertexStream1sATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int stream = (unsigned int)NUM2UINT(_arg1_);
    short x = (short)NUM2INT(_arg2_);

    rogl_pfn_glVertexStream1sATI(stream, x);

    return Qnil;
}

static VALUE rogl_glVertexStream1svATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int stream = (unsigned int)NUM2UINT(_arg1_);
    void* coords = (void*)val2ptr(_arg2_);

    rogl_pfn_glVertexStream1svATI(stream, coords);

    return Qnil;
}

static VALUE rogl_glVertexStream1iATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int stream = (unsigned int)NUM2UINT(_arg1_);
    int x = (int)NUM2INT(_arg2_);

    rogl_pfn_glVertexStream1iATI(stream, x);

    return Qnil;
}

static VALUE rogl_glVertexStream1ivATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int stream = (unsigned int)NUM2UINT(_arg1_);
    void* coords = (void*)val2ptr(_arg2_);

    rogl_pfn_glVertexStream1ivATI(stream, coords);

    return Qnil;
}

static VALUE rogl_glVertexStream1fATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int stream = (unsigned int)NUM2UINT(_arg1_);
    float x = (float)NUM2DBL(_arg2_);

    rogl_pfn_glVertexStream1fATI(stream, x);

    return Qnil;
}

static VALUE rogl_glVertexStream1fvATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int stream = (unsigned int)NUM2UINT(_arg1_);
    void* coords = (void*)val2ptr(_arg2_);

    rogl_pfn_glVertexStream1fvATI(stream, coords);

    return Qnil;
}

static VALUE rogl_glVertexStream1dATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int stream = (unsigned int)NUM2UINT(_arg1_);
    double x = (double)NUM2DBL(_arg2_);

    rogl_pfn_glVertexStream1dATI(stream, x);

    return Qnil;
}

static VALUE rogl_glVertexStream1dvATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int stream = (unsigned int)NUM2UINT(_arg1_);
    void* coords = (void*)val2ptr(_arg2_);

    rogl_pfn_glVertexStream1dvATI(stream, coords);

    return Qnil;
}

static VALUE rogl_glVertexStream2sATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int stream = (unsigned int)NUM2UINT(_arg1_);
    short x = (short)NUM2INT(_arg2_);
    short y = (short)NUM2INT(_arg3_);

    rogl_pfn_glVertexStream2sATI(stream, x, y);

    return Qnil;
}

static VALUE rogl_glVertexStream2svATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int stream = (unsigned int)NUM2UINT(_arg1_);
    void* coords = (void*)val2ptr(_arg2_);

    rogl_pfn_glVertexStream2svATI(stream, coords);

    return Qnil;
}

static VALUE rogl_glVertexStream2iATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int stream = (unsigned int)NUM2UINT(_arg1_);
    int x = (int)NUM2INT(_arg2_);
    int y = (int)NUM2INT(_arg3_);

    rogl_pfn_glVertexStream2iATI(stream, x, y);

    return Qnil;
}

static VALUE rogl_glVertexStream2ivATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int stream = (unsigned int)NUM2UINT(_arg1_);
    void* coords = (void*)val2ptr(_arg2_);

    rogl_pfn_glVertexStream2ivATI(stream, coords);

    return Qnil;
}

static VALUE rogl_glVertexStream2fATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int stream = (unsigned int)NUM2UINT(_arg1_);
    float x = (float)NUM2DBL(_arg2_);
    float y = (float)NUM2DBL(_arg3_);

    rogl_pfn_glVertexStream2fATI(stream, x, y);

    return Qnil;
}

static VALUE rogl_glVertexStream2fvATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int stream = (unsigned int)NUM2UINT(_arg1_);
    void* coords = (void*)val2ptr(_arg2_);

    rogl_pfn_glVertexStream2fvATI(stream, coords);

    return Qnil;
}

static VALUE rogl_glVertexStream2dATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int stream = (unsigned int)NUM2UINT(_arg1_);
    double x = (double)NUM2DBL(_arg2_);
    double y = (double)NUM2DBL(_arg3_);

    rogl_pfn_glVertexStream2dATI(stream, x, y);

    return Qnil;
}

static VALUE rogl_glVertexStream2dvATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int stream = (unsigned int)NUM2UINT(_arg1_);
    void* coords = (void*)val2ptr(_arg2_);

    rogl_pfn_glVertexStream2dvATI(stream, coords);

    return Qnil;
}

static VALUE rogl_glVertexStream3sATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int stream = (unsigned int)NUM2UINT(_arg1_);
    short x = (short)NUM2INT(_arg2_);
    short y = (short)NUM2INT(_arg3_);
    short z = (short)NUM2INT(_arg4_);

    rogl_pfn_glVertexStream3sATI(stream, x, y, z);

    return Qnil;
}

static VALUE rogl_glVertexStream3svATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int stream = (unsigned int)NUM2UINT(_arg1_);
    void* coords = (void*)val2ptr(_arg2_);

    rogl_pfn_glVertexStream3svATI(stream, coords);

    return Qnil;
}

static VALUE rogl_glVertexStream3iATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int stream = (unsigned int)NUM2UINT(_arg1_);
    int x = (int)NUM2INT(_arg2_);
    int y = (int)NUM2INT(_arg3_);
    int z = (int)NUM2INT(_arg4_);

    rogl_pfn_glVertexStream3iATI(stream, x, y, z);

    return Qnil;
}

static VALUE rogl_glVertexStream3ivATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int stream = (unsigned int)NUM2UINT(_arg1_);
    void* coords = (void*)val2ptr(_arg2_);

    rogl_pfn_glVertexStream3ivATI(stream, coords);

    return Qnil;
}

static VALUE rogl_glVertexStream3fATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int stream = (unsigned int)NUM2UINT(_arg1_);
    float x = (float)NUM2DBL(_arg2_);
    float y = (float)NUM2DBL(_arg3_);
    float z = (float)NUM2DBL(_arg4_);

    rogl_pfn_glVertexStream3fATI(stream, x, y, z);

    return Qnil;
}

static VALUE rogl_glVertexStream3fvATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int stream = (unsigned int)NUM2UINT(_arg1_);
    void* coords = (void*)val2ptr(_arg2_);

    rogl_pfn_glVertexStream3fvATI(stream, coords);

    return Qnil;
}

static VALUE rogl_glVertexStream3dATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int stream = (unsigned int)NUM2UINT(_arg1_);
    double x = (double)NUM2DBL(_arg2_);
    double y = (double)NUM2DBL(_arg3_);
    double z = (double)NUM2DBL(_arg4_);

    rogl_pfn_glVertexStream3dATI(stream, x, y, z);

    return Qnil;
}

static VALUE rogl_glVertexStream3dvATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int stream = (unsigned int)NUM2UINT(_arg1_);
    void* coords = (void*)val2ptr(_arg2_);

    rogl_pfn_glVertexStream3dvATI(stream, coords);

    return Qnil;
}

static VALUE rogl_glVertexStream4sATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int stream = (unsigned int)NUM2UINT(_arg1_);
    short x = (short)NUM2INT(_arg2_);
    short y = (short)NUM2INT(_arg3_);
    short z = (short)NUM2INT(_arg4_);
    short w = (short)NUM2INT(_arg5_);

    rogl_pfn_glVertexStream4sATI(stream, x, y, z, w);

    return Qnil;
}

static VALUE rogl_glVertexStream4svATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int stream = (unsigned int)NUM2UINT(_arg1_);
    void* coords = (void*)val2ptr(_arg2_);

    rogl_pfn_glVertexStream4svATI(stream, coords);

    return Qnil;
}

static VALUE rogl_glVertexStream4iATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int stream = (unsigned int)NUM2UINT(_arg1_);
    int x = (int)NUM2INT(_arg2_);
    int y = (int)NUM2INT(_arg3_);
    int z = (int)NUM2INT(_arg4_);
    int w = (int)NUM2INT(_arg5_);

    rogl_pfn_glVertexStream4iATI(stream, x, y, z, w);

    return Qnil;
}

static VALUE rogl_glVertexStream4ivATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int stream = (unsigned int)NUM2UINT(_arg1_);
    void* coords = (void*)val2ptr(_arg2_);

    rogl_pfn_glVertexStream4ivATI(stream, coords);

    return Qnil;
}

static VALUE rogl_glVertexStream4fATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int stream = (unsigned int)NUM2UINT(_arg1_);
    float x = (float)NUM2DBL(_arg2_);
    float y = (float)NUM2DBL(_arg3_);
    float z = (float)NUM2DBL(_arg4_);
    float w = (float)NUM2DBL(_arg5_);

    rogl_pfn_glVertexStream4fATI(stream, x, y, z, w);

    return Qnil;
}

static VALUE rogl_glVertexStream4fvATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int stream = (unsigned int)NUM2UINT(_arg1_);
    void* coords = (void*)val2ptr(_arg2_);

    rogl_pfn_glVertexStream4fvATI(stream, coords);

    return Qnil;
}

static VALUE rogl_glVertexStream4dATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int stream = (unsigned int)NUM2UINT(_arg1_);
    double x = (double)NUM2DBL(_arg2_);
    double y = (double)NUM2DBL(_arg3_);
    double z = (double)NUM2DBL(_arg4_);
    double w = (double)NUM2DBL(_arg5_);

    rogl_pfn_glVertexStream4dATI(stream, x, y, z, w);

    return Qnil;
}

static VALUE rogl_glVertexStream4dvATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int stream = (unsigned int)NUM2UINT(_arg1_);
    void* coords = (void*)val2ptr(_arg2_);

    rogl_pfn_glVertexStream4dvATI(stream, coords);

    return Qnil;
}

static VALUE rogl_glNormalStream3bATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int stream = (unsigned int)NUM2UINT(_arg1_);
    char nx = (char)NUM2INT(_arg2_);
    char ny = (char)NUM2INT(_arg3_);
    char nz = (char)NUM2INT(_arg4_);

    rogl_pfn_glNormalStream3bATI(stream, nx, ny, nz);

    return Qnil;
}

static VALUE rogl_glNormalStream3bvATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int stream = (unsigned int)NUM2UINT(_arg1_);
    void* coords = (void*)val2ptr(_arg2_);

    rogl_pfn_glNormalStream3bvATI(stream, coords);

    return Qnil;
}

static VALUE rogl_glNormalStream3sATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int stream = (unsigned int)NUM2UINT(_arg1_);
    short nx = (short)NUM2INT(_arg2_);
    short ny = (short)NUM2INT(_arg3_);
    short nz = (short)NUM2INT(_arg4_);

    rogl_pfn_glNormalStream3sATI(stream, nx, ny, nz);

    return Qnil;
}

static VALUE rogl_glNormalStream3svATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int stream = (unsigned int)NUM2UINT(_arg1_);
    void* coords = (void*)val2ptr(_arg2_);

    rogl_pfn_glNormalStream3svATI(stream, coords);

    return Qnil;
}

static VALUE rogl_glNormalStream3iATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int stream = (unsigned int)NUM2UINT(_arg1_);
    int nx = (int)NUM2INT(_arg2_);
    int ny = (int)NUM2INT(_arg3_);
    int nz = (int)NUM2INT(_arg4_);

    rogl_pfn_glNormalStream3iATI(stream, nx, ny, nz);

    return Qnil;
}

static VALUE rogl_glNormalStream3ivATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int stream = (unsigned int)NUM2UINT(_arg1_);
    void* coords = (void*)val2ptr(_arg2_);

    rogl_pfn_glNormalStream3ivATI(stream, coords);

    return Qnil;
}

static VALUE rogl_glNormalStream3fATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int stream = (unsigned int)NUM2UINT(_arg1_);
    float nx = (float)NUM2DBL(_arg2_);
    float ny = (float)NUM2DBL(_arg3_);
    float nz = (float)NUM2DBL(_arg4_);

    rogl_pfn_glNormalStream3fATI(stream, nx, ny, nz);

    return Qnil;
}

static VALUE rogl_glNormalStream3fvATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int stream = (unsigned int)NUM2UINT(_arg1_);
    void* coords = (void*)val2ptr(_arg2_);

    rogl_pfn_glNormalStream3fvATI(stream, coords);

    return Qnil;
}

static VALUE rogl_glNormalStream3dATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int stream = (unsigned int)NUM2UINT(_arg1_);
    double nx = (double)NUM2DBL(_arg2_);
    double ny = (double)NUM2DBL(_arg3_);
    double nz = (double)NUM2DBL(_arg4_);

    rogl_pfn_glNormalStream3dATI(stream, nx, ny, nz);

    return Qnil;
}

static VALUE rogl_glNormalStream3dvATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int stream = (unsigned int)NUM2UINT(_arg1_);
    void* coords = (void*)val2ptr(_arg2_);

    rogl_pfn_glNormalStream3dvATI(stream, coords);

    return Qnil;
}

static VALUE rogl_glClientActiveVertexStreamATI(VALUE _obj_, VALUE _arg1_)
{
    unsigned int stream = (unsigned int)NUM2UINT(_arg1_);

    rogl_pfn_glClientActiveVertexStreamATI(stream);

    return Qnil;
}

static VALUE rogl_glVertexBlendEnviATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int pname = (unsigned int)NUM2UINT(_arg1_);
    int param = (int)NUM2INT(_arg2_);

    rogl_pfn_glVertexBlendEnviATI(pname, param);

    return Qnil;
}

static VALUE rogl_glVertexBlendEnvfATI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int pname = (unsigned int)NUM2UINT(_arg1_);
    float param = (float)NUM2DBL(_arg2_);

    rogl_pfn_glVertexBlendEnvfATI(pname, param);

    return Qnil;
}

static VALUE rogl_glUniformBufferEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    int location = (int)NUM2INT(_arg2_);
    unsigned int buffer = (unsigned int)NUM2UINT(_arg3_);

    rogl_pfn_glUniformBufferEXT(program, location, buffer);

    return Qnil;
}

static VALUE rogl_glGetUniformBufferSizeEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    int location = (int)NUM2INT(_arg2_);

    int retval = rogl_pfn_glGetUniformBufferSizeEXT(program, location);

    return INT2NUM(retval);
}

static VALUE rogl_glGetUniformOffsetEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    int location = (int)NUM2INT(_arg2_);

    ptrdiff_t retval = rogl_pfn_glGetUniformOffsetEXT(program, location);

    return (retval);
}

static VALUE rogl_glBlendColorEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    float red = (float)NUM2DBL(_arg1_);
    float green = (float)NUM2DBL(_arg2_);
    float blue = (float)NUM2DBL(_arg3_);
    float alpha = (float)NUM2DBL(_arg4_);

    rogl_pfn_glBlendColorEXT(red, green, blue, alpha);

    return Qnil;
}

static VALUE rogl_glBlendEquationSeparateEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int modeRGB = (unsigned int)NUM2UINT(_arg1_);
    unsigned int modeAlpha = (unsigned int)NUM2UINT(_arg2_);

    rogl_pfn_glBlendEquationSeparateEXT(modeRGB, modeAlpha);

    return Qnil;
}

static VALUE rogl_glBlendFuncSeparateEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int sfactorRGB = (unsigned int)NUM2UINT(_arg1_);
    unsigned int dfactorRGB = (unsigned int)NUM2UINT(_arg2_);
    unsigned int sfactorAlpha = (unsigned int)NUM2UINT(_arg3_);
    unsigned int dfactorAlpha = (unsigned int)NUM2UINT(_arg4_);

    rogl_pfn_glBlendFuncSeparateEXT(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);

    return Qnil;
}

static VALUE rogl_glBlendEquationEXT(VALUE _obj_, VALUE _arg1_)
{
    unsigned int mode = (unsigned int)NUM2UINT(_arg1_);

    rogl_pfn_glBlendEquationEXT(mode);

    return Qnil;
}

static VALUE rogl_glColorSubTableEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    int start = (int)NUM2INT(_arg2_);
    int count = (int)NUM2INT(_arg3_);
    unsigned int format = (unsigned int)NUM2UINT(_arg4_);
    unsigned int type = (unsigned int)NUM2UINT(_arg5_);
    void* data = (void*)val2ptr(_arg6_);

    rogl_pfn_glColorSubTableEXT(target, start, count, format, type, data);

    return Qnil;
}

static VALUE rogl_glCopyColorSubTableEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    int start = (int)NUM2INT(_arg2_);
    int x = (int)NUM2INT(_arg3_);
    int y = (int)NUM2INT(_arg4_);
    int width = (int)NUM2INT(_arg5_);

    rogl_pfn_glCopyColorSubTableEXT(target, start, x, y, width);

    return Qnil;
}

static VALUE rogl_glLockArraysEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int first = (int)NUM2INT(_arg1_);
    int count = (int)NUM2INT(_arg2_);

    rogl_pfn_glLockArraysEXT(first, count);

    return Qnil;
}

static VALUE rogl_glUnlockArraysEXT(VALUE _obj_)
{
    rogl_pfn_glUnlockArraysEXT();

    return Qnil;
}

static VALUE rogl_glConvolutionFilter1DEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int internalformat = (unsigned int)NUM2UINT(_arg2_);
    int width = (int)NUM2INT(_arg3_);
    unsigned int format = (unsigned int)NUM2UINT(_arg4_);
    unsigned int type = (unsigned int)NUM2UINT(_arg5_);
    void* image = (void*)val2ptr(_arg6_);

    rogl_pfn_glConvolutionFilter1DEXT(target, internalformat, width, format, type, image);

    return Qnil;
}

static VALUE rogl_glConvolutionFilter2DEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int internalformat = (unsigned int)NUM2UINT(_arg2_);
    int width = (int)NUM2INT(_arg3_);
    int height = (int)NUM2INT(_arg4_);
    unsigned int format = (unsigned int)NUM2UINT(_arg5_);
    unsigned int type = (unsigned int)NUM2UINT(_arg6_);
    void* image = (void*)val2ptr(_arg7_);

    rogl_pfn_glConvolutionFilter2DEXT(target, internalformat, width, height, format, type, image);

    return Qnil;
}

static VALUE rogl_glConvolutionParameterfEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    float params = (float)NUM2DBL(_arg3_);

    rogl_pfn_glConvolutionParameterfEXT(target, pname, params);

    return Qnil;
}

static VALUE rogl_glConvolutionParameterfvEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glConvolutionParameterfvEXT(target, pname, params);

    return Qnil;
}

static VALUE rogl_glConvolutionParameteriEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    int params = (int)NUM2INT(_arg3_);

    rogl_pfn_glConvolutionParameteriEXT(target, pname, params);

    return Qnil;
}

static VALUE rogl_glConvolutionParameterivEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glConvolutionParameterivEXT(target, pname, params);

    return Qnil;
}

static VALUE rogl_glCopyConvolutionFilter1DEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int internalformat = (unsigned int)NUM2UINT(_arg2_);
    int x = (int)NUM2INT(_arg3_);
    int y = (int)NUM2INT(_arg4_);
    int width = (int)NUM2INT(_arg5_);

    rogl_pfn_glCopyConvolutionFilter1DEXT(target, internalformat, x, y, width);

    return Qnil;
}

static VALUE rogl_glCopyConvolutionFilter2DEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int internalformat = (unsigned int)NUM2UINT(_arg2_);
    int x = (int)NUM2INT(_arg3_);
    int y = (int)NUM2INT(_arg4_);
    int width = (int)NUM2INT(_arg5_);
    int height = (int)NUM2INT(_arg6_);

    rogl_pfn_glCopyConvolutionFilter2DEXT(target, internalformat, x, y, width, height);

    return Qnil;
}

static VALUE rogl_glGetConvolutionFilterEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int format = (unsigned int)NUM2UINT(_arg2_);
    unsigned int type = (unsigned int)NUM2UINT(_arg3_);
    void* image = (void*)val2ptr(_arg4_);

    rogl_pfn_glGetConvolutionFilterEXT(target, format, type, image);

    return Qnil;
}

static VALUE rogl_glGetConvolutionParameterfvEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetConvolutionParameterfvEXT(target, pname, params);

    return Qnil;
}

static VALUE rogl_glGetConvolutionParameterivEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetConvolutionParameterivEXT(target, pname, params);

    return Qnil;
}

static VALUE rogl_glGetSeparableFilterEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int format = (unsigned int)NUM2UINT(_arg2_);
    unsigned int type = (unsigned int)NUM2UINT(_arg3_);
    void* row = (void*)val2ptr(_arg4_);
    void* column = (void*)val2ptr(_arg5_);
    void* span = (void*)val2ptr(_arg6_);

    rogl_pfn_glGetSeparableFilterEXT(target, format, type, row, column, span);

    return Qnil;
}

static VALUE rogl_glSeparableFilter2DEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int internalformat = (unsigned int)NUM2UINT(_arg2_);
    int width = (int)NUM2INT(_arg3_);
    int height = (int)NUM2INT(_arg4_);
    unsigned int format = (unsigned int)NUM2UINT(_arg5_);
    unsigned int type = (unsigned int)NUM2UINT(_arg6_);
    void* row = (void*)val2ptr(_arg7_);
    void* column = (void*)val2ptr(_arg8_);

    rogl_pfn_glSeparableFilter2DEXT(target, internalformat, width, height, format, type, row, column);

    return Qnil;
}

static VALUE rogl_glTangent3bEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    char tx = (char)NUM2INT(_arg1_);
    char ty = (char)NUM2INT(_arg2_);
    char tz = (char)NUM2INT(_arg3_);

    rogl_pfn_glTangent3bEXT(tx, ty, tz);

    return Qnil;
}

static VALUE rogl_glTangent3bvEXT(VALUE _obj_, VALUE _arg1_)
{
    void* v = (void*)val2ptr(_arg1_);

    rogl_pfn_glTangent3bvEXT(v);

    return Qnil;
}

static VALUE rogl_glTangent3dEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    double tx = (double)NUM2DBL(_arg1_);
    double ty = (double)NUM2DBL(_arg2_);
    double tz = (double)NUM2DBL(_arg3_);

    rogl_pfn_glTangent3dEXT(tx, ty, tz);

    return Qnil;
}

static VALUE rogl_glTangent3dvEXT(VALUE _obj_, VALUE _arg1_)
{
    void* v = (void*)val2ptr(_arg1_);

    rogl_pfn_glTangent3dvEXT(v);

    return Qnil;
}

static VALUE rogl_glTangent3fEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    float tx = (float)NUM2DBL(_arg1_);
    float ty = (float)NUM2DBL(_arg2_);
    float tz = (float)NUM2DBL(_arg3_);

    rogl_pfn_glTangent3fEXT(tx, ty, tz);

    return Qnil;
}

static VALUE rogl_glTangent3fvEXT(VALUE _obj_, VALUE _arg1_)
{
    void* v = (void*)val2ptr(_arg1_);

    rogl_pfn_glTangent3fvEXT(v);

    return Qnil;
}

static VALUE rogl_glTangent3iEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    int tx = (int)NUM2INT(_arg1_);
    int ty = (int)NUM2INT(_arg2_);
    int tz = (int)NUM2INT(_arg3_);

    rogl_pfn_glTangent3iEXT(tx, ty, tz);

    return Qnil;
}

static VALUE rogl_glTangent3ivEXT(VALUE _obj_, VALUE _arg1_)
{
    void* v = (void*)val2ptr(_arg1_);

    rogl_pfn_glTangent3ivEXT(v);

    return Qnil;
}

static VALUE rogl_glTangent3sEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    short tx = (short)NUM2INT(_arg1_);
    short ty = (short)NUM2INT(_arg2_);
    short tz = (short)NUM2INT(_arg3_);

    rogl_pfn_glTangent3sEXT(tx, ty, tz);

    return Qnil;
}

static VALUE rogl_glTangent3svEXT(VALUE _obj_, VALUE _arg1_)
{
    void* v = (void*)val2ptr(_arg1_);

    rogl_pfn_glTangent3svEXT(v);

    return Qnil;
}

static VALUE rogl_glBinormal3bEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    char bx = (char)NUM2INT(_arg1_);
    char by = (char)NUM2INT(_arg2_);
    char bz = (char)NUM2INT(_arg3_);

    rogl_pfn_glBinormal3bEXT(bx, by, bz);

    return Qnil;
}

static VALUE rogl_glBinormal3bvEXT(VALUE _obj_, VALUE _arg1_)
{
    void* v = (void*)val2ptr(_arg1_);

    rogl_pfn_glBinormal3bvEXT(v);

    return Qnil;
}

static VALUE rogl_glBinormal3dEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    double bx = (double)NUM2DBL(_arg1_);
    double by = (double)NUM2DBL(_arg2_);
    double bz = (double)NUM2DBL(_arg3_);

    rogl_pfn_glBinormal3dEXT(bx, by, bz);

    return Qnil;
}

static VALUE rogl_glBinormal3dvEXT(VALUE _obj_, VALUE _arg1_)
{
    void* v = (void*)val2ptr(_arg1_);

    rogl_pfn_glBinormal3dvEXT(v);

    return Qnil;
}

static VALUE rogl_glBinormal3fEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    float bx = (float)NUM2DBL(_arg1_);
    float by = (float)NUM2DBL(_arg2_);
    float bz = (float)NUM2DBL(_arg3_);

    rogl_pfn_glBinormal3fEXT(bx, by, bz);

    return Qnil;
}

static VALUE rogl_glBinormal3fvEXT(VALUE _obj_, VALUE _arg1_)
{
    void* v = (void*)val2ptr(_arg1_);

    rogl_pfn_glBinormal3fvEXT(v);

    return Qnil;
}

static VALUE rogl_glBinormal3iEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    int bx = (int)NUM2INT(_arg1_);
    int by = (int)NUM2INT(_arg2_);
    int bz = (int)NUM2INT(_arg3_);

    rogl_pfn_glBinormal3iEXT(bx, by, bz);

    return Qnil;
}

static VALUE rogl_glBinormal3ivEXT(VALUE _obj_, VALUE _arg1_)
{
    void* v = (void*)val2ptr(_arg1_);

    rogl_pfn_glBinormal3ivEXT(v);

    return Qnil;
}

static VALUE rogl_glBinormal3sEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    short bx = (short)NUM2INT(_arg1_);
    short by = (short)NUM2INT(_arg2_);
    short bz = (short)NUM2INT(_arg3_);

    rogl_pfn_glBinormal3sEXT(bx, by, bz);

    return Qnil;
}

static VALUE rogl_glBinormal3svEXT(VALUE _obj_, VALUE _arg1_)
{
    void* v = (void*)val2ptr(_arg1_);

    rogl_pfn_glBinormal3svEXT(v);

    return Qnil;
}

static VALUE rogl_glTangentPointerEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int type = (unsigned int)NUM2UINT(_arg1_);
    int stride = (int)NUM2INT(_arg2_);
    void* pointer = (void*)val2ptr(_arg3_);

    rogl_pfn_glTangentPointerEXT(type, stride, pointer);

    return Qnil;
}

static VALUE rogl_glBinormalPointerEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int type = (unsigned int)NUM2UINT(_arg1_);
    int stride = (int)NUM2INT(_arg2_);
    void* pointer = (void*)val2ptr(_arg3_);

    rogl_pfn_glBinormalPointerEXT(type, stride, pointer);

    return Qnil;
}

static VALUE rogl_glCopyTexImage1DEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    int level = (int)NUM2INT(_arg2_);
    unsigned int internalformat = (unsigned int)NUM2UINT(_arg3_);
    int x = (int)NUM2INT(_arg4_);
    int y = (int)NUM2INT(_arg5_);
    int width = (int)NUM2INT(_arg6_);
    int border = (int)NUM2INT(_arg7_);

    rogl_pfn_glCopyTexImage1DEXT(target, level, internalformat, x, y, width, border);

    return Qnil;
}

static VALUE rogl_glCopyTexImage2DEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    int level = (int)NUM2INT(_arg2_);
    unsigned int internalformat = (unsigned int)NUM2UINT(_arg3_);
    int x = (int)NUM2INT(_arg4_);
    int y = (int)NUM2INT(_arg5_);
    int width = (int)NUM2INT(_arg6_);
    int height = (int)NUM2INT(_arg7_);
    int border = (int)NUM2INT(_arg8_);

    rogl_pfn_glCopyTexImage2DEXT(target, level, internalformat, x, y, width, height, border);

    return Qnil;
}

static VALUE rogl_glCopyTexSubImage1DEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    int level = (int)NUM2INT(_arg2_);
    int xoffset = (int)NUM2INT(_arg3_);
    int x = (int)NUM2INT(_arg4_);
    int y = (int)NUM2INT(_arg5_);
    int width = (int)NUM2INT(_arg6_);

    rogl_pfn_glCopyTexSubImage1DEXT(target, level, xoffset, x, y, width);

    return Qnil;
}

static VALUE rogl_glCopyTexSubImage2DEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    int level = (int)NUM2INT(_arg2_);
    int xoffset = (int)NUM2INT(_arg3_);
    int yoffset = (int)NUM2INT(_arg4_);
    int x = (int)NUM2INT(_arg5_);
    int y = (int)NUM2INT(_arg6_);
    int width = (int)NUM2INT(_arg7_);
    int height = (int)NUM2INT(_arg8_);

    rogl_pfn_glCopyTexSubImage2DEXT(target, level, xoffset, yoffset, x, y, width, height);

    return Qnil;
}

static VALUE rogl_glCopyTexSubImage3DEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_, VALUE _arg9_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    int level = (int)NUM2INT(_arg2_);
    int xoffset = (int)NUM2INT(_arg3_);
    int yoffset = (int)NUM2INT(_arg4_);
    int zoffset = (int)NUM2INT(_arg5_);
    int x = (int)NUM2INT(_arg6_);
    int y = (int)NUM2INT(_arg7_);
    int width = (int)NUM2INT(_arg8_);
    int height = (int)NUM2INT(_arg9_);

    rogl_pfn_glCopyTexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, x, y, width, height);

    return Qnil;
}

static VALUE rogl_glCullParameterdvEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int pname = (unsigned int)NUM2UINT(_arg1_);
    void* params = (void*)val2ptr(_arg2_);

    rogl_pfn_glCullParameterdvEXT(pname, params);

    return Qnil;
}

static VALUE rogl_glCullParameterfvEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int pname = (unsigned int)NUM2UINT(_arg1_);
    void* params = (void*)val2ptr(_arg2_);

    rogl_pfn_glCullParameterfvEXT(pname, params);

    return Qnil;
}

static VALUE rogl_glLabelObjectEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int type = (unsigned int)NUM2UINT(_arg1_);
    unsigned int object = (unsigned int)NUM2UINT(_arg2_);
    int length = (int)NUM2INT(_arg3_);
    void* label = (void*)val2ptr(_arg4_);

    rogl_pfn_glLabelObjectEXT(type, object, length, label);

    return Qnil;
}

static VALUE rogl_glGetObjectLabelEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int type = (unsigned int)NUM2UINT(_arg1_);
    unsigned int object = (unsigned int)NUM2UINT(_arg2_);
    int bufSize = (int)NUM2INT(_arg3_);
    void* length = (void*)val2ptr(_arg4_);
    void* label = (void*)val2ptr(_arg5_);

    rogl_pfn_glGetObjectLabelEXT(type, object, bufSize, length, label);

    return Qnil;
}

static VALUE rogl_glInsertEventMarkerEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int length = (int)NUM2INT(_arg1_);
    void* marker = (void*)val2ptr(_arg2_);

    rogl_pfn_glInsertEventMarkerEXT(length, marker);

    return Qnil;
}

static VALUE rogl_glPushGroupMarkerEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int length = (int)NUM2INT(_arg1_);
    void* marker = (void*)val2ptr(_arg2_);

    rogl_pfn_glPushGroupMarkerEXT(length, marker);

    return Qnil;
}

static VALUE rogl_glPopGroupMarkerEXT(VALUE _obj_)
{
    rogl_pfn_glPopGroupMarkerEXT();

    return Qnil;
}

static VALUE rogl_glDepthBoundsEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    double zmin = (double)NUM2DBL(_arg1_);
    double zmax = (double)NUM2DBL(_arg2_);

    rogl_pfn_glDepthBoundsEXT(zmin, zmax);

    return Qnil;
}

static VALUE rogl_glMatrixLoadfEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int mode = (unsigned int)NUM2UINT(_arg1_);
    void* m = (void*)val2ptr(_arg2_);

    rogl_pfn_glMatrixLoadfEXT(mode, m);

    return Qnil;
}

static VALUE rogl_glMatrixLoaddEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int mode = (unsigned int)NUM2UINT(_arg1_);
    void* m = (void*)val2ptr(_arg2_);

    rogl_pfn_glMatrixLoaddEXT(mode, m);

    return Qnil;
}

static VALUE rogl_glMatrixMultfEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int mode = (unsigned int)NUM2UINT(_arg1_);
    void* m = (void*)val2ptr(_arg2_);

    rogl_pfn_glMatrixMultfEXT(mode, m);

    return Qnil;
}

static VALUE rogl_glMatrixMultdEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int mode = (unsigned int)NUM2UINT(_arg1_);
    void* m = (void*)val2ptr(_arg2_);

    rogl_pfn_glMatrixMultdEXT(mode, m);

    return Qnil;
}

static VALUE rogl_glMatrixLoadIdentityEXT(VALUE _obj_, VALUE _arg1_)
{
    unsigned int mode = (unsigned int)NUM2UINT(_arg1_);

    rogl_pfn_glMatrixLoadIdentityEXT(mode);

    return Qnil;
}

static VALUE rogl_glMatrixRotatefEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int mode = (unsigned int)NUM2UINT(_arg1_);
    float angle = (float)NUM2DBL(_arg2_);
    float x = (float)NUM2DBL(_arg3_);
    float y = (float)NUM2DBL(_arg4_);
    float z = (float)NUM2DBL(_arg5_);

    rogl_pfn_glMatrixRotatefEXT(mode, angle, x, y, z);

    return Qnil;
}

static VALUE rogl_glMatrixRotatedEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int mode = (unsigned int)NUM2UINT(_arg1_);
    double angle = (double)NUM2DBL(_arg2_);
    double x = (double)NUM2DBL(_arg3_);
    double y = (double)NUM2DBL(_arg4_);
    double z = (double)NUM2DBL(_arg5_);

    rogl_pfn_glMatrixRotatedEXT(mode, angle, x, y, z);

    return Qnil;
}

static VALUE rogl_glMatrixScalefEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int mode = (unsigned int)NUM2UINT(_arg1_);
    float x = (float)NUM2DBL(_arg2_);
    float y = (float)NUM2DBL(_arg3_);
    float z = (float)NUM2DBL(_arg4_);

    rogl_pfn_glMatrixScalefEXT(mode, x, y, z);

    return Qnil;
}

static VALUE rogl_glMatrixScaledEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int mode = (unsigned int)NUM2UINT(_arg1_);
    double x = (double)NUM2DBL(_arg2_);
    double y = (double)NUM2DBL(_arg3_);
    double z = (double)NUM2DBL(_arg4_);

    rogl_pfn_glMatrixScaledEXT(mode, x, y, z);

    return Qnil;
}

static VALUE rogl_glMatrixTranslatefEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int mode = (unsigned int)NUM2UINT(_arg1_);
    float x = (float)NUM2DBL(_arg2_);
    float y = (float)NUM2DBL(_arg3_);
    float z = (float)NUM2DBL(_arg4_);

    rogl_pfn_glMatrixTranslatefEXT(mode, x, y, z);

    return Qnil;
}

static VALUE rogl_glMatrixTranslatedEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int mode = (unsigned int)NUM2UINT(_arg1_);
    double x = (double)NUM2DBL(_arg2_);
    double y = (double)NUM2DBL(_arg3_);
    double z = (double)NUM2DBL(_arg4_);

    rogl_pfn_glMatrixTranslatedEXT(mode, x, y, z);

    return Qnil;
}

static VALUE rogl_glMatrixFrustumEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_)
{
    unsigned int mode = (unsigned int)NUM2UINT(_arg1_);
    double left = (double)NUM2DBL(_arg2_);
    double right = (double)NUM2DBL(_arg3_);
    double bottom = (double)NUM2DBL(_arg4_);
    double top = (double)NUM2DBL(_arg5_);
    double zNear = (double)NUM2DBL(_arg6_);
    double zFar = (double)NUM2DBL(_arg7_);

    rogl_pfn_glMatrixFrustumEXT(mode, left, right, bottom, top, zNear, zFar);

    return Qnil;
}

static VALUE rogl_glMatrixOrthoEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_)
{
    unsigned int mode = (unsigned int)NUM2UINT(_arg1_);
    double left = (double)NUM2DBL(_arg2_);
    double right = (double)NUM2DBL(_arg3_);
    double bottom = (double)NUM2DBL(_arg4_);
    double top = (double)NUM2DBL(_arg5_);
    double zNear = (double)NUM2DBL(_arg6_);
    double zFar = (double)NUM2DBL(_arg7_);

    rogl_pfn_glMatrixOrthoEXT(mode, left, right, bottom, top, zNear, zFar);

    return Qnil;
}

static VALUE rogl_glMatrixPopEXT(VALUE _obj_, VALUE _arg1_)
{
    unsigned int mode = (unsigned int)NUM2UINT(_arg1_);

    rogl_pfn_glMatrixPopEXT(mode);

    return Qnil;
}

static VALUE rogl_glMatrixPushEXT(VALUE _obj_, VALUE _arg1_)
{
    unsigned int mode = (unsigned int)NUM2UINT(_arg1_);

    rogl_pfn_glMatrixPushEXT(mode);

    return Qnil;
}

static VALUE rogl_glClientAttribDefaultEXT(VALUE _obj_, VALUE _arg1_)
{
    unsigned int mask = (unsigned int)NUM2UINT(_arg1_);

    rogl_pfn_glClientAttribDefaultEXT(mask);

    return Qnil;
}

static VALUE rogl_glPushClientAttribDefaultEXT(VALUE _obj_, VALUE _arg1_)
{
    unsigned int mask = (unsigned int)NUM2UINT(_arg1_);

    rogl_pfn_glPushClientAttribDefaultEXT(mask);

    return Qnil;
}

static VALUE rogl_glTextureParameterfEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int texture = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg3_);
    float param = (float)NUM2DBL(_arg4_);

    rogl_pfn_glTextureParameterfEXT(texture, target, pname, param);

    return Qnil;
}

static VALUE rogl_glTextureParameterfvEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int texture = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg3_);
    void* params = (void*)val2ptr(_arg4_);

    rogl_pfn_glTextureParameterfvEXT(texture, target, pname, params);

    return Qnil;
}

static VALUE rogl_glTextureParameteriEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int texture = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg3_);
    int param = (int)NUM2INT(_arg4_);

    rogl_pfn_glTextureParameteriEXT(texture, target, pname, param);

    return Qnil;
}

static VALUE rogl_glTextureParameterivEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int texture = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg3_);
    void* params = (void*)val2ptr(_arg4_);

    rogl_pfn_glTextureParameterivEXT(texture, target, pname, params);

    return Qnil;
}

static VALUE rogl_glTextureImage1DEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_, VALUE _arg9_)
{
    unsigned int texture = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    int level = (int)NUM2INT(_arg3_);
    int internalformat = (int)NUM2INT(_arg4_);
    int width = (int)NUM2INT(_arg5_);
    int border = (int)NUM2INT(_arg6_);
    unsigned int format = (unsigned int)NUM2UINT(_arg7_);
    unsigned int type = (unsigned int)NUM2UINT(_arg8_);
    void* pixels = (void*)val2ptr(_arg9_);

    rogl_pfn_glTextureImage1DEXT(texture, target, level, internalformat, width, border, format, type, pixels);

    return Qnil;
}

static VALUE rogl_glTextureImage2DEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_, VALUE _arg9_, VALUE _arg10_)
{
    unsigned int texture = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    int level = (int)NUM2INT(_arg3_);
    int internalformat = (int)NUM2INT(_arg4_);
    int width = (int)NUM2INT(_arg5_);
    int height = (int)NUM2INT(_arg6_);
    int border = (int)NUM2INT(_arg7_);
    unsigned int format = (unsigned int)NUM2UINT(_arg8_);
    unsigned int type = (unsigned int)NUM2UINT(_arg9_);
    void* pixels = (void*)val2ptr(_arg10_);

    rogl_pfn_glTextureImage2DEXT(texture, target, level, internalformat, width, height, border, format, type, pixels);

    return Qnil;
}

static VALUE rogl_glTextureSubImage1DEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_)
{
    unsigned int texture = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    int level = (int)NUM2INT(_arg3_);
    int xoffset = (int)NUM2INT(_arg4_);
    int width = (int)NUM2INT(_arg5_);
    unsigned int format = (unsigned int)NUM2UINT(_arg6_);
    unsigned int type = (unsigned int)NUM2UINT(_arg7_);
    void* pixels = (void*)val2ptr(_arg8_);

    rogl_pfn_glTextureSubImage1DEXT(texture, target, level, xoffset, width, format, type, pixels);

    return Qnil;
}

static VALUE rogl_glTextureSubImage2DEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_, VALUE _arg9_, VALUE _arg10_)
{
    unsigned int texture = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    int level = (int)NUM2INT(_arg3_);
    int xoffset = (int)NUM2INT(_arg4_);
    int yoffset = (int)NUM2INT(_arg5_);
    int width = (int)NUM2INT(_arg6_);
    int height = (int)NUM2INT(_arg7_);
    unsigned int format = (unsigned int)NUM2UINT(_arg8_);
    unsigned int type = (unsigned int)NUM2UINT(_arg9_);
    void* pixels = (void*)val2ptr(_arg10_);

    rogl_pfn_glTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, type, pixels);

    return Qnil;
}

static VALUE rogl_glCopyTextureImage1DEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_)
{
    unsigned int texture = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    int level = (int)NUM2INT(_arg3_);
    unsigned int internalformat = (unsigned int)NUM2UINT(_arg4_);
    int x = (int)NUM2INT(_arg5_);
    int y = (int)NUM2INT(_arg6_);
    int width = (int)NUM2INT(_arg7_);
    int border = (int)NUM2INT(_arg8_);

    rogl_pfn_glCopyTextureImage1DEXT(texture, target, level, internalformat, x, y, width, border);

    return Qnil;
}

static VALUE rogl_glCopyTextureImage2DEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_, VALUE _arg9_)
{
    unsigned int texture = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    int level = (int)NUM2INT(_arg3_);
    unsigned int internalformat = (unsigned int)NUM2UINT(_arg4_);
    int x = (int)NUM2INT(_arg5_);
    int y = (int)NUM2INT(_arg6_);
    int width = (int)NUM2INT(_arg7_);
    int height = (int)NUM2INT(_arg8_);
    int border = (int)NUM2INT(_arg9_);

    rogl_pfn_glCopyTextureImage2DEXT(texture, target, level, internalformat, x, y, width, height, border);

    return Qnil;
}

static VALUE rogl_glCopyTextureSubImage1DEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_)
{
    unsigned int texture = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    int level = (int)NUM2INT(_arg3_);
    int xoffset = (int)NUM2INT(_arg4_);
    int x = (int)NUM2INT(_arg5_);
    int y = (int)NUM2INT(_arg6_);
    int width = (int)NUM2INT(_arg7_);

    rogl_pfn_glCopyTextureSubImage1DEXT(texture, target, level, xoffset, x, y, width);

    return Qnil;
}

static VALUE rogl_glCopyTextureSubImage2DEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_, VALUE _arg9_)
{
    unsigned int texture = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    int level = (int)NUM2INT(_arg3_);
    int xoffset = (int)NUM2INT(_arg4_);
    int yoffset = (int)NUM2INT(_arg5_);
    int x = (int)NUM2INT(_arg6_);
    int y = (int)NUM2INT(_arg7_);
    int width = (int)NUM2INT(_arg8_);
    int height = (int)NUM2INT(_arg9_);

    rogl_pfn_glCopyTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, x, y, width, height);

    return Qnil;
}

static VALUE rogl_glGetTextureImageEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_)
{
    unsigned int texture = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    int level = (int)NUM2INT(_arg3_);
    unsigned int format = (unsigned int)NUM2UINT(_arg4_);
    unsigned int type = (unsigned int)NUM2UINT(_arg5_);
    void* pixels = (void*)val2ptr(_arg6_);

    rogl_pfn_glGetTextureImageEXT(texture, target, level, format, type, pixels);

    return Qnil;
}

static VALUE rogl_glGetTextureParameterfvEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int texture = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg3_);
    void* params = (void*)val2ptr(_arg4_);

    rogl_pfn_glGetTextureParameterfvEXT(texture, target, pname, params);

    return Qnil;
}

static VALUE rogl_glGetTextureParameterivEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int texture = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg3_);
    void* params = (void*)val2ptr(_arg4_);

    rogl_pfn_glGetTextureParameterivEXT(texture, target, pname, params);

    return Qnil;
}

static VALUE rogl_glGetTextureLevelParameterfvEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int texture = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    int level = (int)NUM2INT(_arg3_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg4_);
    void* params = (void*)val2ptr(_arg5_);

    rogl_pfn_glGetTextureLevelParameterfvEXT(texture, target, level, pname, params);

    return Qnil;
}

static VALUE rogl_glGetTextureLevelParameterivEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int texture = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    int level = (int)NUM2INT(_arg3_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg4_);
    void* params = (void*)val2ptr(_arg5_);

    rogl_pfn_glGetTextureLevelParameterivEXT(texture, target, level, pname, params);

    return Qnil;
}

static VALUE rogl_glTextureImage3DEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_, VALUE _arg9_, VALUE _arg10_, VALUE _arg11_)
{
    unsigned int texture = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    int level = (int)NUM2INT(_arg3_);
    int internalformat = (int)NUM2INT(_arg4_);
    int width = (int)NUM2INT(_arg5_);
    int height = (int)NUM2INT(_arg6_);
    int depth = (int)NUM2INT(_arg7_);
    int border = (int)NUM2INT(_arg8_);
    unsigned int format = (unsigned int)NUM2UINT(_arg9_);
    unsigned int type = (unsigned int)NUM2UINT(_arg10_);
    void* pixels = (void*)val2ptr(_arg11_);

    rogl_pfn_glTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, format, type, pixels);

    return Qnil;
}

static VALUE rogl_glTextureSubImage3DEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_, VALUE _arg9_, VALUE _arg10_, VALUE _arg11_, VALUE _arg12_)
{
    unsigned int texture = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    int level = (int)NUM2INT(_arg3_);
    int xoffset = (int)NUM2INT(_arg4_);
    int yoffset = (int)NUM2INT(_arg5_);
    int zoffset = (int)NUM2INT(_arg6_);
    int width = (int)NUM2INT(_arg7_);
    int height = (int)NUM2INT(_arg8_);
    int depth = (int)NUM2INT(_arg9_);
    unsigned int format = (unsigned int)NUM2UINT(_arg10_);
    unsigned int type = (unsigned int)NUM2UINT(_arg11_);
    void* pixels = (void*)val2ptr(_arg12_);

    rogl_pfn_glTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);

    return Qnil;
}

static VALUE rogl_glCopyTextureSubImage3DEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_, VALUE _arg9_, VALUE _arg10_)
{
    unsigned int texture = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    int level = (int)NUM2INT(_arg3_);
    int xoffset = (int)NUM2INT(_arg4_);
    int yoffset = (int)NUM2INT(_arg5_);
    int zoffset = (int)NUM2INT(_arg6_);
    int x = (int)NUM2INT(_arg7_);
    int y = (int)NUM2INT(_arg8_);
    int width = (int)NUM2INT(_arg9_);
    int height = (int)NUM2INT(_arg10_);

    rogl_pfn_glCopyTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, x, y, width, height);

    return Qnil;
}

static VALUE rogl_glBindMultiTextureEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int texunit = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    unsigned int texture = (unsigned int)NUM2UINT(_arg3_);

    rogl_pfn_glBindMultiTextureEXT(texunit, target, texture);

    return Qnil;
}

static VALUE rogl_glMultiTexCoordPointerEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int texunit = (unsigned int)NUM2UINT(_arg1_);
    int size = (int)NUM2INT(_arg2_);
    unsigned int type = (unsigned int)NUM2UINT(_arg3_);
    int stride = (int)NUM2INT(_arg4_);
    void* pointer = (void*)val2ptr(_arg5_);

    rogl_pfn_glMultiTexCoordPointerEXT(texunit, size, type, stride, pointer);

    return Qnil;
}

static VALUE rogl_glMultiTexEnvfEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int texunit = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg3_);
    float param = (float)NUM2DBL(_arg4_);

    rogl_pfn_glMultiTexEnvfEXT(texunit, target, pname, param);

    return Qnil;
}

static VALUE rogl_glMultiTexEnvfvEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int texunit = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg3_);
    void* params = (void*)val2ptr(_arg4_);

    rogl_pfn_glMultiTexEnvfvEXT(texunit, target, pname, params);

    return Qnil;
}

static VALUE rogl_glMultiTexEnviEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int texunit = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg3_);
    int param = (int)NUM2INT(_arg4_);

    rogl_pfn_glMultiTexEnviEXT(texunit, target, pname, param);

    return Qnil;
}

static VALUE rogl_glMultiTexEnvivEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int texunit = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg3_);
    void* params = (void*)val2ptr(_arg4_);

    rogl_pfn_glMultiTexEnvivEXT(texunit, target, pname, params);

    return Qnil;
}

static VALUE rogl_glMultiTexGendEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int texunit = (unsigned int)NUM2UINT(_arg1_);
    unsigned int coord = (unsigned int)NUM2UINT(_arg2_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg3_);
    double param = (double)NUM2DBL(_arg4_);

    rogl_pfn_glMultiTexGendEXT(texunit, coord, pname, param);

    return Qnil;
}

static VALUE rogl_glMultiTexGendvEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int texunit = (unsigned int)NUM2UINT(_arg1_);
    unsigned int coord = (unsigned int)NUM2UINT(_arg2_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg3_);
    void* params = (void*)val2ptr(_arg4_);

    rogl_pfn_glMultiTexGendvEXT(texunit, coord, pname, params);

    return Qnil;
}

static VALUE rogl_glMultiTexGenfEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int texunit = (unsigned int)NUM2UINT(_arg1_);
    unsigned int coord = (unsigned int)NUM2UINT(_arg2_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg3_);
    float param = (float)NUM2DBL(_arg4_);

    rogl_pfn_glMultiTexGenfEXT(texunit, coord, pname, param);

    return Qnil;
}

static VALUE rogl_glMultiTexGenfvEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int texunit = (unsigned int)NUM2UINT(_arg1_);
    unsigned int coord = (unsigned int)NUM2UINT(_arg2_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg3_);
    void* params = (void*)val2ptr(_arg4_);

    rogl_pfn_glMultiTexGenfvEXT(texunit, coord, pname, params);

    return Qnil;
}

static VALUE rogl_glMultiTexGeniEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int texunit = (unsigned int)NUM2UINT(_arg1_);
    unsigned int coord = (unsigned int)NUM2UINT(_arg2_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg3_);
    int param = (int)NUM2INT(_arg4_);

    rogl_pfn_glMultiTexGeniEXT(texunit, coord, pname, param);

    return Qnil;
}

static VALUE rogl_glMultiTexGenivEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int texunit = (unsigned int)NUM2UINT(_arg1_);
    unsigned int coord = (unsigned int)NUM2UINT(_arg2_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg3_);
    void* params = (void*)val2ptr(_arg4_);

    rogl_pfn_glMultiTexGenivEXT(texunit, coord, pname, params);

    return Qnil;
}

static VALUE rogl_glGetMultiTexEnvfvEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int texunit = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg3_);
    void* params = (void*)val2ptr(_arg4_);

    rogl_pfn_glGetMultiTexEnvfvEXT(texunit, target, pname, params);

    return Qnil;
}

static VALUE rogl_glGetMultiTexEnvivEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int texunit = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg3_);
    void* params = (void*)val2ptr(_arg4_);

    rogl_pfn_glGetMultiTexEnvivEXT(texunit, target, pname, params);

    return Qnil;
}

static VALUE rogl_glGetMultiTexGendvEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int texunit = (unsigned int)NUM2UINT(_arg1_);
    unsigned int coord = (unsigned int)NUM2UINT(_arg2_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg3_);
    void* params = (void*)val2ptr(_arg4_);

    rogl_pfn_glGetMultiTexGendvEXT(texunit, coord, pname, params);

    return Qnil;
}

static VALUE rogl_glGetMultiTexGenfvEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int texunit = (unsigned int)NUM2UINT(_arg1_);
    unsigned int coord = (unsigned int)NUM2UINT(_arg2_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg3_);
    void* params = (void*)val2ptr(_arg4_);

    rogl_pfn_glGetMultiTexGenfvEXT(texunit, coord, pname, params);

    return Qnil;
}

static VALUE rogl_glGetMultiTexGenivEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int texunit = (unsigned int)NUM2UINT(_arg1_);
    unsigned int coord = (unsigned int)NUM2UINT(_arg2_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg3_);
    void* params = (void*)val2ptr(_arg4_);

    rogl_pfn_glGetMultiTexGenivEXT(texunit, coord, pname, params);

    return Qnil;
}

static VALUE rogl_glMultiTexParameteriEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int texunit = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg3_);
    int param = (int)NUM2INT(_arg4_);

    rogl_pfn_glMultiTexParameteriEXT(texunit, target, pname, param);

    return Qnil;
}

static VALUE rogl_glMultiTexParameterivEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int texunit = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg3_);
    void* params = (void*)val2ptr(_arg4_);

    rogl_pfn_glMultiTexParameterivEXT(texunit, target, pname, params);

    return Qnil;
}

static VALUE rogl_glMultiTexParameterfEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int texunit = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg3_);
    float param = (float)NUM2DBL(_arg4_);

    rogl_pfn_glMultiTexParameterfEXT(texunit, target, pname, param);

    return Qnil;
}

static VALUE rogl_glMultiTexParameterfvEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int texunit = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg3_);
    void* params = (void*)val2ptr(_arg4_);

    rogl_pfn_glMultiTexParameterfvEXT(texunit, target, pname, params);

    return Qnil;
}

static VALUE rogl_glMultiTexImage1DEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_, VALUE _arg9_)
{
    unsigned int texunit = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    int level = (int)NUM2INT(_arg3_);
    int internalformat = (int)NUM2INT(_arg4_);
    int width = (int)NUM2INT(_arg5_);
    int border = (int)NUM2INT(_arg6_);
    unsigned int format = (unsigned int)NUM2UINT(_arg7_);
    unsigned int type = (unsigned int)NUM2UINT(_arg8_);
    void* pixels = (void*)val2ptr(_arg9_);

    rogl_pfn_glMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, format, type, pixels);

    return Qnil;
}

static VALUE rogl_glMultiTexImage2DEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_, VALUE _arg9_, VALUE _arg10_)
{
    unsigned int texunit = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    int level = (int)NUM2INT(_arg3_);
    int internalformat = (int)NUM2INT(_arg4_);
    int width = (int)NUM2INT(_arg5_);
    int height = (int)NUM2INT(_arg6_);
    int border = (int)NUM2INT(_arg7_);
    unsigned int format = (unsigned int)NUM2UINT(_arg8_);
    unsigned int type = (unsigned int)NUM2UINT(_arg9_);
    void* pixels = (void*)val2ptr(_arg10_);

    rogl_pfn_glMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, format, type, pixels);

    return Qnil;
}

static VALUE rogl_glMultiTexSubImage1DEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_)
{
    unsigned int texunit = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    int level = (int)NUM2INT(_arg3_);
    int xoffset = (int)NUM2INT(_arg4_);
    int width = (int)NUM2INT(_arg5_);
    unsigned int format = (unsigned int)NUM2UINT(_arg6_);
    unsigned int type = (unsigned int)NUM2UINT(_arg7_);
    void* pixels = (void*)val2ptr(_arg8_);

    rogl_pfn_glMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, type, pixels);

    return Qnil;
}

static VALUE rogl_glMultiTexSubImage2DEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_, VALUE _arg9_, VALUE _arg10_)
{
    unsigned int texunit = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    int level = (int)NUM2INT(_arg3_);
    int xoffset = (int)NUM2INT(_arg4_);
    int yoffset = (int)NUM2INT(_arg5_);
    int width = (int)NUM2INT(_arg6_);
    int height = (int)NUM2INT(_arg7_);
    unsigned int format = (unsigned int)NUM2UINT(_arg8_);
    unsigned int type = (unsigned int)NUM2UINT(_arg9_);
    void* pixels = (void*)val2ptr(_arg10_);

    rogl_pfn_glMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, type, pixels);

    return Qnil;
}

static VALUE rogl_glCopyMultiTexImage1DEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_)
{
    unsigned int texunit = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    int level = (int)NUM2INT(_arg3_);
    unsigned int internalformat = (unsigned int)NUM2UINT(_arg4_);
    int x = (int)NUM2INT(_arg5_);
    int y = (int)NUM2INT(_arg6_);
    int width = (int)NUM2INT(_arg7_);
    int border = (int)NUM2INT(_arg8_);

    rogl_pfn_glCopyMultiTexImage1DEXT(texunit, target, level, internalformat, x, y, width, border);

    return Qnil;
}

static VALUE rogl_glCopyMultiTexImage2DEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_, VALUE _arg9_)
{
    unsigned int texunit = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    int level = (int)NUM2INT(_arg3_);
    unsigned int internalformat = (unsigned int)NUM2UINT(_arg4_);
    int x = (int)NUM2INT(_arg5_);
    int y = (int)NUM2INT(_arg6_);
    int width = (int)NUM2INT(_arg7_);
    int height = (int)NUM2INT(_arg8_);
    int border = (int)NUM2INT(_arg9_);

    rogl_pfn_glCopyMultiTexImage2DEXT(texunit, target, level, internalformat, x, y, width, height, border);

    return Qnil;
}

static VALUE rogl_glCopyMultiTexSubImage1DEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_)
{
    unsigned int texunit = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    int level = (int)NUM2INT(_arg3_);
    int xoffset = (int)NUM2INT(_arg4_);
    int x = (int)NUM2INT(_arg5_);
    int y = (int)NUM2INT(_arg6_);
    int width = (int)NUM2INT(_arg7_);

    rogl_pfn_glCopyMultiTexSubImage1DEXT(texunit, target, level, xoffset, x, y, width);

    return Qnil;
}

static VALUE rogl_glCopyMultiTexSubImage2DEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_, VALUE _arg9_)
{
    unsigned int texunit = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    int level = (int)NUM2INT(_arg3_);
    int xoffset = (int)NUM2INT(_arg4_);
    int yoffset = (int)NUM2INT(_arg5_);
    int x = (int)NUM2INT(_arg6_);
    int y = (int)NUM2INT(_arg7_);
    int width = (int)NUM2INT(_arg8_);
    int height = (int)NUM2INT(_arg9_);

    rogl_pfn_glCopyMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, x, y, width, height);

    return Qnil;
}

static VALUE rogl_glGetMultiTexImageEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_)
{
    unsigned int texunit = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    int level = (int)NUM2INT(_arg3_);
    unsigned int format = (unsigned int)NUM2UINT(_arg4_);
    unsigned int type = (unsigned int)NUM2UINT(_arg5_);
    void* pixels = (void*)val2ptr(_arg6_);

    rogl_pfn_glGetMultiTexImageEXT(texunit, target, level, format, type, pixels);

    return Qnil;
}

static VALUE rogl_glGetMultiTexParameterfvEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int texunit = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg3_);
    void* params = (void*)val2ptr(_arg4_);

    rogl_pfn_glGetMultiTexParameterfvEXT(texunit, target, pname, params);

    return Qnil;
}

static VALUE rogl_glGetMultiTexParameterivEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int texunit = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg3_);
    void* params = (void*)val2ptr(_arg4_);

    rogl_pfn_glGetMultiTexParameterivEXT(texunit, target, pname, params);

    return Qnil;
}

static VALUE rogl_glGetMultiTexLevelParameterfvEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int texunit = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    int level = (int)NUM2INT(_arg3_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg4_);
    void* params = (void*)val2ptr(_arg5_);

    rogl_pfn_glGetMultiTexLevelParameterfvEXT(texunit, target, level, pname, params);

    return Qnil;
}

static VALUE rogl_glGetMultiTexLevelParameterivEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int texunit = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    int level = (int)NUM2INT(_arg3_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg4_);
    void* params = (void*)val2ptr(_arg5_);

    rogl_pfn_glGetMultiTexLevelParameterivEXT(texunit, target, level, pname, params);

    return Qnil;
}

static VALUE rogl_glMultiTexImage3DEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_, VALUE _arg9_, VALUE _arg10_, VALUE _arg11_)
{
    unsigned int texunit = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    int level = (int)NUM2INT(_arg3_);
    int internalformat = (int)NUM2INT(_arg4_);
    int width = (int)NUM2INT(_arg5_);
    int height = (int)NUM2INT(_arg6_);
    int depth = (int)NUM2INT(_arg7_);
    int border = (int)NUM2INT(_arg8_);
    unsigned int format = (unsigned int)NUM2UINT(_arg9_);
    unsigned int type = (unsigned int)NUM2UINT(_arg10_);
    void* pixels = (void*)val2ptr(_arg11_);

    rogl_pfn_glMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, format, type, pixels);

    return Qnil;
}

static VALUE rogl_glMultiTexSubImage3DEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_, VALUE _arg9_, VALUE _arg10_, VALUE _arg11_, VALUE _arg12_)
{
    unsigned int texunit = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    int level = (int)NUM2INT(_arg3_);
    int xoffset = (int)NUM2INT(_arg4_);
    int yoffset = (int)NUM2INT(_arg5_);
    int zoffset = (int)NUM2INT(_arg6_);
    int width = (int)NUM2INT(_arg7_);
    int height = (int)NUM2INT(_arg8_);
    int depth = (int)NUM2INT(_arg9_);
    unsigned int format = (unsigned int)NUM2UINT(_arg10_);
    unsigned int type = (unsigned int)NUM2UINT(_arg11_);
    void* pixels = (void*)val2ptr(_arg12_);

    rogl_pfn_glMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);

    return Qnil;
}

static VALUE rogl_glCopyMultiTexSubImage3DEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_, VALUE _arg9_, VALUE _arg10_)
{
    unsigned int texunit = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    int level = (int)NUM2INT(_arg3_);
    int xoffset = (int)NUM2INT(_arg4_);
    int yoffset = (int)NUM2INT(_arg5_);
    int zoffset = (int)NUM2INT(_arg6_);
    int x = (int)NUM2INT(_arg7_);
    int y = (int)NUM2INT(_arg8_);
    int width = (int)NUM2INT(_arg9_);
    int height = (int)NUM2INT(_arg10_);

    rogl_pfn_glCopyMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, x, y, width, height);

    return Qnil;
}

static VALUE rogl_glEnableClientStateIndexedEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int array = (unsigned int)NUM2UINT(_arg1_);
    unsigned int index = (unsigned int)NUM2UINT(_arg2_);

    rogl_pfn_glEnableClientStateIndexedEXT(array, index);

    return Qnil;
}

static VALUE rogl_glDisableClientStateIndexedEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int array = (unsigned int)NUM2UINT(_arg1_);
    unsigned int index = (unsigned int)NUM2UINT(_arg2_);

    rogl_pfn_glDisableClientStateIndexedEXT(array, index);

    return Qnil;
}

static VALUE rogl_glGetFloatIndexedvEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int index = (unsigned int)NUM2UINT(_arg2_);
    void* data = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetFloatIndexedvEXT(target, index, data);

    return Qnil;
}

static VALUE rogl_glGetDoubleIndexedvEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int index = (unsigned int)NUM2UINT(_arg2_);
    void* data = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetDoubleIndexedvEXT(target, index, data);

    return Qnil;
}

static VALUE rogl_glGetPointerIndexedvEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int index = (unsigned int)NUM2UINT(_arg2_);
    void* data = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetPointerIndexedvEXT(target, index, data);

    return Qnil;
}

static VALUE rogl_glCompressedTextureImage3DEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_, VALUE _arg9_, VALUE _arg10_)
{
    unsigned int texture = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    int level = (int)NUM2INT(_arg3_);
    unsigned int internalformat = (unsigned int)NUM2UINT(_arg4_);
    int width = (int)NUM2INT(_arg5_);
    int height = (int)NUM2INT(_arg6_);
    int depth = (int)NUM2INT(_arg7_);
    int border = (int)NUM2INT(_arg8_);
    int imageSize = (int)NUM2INT(_arg9_);
    void* bits = (void*)val2ptr(_arg10_);

    rogl_pfn_glCompressedTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, imageSize, bits);

    return Qnil;
}

static VALUE rogl_glCompressedTextureImage2DEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_, VALUE _arg9_)
{
    unsigned int texture = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    int level = (int)NUM2INT(_arg3_);
    unsigned int internalformat = (unsigned int)NUM2UINT(_arg4_);
    int width = (int)NUM2INT(_arg5_);
    int height = (int)NUM2INT(_arg6_);
    int border = (int)NUM2INT(_arg7_);
    int imageSize = (int)NUM2INT(_arg8_);
    void* bits = (void*)val2ptr(_arg9_);

    rogl_pfn_glCompressedTextureImage2DEXT(texture, target, level, internalformat, width, height, border, imageSize, bits);

    return Qnil;
}

static VALUE rogl_glCompressedTextureImage1DEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_)
{
    unsigned int texture = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    int level = (int)NUM2INT(_arg3_);
    unsigned int internalformat = (unsigned int)NUM2UINT(_arg4_);
    int width = (int)NUM2INT(_arg5_);
    int border = (int)NUM2INT(_arg6_);
    int imageSize = (int)NUM2INT(_arg7_);
    void* bits = (void*)val2ptr(_arg8_);

    rogl_pfn_glCompressedTextureImage1DEXT(texture, target, level, internalformat, width, border, imageSize, bits);

    return Qnil;
}

static VALUE rogl_glCompressedTextureSubImage3DEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_, VALUE _arg9_, VALUE _arg10_, VALUE _arg11_, VALUE _arg12_)
{
    unsigned int texture = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    int level = (int)NUM2INT(_arg3_);
    int xoffset = (int)NUM2INT(_arg4_);
    int yoffset = (int)NUM2INT(_arg5_);
    int zoffset = (int)NUM2INT(_arg6_);
    int width = (int)NUM2INT(_arg7_);
    int height = (int)NUM2INT(_arg8_);
    int depth = (int)NUM2INT(_arg9_);
    unsigned int format = (unsigned int)NUM2UINT(_arg10_);
    int imageSize = (int)NUM2INT(_arg11_);
    void* bits = (void*)val2ptr(_arg12_);

    rogl_pfn_glCompressedTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits);

    return Qnil;
}

static VALUE rogl_glCompressedTextureSubImage2DEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_, VALUE _arg9_, VALUE _arg10_)
{
    unsigned int texture = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    int level = (int)NUM2INT(_arg3_);
    int xoffset = (int)NUM2INT(_arg4_);
    int yoffset = (int)NUM2INT(_arg5_);
    int width = (int)NUM2INT(_arg6_);
    int height = (int)NUM2INT(_arg7_);
    unsigned int format = (unsigned int)NUM2UINT(_arg8_);
    int imageSize = (int)NUM2INT(_arg9_);
    void* bits = (void*)val2ptr(_arg10_);

    rogl_pfn_glCompressedTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits);

    return Qnil;
}

static VALUE rogl_glCompressedTextureSubImage1DEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_)
{
    unsigned int texture = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    int level = (int)NUM2INT(_arg3_);
    int xoffset = (int)NUM2INT(_arg4_);
    int width = (int)NUM2INT(_arg5_);
    unsigned int format = (unsigned int)NUM2UINT(_arg6_);
    int imageSize = (int)NUM2INT(_arg7_);
    void* bits = (void*)val2ptr(_arg8_);

    rogl_pfn_glCompressedTextureSubImage1DEXT(texture, target, level, xoffset, width, format, imageSize, bits);

    return Qnil;
}

static VALUE rogl_glGetCompressedTextureImageEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int texture = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    int lod = (int)NUM2INT(_arg3_);
    void* img = (void*)val2ptr(_arg4_);

    rogl_pfn_glGetCompressedTextureImageEXT(texture, target, lod, img);

    return Qnil;
}

static VALUE rogl_glCompressedMultiTexImage3DEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_, VALUE _arg9_, VALUE _arg10_)
{
    unsigned int texunit = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    int level = (int)NUM2INT(_arg3_);
    unsigned int internalformat = (unsigned int)NUM2UINT(_arg4_);
    int width = (int)NUM2INT(_arg5_);
    int height = (int)NUM2INT(_arg6_);
    int depth = (int)NUM2INT(_arg7_);
    int border = (int)NUM2INT(_arg8_);
    int imageSize = (int)NUM2INT(_arg9_);
    void* bits = (void*)val2ptr(_arg10_);

    rogl_pfn_glCompressedMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, imageSize, bits);

    return Qnil;
}

static VALUE rogl_glCompressedMultiTexImage2DEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_, VALUE _arg9_)
{
    unsigned int texunit = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    int level = (int)NUM2INT(_arg3_);
    unsigned int internalformat = (unsigned int)NUM2UINT(_arg4_);
    int width = (int)NUM2INT(_arg5_);
    int height = (int)NUM2INT(_arg6_);
    int border = (int)NUM2INT(_arg7_);
    int imageSize = (int)NUM2INT(_arg8_);
    void* bits = (void*)val2ptr(_arg9_);

    rogl_pfn_glCompressedMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, imageSize, bits);

    return Qnil;
}

static VALUE rogl_glCompressedMultiTexImage1DEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_)
{
    unsigned int texunit = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    int level = (int)NUM2INT(_arg3_);
    unsigned int internalformat = (unsigned int)NUM2UINT(_arg4_);
    int width = (int)NUM2INT(_arg5_);
    int border = (int)NUM2INT(_arg6_);
    int imageSize = (int)NUM2INT(_arg7_);
    void* bits = (void*)val2ptr(_arg8_);

    rogl_pfn_glCompressedMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, imageSize, bits);

    return Qnil;
}

static VALUE rogl_glCompressedMultiTexSubImage3DEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_, VALUE _arg9_, VALUE _arg10_, VALUE _arg11_, VALUE _arg12_)
{
    unsigned int texunit = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    int level = (int)NUM2INT(_arg3_);
    int xoffset = (int)NUM2INT(_arg4_);
    int yoffset = (int)NUM2INT(_arg5_);
    int zoffset = (int)NUM2INT(_arg6_);
    int width = (int)NUM2INT(_arg7_);
    int height = (int)NUM2INT(_arg8_);
    int depth = (int)NUM2INT(_arg9_);
    unsigned int format = (unsigned int)NUM2UINT(_arg10_);
    int imageSize = (int)NUM2INT(_arg11_);
    void* bits = (void*)val2ptr(_arg12_);

    rogl_pfn_glCompressedMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits);

    return Qnil;
}

static VALUE rogl_glCompressedMultiTexSubImage2DEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_, VALUE _arg9_, VALUE _arg10_)
{
    unsigned int texunit = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    int level = (int)NUM2INT(_arg3_);
    int xoffset = (int)NUM2INT(_arg4_);
    int yoffset = (int)NUM2INT(_arg5_);
    int width = (int)NUM2INT(_arg6_);
    int height = (int)NUM2INT(_arg7_);
    unsigned int format = (unsigned int)NUM2UINT(_arg8_);
    int imageSize = (int)NUM2INT(_arg9_);
    void* bits = (void*)val2ptr(_arg10_);

    rogl_pfn_glCompressedMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, bits);

    return Qnil;
}

static VALUE rogl_glCompressedMultiTexSubImage1DEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_)
{
    unsigned int texunit = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    int level = (int)NUM2INT(_arg3_);
    int xoffset = (int)NUM2INT(_arg4_);
    int width = (int)NUM2INT(_arg5_);
    unsigned int format = (unsigned int)NUM2UINT(_arg6_);
    int imageSize = (int)NUM2INT(_arg7_);
    void* bits = (void*)val2ptr(_arg8_);

    rogl_pfn_glCompressedMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, imageSize, bits);

    return Qnil;
}

static VALUE rogl_glGetCompressedMultiTexImageEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int texunit = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    int lod = (int)NUM2INT(_arg3_);
    void* img = (void*)val2ptr(_arg4_);

    rogl_pfn_glGetCompressedMultiTexImageEXT(texunit, target, lod, img);

    return Qnil;
}

static VALUE rogl_glMatrixLoadTransposefEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int mode = (unsigned int)NUM2UINT(_arg1_);
    void* m = (void*)val2ptr(_arg2_);

    rogl_pfn_glMatrixLoadTransposefEXT(mode, m);

    return Qnil;
}

static VALUE rogl_glMatrixLoadTransposedEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int mode = (unsigned int)NUM2UINT(_arg1_);
    void* m = (void*)val2ptr(_arg2_);

    rogl_pfn_glMatrixLoadTransposedEXT(mode, m);

    return Qnil;
}

static VALUE rogl_glMatrixMultTransposefEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int mode = (unsigned int)NUM2UINT(_arg1_);
    void* m = (void*)val2ptr(_arg2_);

    rogl_pfn_glMatrixMultTransposefEXT(mode, m);

    return Qnil;
}

static VALUE rogl_glMatrixMultTransposedEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int mode = (unsigned int)NUM2UINT(_arg1_);
    void* m = (void*)val2ptr(_arg2_);

    rogl_pfn_glMatrixMultTransposedEXT(mode, m);

    return Qnil;
}

static VALUE rogl_glNamedBufferDataEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int buffer = (unsigned int)NUM2UINT(_arg1_);
    ptrdiff_t size = (ptrdiff_t)(_arg2_);
    void* data = (void*)val2ptr(_arg3_);
    unsigned int usage = (unsigned int)NUM2UINT(_arg4_);

    rogl_pfn_glNamedBufferDataEXT(buffer, size, data, usage);

    return Qnil;
}

static VALUE rogl_glNamedBufferSubDataEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int buffer = (unsigned int)NUM2UINT(_arg1_);
    ptrdiff_t offset = (ptrdiff_t)(_arg2_);
    ptrdiff_t size = (ptrdiff_t)(_arg3_);
    void* data = (void*)val2ptr(_arg4_);

    rogl_pfn_glNamedBufferSubDataEXT(buffer, offset, size, data);

    return Qnil;
}

static VALUE rogl_glMapNamedBufferEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int buffer = (unsigned int)NUM2UINT(_arg1_);
    unsigned int access = (unsigned int)NUM2UINT(_arg2_);

    void* retval = rogl_pfn_glMapNamedBufferEXT(buffer, access);

    return CPOINTER_AS_VALUE(retval);
}

static VALUE rogl_glUnmapNamedBufferEXT(VALUE _obj_, VALUE _arg1_)
{
    unsigned int buffer = (unsigned int)NUM2UINT(_arg1_);

    unsigned char retval = rogl_pfn_glUnmapNamedBufferEXT(buffer);

    return UINT2NUM(retval);
}

static VALUE rogl_glGetNamedBufferParameterivEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int buffer = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetNamedBufferParameterivEXT(buffer, pname, params);

    return Qnil;
}

static VALUE rogl_glGetNamedBufferPointervEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int buffer = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetNamedBufferPointervEXT(buffer, pname, params);

    return Qnil;
}

static VALUE rogl_glGetNamedBufferSubDataEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int buffer = (unsigned int)NUM2UINT(_arg1_);
    ptrdiff_t offset = (ptrdiff_t)(_arg2_);
    ptrdiff_t size = (ptrdiff_t)(_arg3_);
    void* data = (void*)val2ptr(_arg4_);

    rogl_pfn_glGetNamedBufferSubDataEXT(buffer, offset, size, data);

    return Qnil;
}

static VALUE rogl_glTextureBufferEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int texture = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    unsigned int internalformat = (unsigned int)NUM2UINT(_arg3_);
    unsigned int buffer = (unsigned int)NUM2UINT(_arg4_);

    rogl_pfn_glTextureBufferEXT(texture, target, internalformat, buffer);

    return Qnil;
}

static VALUE rogl_glMultiTexBufferEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int texunit = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    unsigned int internalformat = (unsigned int)NUM2UINT(_arg3_);
    unsigned int buffer = (unsigned int)NUM2UINT(_arg4_);

    rogl_pfn_glMultiTexBufferEXT(texunit, target, internalformat, buffer);

    return Qnil;
}

static VALUE rogl_glTextureParameterIivEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int texture = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg3_);
    void* params = (void*)val2ptr(_arg4_);

    rogl_pfn_glTextureParameterIivEXT(texture, target, pname, params);

    return Qnil;
}

static VALUE rogl_glTextureParameterIuivEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int texture = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg3_);
    void* params = (void*)val2ptr(_arg4_);

    rogl_pfn_glTextureParameterIuivEXT(texture, target, pname, params);

    return Qnil;
}

static VALUE rogl_glGetTextureParameterIivEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int texture = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg3_);
    void* params = (void*)val2ptr(_arg4_);

    rogl_pfn_glGetTextureParameterIivEXT(texture, target, pname, params);

    return Qnil;
}

static VALUE rogl_glGetTextureParameterIuivEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int texture = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg3_);
    void* params = (void*)val2ptr(_arg4_);

    rogl_pfn_glGetTextureParameterIuivEXT(texture, target, pname, params);

    return Qnil;
}

static VALUE rogl_glMultiTexParameterIivEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int texunit = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg3_);
    void* params = (void*)val2ptr(_arg4_);

    rogl_pfn_glMultiTexParameterIivEXT(texunit, target, pname, params);

    return Qnil;
}

static VALUE rogl_glMultiTexParameterIuivEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int texunit = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg3_);
    void* params = (void*)val2ptr(_arg4_);

    rogl_pfn_glMultiTexParameterIuivEXT(texunit, target, pname, params);

    return Qnil;
}

static VALUE rogl_glGetMultiTexParameterIivEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int texunit = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg3_);
    void* params = (void*)val2ptr(_arg4_);

    rogl_pfn_glGetMultiTexParameterIivEXT(texunit, target, pname, params);

    return Qnil;
}

static VALUE rogl_glGetMultiTexParameterIuivEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int texunit = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg3_);
    void* params = (void*)val2ptr(_arg4_);

    rogl_pfn_glGetMultiTexParameterIuivEXT(texunit, target, pname, params);

    return Qnil;
}

static VALUE rogl_glNamedProgramLocalParameters4fvEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    unsigned int index = (unsigned int)NUM2UINT(_arg3_);
    int count = (int)NUM2INT(_arg4_);
    void* params = (void*)val2ptr(_arg5_);

    rogl_pfn_glNamedProgramLocalParameters4fvEXT(program, target, index, count, params);

    return Qnil;
}

static VALUE rogl_glNamedProgramLocalParameterI4iEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    unsigned int index = (unsigned int)NUM2UINT(_arg3_);
    int x = (int)NUM2INT(_arg4_);
    int y = (int)NUM2INT(_arg5_);
    int z = (int)NUM2INT(_arg6_);
    int w = (int)NUM2INT(_arg7_);

    rogl_pfn_glNamedProgramLocalParameterI4iEXT(program, target, index, x, y, z, w);

    return Qnil;
}

static VALUE rogl_glNamedProgramLocalParameterI4ivEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    unsigned int index = (unsigned int)NUM2UINT(_arg3_);
    void* params = (void*)val2ptr(_arg4_);

    rogl_pfn_glNamedProgramLocalParameterI4ivEXT(program, target, index, params);

    return Qnil;
}

static VALUE rogl_glNamedProgramLocalParametersI4ivEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    unsigned int index = (unsigned int)NUM2UINT(_arg3_);
    int count = (int)NUM2INT(_arg4_);
    void* params = (void*)val2ptr(_arg5_);

    rogl_pfn_glNamedProgramLocalParametersI4ivEXT(program, target, index, count, params);

    return Qnil;
}

static VALUE rogl_glNamedProgramLocalParameterI4uiEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    unsigned int index = (unsigned int)NUM2UINT(_arg3_);
    unsigned int x = (unsigned int)NUM2UINT(_arg4_);
    unsigned int y = (unsigned int)NUM2UINT(_arg5_);
    unsigned int z = (unsigned int)NUM2UINT(_arg6_);
    unsigned int w = (unsigned int)NUM2UINT(_arg7_);

    rogl_pfn_glNamedProgramLocalParameterI4uiEXT(program, target, index, x, y, z, w);

    return Qnil;
}

static VALUE rogl_glNamedProgramLocalParameterI4uivEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    unsigned int index = (unsigned int)NUM2UINT(_arg3_);
    void* params = (void*)val2ptr(_arg4_);

    rogl_pfn_glNamedProgramLocalParameterI4uivEXT(program, target, index, params);

    return Qnil;
}

static VALUE rogl_glNamedProgramLocalParametersI4uivEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    unsigned int index = (unsigned int)NUM2UINT(_arg3_);
    int count = (int)NUM2INT(_arg4_);
    void* params = (void*)val2ptr(_arg5_);

    rogl_pfn_glNamedProgramLocalParametersI4uivEXT(program, target, index, count, params);

    return Qnil;
}

static VALUE rogl_glGetNamedProgramLocalParameterIivEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    unsigned int index = (unsigned int)NUM2UINT(_arg3_);
    void* params = (void*)val2ptr(_arg4_);

    rogl_pfn_glGetNamedProgramLocalParameterIivEXT(program, target, index, params);

    return Qnil;
}

static VALUE rogl_glGetNamedProgramLocalParameterIuivEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    unsigned int index = (unsigned int)NUM2UINT(_arg3_);
    void* params = (void*)val2ptr(_arg4_);

    rogl_pfn_glGetNamedProgramLocalParameterIuivEXT(program, target, index, params);

    return Qnil;
}

static VALUE rogl_glEnableClientStateiEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int array = (unsigned int)NUM2UINT(_arg1_);
    unsigned int index = (unsigned int)NUM2UINT(_arg2_);

    rogl_pfn_glEnableClientStateiEXT(array, index);

    return Qnil;
}

static VALUE rogl_glDisableClientStateiEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int array = (unsigned int)NUM2UINT(_arg1_);
    unsigned int index = (unsigned int)NUM2UINT(_arg2_);

    rogl_pfn_glDisableClientStateiEXT(array, index);

    return Qnil;
}

static VALUE rogl_glGetFloati_vEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int pname = (unsigned int)NUM2UINT(_arg1_);
    unsigned int index = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetFloati_vEXT(pname, index, params);

    return Qnil;
}

static VALUE rogl_glGetDoublei_vEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int pname = (unsigned int)NUM2UINT(_arg1_);
    unsigned int index = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetDoublei_vEXT(pname, index, params);

    return Qnil;
}

static VALUE rogl_glGetPointeri_vEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int pname = (unsigned int)NUM2UINT(_arg1_);
    unsigned int index = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetPointeri_vEXT(pname, index, params);

    return Qnil;
}

static VALUE rogl_glNamedProgramStringEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    unsigned int format = (unsigned int)NUM2UINT(_arg3_);
    int len = (int)NUM2INT(_arg4_);
    void* string = (void*)val2ptr(_arg5_);

    rogl_pfn_glNamedProgramStringEXT(program, target, format, len, string);

    return Qnil;
}

static VALUE rogl_glNamedProgramLocalParameter4dEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    unsigned int index = (unsigned int)NUM2UINT(_arg3_);
    double x = (double)NUM2DBL(_arg4_);
    double y = (double)NUM2DBL(_arg5_);
    double z = (double)NUM2DBL(_arg6_);
    double w = (double)NUM2DBL(_arg7_);

    rogl_pfn_glNamedProgramLocalParameter4dEXT(program, target, index, x, y, z, w);

    return Qnil;
}

static VALUE rogl_glNamedProgramLocalParameter4dvEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    unsigned int index = (unsigned int)NUM2UINT(_arg3_);
    void* params = (void*)val2ptr(_arg4_);

    rogl_pfn_glNamedProgramLocalParameter4dvEXT(program, target, index, params);

    return Qnil;
}

static VALUE rogl_glNamedProgramLocalParameter4fEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    unsigned int index = (unsigned int)NUM2UINT(_arg3_);
    float x = (float)NUM2DBL(_arg4_);
    float y = (float)NUM2DBL(_arg5_);
    float z = (float)NUM2DBL(_arg6_);
    float w = (float)NUM2DBL(_arg7_);

    rogl_pfn_glNamedProgramLocalParameter4fEXT(program, target, index, x, y, z, w);

    return Qnil;
}

static VALUE rogl_glNamedProgramLocalParameter4fvEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    unsigned int index = (unsigned int)NUM2UINT(_arg3_);
    void* params = (void*)val2ptr(_arg4_);

    rogl_pfn_glNamedProgramLocalParameter4fvEXT(program, target, index, params);

    return Qnil;
}

static VALUE rogl_glGetNamedProgramLocalParameterdvEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    unsigned int index = (unsigned int)NUM2UINT(_arg3_);
    void* params = (void*)val2ptr(_arg4_);

    rogl_pfn_glGetNamedProgramLocalParameterdvEXT(program, target, index, params);

    return Qnil;
}

static VALUE rogl_glGetNamedProgramLocalParameterfvEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    unsigned int index = (unsigned int)NUM2UINT(_arg3_);
    void* params = (void*)val2ptr(_arg4_);

    rogl_pfn_glGetNamedProgramLocalParameterfvEXT(program, target, index, params);

    return Qnil;
}

static VALUE rogl_glGetNamedProgramivEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg3_);
    void* params = (void*)val2ptr(_arg4_);

    rogl_pfn_glGetNamedProgramivEXT(program, target, pname, params);

    return Qnil;
}

static VALUE rogl_glGetNamedProgramStringEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg3_);
    void* string = (void*)val2ptr(_arg4_);

    rogl_pfn_glGetNamedProgramStringEXT(program, target, pname, string);

    return Qnil;
}

static VALUE rogl_glNamedRenderbufferStorageEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int renderbuffer = (unsigned int)NUM2UINT(_arg1_);
    unsigned int internalformat = (unsigned int)NUM2UINT(_arg2_);
    int width = (int)NUM2INT(_arg3_);
    int height = (int)NUM2INT(_arg4_);

    rogl_pfn_glNamedRenderbufferStorageEXT(renderbuffer, internalformat, width, height);

    return Qnil;
}

static VALUE rogl_glGetNamedRenderbufferParameterivEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int renderbuffer = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetNamedRenderbufferParameterivEXT(renderbuffer, pname, params);

    return Qnil;
}

static VALUE rogl_glNamedRenderbufferStorageMultisampleEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int renderbuffer = (unsigned int)NUM2UINT(_arg1_);
    int samples = (int)NUM2INT(_arg2_);
    unsigned int internalformat = (unsigned int)NUM2UINT(_arg3_);
    int width = (int)NUM2INT(_arg4_);
    int height = (int)NUM2INT(_arg5_);

    rogl_pfn_glNamedRenderbufferStorageMultisampleEXT(renderbuffer, samples, internalformat, width, height);

    return Qnil;
}

static VALUE rogl_glNamedRenderbufferStorageMultisampleCoverageEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_)
{
    unsigned int renderbuffer = (unsigned int)NUM2UINT(_arg1_);
    int coverageSamples = (int)NUM2INT(_arg2_);
    int colorSamples = (int)NUM2INT(_arg3_);
    unsigned int internalformat = (unsigned int)NUM2UINT(_arg4_);
    int width = (int)NUM2INT(_arg5_);
    int height = (int)NUM2INT(_arg6_);

    rogl_pfn_glNamedRenderbufferStorageMultisampleCoverageEXT(renderbuffer, coverageSamples, colorSamples, internalformat, width, height);

    return Qnil;
}

static VALUE rogl_glCheckNamedFramebufferStatusEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int framebuffer = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);

    unsigned int retval = rogl_pfn_glCheckNamedFramebufferStatusEXT(framebuffer, target);

    return UINT2NUM(retval);
}

static VALUE rogl_glNamedFramebufferTexture1DEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int framebuffer = (unsigned int)NUM2UINT(_arg1_);
    unsigned int attachment = (unsigned int)NUM2UINT(_arg2_);
    unsigned int textarget = (unsigned int)NUM2UINT(_arg3_);
    unsigned int texture = (unsigned int)NUM2UINT(_arg4_);
    int level = (int)NUM2INT(_arg5_);

    rogl_pfn_glNamedFramebufferTexture1DEXT(framebuffer, attachment, textarget, texture, level);

    return Qnil;
}

static VALUE rogl_glNamedFramebufferTexture2DEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int framebuffer = (unsigned int)NUM2UINT(_arg1_);
    unsigned int attachment = (unsigned int)NUM2UINT(_arg2_);
    unsigned int textarget = (unsigned int)NUM2UINT(_arg3_);
    unsigned int texture = (unsigned int)NUM2UINT(_arg4_);
    int level = (int)NUM2INT(_arg5_);

    rogl_pfn_glNamedFramebufferTexture2DEXT(framebuffer, attachment, textarget, texture, level);

    return Qnil;
}

static VALUE rogl_glNamedFramebufferTexture3DEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_)
{
    unsigned int framebuffer = (unsigned int)NUM2UINT(_arg1_);
    unsigned int attachment = (unsigned int)NUM2UINT(_arg2_);
    unsigned int textarget = (unsigned int)NUM2UINT(_arg3_);
    unsigned int texture = (unsigned int)NUM2UINT(_arg4_);
    int level = (int)NUM2INT(_arg5_);
    int zoffset = (int)NUM2INT(_arg6_);

    rogl_pfn_glNamedFramebufferTexture3DEXT(framebuffer, attachment, textarget, texture, level, zoffset);

    return Qnil;
}

static VALUE rogl_glNamedFramebufferRenderbufferEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int framebuffer = (unsigned int)NUM2UINT(_arg1_);
    unsigned int attachment = (unsigned int)NUM2UINT(_arg2_);
    unsigned int renderbuffertarget = (unsigned int)NUM2UINT(_arg3_);
    unsigned int renderbuffer = (unsigned int)NUM2UINT(_arg4_);

    rogl_pfn_glNamedFramebufferRenderbufferEXT(framebuffer, attachment, renderbuffertarget, renderbuffer);

    return Qnil;
}

static VALUE rogl_glGetNamedFramebufferAttachmentParameterivEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int framebuffer = (unsigned int)NUM2UINT(_arg1_);
    unsigned int attachment = (unsigned int)NUM2UINT(_arg2_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg3_);
    void* params = (void*)val2ptr(_arg4_);

    rogl_pfn_glGetNamedFramebufferAttachmentParameterivEXT(framebuffer, attachment, pname, params);

    return Qnil;
}

static VALUE rogl_glGenerateTextureMipmapEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int texture = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);

    rogl_pfn_glGenerateTextureMipmapEXT(texture, target);

    return Qnil;
}

static VALUE rogl_glGenerateMultiTexMipmapEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int texunit = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);

    rogl_pfn_glGenerateMultiTexMipmapEXT(texunit, target);

    return Qnil;
}

static VALUE rogl_glFramebufferDrawBufferEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int framebuffer = (unsigned int)NUM2UINT(_arg1_);
    unsigned int mode = (unsigned int)NUM2UINT(_arg2_);

    rogl_pfn_glFramebufferDrawBufferEXT(framebuffer, mode);

    return Qnil;
}

static VALUE rogl_glFramebufferDrawBuffersEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int framebuffer = (unsigned int)NUM2UINT(_arg1_);
    int n = (int)NUM2INT(_arg2_);
    void* bufs = (void*)val2ptr(_arg3_);

    rogl_pfn_glFramebufferDrawBuffersEXT(framebuffer, n, bufs);

    return Qnil;
}

static VALUE rogl_glFramebufferReadBufferEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int framebuffer = (unsigned int)NUM2UINT(_arg1_);
    unsigned int mode = (unsigned int)NUM2UINT(_arg2_);

    rogl_pfn_glFramebufferReadBufferEXT(framebuffer, mode);

    return Qnil;
}

static VALUE rogl_glGetFramebufferParameterivEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int framebuffer = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetFramebufferParameterivEXT(framebuffer, pname, params);

    return Qnil;
}

static VALUE rogl_glNamedCopyBufferSubDataEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int readBuffer = (unsigned int)NUM2UINT(_arg1_);
    unsigned int writeBuffer = (unsigned int)NUM2UINT(_arg2_);
    ptrdiff_t readOffset = (ptrdiff_t)(_arg3_);
    ptrdiff_t writeOffset = (ptrdiff_t)(_arg4_);
    ptrdiff_t size = (ptrdiff_t)(_arg5_);

    rogl_pfn_glNamedCopyBufferSubDataEXT(readBuffer, writeBuffer, readOffset, writeOffset, size);

    return Qnil;
}

static VALUE rogl_glNamedFramebufferTextureEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int framebuffer = (unsigned int)NUM2UINT(_arg1_);
    unsigned int attachment = (unsigned int)NUM2UINT(_arg2_);
    unsigned int texture = (unsigned int)NUM2UINT(_arg3_);
    int level = (int)NUM2INT(_arg4_);

    rogl_pfn_glNamedFramebufferTextureEXT(framebuffer, attachment, texture, level);

    return Qnil;
}

static VALUE rogl_glNamedFramebufferTextureLayerEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int framebuffer = (unsigned int)NUM2UINT(_arg1_);
    unsigned int attachment = (unsigned int)NUM2UINT(_arg2_);
    unsigned int texture = (unsigned int)NUM2UINT(_arg3_);
    int level = (int)NUM2INT(_arg4_);
    int layer = (int)NUM2INT(_arg5_);

    rogl_pfn_glNamedFramebufferTextureLayerEXT(framebuffer, attachment, texture, level, layer);

    return Qnil;
}

static VALUE rogl_glNamedFramebufferTextureFaceEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int framebuffer = (unsigned int)NUM2UINT(_arg1_);
    unsigned int attachment = (unsigned int)NUM2UINT(_arg2_);
    unsigned int texture = (unsigned int)NUM2UINT(_arg3_);
    int level = (int)NUM2INT(_arg4_);
    unsigned int face = (unsigned int)NUM2UINT(_arg5_);

    rogl_pfn_glNamedFramebufferTextureFaceEXT(framebuffer, attachment, texture, level, face);

    return Qnil;
}

static VALUE rogl_glTextureRenderbufferEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int texture = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    unsigned int renderbuffer = (unsigned int)NUM2UINT(_arg3_);

    rogl_pfn_glTextureRenderbufferEXT(texture, target, renderbuffer);

    return Qnil;
}

static VALUE rogl_glMultiTexRenderbufferEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int texunit = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    unsigned int renderbuffer = (unsigned int)NUM2UINT(_arg3_);

    rogl_pfn_glMultiTexRenderbufferEXT(texunit, target, renderbuffer);

    return Qnil;
}

static VALUE rogl_glVertexArrayVertexOffsetEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_)
{
    unsigned int vaobj = (unsigned int)NUM2UINT(_arg1_);
    unsigned int buffer = (unsigned int)NUM2UINT(_arg2_);
    int size = (int)NUM2INT(_arg3_);
    unsigned int type = (unsigned int)NUM2UINT(_arg4_);
    int stride = (int)NUM2INT(_arg5_);
    ptrdiff_t offset = (ptrdiff_t)(_arg6_);

    rogl_pfn_glVertexArrayVertexOffsetEXT(vaobj, buffer, size, type, stride, offset);

    return Qnil;
}

static VALUE rogl_glVertexArrayColorOffsetEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_)
{
    unsigned int vaobj = (unsigned int)NUM2UINT(_arg1_);
    unsigned int buffer = (unsigned int)NUM2UINT(_arg2_);
    int size = (int)NUM2INT(_arg3_);
    unsigned int type = (unsigned int)NUM2UINT(_arg4_);
    int stride = (int)NUM2INT(_arg5_);
    ptrdiff_t offset = (ptrdiff_t)(_arg6_);

    rogl_pfn_glVertexArrayColorOffsetEXT(vaobj, buffer, size, type, stride, offset);

    return Qnil;
}

static VALUE rogl_glVertexArrayEdgeFlagOffsetEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int vaobj = (unsigned int)NUM2UINT(_arg1_);
    unsigned int buffer = (unsigned int)NUM2UINT(_arg2_);
    int stride = (int)NUM2INT(_arg3_);
    ptrdiff_t offset = (ptrdiff_t)(_arg4_);

    rogl_pfn_glVertexArrayEdgeFlagOffsetEXT(vaobj, buffer, stride, offset);

    return Qnil;
}

static VALUE rogl_glVertexArrayIndexOffsetEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int vaobj = (unsigned int)NUM2UINT(_arg1_);
    unsigned int buffer = (unsigned int)NUM2UINT(_arg2_);
    unsigned int type = (unsigned int)NUM2UINT(_arg3_);
    int stride = (int)NUM2INT(_arg4_);
    ptrdiff_t offset = (ptrdiff_t)(_arg5_);

    rogl_pfn_glVertexArrayIndexOffsetEXT(vaobj, buffer, type, stride, offset);

    return Qnil;
}

static VALUE rogl_glVertexArrayNormalOffsetEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int vaobj = (unsigned int)NUM2UINT(_arg1_);
    unsigned int buffer = (unsigned int)NUM2UINT(_arg2_);
    unsigned int type = (unsigned int)NUM2UINT(_arg3_);
    int stride = (int)NUM2INT(_arg4_);
    ptrdiff_t offset = (ptrdiff_t)(_arg5_);

    rogl_pfn_glVertexArrayNormalOffsetEXT(vaobj, buffer, type, stride, offset);

    return Qnil;
}

static VALUE rogl_glVertexArrayTexCoordOffsetEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_)
{
    unsigned int vaobj = (unsigned int)NUM2UINT(_arg1_);
    unsigned int buffer = (unsigned int)NUM2UINT(_arg2_);
    int size = (int)NUM2INT(_arg3_);
    unsigned int type = (unsigned int)NUM2UINT(_arg4_);
    int stride = (int)NUM2INT(_arg5_);
    ptrdiff_t offset = (ptrdiff_t)(_arg6_);

    rogl_pfn_glVertexArrayTexCoordOffsetEXT(vaobj, buffer, size, type, stride, offset);

    return Qnil;
}

static VALUE rogl_glVertexArrayMultiTexCoordOffsetEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_)
{
    unsigned int vaobj = (unsigned int)NUM2UINT(_arg1_);
    unsigned int buffer = (unsigned int)NUM2UINT(_arg2_);
    unsigned int texunit = (unsigned int)NUM2UINT(_arg3_);
    int size = (int)NUM2INT(_arg4_);
    unsigned int type = (unsigned int)NUM2UINT(_arg5_);
    int stride = (int)NUM2INT(_arg6_);
    ptrdiff_t offset = (ptrdiff_t)(_arg7_);

    rogl_pfn_glVertexArrayMultiTexCoordOffsetEXT(vaobj, buffer, texunit, size, type, stride, offset);

    return Qnil;
}

static VALUE rogl_glVertexArrayFogCoordOffsetEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int vaobj = (unsigned int)NUM2UINT(_arg1_);
    unsigned int buffer = (unsigned int)NUM2UINT(_arg2_);
    unsigned int type = (unsigned int)NUM2UINT(_arg3_);
    int stride = (int)NUM2INT(_arg4_);
    ptrdiff_t offset = (ptrdiff_t)(_arg5_);

    rogl_pfn_glVertexArrayFogCoordOffsetEXT(vaobj, buffer, type, stride, offset);

    return Qnil;
}

static VALUE rogl_glVertexArraySecondaryColorOffsetEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_)
{
    unsigned int vaobj = (unsigned int)NUM2UINT(_arg1_);
    unsigned int buffer = (unsigned int)NUM2UINT(_arg2_);
    int size = (int)NUM2INT(_arg3_);
    unsigned int type = (unsigned int)NUM2UINT(_arg4_);
    int stride = (int)NUM2INT(_arg5_);
    ptrdiff_t offset = (ptrdiff_t)(_arg6_);

    rogl_pfn_glVertexArraySecondaryColorOffsetEXT(vaobj, buffer, size, type, stride, offset);

    return Qnil;
}

static VALUE rogl_glVertexArrayVertexAttribOffsetEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_)
{
    unsigned int vaobj = (unsigned int)NUM2UINT(_arg1_);
    unsigned int buffer = (unsigned int)NUM2UINT(_arg2_);
    unsigned int index = (unsigned int)NUM2UINT(_arg3_);
    int size = (int)NUM2INT(_arg4_);
    unsigned int type = (unsigned int)NUM2UINT(_arg5_);
    unsigned char normalized = (unsigned char)NUM2UINT(_arg6_);
    int stride = (int)NUM2INT(_arg7_);
    ptrdiff_t offset = (ptrdiff_t)(_arg8_);

    rogl_pfn_glVertexArrayVertexAttribOffsetEXT(vaobj, buffer, index, size, type, normalized, stride, offset);

    return Qnil;
}

static VALUE rogl_glVertexArrayVertexAttribIOffsetEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_)
{
    unsigned int vaobj = (unsigned int)NUM2UINT(_arg1_);
    unsigned int buffer = (unsigned int)NUM2UINT(_arg2_);
    unsigned int index = (unsigned int)NUM2UINT(_arg3_);
    int size = (int)NUM2INT(_arg4_);
    unsigned int type = (unsigned int)NUM2UINT(_arg5_);
    int stride = (int)NUM2INT(_arg6_);
    ptrdiff_t offset = (ptrdiff_t)(_arg7_);

    rogl_pfn_glVertexArrayVertexAttribIOffsetEXT(vaobj, buffer, index, size, type, stride, offset);

    return Qnil;
}

static VALUE rogl_glEnableVertexArrayEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int vaobj = (unsigned int)NUM2UINT(_arg1_);
    unsigned int array = (unsigned int)NUM2UINT(_arg2_);

    rogl_pfn_glEnableVertexArrayEXT(vaobj, array);

    return Qnil;
}

static VALUE rogl_glDisableVertexArrayEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int vaobj = (unsigned int)NUM2UINT(_arg1_);
    unsigned int array = (unsigned int)NUM2UINT(_arg2_);

    rogl_pfn_glDisableVertexArrayEXT(vaobj, array);

    return Qnil;
}

static VALUE rogl_glEnableVertexArrayAttribEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int vaobj = (unsigned int)NUM2UINT(_arg1_);
    unsigned int index = (unsigned int)NUM2UINT(_arg2_);

    rogl_pfn_glEnableVertexArrayAttribEXT(vaobj, index);

    return Qnil;
}

static VALUE rogl_glDisableVertexArrayAttribEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int vaobj = (unsigned int)NUM2UINT(_arg1_);
    unsigned int index = (unsigned int)NUM2UINT(_arg2_);

    rogl_pfn_glDisableVertexArrayAttribEXT(vaobj, index);

    return Qnil;
}

static VALUE rogl_glGetVertexArrayIntegervEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int vaobj = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* param = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetVertexArrayIntegervEXT(vaobj, pname, param);

    return Qnil;
}

static VALUE rogl_glGetVertexArrayPointervEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int vaobj = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* param = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetVertexArrayPointervEXT(vaobj, pname, param);

    return Qnil;
}

static VALUE rogl_glGetVertexArrayIntegeri_vEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int vaobj = (unsigned int)NUM2UINT(_arg1_);
    unsigned int index = (unsigned int)NUM2UINT(_arg2_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg3_);
    void* param = (void*)val2ptr(_arg4_);

    rogl_pfn_glGetVertexArrayIntegeri_vEXT(vaobj, index, pname, param);

    return Qnil;
}

static VALUE rogl_glGetVertexArrayPointeri_vEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int vaobj = (unsigned int)NUM2UINT(_arg1_);
    unsigned int index = (unsigned int)NUM2UINT(_arg2_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg3_);
    void* param = (void*)val2ptr(_arg4_);

    rogl_pfn_glGetVertexArrayPointeri_vEXT(vaobj, index, pname, param);

    return Qnil;
}

static VALUE rogl_glMapNamedBufferRangeEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int buffer = (unsigned int)NUM2UINT(_arg1_);
    ptrdiff_t offset = (ptrdiff_t)(_arg2_);
    ptrdiff_t length = (ptrdiff_t)(_arg3_);
    unsigned int access = (unsigned int)NUM2UINT(_arg4_);

    void* retval = rogl_pfn_glMapNamedBufferRangeEXT(buffer, offset, length, access);

    return CPOINTER_AS_VALUE(retval);
}

static VALUE rogl_glFlushMappedNamedBufferRangeEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int buffer = (unsigned int)NUM2UINT(_arg1_);
    ptrdiff_t offset = (ptrdiff_t)(_arg2_);
    ptrdiff_t length = (ptrdiff_t)(_arg3_);

    rogl_pfn_glFlushMappedNamedBufferRangeEXT(buffer, offset, length);

    return Qnil;
}

static VALUE rogl_glNamedBufferStorageEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int buffer = (unsigned int)NUM2UINT(_arg1_);
    ptrdiff_t size = (ptrdiff_t)(_arg2_);
    void* data = (void*)val2ptr(_arg3_);
    unsigned int flags = (unsigned int)NUM2UINT(_arg4_);

    rogl_pfn_glNamedBufferStorageEXT(buffer, size, data, flags);

    return Qnil;
}

static VALUE rogl_glClearNamedBufferDataEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int buffer = (unsigned int)NUM2UINT(_arg1_);
    unsigned int internalformat = (unsigned int)NUM2UINT(_arg2_);
    unsigned int format = (unsigned int)NUM2UINT(_arg3_);
    unsigned int type = (unsigned int)NUM2UINT(_arg4_);
    void* data = (void*)val2ptr(_arg5_);

    rogl_pfn_glClearNamedBufferDataEXT(buffer, internalformat, format, type, data);

    return Qnil;
}

static VALUE rogl_glClearNamedBufferSubDataEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_)
{
    unsigned int buffer = (unsigned int)NUM2UINT(_arg1_);
    unsigned int internalformat = (unsigned int)NUM2UINT(_arg2_);
    ptrdiff_t offset = (ptrdiff_t)(_arg3_);
    ptrdiff_t size = (ptrdiff_t)(_arg4_);
    unsigned int format = (unsigned int)NUM2UINT(_arg5_);
    unsigned int type = (unsigned int)NUM2UINT(_arg6_);
    void* data = (void*)val2ptr(_arg7_);

    rogl_pfn_glClearNamedBufferSubDataEXT(buffer, internalformat, offset, size, format, type, data);

    return Qnil;
}

static VALUE rogl_glNamedFramebufferParameteriEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int framebuffer = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    int param = (int)NUM2INT(_arg3_);

    rogl_pfn_glNamedFramebufferParameteriEXT(framebuffer, pname, param);

    return Qnil;
}

static VALUE rogl_glGetNamedFramebufferParameterivEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int framebuffer = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetNamedFramebufferParameterivEXT(framebuffer, pname, params);

    return Qnil;
}

static VALUE rogl_glProgramUniform1dEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    int location = (int)NUM2INT(_arg2_);
    double x = (double)NUM2DBL(_arg3_);

    rogl_pfn_glProgramUniform1dEXT(program, location, x);

    return Qnil;
}

static VALUE rogl_glProgramUniform2dEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    int location = (int)NUM2INT(_arg2_);
    double x = (double)NUM2DBL(_arg3_);
    double y = (double)NUM2DBL(_arg4_);

    rogl_pfn_glProgramUniform2dEXT(program, location, x, y);

    return Qnil;
}

static VALUE rogl_glProgramUniform3dEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    int location = (int)NUM2INT(_arg2_);
    double x = (double)NUM2DBL(_arg3_);
    double y = (double)NUM2DBL(_arg4_);
    double z = (double)NUM2DBL(_arg5_);

    rogl_pfn_glProgramUniform3dEXT(program, location, x, y, z);

    return Qnil;
}

static VALUE rogl_glProgramUniform4dEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    int location = (int)NUM2INT(_arg2_);
    double x = (double)NUM2DBL(_arg3_);
    double y = (double)NUM2DBL(_arg4_);
    double z = (double)NUM2DBL(_arg5_);
    double w = (double)NUM2DBL(_arg6_);

    rogl_pfn_glProgramUniform4dEXT(program, location, x, y, z, w);

    return Qnil;
}

static VALUE rogl_glProgramUniform1dvEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    int location = (int)NUM2INT(_arg2_);
    int count = (int)NUM2INT(_arg3_);
    void* value = (void*)val2ptr(_arg4_);

    rogl_pfn_glProgramUniform1dvEXT(program, location, count, value);

    return Qnil;
}

static VALUE rogl_glProgramUniform2dvEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    int location = (int)NUM2INT(_arg2_);
    int count = (int)NUM2INT(_arg3_);
    void* value = (void*)val2ptr(_arg4_);

    rogl_pfn_glProgramUniform2dvEXT(program, location, count, value);

    return Qnil;
}

static VALUE rogl_glProgramUniform3dvEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    int location = (int)NUM2INT(_arg2_);
    int count = (int)NUM2INT(_arg3_);
    void* value = (void*)val2ptr(_arg4_);

    rogl_pfn_glProgramUniform3dvEXT(program, location, count, value);

    return Qnil;
}

static VALUE rogl_glProgramUniform4dvEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    int location = (int)NUM2INT(_arg2_);
    int count = (int)NUM2INT(_arg3_);
    void* value = (void*)val2ptr(_arg4_);

    rogl_pfn_glProgramUniform4dvEXT(program, location, count, value);

    return Qnil;
}

static VALUE rogl_glProgramUniformMatrix2dvEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    int location = (int)NUM2INT(_arg2_);
    int count = (int)NUM2INT(_arg3_);
    unsigned char transpose = (unsigned char)NUM2UINT(_arg4_);
    void* value = (void*)val2ptr(_arg5_);

    rogl_pfn_glProgramUniformMatrix2dvEXT(program, location, count, transpose, value);

    return Qnil;
}

static VALUE rogl_glProgramUniformMatrix3dvEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    int location = (int)NUM2INT(_arg2_);
    int count = (int)NUM2INT(_arg3_);
    unsigned char transpose = (unsigned char)NUM2UINT(_arg4_);
    void* value = (void*)val2ptr(_arg5_);

    rogl_pfn_glProgramUniformMatrix3dvEXT(program, location, count, transpose, value);

    return Qnil;
}

static VALUE rogl_glProgramUniformMatrix4dvEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    int location = (int)NUM2INT(_arg2_);
    int count = (int)NUM2INT(_arg3_);
    unsigned char transpose = (unsigned char)NUM2UINT(_arg4_);
    void* value = (void*)val2ptr(_arg5_);

    rogl_pfn_glProgramUniformMatrix4dvEXT(program, location, count, transpose, value);

    return Qnil;
}

static VALUE rogl_glProgramUniformMatrix2x3dvEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    int location = (int)NUM2INT(_arg2_);
    int count = (int)NUM2INT(_arg3_);
    unsigned char transpose = (unsigned char)NUM2UINT(_arg4_);
    void* value = (void*)val2ptr(_arg5_);

    rogl_pfn_glProgramUniformMatrix2x3dvEXT(program, location, count, transpose, value);

    return Qnil;
}

static VALUE rogl_glProgramUniformMatrix2x4dvEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    int location = (int)NUM2INT(_arg2_);
    int count = (int)NUM2INT(_arg3_);
    unsigned char transpose = (unsigned char)NUM2UINT(_arg4_);
    void* value = (void*)val2ptr(_arg5_);

    rogl_pfn_glProgramUniformMatrix2x4dvEXT(program, location, count, transpose, value);

    return Qnil;
}

static VALUE rogl_glProgramUniformMatrix3x2dvEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    int location = (int)NUM2INT(_arg2_);
    int count = (int)NUM2INT(_arg3_);
    unsigned char transpose = (unsigned char)NUM2UINT(_arg4_);
    void* value = (void*)val2ptr(_arg5_);

    rogl_pfn_glProgramUniformMatrix3x2dvEXT(program, location, count, transpose, value);

    return Qnil;
}

static VALUE rogl_glProgramUniformMatrix3x4dvEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    int location = (int)NUM2INT(_arg2_);
    int count = (int)NUM2INT(_arg3_);
    unsigned char transpose = (unsigned char)NUM2UINT(_arg4_);
    void* value = (void*)val2ptr(_arg5_);

    rogl_pfn_glProgramUniformMatrix3x4dvEXT(program, location, count, transpose, value);

    return Qnil;
}

static VALUE rogl_glProgramUniformMatrix4x2dvEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    int location = (int)NUM2INT(_arg2_);
    int count = (int)NUM2INT(_arg3_);
    unsigned char transpose = (unsigned char)NUM2UINT(_arg4_);
    void* value = (void*)val2ptr(_arg5_);

    rogl_pfn_glProgramUniformMatrix4x2dvEXT(program, location, count, transpose, value);

    return Qnil;
}

static VALUE rogl_glProgramUniformMatrix4x3dvEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    int location = (int)NUM2INT(_arg2_);
    int count = (int)NUM2INT(_arg3_);
    unsigned char transpose = (unsigned char)NUM2UINT(_arg4_);
    void* value = (void*)val2ptr(_arg5_);

    rogl_pfn_glProgramUniformMatrix4x3dvEXT(program, location, count, transpose, value);

    return Qnil;
}

static VALUE rogl_glTextureBufferRangeEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_)
{
    unsigned int texture = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    unsigned int internalformat = (unsigned int)NUM2UINT(_arg3_);
    unsigned int buffer = (unsigned int)NUM2UINT(_arg4_);
    ptrdiff_t offset = (ptrdiff_t)(_arg5_);
    ptrdiff_t size = (ptrdiff_t)(_arg6_);

    rogl_pfn_glTextureBufferRangeEXT(texture, target, internalformat, buffer, offset, size);

    return Qnil;
}

static VALUE rogl_glTextureStorage1DEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int texture = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    int levels = (int)NUM2INT(_arg3_);
    unsigned int internalformat = (unsigned int)NUM2UINT(_arg4_);
    int width = (int)NUM2INT(_arg5_);

    rogl_pfn_glTextureStorage1DEXT(texture, target, levels, internalformat, width);

    return Qnil;
}

static VALUE rogl_glTextureStorage2DEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_)
{
    unsigned int texture = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    int levels = (int)NUM2INT(_arg3_);
    unsigned int internalformat = (unsigned int)NUM2UINT(_arg4_);
    int width = (int)NUM2INT(_arg5_);
    int height = (int)NUM2INT(_arg6_);

    rogl_pfn_glTextureStorage2DEXT(texture, target, levels, internalformat, width, height);

    return Qnil;
}

static VALUE rogl_glTextureStorage3DEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_)
{
    unsigned int texture = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    int levels = (int)NUM2INT(_arg3_);
    unsigned int internalformat = (unsigned int)NUM2UINT(_arg4_);
    int width = (int)NUM2INT(_arg5_);
    int height = (int)NUM2INT(_arg6_);
    int depth = (int)NUM2INT(_arg7_);

    rogl_pfn_glTextureStorage3DEXT(texture, target, levels, internalformat, width, height, depth);

    return Qnil;
}

static VALUE rogl_glTextureStorage2DMultisampleEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_)
{
    unsigned int texture = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    int samples = (int)NUM2INT(_arg3_);
    unsigned int internalformat = (unsigned int)NUM2UINT(_arg4_);
    int width = (int)NUM2INT(_arg5_);
    int height = (int)NUM2INT(_arg6_);
    unsigned char fixedsamplelocations = (unsigned char)NUM2UINT(_arg7_);

    rogl_pfn_glTextureStorage2DMultisampleEXT(texture, target, samples, internalformat, width, height, fixedsamplelocations);

    return Qnil;
}

static VALUE rogl_glTextureStorage3DMultisampleEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_)
{
    unsigned int texture = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    int samples = (int)NUM2INT(_arg3_);
    unsigned int internalformat = (unsigned int)NUM2UINT(_arg4_);
    int width = (int)NUM2INT(_arg5_);
    int height = (int)NUM2INT(_arg6_);
    int depth = (int)NUM2INT(_arg7_);
    unsigned char fixedsamplelocations = (unsigned char)NUM2UINT(_arg8_);

    rogl_pfn_glTextureStorage3DMultisampleEXT(texture, target, samples, internalformat, width, height, depth, fixedsamplelocations);

    return Qnil;
}

static VALUE rogl_glVertexArrayBindVertexBufferEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int vaobj = (unsigned int)NUM2UINT(_arg1_);
    unsigned int bindingindex = (unsigned int)NUM2UINT(_arg2_);
    unsigned int buffer = (unsigned int)NUM2UINT(_arg3_);
    ptrdiff_t offset = (ptrdiff_t)(_arg4_);
    int stride = (int)NUM2INT(_arg5_);

    rogl_pfn_glVertexArrayBindVertexBufferEXT(vaobj, bindingindex, buffer, offset, stride);

    return Qnil;
}

static VALUE rogl_glVertexArrayVertexAttribFormatEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_)
{
    unsigned int vaobj = (unsigned int)NUM2UINT(_arg1_);
    unsigned int attribindex = (unsigned int)NUM2UINT(_arg2_);
    int size = (int)NUM2INT(_arg3_);
    unsigned int type = (unsigned int)NUM2UINT(_arg4_);
    unsigned char normalized = (unsigned char)NUM2UINT(_arg5_);
    unsigned int relativeoffset = (unsigned int)NUM2UINT(_arg6_);

    rogl_pfn_glVertexArrayVertexAttribFormatEXT(vaobj, attribindex, size, type, normalized, relativeoffset);

    return Qnil;
}

static VALUE rogl_glVertexArrayVertexAttribIFormatEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int vaobj = (unsigned int)NUM2UINT(_arg1_);
    unsigned int attribindex = (unsigned int)NUM2UINT(_arg2_);
    int size = (int)NUM2INT(_arg3_);
    unsigned int type = (unsigned int)NUM2UINT(_arg4_);
    unsigned int relativeoffset = (unsigned int)NUM2UINT(_arg5_);

    rogl_pfn_glVertexArrayVertexAttribIFormatEXT(vaobj, attribindex, size, type, relativeoffset);

    return Qnil;
}

static VALUE rogl_glVertexArrayVertexAttribLFormatEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int vaobj = (unsigned int)NUM2UINT(_arg1_);
    unsigned int attribindex = (unsigned int)NUM2UINT(_arg2_);
    int size = (int)NUM2INT(_arg3_);
    unsigned int type = (unsigned int)NUM2UINT(_arg4_);
    unsigned int relativeoffset = (unsigned int)NUM2UINT(_arg5_);

    rogl_pfn_glVertexArrayVertexAttribLFormatEXT(vaobj, attribindex, size, type, relativeoffset);

    return Qnil;
}

static VALUE rogl_glVertexArrayVertexAttribBindingEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int vaobj = (unsigned int)NUM2UINT(_arg1_);
    unsigned int attribindex = (unsigned int)NUM2UINT(_arg2_);
    unsigned int bindingindex = (unsigned int)NUM2UINT(_arg3_);

    rogl_pfn_glVertexArrayVertexAttribBindingEXT(vaobj, attribindex, bindingindex);

    return Qnil;
}

static VALUE rogl_glVertexArrayVertexBindingDivisorEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int vaobj = (unsigned int)NUM2UINT(_arg1_);
    unsigned int bindingindex = (unsigned int)NUM2UINT(_arg2_);
    unsigned int divisor = (unsigned int)NUM2UINT(_arg3_);

    rogl_pfn_glVertexArrayVertexBindingDivisorEXT(vaobj, bindingindex, divisor);

    return Qnil;
}

static VALUE rogl_glVertexArrayVertexAttribLOffsetEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_)
{
    unsigned int vaobj = (unsigned int)NUM2UINT(_arg1_);
    unsigned int buffer = (unsigned int)NUM2UINT(_arg2_);
    unsigned int index = (unsigned int)NUM2UINT(_arg3_);
    int size = (int)NUM2INT(_arg4_);
    unsigned int type = (unsigned int)NUM2UINT(_arg5_);
    int stride = (int)NUM2INT(_arg6_);
    ptrdiff_t offset = (ptrdiff_t)(_arg7_);

    rogl_pfn_glVertexArrayVertexAttribLOffsetEXT(vaobj, buffer, index, size, type, stride, offset);

    return Qnil;
}

static VALUE rogl_glTexturePageCommitmentEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_, VALUE _arg9_)
{
    unsigned int texture = (unsigned int)NUM2UINT(_arg1_);
    int level = (int)NUM2INT(_arg2_);
    int xoffset = (int)NUM2INT(_arg3_);
    int yoffset = (int)NUM2INT(_arg4_);
    int zoffset = (int)NUM2INT(_arg5_);
    int width = (int)NUM2INT(_arg6_);
    int height = (int)NUM2INT(_arg7_);
    int depth = (int)NUM2INT(_arg8_);
    unsigned char commit = (unsigned char)NUM2UINT(_arg9_);

    rogl_pfn_glTexturePageCommitmentEXT(texture, level, xoffset, yoffset, zoffset, width, height, depth, commit);

    return Qnil;
}

static VALUE rogl_glVertexArrayVertexAttribDivisorEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int vaobj = (unsigned int)NUM2UINT(_arg1_);
    unsigned int index = (unsigned int)NUM2UINT(_arg2_);
    unsigned int divisor = (unsigned int)NUM2UINT(_arg3_);

    rogl_pfn_glVertexArrayVertexAttribDivisorEXT(vaobj, index, divisor);

    return Qnil;
}

static VALUE rogl_glColorMaskIndexedEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    unsigned char r = (unsigned char)NUM2UINT(_arg2_);
    unsigned char g = (unsigned char)NUM2UINT(_arg3_);
    unsigned char b = (unsigned char)NUM2UINT(_arg4_);
    unsigned char a = (unsigned char)NUM2UINT(_arg5_);

    rogl_pfn_glColorMaskIndexedEXT(index, r, g, b, a);

    return Qnil;
}

static VALUE rogl_glDrawArraysInstancedEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int mode = (unsigned int)NUM2UINT(_arg1_);
    int start = (int)NUM2INT(_arg2_);
    int count = (int)NUM2INT(_arg3_);
    int primcount = (int)NUM2INT(_arg4_);

    rogl_pfn_glDrawArraysInstancedEXT(mode, start, count, primcount);

    return Qnil;
}

static VALUE rogl_glDrawElementsInstancedEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int mode = (unsigned int)NUM2UINT(_arg1_);
    int count = (int)NUM2INT(_arg2_);
    unsigned int type = (unsigned int)NUM2UINT(_arg3_);
    void* indices = (void*)val2ptr(_arg4_);
    int primcount = (int)NUM2INT(_arg5_);

    rogl_pfn_glDrawElementsInstancedEXT(mode, count, type, indices, primcount);

    return Qnil;
}

static VALUE rogl_glDrawRangeElementsEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_)
{
    unsigned int mode = (unsigned int)NUM2UINT(_arg1_);
    unsigned int start = (unsigned int)NUM2UINT(_arg2_);
    unsigned int end = (unsigned int)NUM2UINT(_arg3_);
    int count = (int)NUM2INT(_arg4_);
    unsigned int type = (unsigned int)NUM2UINT(_arg5_);
    void* indices = (void*)val2ptr(_arg6_);

    rogl_pfn_glDrawRangeElementsEXT(mode, start, end, count, type, indices);

    return Qnil;
}

static VALUE rogl_glFogCoordfEXT(VALUE _obj_, VALUE _arg1_)
{
    float coord = (float)NUM2DBL(_arg1_);

    rogl_pfn_glFogCoordfEXT(coord);

    return Qnil;
}

static VALUE rogl_glFogCoordfvEXT(VALUE _obj_, VALUE _arg1_)
{
    void* coord = (void*)val2ptr(_arg1_);

    rogl_pfn_glFogCoordfvEXT(coord);

    return Qnil;
}

static VALUE rogl_glFogCoorddEXT(VALUE _obj_, VALUE _arg1_)
{
    double coord = (double)NUM2DBL(_arg1_);

    rogl_pfn_glFogCoorddEXT(coord);

    return Qnil;
}

static VALUE rogl_glFogCoorddvEXT(VALUE _obj_, VALUE _arg1_)
{
    void* coord = (void*)val2ptr(_arg1_);

    rogl_pfn_glFogCoorddvEXT(coord);

    return Qnil;
}

static VALUE rogl_glFogCoordPointerEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int type = (unsigned int)NUM2UINT(_arg1_);
    int stride = (int)NUM2INT(_arg2_);
    void* pointer = (void*)val2ptr(_arg3_);

    rogl_pfn_glFogCoordPointerEXT(type, stride, pointer);

    return Qnil;
}

static VALUE rogl_glBlitFramebufferEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_, VALUE _arg9_, VALUE _arg10_)
{
    int srcX0 = (int)NUM2INT(_arg1_);
    int srcY0 = (int)NUM2INT(_arg2_);
    int srcX1 = (int)NUM2INT(_arg3_);
    int srcY1 = (int)NUM2INT(_arg4_);
    int dstX0 = (int)NUM2INT(_arg5_);
    int dstY0 = (int)NUM2INT(_arg6_);
    int dstX1 = (int)NUM2INT(_arg7_);
    int dstY1 = (int)NUM2INT(_arg8_);
    unsigned int mask = (unsigned int)NUM2UINT(_arg9_);
    unsigned int filter = (unsigned int)NUM2UINT(_arg10_);

    rogl_pfn_glBlitFramebufferEXT(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);

    return Qnil;
}

static VALUE rogl_glRenderbufferStorageMultisampleEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    int samples = (int)NUM2INT(_arg2_);
    unsigned int internalformat = (unsigned int)NUM2UINT(_arg3_);
    int width = (int)NUM2INT(_arg4_);
    int height = (int)NUM2INT(_arg5_);

    rogl_pfn_glRenderbufferStorageMultisampleEXT(target, samples, internalformat, width, height);

    return Qnil;
}

static VALUE rogl_glIsRenderbufferEXT(VALUE _obj_, VALUE _arg1_)
{
    unsigned int renderbuffer = (unsigned int)NUM2UINT(_arg1_);

    unsigned char retval = rogl_pfn_glIsRenderbufferEXT(renderbuffer);

    return UINT2NUM(retval);
}

static VALUE rogl_glBindRenderbufferEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int renderbuffer = (unsigned int)NUM2UINT(_arg2_);

    rogl_pfn_glBindRenderbufferEXT(target, renderbuffer);

    return Qnil;
}

static VALUE rogl_glDeleteRenderbuffersEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int n = (int)NUM2INT(_arg1_);
    void* renderbuffers = (void*)val2ptr(_arg2_);

    rogl_pfn_glDeleteRenderbuffersEXT(n, renderbuffers);

    return Qnil;
}

static VALUE rogl_glGenRenderbuffersEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int n = (int)NUM2INT(_arg1_);
    void* renderbuffers = (void*)val2ptr(_arg2_);

    rogl_pfn_glGenRenderbuffersEXT(n, renderbuffers);

    return Qnil;
}

static VALUE rogl_glRenderbufferStorageEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int internalformat = (unsigned int)NUM2UINT(_arg2_);
    int width = (int)NUM2INT(_arg3_);
    int height = (int)NUM2INT(_arg4_);

    rogl_pfn_glRenderbufferStorageEXT(target, internalformat, width, height);

    return Qnil;
}

static VALUE rogl_glGetRenderbufferParameterivEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetRenderbufferParameterivEXT(target, pname, params);

    return Qnil;
}

static VALUE rogl_glIsFramebufferEXT(VALUE _obj_, VALUE _arg1_)
{
    unsigned int framebuffer = (unsigned int)NUM2UINT(_arg1_);

    unsigned char retval = rogl_pfn_glIsFramebufferEXT(framebuffer);

    return UINT2NUM(retval);
}

static VALUE rogl_glBindFramebufferEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int framebuffer = (unsigned int)NUM2UINT(_arg2_);

    rogl_pfn_glBindFramebufferEXT(target, framebuffer);

    return Qnil;
}

static VALUE rogl_glDeleteFramebuffersEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int n = (int)NUM2INT(_arg1_);
    void* framebuffers = (void*)val2ptr(_arg2_);

    rogl_pfn_glDeleteFramebuffersEXT(n, framebuffers);

    return Qnil;
}

static VALUE rogl_glGenFramebuffersEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int n = (int)NUM2INT(_arg1_);
    void* framebuffers = (void*)val2ptr(_arg2_);

    rogl_pfn_glGenFramebuffersEXT(n, framebuffers);

    return Qnil;
}

static VALUE rogl_glCheckFramebufferStatusEXT(VALUE _obj_, VALUE _arg1_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);

    unsigned int retval = rogl_pfn_glCheckFramebufferStatusEXT(target);

    return UINT2NUM(retval);
}

static VALUE rogl_glFramebufferTexture1DEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int attachment = (unsigned int)NUM2UINT(_arg2_);
    unsigned int textarget = (unsigned int)NUM2UINT(_arg3_);
    unsigned int texture = (unsigned int)NUM2UINT(_arg4_);
    int level = (int)NUM2INT(_arg5_);

    rogl_pfn_glFramebufferTexture1DEXT(target, attachment, textarget, texture, level);

    return Qnil;
}

static VALUE rogl_glFramebufferTexture2DEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int attachment = (unsigned int)NUM2UINT(_arg2_);
    unsigned int textarget = (unsigned int)NUM2UINT(_arg3_);
    unsigned int texture = (unsigned int)NUM2UINT(_arg4_);
    int level = (int)NUM2INT(_arg5_);

    rogl_pfn_glFramebufferTexture2DEXT(target, attachment, textarget, texture, level);

    return Qnil;
}

static VALUE rogl_glFramebufferTexture3DEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int attachment = (unsigned int)NUM2UINT(_arg2_);
    unsigned int textarget = (unsigned int)NUM2UINT(_arg3_);
    unsigned int texture = (unsigned int)NUM2UINT(_arg4_);
    int level = (int)NUM2INT(_arg5_);
    int zoffset = (int)NUM2INT(_arg6_);

    rogl_pfn_glFramebufferTexture3DEXT(target, attachment, textarget, texture, level, zoffset);

    return Qnil;
}

static VALUE rogl_glFramebufferRenderbufferEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int attachment = (unsigned int)NUM2UINT(_arg2_);
    unsigned int renderbuffertarget = (unsigned int)NUM2UINT(_arg3_);
    unsigned int renderbuffer = (unsigned int)NUM2UINT(_arg4_);

    rogl_pfn_glFramebufferRenderbufferEXT(target, attachment, renderbuffertarget, renderbuffer);

    return Qnil;
}

static VALUE rogl_glGetFramebufferAttachmentParameterivEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int attachment = (unsigned int)NUM2UINT(_arg2_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg3_);
    void* params = (void*)val2ptr(_arg4_);

    rogl_pfn_glGetFramebufferAttachmentParameterivEXT(target, attachment, pname, params);

    return Qnil;
}

static VALUE rogl_glGenerateMipmapEXT(VALUE _obj_, VALUE _arg1_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);

    rogl_pfn_glGenerateMipmapEXT(target);

    return Qnil;
}

static VALUE rogl_glProgramEnvParameters4fvEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int index = (unsigned int)NUM2UINT(_arg2_);
    int count = (int)NUM2INT(_arg3_);
    void* params = (void*)val2ptr(_arg4_);

    rogl_pfn_glProgramEnvParameters4fvEXT(target, index, count, params);

    return Qnil;
}

static VALUE rogl_glProgramLocalParameters4fvEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int index = (unsigned int)NUM2UINT(_arg2_);
    int count = (int)NUM2INT(_arg3_);
    void* params = (void*)val2ptr(_arg4_);

    rogl_pfn_glProgramLocalParameters4fvEXT(target, index, count, params);

    return Qnil;
}

static VALUE rogl_glGetUniformuivEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    int location = (int)NUM2INT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetUniformuivEXT(program, location, params);

    return Qnil;
}

static VALUE rogl_glBindFragDataLocationEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    unsigned int color = (unsigned int)NUM2UINT(_arg2_);
    void* name = (void*)val2ptr(_arg3_);

    rogl_pfn_glBindFragDataLocationEXT(program, color, name);

    return Qnil;
}

static VALUE rogl_glGetFragDataLocationEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    void* name = (void*)val2ptr(_arg2_);

    int retval = rogl_pfn_glGetFragDataLocationEXT(program, name);

    return INT2NUM(retval);
}

static VALUE rogl_glUniform1uiEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int location = (int)NUM2INT(_arg1_);
    unsigned int v0 = (unsigned int)NUM2UINT(_arg2_);

    rogl_pfn_glUniform1uiEXT(location, v0);

    return Qnil;
}

static VALUE rogl_glUniform2uiEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    int location = (int)NUM2INT(_arg1_);
    unsigned int v0 = (unsigned int)NUM2UINT(_arg2_);
    unsigned int v1 = (unsigned int)NUM2UINT(_arg3_);

    rogl_pfn_glUniform2uiEXT(location, v0, v1);

    return Qnil;
}

static VALUE rogl_glUniform3uiEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    int location = (int)NUM2INT(_arg1_);
    unsigned int v0 = (unsigned int)NUM2UINT(_arg2_);
    unsigned int v1 = (unsigned int)NUM2UINT(_arg3_);
    unsigned int v2 = (unsigned int)NUM2UINT(_arg4_);

    rogl_pfn_glUniform3uiEXT(location, v0, v1, v2);

    return Qnil;
}

static VALUE rogl_glUniform4uiEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    int location = (int)NUM2INT(_arg1_);
    unsigned int v0 = (unsigned int)NUM2UINT(_arg2_);
    unsigned int v1 = (unsigned int)NUM2UINT(_arg3_);
    unsigned int v2 = (unsigned int)NUM2UINT(_arg4_);
    unsigned int v3 = (unsigned int)NUM2UINT(_arg5_);

    rogl_pfn_glUniform4uiEXT(location, v0, v1, v2, v3);

    return Qnil;
}

static VALUE rogl_glUniform1uivEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    int location = (int)NUM2INT(_arg1_);
    int count = (int)NUM2INT(_arg2_);
    void* value = (void*)val2ptr(_arg3_);

    rogl_pfn_glUniform1uivEXT(location, count, value);

    return Qnil;
}

static VALUE rogl_glUniform2uivEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    int location = (int)NUM2INT(_arg1_);
    int count = (int)NUM2INT(_arg2_);
    void* value = (void*)val2ptr(_arg3_);

    rogl_pfn_glUniform2uivEXT(location, count, value);

    return Qnil;
}

static VALUE rogl_glUniform3uivEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    int location = (int)NUM2INT(_arg1_);
    int count = (int)NUM2INT(_arg2_);
    void* value = (void*)val2ptr(_arg3_);

    rogl_pfn_glUniform3uivEXT(location, count, value);

    return Qnil;
}

static VALUE rogl_glUniform4uivEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    int location = (int)NUM2INT(_arg1_);
    int count = (int)NUM2INT(_arg2_);
    void* value = (void*)val2ptr(_arg3_);

    rogl_pfn_glUniform4uivEXT(location, count, value);

    return Qnil;
}

static VALUE rogl_glGetHistogramEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned char reset = (unsigned char)NUM2UINT(_arg2_);
    unsigned int format = (unsigned int)NUM2UINT(_arg3_);
    unsigned int type = (unsigned int)NUM2UINT(_arg4_);
    void* values = (void*)val2ptr(_arg5_);

    rogl_pfn_glGetHistogramEXT(target, reset, format, type, values);

    return Qnil;
}

static VALUE rogl_glGetHistogramParameterfvEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetHistogramParameterfvEXT(target, pname, params);

    return Qnil;
}

static VALUE rogl_glGetHistogramParameterivEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetHistogramParameterivEXT(target, pname, params);

    return Qnil;
}

static VALUE rogl_glGetMinmaxEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned char reset = (unsigned char)NUM2UINT(_arg2_);
    unsigned int format = (unsigned int)NUM2UINT(_arg3_);
    unsigned int type = (unsigned int)NUM2UINT(_arg4_);
    void* values = (void*)val2ptr(_arg5_);

    rogl_pfn_glGetMinmaxEXT(target, reset, format, type, values);

    return Qnil;
}

static VALUE rogl_glGetMinmaxParameterfvEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetMinmaxParameterfvEXT(target, pname, params);

    return Qnil;
}

static VALUE rogl_glGetMinmaxParameterivEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetMinmaxParameterivEXT(target, pname, params);

    return Qnil;
}

static VALUE rogl_glHistogramEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    int width = (int)NUM2INT(_arg2_);
    unsigned int internalformat = (unsigned int)NUM2UINT(_arg3_);
    unsigned char sink = (unsigned char)NUM2UINT(_arg4_);

    rogl_pfn_glHistogramEXT(target, width, internalformat, sink);

    return Qnil;
}

static VALUE rogl_glMinmaxEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int internalformat = (unsigned int)NUM2UINT(_arg2_);
    unsigned char sink = (unsigned char)NUM2UINT(_arg3_);

    rogl_pfn_glMinmaxEXT(target, internalformat, sink);

    return Qnil;
}

static VALUE rogl_glResetHistogramEXT(VALUE _obj_, VALUE _arg1_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);

    rogl_pfn_glResetHistogramEXT(target);

    return Qnil;
}

static VALUE rogl_glResetMinmaxEXT(VALUE _obj_, VALUE _arg1_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);

    rogl_pfn_glResetMinmaxEXT(target);

    return Qnil;
}

static VALUE rogl_glIndexFuncEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int func = (unsigned int)NUM2UINT(_arg1_);
    float ref = (float)NUM2DBL(_arg2_);

    rogl_pfn_glIndexFuncEXT(func, ref);

    return Qnil;
}

static VALUE rogl_glIndexMaterialEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int face = (unsigned int)NUM2UINT(_arg1_);
    unsigned int mode = (unsigned int)NUM2UINT(_arg2_);

    rogl_pfn_glIndexMaterialEXT(face, mode);

    return Qnil;
}

static VALUE rogl_glApplyTextureEXT(VALUE _obj_, VALUE _arg1_)
{
    unsigned int mode = (unsigned int)NUM2UINT(_arg1_);

    rogl_pfn_glApplyTextureEXT(mode);

    return Qnil;
}

static VALUE rogl_glTextureLightEXT(VALUE _obj_, VALUE _arg1_)
{
    unsigned int pname = (unsigned int)NUM2UINT(_arg1_);

    rogl_pfn_glTextureLightEXT(pname);

    return Qnil;
}

static VALUE rogl_glTextureMaterialEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int face = (unsigned int)NUM2UINT(_arg1_);
    unsigned int mode = (unsigned int)NUM2UINT(_arg2_);

    rogl_pfn_glTextureMaterialEXT(face, mode);

    return Qnil;
}

static VALUE rogl_glMultiDrawArraysEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int mode = (unsigned int)NUM2UINT(_arg1_);
    void* first = (void*)val2ptr(_arg2_);
    void* count = (void*)val2ptr(_arg3_);
    int primcount = (int)NUM2INT(_arg4_);

    rogl_pfn_glMultiDrawArraysEXT(mode, first, count, primcount);

    return Qnil;
}

static VALUE rogl_glMultiDrawElementsEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int mode = (unsigned int)NUM2UINT(_arg1_);
    void* count = (void*)val2ptr(_arg2_);
    unsigned int type = (unsigned int)NUM2UINT(_arg3_);
    void* indices = (void*)val2ptr(_arg4_);
    int primcount = (int)NUM2INT(_arg5_);

    rogl_pfn_glMultiDrawElementsEXT(mode, count, type, indices, primcount);

    return Qnil;
}

static VALUE rogl_glSampleMaskEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    float value = (float)NUM2DBL(_arg1_);
    unsigned char invert = (unsigned char)NUM2UINT(_arg2_);

    rogl_pfn_glSampleMaskEXT(value, invert);

    return Qnil;
}

static VALUE rogl_glSamplePatternEXT(VALUE _obj_, VALUE _arg1_)
{
    unsigned int pattern = (unsigned int)NUM2UINT(_arg1_);

    rogl_pfn_glSamplePatternEXT(pattern);

    return Qnil;
}

static VALUE rogl_glColorTableEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int internalFormat = (unsigned int)NUM2UINT(_arg2_);
    int width = (int)NUM2INT(_arg3_);
    unsigned int format = (unsigned int)NUM2UINT(_arg4_);
    unsigned int type = (unsigned int)NUM2UINT(_arg5_);
    void* table = (void*)val2ptr(_arg6_);

    rogl_pfn_glColorTableEXT(target, internalFormat, width, format, type, table);

    return Qnil;
}

static VALUE rogl_glGetColorTableEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int format = (unsigned int)NUM2UINT(_arg2_);
    unsigned int type = (unsigned int)NUM2UINT(_arg3_);
    void* data = (void*)val2ptr(_arg4_);

    rogl_pfn_glGetColorTableEXT(target, format, type, data);

    return Qnil;
}

static VALUE rogl_glGetColorTableParameterivEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetColorTableParameterivEXT(target, pname, params);

    return Qnil;
}

static VALUE rogl_glGetColorTableParameterfvEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetColorTableParameterfvEXT(target, pname, params);

    return Qnil;
}

static VALUE rogl_glPixelTransformParameteriEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    int param = (int)NUM2INT(_arg3_);

    rogl_pfn_glPixelTransformParameteriEXT(target, pname, param);

    return Qnil;
}

static VALUE rogl_glPixelTransformParameterfEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    float param = (float)NUM2DBL(_arg3_);

    rogl_pfn_glPixelTransformParameterfEXT(target, pname, param);

    return Qnil;
}

static VALUE rogl_glPixelTransformParameterivEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glPixelTransformParameterivEXT(target, pname, params);

    return Qnil;
}

static VALUE rogl_glPixelTransformParameterfvEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glPixelTransformParameterfvEXT(target, pname, params);

    return Qnil;
}

static VALUE rogl_glGetPixelTransformParameterivEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetPixelTransformParameterivEXT(target, pname, params);

    return Qnil;
}

static VALUE rogl_glGetPixelTransformParameterfvEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetPixelTransformParameterfvEXT(target, pname, params);

    return Qnil;
}

static VALUE rogl_glPointParameterfEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int pname = (unsigned int)NUM2UINT(_arg1_);
    float param = (float)NUM2DBL(_arg2_);

    rogl_pfn_glPointParameterfEXT(pname, param);

    return Qnil;
}

static VALUE rogl_glPointParameterfvEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int pname = (unsigned int)NUM2UINT(_arg1_);
    void* params = (void*)val2ptr(_arg2_);

    rogl_pfn_glPointParameterfvEXT(pname, params);

    return Qnil;
}

static VALUE rogl_glPolygonOffsetEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    float factor = (float)NUM2DBL(_arg1_);
    float bias = (float)NUM2DBL(_arg2_);

    rogl_pfn_glPolygonOffsetEXT(factor, bias);

    return Qnil;
}

static VALUE rogl_glPolygonOffsetClampEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    float factor = (float)NUM2DBL(_arg1_);
    float units = (float)NUM2DBL(_arg2_);
    float clamp = (float)NUM2DBL(_arg3_);

    rogl_pfn_glPolygonOffsetClampEXT(factor, units, clamp);

    return Qnil;
}

static VALUE rogl_glProvokingVertexEXT(VALUE _obj_, VALUE _arg1_)
{
    unsigned int mode = (unsigned int)NUM2UINT(_arg1_);

    rogl_pfn_glProvokingVertexEXT(mode);

    return Qnil;
}

static VALUE rogl_glSecondaryColor3bEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    char red = (char)NUM2INT(_arg1_);
    char green = (char)NUM2INT(_arg2_);
    char blue = (char)NUM2INT(_arg3_);

    rogl_pfn_glSecondaryColor3bEXT(red, green, blue);

    return Qnil;
}

static VALUE rogl_glSecondaryColor3bvEXT(VALUE _obj_, VALUE _arg1_)
{
    void* v = (void*)val2ptr(_arg1_);

    rogl_pfn_glSecondaryColor3bvEXT(v);

    return Qnil;
}

static VALUE rogl_glSecondaryColor3dEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    double red = (double)NUM2DBL(_arg1_);
    double green = (double)NUM2DBL(_arg2_);
    double blue = (double)NUM2DBL(_arg3_);

    rogl_pfn_glSecondaryColor3dEXT(red, green, blue);

    return Qnil;
}

static VALUE rogl_glSecondaryColor3dvEXT(VALUE _obj_, VALUE _arg1_)
{
    void* v = (void*)val2ptr(_arg1_);

    rogl_pfn_glSecondaryColor3dvEXT(v);

    return Qnil;
}

static VALUE rogl_glSecondaryColor3fEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    float red = (float)NUM2DBL(_arg1_);
    float green = (float)NUM2DBL(_arg2_);
    float blue = (float)NUM2DBL(_arg3_);

    rogl_pfn_glSecondaryColor3fEXT(red, green, blue);

    return Qnil;
}

static VALUE rogl_glSecondaryColor3fvEXT(VALUE _obj_, VALUE _arg1_)
{
    void* v = (void*)val2ptr(_arg1_);

    rogl_pfn_glSecondaryColor3fvEXT(v);

    return Qnil;
}

static VALUE rogl_glSecondaryColor3iEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    int red = (int)NUM2INT(_arg1_);
    int green = (int)NUM2INT(_arg2_);
    int blue = (int)NUM2INT(_arg3_);

    rogl_pfn_glSecondaryColor3iEXT(red, green, blue);

    return Qnil;
}

static VALUE rogl_glSecondaryColor3ivEXT(VALUE _obj_, VALUE _arg1_)
{
    void* v = (void*)val2ptr(_arg1_);

    rogl_pfn_glSecondaryColor3ivEXT(v);

    return Qnil;
}

static VALUE rogl_glSecondaryColor3sEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    short red = (short)NUM2INT(_arg1_);
    short green = (short)NUM2INT(_arg2_);
    short blue = (short)NUM2INT(_arg3_);

    rogl_pfn_glSecondaryColor3sEXT(red, green, blue);

    return Qnil;
}

static VALUE rogl_glSecondaryColor3svEXT(VALUE _obj_, VALUE _arg1_)
{
    void* v = (void*)val2ptr(_arg1_);

    rogl_pfn_glSecondaryColor3svEXT(v);

    return Qnil;
}

static VALUE rogl_glSecondaryColor3ubEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned char red = (unsigned char)NUM2UINT(_arg1_);
    unsigned char green = (unsigned char)NUM2UINT(_arg2_);
    unsigned char blue = (unsigned char)NUM2UINT(_arg3_);

    rogl_pfn_glSecondaryColor3ubEXT(red, green, blue);

    return Qnil;
}

static VALUE rogl_glSecondaryColor3ubvEXT(VALUE _obj_, VALUE _arg1_)
{
    void* v = (void*)val2ptr(_arg1_);

    rogl_pfn_glSecondaryColor3ubvEXT(v);

    return Qnil;
}

static VALUE rogl_glSecondaryColor3uiEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int red = (unsigned int)NUM2UINT(_arg1_);
    unsigned int green = (unsigned int)NUM2UINT(_arg2_);
    unsigned int blue = (unsigned int)NUM2UINT(_arg3_);

    rogl_pfn_glSecondaryColor3uiEXT(red, green, blue);

    return Qnil;
}

static VALUE rogl_glSecondaryColor3uivEXT(VALUE _obj_, VALUE _arg1_)
{
    void* v = (void*)val2ptr(_arg1_);

    rogl_pfn_glSecondaryColor3uivEXT(v);

    return Qnil;
}

static VALUE rogl_glSecondaryColor3usEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned short red = (unsigned short)NUM2UINT(_arg1_);
    unsigned short green = (unsigned short)NUM2UINT(_arg2_);
    unsigned short blue = (unsigned short)NUM2UINT(_arg3_);

    rogl_pfn_glSecondaryColor3usEXT(red, green, blue);

    return Qnil;
}

static VALUE rogl_glSecondaryColor3usvEXT(VALUE _obj_, VALUE _arg1_)
{
    void* v = (void*)val2ptr(_arg1_);

    rogl_pfn_glSecondaryColor3usvEXT(v);

    return Qnil;
}

static VALUE rogl_glSecondaryColorPointerEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    int size = (int)NUM2INT(_arg1_);
    unsigned int type = (unsigned int)NUM2UINT(_arg2_);
    int stride = (int)NUM2INT(_arg3_);
    void* pointer = (void*)val2ptr(_arg4_);

    rogl_pfn_glSecondaryColorPointerEXT(size, type, stride, pointer);

    return Qnil;
}

static VALUE rogl_glUseShaderProgramEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int type = (unsigned int)NUM2UINT(_arg1_);
    unsigned int program = (unsigned int)NUM2UINT(_arg2_);

    rogl_pfn_glUseShaderProgramEXT(type, program);

    return Qnil;
}

static VALUE rogl_glActiveProgramEXT(VALUE _obj_, VALUE _arg1_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);

    rogl_pfn_glActiveProgramEXT(program);

    return Qnil;
}

static VALUE rogl_glCreateShaderProgramEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int type = (unsigned int)NUM2UINT(_arg1_);
    void* string = (void*)val2ptr(_arg2_);

    unsigned int retval = rogl_pfn_glCreateShaderProgramEXT(type, string);

    return UINT2NUM(retval);
}

static VALUE rogl_glActiveShaderProgramEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int pipeline = (unsigned int)NUM2UINT(_arg1_);
    unsigned int program = (unsigned int)NUM2UINT(_arg2_);

    rogl_pfn_glActiveShaderProgramEXT(pipeline, program);

    return Qnil;
}

static VALUE rogl_glBindProgramPipelineEXT(VALUE _obj_, VALUE _arg1_)
{
    unsigned int pipeline = (unsigned int)NUM2UINT(_arg1_);

    rogl_pfn_glBindProgramPipelineEXT(pipeline);

    return Qnil;
}

static VALUE rogl_glCreateShaderProgramvEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int type = (unsigned int)NUM2UINT(_arg1_);
    int count = (int)NUM2INT(_arg2_);
    void* strings = (void*)val2ptr(_arg3_);

    unsigned int retval = rogl_pfn_glCreateShaderProgramvEXT(type, count, strings);

    return UINT2NUM(retval);
}

static VALUE rogl_glDeleteProgramPipelinesEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int n = (int)NUM2INT(_arg1_);
    void* pipelines = (void*)val2ptr(_arg2_);

    rogl_pfn_glDeleteProgramPipelinesEXT(n, pipelines);

    return Qnil;
}

static VALUE rogl_glGenProgramPipelinesEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int n = (int)NUM2INT(_arg1_);
    void* pipelines = (void*)val2ptr(_arg2_);

    rogl_pfn_glGenProgramPipelinesEXT(n, pipelines);

    return Qnil;
}

static VALUE rogl_glGetProgramPipelineInfoLogEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int pipeline = (unsigned int)NUM2UINT(_arg1_);
    int bufSize = (int)NUM2INT(_arg2_);
    void* length = (void*)val2ptr(_arg3_);
    void* infoLog = (void*)val2ptr(_arg4_);

    rogl_pfn_glGetProgramPipelineInfoLogEXT(pipeline, bufSize, length, infoLog);

    return Qnil;
}

static VALUE rogl_glGetProgramPipelineivEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int pipeline = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetProgramPipelineivEXT(pipeline, pname, params);

    return Qnil;
}

static VALUE rogl_glIsProgramPipelineEXT(VALUE _obj_, VALUE _arg1_)
{
    unsigned int pipeline = (unsigned int)NUM2UINT(_arg1_);

    unsigned char retval = rogl_pfn_glIsProgramPipelineEXT(pipeline);

    return UINT2NUM(retval);
}

static VALUE rogl_glUseProgramStagesEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int pipeline = (unsigned int)NUM2UINT(_arg1_);
    unsigned int stages = (unsigned int)NUM2UINT(_arg2_);
    unsigned int program = (unsigned int)NUM2UINT(_arg3_);

    rogl_pfn_glUseProgramStagesEXT(pipeline, stages, program);

    return Qnil;
}

static VALUE rogl_glValidateProgramPipelineEXT(VALUE _obj_, VALUE _arg1_)
{
    unsigned int pipeline = (unsigned int)NUM2UINT(_arg1_);

    rogl_pfn_glValidateProgramPipelineEXT(pipeline);

    return Qnil;
}

static VALUE rogl_glBindImageTextureEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    unsigned int texture = (unsigned int)NUM2UINT(_arg2_);
    int level = (int)NUM2INT(_arg3_);
    unsigned char layered = (unsigned char)NUM2UINT(_arg4_);
    int layer = (int)NUM2INT(_arg5_);
    unsigned int access = (unsigned int)NUM2UINT(_arg6_);
    int format = (int)NUM2INT(_arg7_);

    rogl_pfn_glBindImageTextureEXT(index, texture, level, layered, layer, access, format);

    return Qnil;
}

static VALUE rogl_glMemoryBarrierEXT(VALUE _obj_, VALUE _arg1_)
{
    unsigned int barriers = (unsigned int)NUM2UINT(_arg1_);

    rogl_pfn_glMemoryBarrierEXT(barriers);

    return Qnil;
}

static VALUE rogl_glStencilClearTagEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int stencilTagBits = (int)NUM2INT(_arg1_);
    unsigned int stencilClearTag = (unsigned int)NUM2UINT(_arg2_);

    rogl_pfn_glStencilClearTagEXT(stencilTagBits, stencilClearTag);

    return Qnil;
}

static VALUE rogl_glActiveStencilFaceEXT(VALUE _obj_, VALUE _arg1_)
{
    unsigned int face = (unsigned int)NUM2UINT(_arg1_);

    rogl_pfn_glActiveStencilFaceEXT(face);

    return Qnil;
}

static VALUE rogl_glTexSubImage1DEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    int level = (int)NUM2INT(_arg2_);
    int xoffset = (int)NUM2INT(_arg3_);
    int width = (int)NUM2INT(_arg4_);
    unsigned int format = (unsigned int)NUM2UINT(_arg5_);
    unsigned int type = (unsigned int)NUM2UINT(_arg6_);
    void* pixels = (void*)val2ptr(_arg7_);

    rogl_pfn_glTexSubImage1DEXT(target, level, xoffset, width, format, type, pixels);

    return Qnil;
}

static VALUE rogl_glTexSubImage2DEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_, VALUE _arg9_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    int level = (int)NUM2INT(_arg2_);
    int xoffset = (int)NUM2INT(_arg3_);
    int yoffset = (int)NUM2INT(_arg4_);
    int width = (int)NUM2INT(_arg5_);
    int height = (int)NUM2INT(_arg6_);
    unsigned int format = (unsigned int)NUM2UINT(_arg7_);
    unsigned int type = (unsigned int)NUM2UINT(_arg8_);
    void* pixels = (void*)val2ptr(_arg9_);

    rogl_pfn_glTexSubImage2DEXT(target, level, xoffset, yoffset, width, height, format, type, pixels);

    return Qnil;
}

static VALUE rogl_glTexImage3DEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_, VALUE _arg9_, VALUE _arg10_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    int level = (int)NUM2INT(_arg2_);
    unsigned int internalformat = (unsigned int)NUM2UINT(_arg3_);
    int width = (int)NUM2INT(_arg4_);
    int height = (int)NUM2INT(_arg5_);
    int depth = (int)NUM2INT(_arg6_);
    int border = (int)NUM2INT(_arg7_);
    unsigned int format = (unsigned int)NUM2UINT(_arg8_);
    unsigned int type = (unsigned int)NUM2UINT(_arg9_);
    void* pixels = (void*)val2ptr(_arg10_);

    rogl_pfn_glTexImage3DEXT(target, level, internalformat, width, height, depth, border, format, type, pixels);

    return Qnil;
}

static VALUE rogl_glTexSubImage3DEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_, VALUE _arg9_, VALUE _arg10_, VALUE _arg11_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    int level = (int)NUM2INT(_arg2_);
    int xoffset = (int)NUM2INT(_arg3_);
    int yoffset = (int)NUM2INT(_arg4_);
    int zoffset = (int)NUM2INT(_arg5_);
    int width = (int)NUM2INT(_arg6_);
    int height = (int)NUM2INT(_arg7_);
    int depth = (int)NUM2INT(_arg8_);
    unsigned int format = (unsigned int)NUM2UINT(_arg9_);
    unsigned int type = (unsigned int)NUM2UINT(_arg10_);
    void* pixels = (void*)val2ptr(_arg11_);

    rogl_pfn_glTexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);

    return Qnil;
}

static VALUE rogl_glTexBufferEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int internalformat = (unsigned int)NUM2UINT(_arg2_);
    unsigned int buffer = (unsigned int)NUM2UINT(_arg3_);

    rogl_pfn_glTexBufferEXT(target, internalformat, buffer);

    return Qnil;
}

static VALUE rogl_glTexParameterIivEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glTexParameterIivEXT(target, pname, params);

    return Qnil;
}

static VALUE rogl_glTexParameterIuivEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glTexParameterIuivEXT(target, pname, params);

    return Qnil;
}

static VALUE rogl_glGetTexParameterIivEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetTexParameterIivEXT(target, pname, params);

    return Qnil;
}

static VALUE rogl_glGetTexParameterIuivEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetTexParameterIuivEXT(target, pname, params);

    return Qnil;
}

static VALUE rogl_glClearColorIiEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    int red = (int)NUM2INT(_arg1_);
    int green = (int)NUM2INT(_arg2_);
    int blue = (int)NUM2INT(_arg3_);
    int alpha = (int)NUM2INT(_arg4_);

    rogl_pfn_glClearColorIiEXT(red, green, blue, alpha);

    return Qnil;
}

static VALUE rogl_glClearColorIuiEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int red = (unsigned int)NUM2UINT(_arg1_);
    unsigned int green = (unsigned int)NUM2UINT(_arg2_);
    unsigned int blue = (unsigned int)NUM2UINT(_arg3_);
    unsigned int alpha = (unsigned int)NUM2UINT(_arg4_);

    rogl_pfn_glClearColorIuiEXT(red, green, blue, alpha);

    return Qnil;
}

static VALUE rogl_glAreTexturesResidentEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    int n = (int)NUM2INT(_arg1_);
    void* textures = (void*)val2ptr(_arg2_);
    void* residences = (void*)val2ptr(_arg3_);

    unsigned char retval = rogl_pfn_glAreTexturesResidentEXT(n, textures, residences);

    return UINT2NUM(retval);
}

static VALUE rogl_glBindTextureEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int texture = (unsigned int)NUM2UINT(_arg2_);

    rogl_pfn_glBindTextureEXT(target, texture);

    return Qnil;
}

static VALUE rogl_glDeleteTexturesEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int n = (int)NUM2INT(_arg1_);
    void* textures = (void*)val2ptr(_arg2_);

    rogl_pfn_glDeleteTexturesEXT(n, textures);

    return Qnil;
}

static VALUE rogl_glGenTexturesEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int n = (int)NUM2INT(_arg1_);
    void* textures = (void*)val2ptr(_arg2_);

    rogl_pfn_glGenTexturesEXT(n, textures);

    return Qnil;
}

static VALUE rogl_glIsTextureEXT(VALUE _obj_, VALUE _arg1_)
{
    unsigned int texture = (unsigned int)NUM2UINT(_arg1_);

    unsigned char retval = rogl_pfn_glIsTextureEXT(texture);

    return UINT2NUM(retval);
}

static VALUE rogl_glPrioritizeTexturesEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    int n = (int)NUM2INT(_arg1_);
    void* textures = (void*)val2ptr(_arg2_);
    void* priorities = (void*)val2ptr(_arg3_);

    rogl_pfn_glPrioritizeTexturesEXT(n, textures, priorities);

    return Qnil;
}

static VALUE rogl_glTextureNormalEXT(VALUE _obj_, VALUE _arg1_)
{
    unsigned int mode = (unsigned int)NUM2UINT(_arg1_);

    rogl_pfn_glTextureNormalEXT(mode);

    return Qnil;
}

static VALUE rogl_glGetQueryObjecti64vEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int id = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetQueryObjecti64vEXT(id, pname, params);

    return Qnil;
}

static VALUE rogl_glGetQueryObjectui64vEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int id = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetQueryObjectui64vEXT(id, pname, params);

    return Qnil;
}

static VALUE rogl_glBeginTransformFeedbackEXT(VALUE _obj_, VALUE _arg1_)
{
    unsigned int primitiveMode = (unsigned int)NUM2UINT(_arg1_);

    rogl_pfn_glBeginTransformFeedbackEXT(primitiveMode);

    return Qnil;
}

static VALUE rogl_glEndTransformFeedbackEXT(VALUE _obj_)
{
    rogl_pfn_glEndTransformFeedbackEXT();

    return Qnil;
}

static VALUE rogl_glBindBufferRangeEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int index = (unsigned int)NUM2UINT(_arg2_);
    unsigned int buffer = (unsigned int)NUM2UINT(_arg3_);
    ptrdiff_t offset = (ptrdiff_t)(_arg4_);
    ptrdiff_t size = (ptrdiff_t)(_arg5_);

    rogl_pfn_glBindBufferRangeEXT(target, index, buffer, offset, size);

    return Qnil;
}

static VALUE rogl_glBindBufferOffsetEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int index = (unsigned int)NUM2UINT(_arg2_);
    unsigned int buffer = (unsigned int)NUM2UINT(_arg3_);
    ptrdiff_t offset = (ptrdiff_t)(_arg4_);

    rogl_pfn_glBindBufferOffsetEXT(target, index, buffer, offset);

    return Qnil;
}

static VALUE rogl_glBindBufferBaseEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int index = (unsigned int)NUM2UINT(_arg2_);
    unsigned int buffer = (unsigned int)NUM2UINT(_arg3_);

    rogl_pfn_glBindBufferBaseEXT(target, index, buffer);

    return Qnil;
}

static VALUE rogl_glTransformFeedbackVaryingsEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    int count = (int)NUM2INT(_arg2_);
    void* varyings = (void*)val2ptr(_arg3_);
    unsigned int bufferMode = (unsigned int)NUM2UINT(_arg4_);

    rogl_pfn_glTransformFeedbackVaryingsEXT(program, count, varyings, bufferMode);

    return Qnil;
}

static VALUE rogl_glGetTransformFeedbackVaryingEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    unsigned int index = (unsigned int)NUM2UINT(_arg2_);
    int bufSize = (int)NUM2INT(_arg3_);
    void* length = (void*)val2ptr(_arg4_);
    void* size = (void*)val2ptr(_arg5_);
    void* type = (void*)val2ptr(_arg6_);
    void* name = (void*)val2ptr(_arg7_);

    rogl_pfn_glGetTransformFeedbackVaryingEXT(program, index, bufSize, length, size, type, name);

    return Qnil;
}

static VALUE rogl_glArrayElementEXT(VALUE _obj_, VALUE _arg1_)
{
    int i = (int)NUM2INT(_arg1_);

    rogl_pfn_glArrayElementEXT(i);

    return Qnil;
}

static VALUE rogl_glColorPointerEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    int size = (int)NUM2INT(_arg1_);
    unsigned int type = (unsigned int)NUM2UINT(_arg2_);
    int stride = (int)NUM2INT(_arg3_);
    int count = (int)NUM2INT(_arg4_);
    void* pointer = (void*)val2ptr(_arg5_);

    rogl_pfn_glColorPointerEXT(size, type, stride, count, pointer);

    return Qnil;
}

static VALUE rogl_glDrawArraysEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int mode = (unsigned int)NUM2UINT(_arg1_);
    int first = (int)NUM2INT(_arg2_);
    int count = (int)NUM2INT(_arg3_);

    rogl_pfn_glDrawArraysEXT(mode, first, count);

    return Qnil;
}

static VALUE rogl_glEdgeFlagPointerEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    int stride = (int)NUM2INT(_arg1_);
    int count = (int)NUM2INT(_arg2_);
    void* pointer = (void*)val2ptr(_arg3_);

    rogl_pfn_glEdgeFlagPointerEXT(stride, count, pointer);

    return Qnil;
}

static VALUE rogl_glGetPointervEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int pname = (unsigned int)NUM2UINT(_arg1_);
    void* params = (void*)val2ptr(_arg2_);

    rogl_pfn_glGetPointervEXT(pname, params);

    return Qnil;
}

static VALUE rogl_glIndexPointerEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int type = (unsigned int)NUM2UINT(_arg1_);
    int stride = (int)NUM2INT(_arg2_);
    int count = (int)NUM2INT(_arg3_);
    void* pointer = (void*)val2ptr(_arg4_);

    rogl_pfn_glIndexPointerEXT(type, stride, count, pointer);

    return Qnil;
}

static VALUE rogl_glNormalPointerEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int type = (unsigned int)NUM2UINT(_arg1_);
    int stride = (int)NUM2INT(_arg2_);
    int count = (int)NUM2INT(_arg3_);
    void* pointer = (void*)val2ptr(_arg4_);

    rogl_pfn_glNormalPointerEXT(type, stride, count, pointer);

    return Qnil;
}

static VALUE rogl_glTexCoordPointerEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    int size = (int)NUM2INT(_arg1_);
    unsigned int type = (unsigned int)NUM2UINT(_arg2_);
    int stride = (int)NUM2INT(_arg3_);
    int count = (int)NUM2INT(_arg4_);
    void* pointer = (void*)val2ptr(_arg5_);

    rogl_pfn_glTexCoordPointerEXT(size, type, stride, count, pointer);

    return Qnil;
}

static VALUE rogl_glVertexPointerEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    int size = (int)NUM2INT(_arg1_);
    unsigned int type = (unsigned int)NUM2UINT(_arg2_);
    int stride = (int)NUM2INT(_arg3_);
    int count = (int)NUM2INT(_arg4_);
    void* pointer = (void*)val2ptr(_arg5_);

    rogl_pfn_glVertexPointerEXT(size, type, stride, count, pointer);

    return Qnil;
}

static VALUE rogl_glVertexAttribL1dEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    double x = (double)NUM2DBL(_arg2_);

    rogl_pfn_glVertexAttribL1dEXT(index, x);

    return Qnil;
}

static VALUE rogl_glVertexAttribL2dEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    double x = (double)NUM2DBL(_arg2_);
    double y = (double)NUM2DBL(_arg3_);

    rogl_pfn_glVertexAttribL2dEXT(index, x, y);

    return Qnil;
}

static VALUE rogl_glVertexAttribL3dEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    double x = (double)NUM2DBL(_arg2_);
    double y = (double)NUM2DBL(_arg3_);
    double z = (double)NUM2DBL(_arg4_);

    rogl_pfn_glVertexAttribL3dEXT(index, x, y, z);

    return Qnil;
}

static VALUE rogl_glVertexAttribL4dEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    double x = (double)NUM2DBL(_arg2_);
    double y = (double)NUM2DBL(_arg3_);
    double z = (double)NUM2DBL(_arg4_);
    double w = (double)NUM2DBL(_arg5_);

    rogl_pfn_glVertexAttribL4dEXT(index, x, y, z, w);

    return Qnil;
}

static VALUE rogl_glVertexAttribL1dvEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    void* v = (void*)val2ptr(_arg2_);

    rogl_pfn_glVertexAttribL1dvEXT(index, v);

    return Qnil;
}

static VALUE rogl_glVertexAttribL2dvEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    void* v = (void*)val2ptr(_arg2_);

    rogl_pfn_glVertexAttribL2dvEXT(index, v);

    return Qnil;
}

static VALUE rogl_glVertexAttribL3dvEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    void* v = (void*)val2ptr(_arg2_);

    rogl_pfn_glVertexAttribL3dvEXT(index, v);

    return Qnil;
}

static VALUE rogl_glVertexAttribL4dvEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    void* v = (void*)val2ptr(_arg2_);

    rogl_pfn_glVertexAttribL4dvEXT(index, v);

    return Qnil;
}

static VALUE rogl_glVertexAttribLPointerEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    int size = (int)NUM2INT(_arg2_);
    unsigned int type = (unsigned int)NUM2UINT(_arg3_);
    int stride = (int)NUM2INT(_arg4_);
    void* pointer = (void*)val2ptr(_arg5_);

    rogl_pfn_glVertexAttribLPointerEXT(index, size, type, stride, pointer);

    return Qnil;
}

static VALUE rogl_glGetVertexAttribLdvEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetVertexAttribLdvEXT(index, pname, params);

    return Qnil;
}

static VALUE rogl_glBeginVertexShaderEXT(VALUE _obj_)
{
    rogl_pfn_glBeginVertexShaderEXT();

    return Qnil;
}

static VALUE rogl_glEndVertexShaderEXT(VALUE _obj_)
{
    rogl_pfn_glEndVertexShaderEXT();

    return Qnil;
}

static VALUE rogl_glBindVertexShaderEXT(VALUE _obj_, VALUE _arg1_)
{
    unsigned int id = (unsigned int)NUM2UINT(_arg1_);

    rogl_pfn_glBindVertexShaderEXT(id);

    return Qnil;
}

static VALUE rogl_glGenVertexShadersEXT(VALUE _obj_, VALUE _arg1_)
{
    unsigned int range = (unsigned int)NUM2UINT(_arg1_);

    unsigned int retval = rogl_pfn_glGenVertexShadersEXT(range);

    return UINT2NUM(retval);
}

static VALUE rogl_glDeleteVertexShaderEXT(VALUE _obj_, VALUE _arg1_)
{
    unsigned int id = (unsigned int)NUM2UINT(_arg1_);

    rogl_pfn_glDeleteVertexShaderEXT(id);

    return Qnil;
}

static VALUE rogl_glShaderOp1EXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int op = (unsigned int)NUM2UINT(_arg1_);
    unsigned int res = (unsigned int)NUM2UINT(_arg2_);
    unsigned int arg1 = (unsigned int)NUM2UINT(_arg3_);

    rogl_pfn_glShaderOp1EXT(op, res, arg1);

    return Qnil;
}

static VALUE rogl_glShaderOp2EXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int op = (unsigned int)NUM2UINT(_arg1_);
    unsigned int res = (unsigned int)NUM2UINT(_arg2_);
    unsigned int arg1 = (unsigned int)NUM2UINT(_arg3_);
    unsigned int arg2 = (unsigned int)NUM2UINT(_arg4_);

    rogl_pfn_glShaderOp2EXT(op, res, arg1, arg2);

    return Qnil;
}

static VALUE rogl_glShaderOp3EXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int op = (unsigned int)NUM2UINT(_arg1_);
    unsigned int res = (unsigned int)NUM2UINT(_arg2_);
    unsigned int arg1 = (unsigned int)NUM2UINT(_arg3_);
    unsigned int arg2 = (unsigned int)NUM2UINT(_arg4_);
    unsigned int arg3 = (unsigned int)NUM2UINT(_arg5_);

    rogl_pfn_glShaderOp3EXT(op, res, arg1, arg2, arg3);

    return Qnil;
}

static VALUE rogl_glSwizzleEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_)
{
    unsigned int res = (unsigned int)NUM2UINT(_arg1_);
    unsigned int in = (unsigned int)NUM2UINT(_arg2_);
    unsigned int outX = (unsigned int)NUM2UINT(_arg3_);
    unsigned int outY = (unsigned int)NUM2UINT(_arg4_);
    unsigned int outZ = (unsigned int)NUM2UINT(_arg5_);
    unsigned int outW = (unsigned int)NUM2UINT(_arg6_);

    rogl_pfn_glSwizzleEXT(res, in, outX, outY, outZ, outW);

    return Qnil;
}

static VALUE rogl_glWriteMaskEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_)
{
    unsigned int res = (unsigned int)NUM2UINT(_arg1_);
    unsigned int in = (unsigned int)NUM2UINT(_arg2_);
    unsigned int outX = (unsigned int)NUM2UINT(_arg3_);
    unsigned int outY = (unsigned int)NUM2UINT(_arg4_);
    unsigned int outZ = (unsigned int)NUM2UINT(_arg5_);
    unsigned int outW = (unsigned int)NUM2UINT(_arg6_);

    rogl_pfn_glWriteMaskEXT(res, in, outX, outY, outZ, outW);

    return Qnil;
}

static VALUE rogl_glInsertComponentEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int res = (unsigned int)NUM2UINT(_arg1_);
    unsigned int src = (unsigned int)NUM2UINT(_arg2_);
    unsigned int num = (unsigned int)NUM2UINT(_arg3_);

    rogl_pfn_glInsertComponentEXT(res, src, num);

    return Qnil;
}

static VALUE rogl_glExtractComponentEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int res = (unsigned int)NUM2UINT(_arg1_);
    unsigned int src = (unsigned int)NUM2UINT(_arg2_);
    unsigned int num = (unsigned int)NUM2UINT(_arg3_);

    rogl_pfn_glExtractComponentEXT(res, src, num);

    return Qnil;
}

static VALUE rogl_glGenSymbolsEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int datatype = (unsigned int)NUM2UINT(_arg1_);
    unsigned int storagetype = (unsigned int)NUM2UINT(_arg2_);
    unsigned int range = (unsigned int)NUM2UINT(_arg3_);
    unsigned int components = (unsigned int)NUM2UINT(_arg4_);

    unsigned int retval = rogl_pfn_glGenSymbolsEXT(datatype, storagetype, range, components);

    return UINT2NUM(retval);
}

static VALUE rogl_glSetInvariantEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int id = (unsigned int)NUM2UINT(_arg1_);
    unsigned int type = (unsigned int)NUM2UINT(_arg2_);
    void* addr = (void*)val2ptr(_arg3_);

    rogl_pfn_glSetInvariantEXT(id, type, addr);

    return Qnil;
}

static VALUE rogl_glSetLocalConstantEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int id = (unsigned int)NUM2UINT(_arg1_);
    unsigned int type = (unsigned int)NUM2UINT(_arg2_);
    void* addr = (void*)val2ptr(_arg3_);

    rogl_pfn_glSetLocalConstantEXT(id, type, addr);

    return Qnil;
}

static VALUE rogl_glVariantbvEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int id = (unsigned int)NUM2UINT(_arg1_);
    void* addr = (void*)val2ptr(_arg2_);

    rogl_pfn_glVariantbvEXT(id, addr);

    return Qnil;
}

static VALUE rogl_glVariantsvEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int id = (unsigned int)NUM2UINT(_arg1_);
    void* addr = (void*)val2ptr(_arg2_);

    rogl_pfn_glVariantsvEXT(id, addr);

    return Qnil;
}

static VALUE rogl_glVariantivEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int id = (unsigned int)NUM2UINT(_arg1_);
    void* addr = (void*)val2ptr(_arg2_);

    rogl_pfn_glVariantivEXT(id, addr);

    return Qnil;
}

static VALUE rogl_glVariantfvEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int id = (unsigned int)NUM2UINT(_arg1_);
    void* addr = (void*)val2ptr(_arg2_);

    rogl_pfn_glVariantfvEXT(id, addr);

    return Qnil;
}

static VALUE rogl_glVariantdvEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int id = (unsigned int)NUM2UINT(_arg1_);
    void* addr = (void*)val2ptr(_arg2_);

    rogl_pfn_glVariantdvEXT(id, addr);

    return Qnil;
}

static VALUE rogl_glVariantubvEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int id = (unsigned int)NUM2UINT(_arg1_);
    void* addr = (void*)val2ptr(_arg2_);

    rogl_pfn_glVariantubvEXT(id, addr);

    return Qnil;
}

static VALUE rogl_glVariantusvEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int id = (unsigned int)NUM2UINT(_arg1_);
    void* addr = (void*)val2ptr(_arg2_);

    rogl_pfn_glVariantusvEXT(id, addr);

    return Qnil;
}

static VALUE rogl_glVariantuivEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int id = (unsigned int)NUM2UINT(_arg1_);
    void* addr = (void*)val2ptr(_arg2_);

    rogl_pfn_glVariantuivEXT(id, addr);

    return Qnil;
}

static VALUE rogl_glVariantPointerEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int id = (unsigned int)NUM2UINT(_arg1_);
    unsigned int type = (unsigned int)NUM2UINT(_arg2_);
    unsigned int stride = (unsigned int)NUM2UINT(_arg3_);
    void* addr = (void*)val2ptr(_arg4_);

    rogl_pfn_glVariantPointerEXT(id, type, stride, addr);

    return Qnil;
}

static VALUE rogl_glEnableVariantClientStateEXT(VALUE _obj_, VALUE _arg1_)
{
    unsigned int id = (unsigned int)NUM2UINT(_arg1_);

    rogl_pfn_glEnableVariantClientStateEXT(id);

    return Qnil;
}

static VALUE rogl_glDisableVariantClientStateEXT(VALUE _obj_, VALUE _arg1_)
{
    unsigned int id = (unsigned int)NUM2UINT(_arg1_);

    rogl_pfn_glDisableVariantClientStateEXT(id);

    return Qnil;
}

static VALUE rogl_glBindLightParameterEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int light = (unsigned int)NUM2UINT(_arg1_);
    unsigned int value = (unsigned int)NUM2UINT(_arg2_);

    unsigned int retval = rogl_pfn_glBindLightParameterEXT(light, value);

    return UINT2NUM(retval);
}

static VALUE rogl_glBindMaterialParameterEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int face = (unsigned int)NUM2UINT(_arg1_);
    unsigned int value = (unsigned int)NUM2UINT(_arg2_);

    unsigned int retval = rogl_pfn_glBindMaterialParameterEXT(face, value);

    return UINT2NUM(retval);
}

static VALUE rogl_glBindTexGenParameterEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int unit = (unsigned int)NUM2UINT(_arg1_);
    unsigned int coord = (unsigned int)NUM2UINT(_arg2_);
    unsigned int value = (unsigned int)NUM2UINT(_arg3_);

    unsigned int retval = rogl_pfn_glBindTexGenParameterEXT(unit, coord, value);

    return UINT2NUM(retval);
}

static VALUE rogl_glBindTextureUnitParameterEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int unit = (unsigned int)NUM2UINT(_arg1_);
    unsigned int value = (unsigned int)NUM2UINT(_arg2_);

    unsigned int retval = rogl_pfn_glBindTextureUnitParameterEXT(unit, value);

    return UINT2NUM(retval);
}

static VALUE rogl_glBindParameterEXT(VALUE _obj_, VALUE _arg1_)
{
    unsigned int value = (unsigned int)NUM2UINT(_arg1_);

    unsigned int retval = rogl_pfn_glBindParameterEXT(value);

    return UINT2NUM(retval);
}

static VALUE rogl_glIsVariantEnabledEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int id = (unsigned int)NUM2UINT(_arg1_);
    unsigned int cap = (unsigned int)NUM2UINT(_arg2_);

    unsigned char retval = rogl_pfn_glIsVariantEnabledEXT(id, cap);

    return UINT2NUM(retval);
}

static VALUE rogl_glGetVariantBooleanvEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int id = (unsigned int)NUM2UINT(_arg1_);
    unsigned int value = (unsigned int)NUM2UINT(_arg2_);
    void* data = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetVariantBooleanvEXT(id, value, data);

    return Qnil;
}

static VALUE rogl_glGetVariantIntegervEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int id = (unsigned int)NUM2UINT(_arg1_);
    unsigned int value = (unsigned int)NUM2UINT(_arg2_);
    void* data = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetVariantIntegervEXT(id, value, data);

    return Qnil;
}

static VALUE rogl_glGetVariantFloatvEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int id = (unsigned int)NUM2UINT(_arg1_);
    unsigned int value = (unsigned int)NUM2UINT(_arg2_);
    void* data = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetVariantFloatvEXT(id, value, data);

    return Qnil;
}

static VALUE rogl_glGetVariantPointervEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int id = (unsigned int)NUM2UINT(_arg1_);
    unsigned int value = (unsigned int)NUM2UINT(_arg2_);
    void* data = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetVariantPointervEXT(id, value, data);

    return Qnil;
}

static VALUE rogl_glGetInvariantBooleanvEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int id = (unsigned int)NUM2UINT(_arg1_);
    unsigned int value = (unsigned int)NUM2UINT(_arg2_);
    void* data = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetInvariantBooleanvEXT(id, value, data);

    return Qnil;
}

static VALUE rogl_glGetInvariantIntegervEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int id = (unsigned int)NUM2UINT(_arg1_);
    unsigned int value = (unsigned int)NUM2UINT(_arg2_);
    void* data = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetInvariantIntegervEXT(id, value, data);

    return Qnil;
}

static VALUE rogl_glGetInvariantFloatvEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int id = (unsigned int)NUM2UINT(_arg1_);
    unsigned int value = (unsigned int)NUM2UINT(_arg2_);
    void* data = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetInvariantFloatvEXT(id, value, data);

    return Qnil;
}

static VALUE rogl_glGetLocalConstantBooleanvEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int id = (unsigned int)NUM2UINT(_arg1_);
    unsigned int value = (unsigned int)NUM2UINT(_arg2_);
    void* data = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetLocalConstantBooleanvEXT(id, value, data);

    return Qnil;
}

static VALUE rogl_glGetLocalConstantIntegervEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int id = (unsigned int)NUM2UINT(_arg1_);
    unsigned int value = (unsigned int)NUM2UINT(_arg2_);
    void* data = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetLocalConstantIntegervEXT(id, value, data);

    return Qnil;
}

static VALUE rogl_glGetLocalConstantFloatvEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int id = (unsigned int)NUM2UINT(_arg1_);
    unsigned int value = (unsigned int)NUM2UINT(_arg2_);
    void* data = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetLocalConstantFloatvEXT(id, value, data);

    return Qnil;
}

static VALUE rogl_glVertexWeightfEXT(VALUE _obj_, VALUE _arg1_)
{
    float weight = (float)NUM2DBL(_arg1_);

    rogl_pfn_glVertexWeightfEXT(weight);

    return Qnil;
}

static VALUE rogl_glVertexWeightfvEXT(VALUE _obj_, VALUE _arg1_)
{
    void* weight = (void*)val2ptr(_arg1_);

    rogl_pfn_glVertexWeightfvEXT(weight);

    return Qnil;
}

static VALUE rogl_glVertexWeightPointerEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    int size = (int)NUM2INT(_arg1_);
    unsigned int type = (unsigned int)NUM2UINT(_arg2_);
    int stride = (int)NUM2INT(_arg3_);
    void* pointer = (void*)val2ptr(_arg4_);

    rogl_pfn_glVertexWeightPointerEXT(size, type, stride, pointer);

    return Qnil;
}

static VALUE rogl_glImportSyncEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int external_sync_type = (unsigned int)NUM2UINT(_arg1_);
    ptrdiff_t external_sync = (ptrdiff_t)(_arg2_);
    unsigned int flags = (unsigned int)NUM2UINT(_arg3_);

    void* retval = rogl_pfn_glImportSyncEXT(external_sync_type, external_sync, flags);

    return CPOINTER_AS_VALUE(retval);
}

static VALUE rogl_glFrameTerminatorGREMEDY(VALUE _obj_)
{
    rogl_pfn_glFrameTerminatorGREMEDY();

    return Qnil;
}

static VALUE rogl_glStringMarkerGREMEDY(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int len = (int)NUM2INT(_arg1_);
    void* string = (void*)val2ptr(_arg2_);

    rogl_pfn_glStringMarkerGREMEDY(len, string);

    return Qnil;
}

static VALUE rogl_glImageTransformParameteriHP(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    int param = (int)NUM2INT(_arg3_);

    rogl_pfn_glImageTransformParameteriHP(target, pname, param);

    return Qnil;
}

static VALUE rogl_glImageTransformParameterfHP(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    float param = (float)NUM2DBL(_arg3_);

    rogl_pfn_glImageTransformParameterfHP(target, pname, param);

    return Qnil;
}

static VALUE rogl_glImageTransformParameterivHP(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glImageTransformParameterivHP(target, pname, params);

    return Qnil;
}

static VALUE rogl_glImageTransformParameterfvHP(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glImageTransformParameterfvHP(target, pname, params);

    return Qnil;
}

static VALUE rogl_glGetImageTransformParameterivHP(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetImageTransformParameterivHP(target, pname, params);

    return Qnil;
}

static VALUE rogl_glGetImageTransformParameterfvHP(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetImageTransformParameterfvHP(target, pname, params);

    return Qnil;
}

static VALUE rogl_glMultiModeDrawArraysIBM(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    void* mode = (void*)val2ptr(_arg1_);
    void* first = (void*)val2ptr(_arg2_);
    void* count = (void*)val2ptr(_arg3_);
    int primcount = (int)NUM2INT(_arg4_);
    int modestride = (int)NUM2INT(_arg5_);

    rogl_pfn_glMultiModeDrawArraysIBM(mode, first, count, primcount, modestride);

    return Qnil;
}

static VALUE rogl_glMultiModeDrawElementsIBM(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_)
{
    void* mode = (void*)val2ptr(_arg1_);
    void* count = (void*)val2ptr(_arg2_);
    unsigned int type = (unsigned int)NUM2UINT(_arg3_);
    void* indices = (void*)val2ptr(_arg4_);
    int primcount = (int)NUM2INT(_arg5_);
    int modestride = (int)NUM2INT(_arg6_);

    rogl_pfn_glMultiModeDrawElementsIBM(mode, count, type, indices, primcount, modestride);

    return Qnil;
}

static VALUE rogl_glFlushStaticDataIBM(VALUE _obj_, VALUE _arg1_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);

    rogl_pfn_glFlushStaticDataIBM(target);

    return Qnil;
}

static VALUE rogl_glColorPointerListIBM(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    int size = (int)NUM2INT(_arg1_);
    unsigned int type = (unsigned int)NUM2UINT(_arg2_);
    int stride = (int)NUM2INT(_arg3_);
    void* pointer = (void*)val2ptr(_arg4_);
    int ptrstride = (int)NUM2INT(_arg5_);

    rogl_pfn_glColorPointerListIBM(size, type, stride, pointer, ptrstride);

    return Qnil;
}

static VALUE rogl_glSecondaryColorPointerListIBM(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    int size = (int)NUM2INT(_arg1_);
    unsigned int type = (unsigned int)NUM2UINT(_arg2_);
    int stride = (int)NUM2INT(_arg3_);
    void* pointer = (void*)val2ptr(_arg4_);
    int ptrstride = (int)NUM2INT(_arg5_);

    rogl_pfn_glSecondaryColorPointerListIBM(size, type, stride, pointer, ptrstride);

    return Qnil;
}

static VALUE rogl_glEdgeFlagPointerListIBM(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    int stride = (int)NUM2INT(_arg1_);
    void* pointer = (void*)val2ptr(_arg2_);
    int ptrstride = (int)NUM2INT(_arg3_);

    rogl_pfn_glEdgeFlagPointerListIBM(stride, pointer, ptrstride);

    return Qnil;
}

static VALUE rogl_glFogCoordPointerListIBM(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int type = (unsigned int)NUM2UINT(_arg1_);
    int stride = (int)NUM2INT(_arg2_);
    void* pointer = (void*)val2ptr(_arg3_);
    int ptrstride = (int)NUM2INT(_arg4_);

    rogl_pfn_glFogCoordPointerListIBM(type, stride, pointer, ptrstride);

    return Qnil;
}

static VALUE rogl_glIndexPointerListIBM(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int type = (unsigned int)NUM2UINT(_arg1_);
    int stride = (int)NUM2INT(_arg2_);
    void* pointer = (void*)val2ptr(_arg3_);
    int ptrstride = (int)NUM2INT(_arg4_);

    rogl_pfn_glIndexPointerListIBM(type, stride, pointer, ptrstride);

    return Qnil;
}

static VALUE rogl_glNormalPointerListIBM(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int type = (unsigned int)NUM2UINT(_arg1_);
    int stride = (int)NUM2INT(_arg2_);
    void* pointer = (void*)val2ptr(_arg3_);
    int ptrstride = (int)NUM2INT(_arg4_);

    rogl_pfn_glNormalPointerListIBM(type, stride, pointer, ptrstride);

    return Qnil;
}

static VALUE rogl_glTexCoordPointerListIBM(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    int size = (int)NUM2INT(_arg1_);
    unsigned int type = (unsigned int)NUM2UINT(_arg2_);
    int stride = (int)NUM2INT(_arg3_);
    void* pointer = (void*)val2ptr(_arg4_);
    int ptrstride = (int)NUM2INT(_arg5_);

    rogl_pfn_glTexCoordPointerListIBM(size, type, stride, pointer, ptrstride);

    return Qnil;
}

static VALUE rogl_glVertexPointerListIBM(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    int size = (int)NUM2INT(_arg1_);
    unsigned int type = (unsigned int)NUM2UINT(_arg2_);
    int stride = (int)NUM2INT(_arg3_);
    void* pointer = (void*)val2ptr(_arg4_);
    int ptrstride = (int)NUM2INT(_arg5_);

    rogl_pfn_glVertexPointerListIBM(size, type, stride, pointer, ptrstride);

    return Qnil;
}

static VALUE rogl_glBlendFuncSeparateINGR(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int sfactorRGB = (unsigned int)NUM2UINT(_arg1_);
    unsigned int dfactorRGB = (unsigned int)NUM2UINT(_arg2_);
    unsigned int sfactorAlpha = (unsigned int)NUM2UINT(_arg3_);
    unsigned int dfactorAlpha = (unsigned int)NUM2UINT(_arg4_);

    rogl_pfn_glBlendFuncSeparateINGR(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);

    return Qnil;
}

static VALUE rogl_glApplyFramebufferAttachmentCMAAINTEL(VALUE _obj_)
{
    rogl_pfn_glApplyFramebufferAttachmentCMAAINTEL();

    return Qnil;
}

static VALUE rogl_glSyncTextureINTEL(VALUE _obj_, VALUE _arg1_)
{
    unsigned int texture = (unsigned int)NUM2UINT(_arg1_);

    rogl_pfn_glSyncTextureINTEL(texture);

    return Qnil;
}

static VALUE rogl_glUnmapTexture2DINTEL(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int texture = (unsigned int)NUM2UINT(_arg1_);
    int level = (int)NUM2INT(_arg2_);

    rogl_pfn_glUnmapTexture2DINTEL(texture, level);

    return Qnil;
}

static VALUE rogl_glMapTexture2DINTEL(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int texture = (unsigned int)NUM2UINT(_arg1_);
    int level = (int)NUM2INT(_arg2_);
    unsigned int access = (unsigned int)NUM2UINT(_arg3_);
    void* stride = (void*)val2ptr(_arg4_);
    void* layout = (void*)val2ptr(_arg5_);

    void* retval = rogl_pfn_glMapTexture2DINTEL(texture, level, access, stride, layout);

    return CPOINTER_AS_VALUE(retval);
}

static VALUE rogl_glVertexPointervINTEL(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    int size = (int)NUM2INT(_arg1_);
    unsigned int type = (unsigned int)NUM2UINT(_arg2_);
    void* pointer = (void*)val2ptr(_arg3_);

    rogl_pfn_glVertexPointervINTEL(size, type, pointer);

    return Qnil;
}

static VALUE rogl_glNormalPointervINTEL(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int type = (unsigned int)NUM2UINT(_arg1_);
    void* pointer = (void*)val2ptr(_arg2_);

    rogl_pfn_glNormalPointervINTEL(type, pointer);

    return Qnil;
}

static VALUE rogl_glColorPointervINTEL(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    int size = (int)NUM2INT(_arg1_);
    unsigned int type = (unsigned int)NUM2UINT(_arg2_);
    void* pointer = (void*)val2ptr(_arg3_);

    rogl_pfn_glColorPointervINTEL(size, type, pointer);

    return Qnil;
}

static VALUE rogl_glTexCoordPointervINTEL(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    int size = (int)NUM2INT(_arg1_);
    unsigned int type = (unsigned int)NUM2UINT(_arg2_);
    void* pointer = (void*)val2ptr(_arg3_);

    rogl_pfn_glTexCoordPointervINTEL(size, type, pointer);

    return Qnil;
}

static VALUE rogl_glBeginPerfQueryINTEL(VALUE _obj_, VALUE _arg1_)
{
    unsigned int queryHandle = (unsigned int)NUM2UINT(_arg1_);

    rogl_pfn_glBeginPerfQueryINTEL(queryHandle);

    return Qnil;
}

static VALUE rogl_glCreatePerfQueryINTEL(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int queryId = (unsigned int)NUM2UINT(_arg1_);
    void* queryHandle = (void*)val2ptr(_arg2_);

    rogl_pfn_glCreatePerfQueryINTEL(queryId, queryHandle);

    return Qnil;
}

static VALUE rogl_glDeletePerfQueryINTEL(VALUE _obj_, VALUE _arg1_)
{
    unsigned int queryHandle = (unsigned int)NUM2UINT(_arg1_);

    rogl_pfn_glDeletePerfQueryINTEL(queryHandle);

    return Qnil;
}

static VALUE rogl_glEndPerfQueryINTEL(VALUE _obj_, VALUE _arg1_)
{
    unsigned int queryHandle = (unsigned int)NUM2UINT(_arg1_);

    rogl_pfn_glEndPerfQueryINTEL(queryHandle);

    return Qnil;
}

static VALUE rogl_glGetFirstPerfQueryIdINTEL(VALUE _obj_, VALUE _arg1_)
{
    void* queryId = (void*)val2ptr(_arg1_);

    rogl_pfn_glGetFirstPerfQueryIdINTEL(queryId);

    return Qnil;
}

static VALUE rogl_glGetNextPerfQueryIdINTEL(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int queryId = (unsigned int)NUM2UINT(_arg1_);
    void* nextQueryId = (void*)val2ptr(_arg2_);

    rogl_pfn_glGetNextPerfQueryIdINTEL(queryId, nextQueryId);

    return Qnil;
}

static VALUE rogl_glGetPerfCounterInfoINTEL(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_, VALUE _arg9_, VALUE _arg10_, VALUE _arg11_)
{
    unsigned int queryId = (unsigned int)NUM2UINT(_arg1_);
    unsigned int counterId = (unsigned int)NUM2UINT(_arg2_);
    unsigned int counterNameLength = (unsigned int)NUM2UINT(_arg3_);
    void* counterName = (void*)val2ptr(_arg4_);
    unsigned int counterDescLength = (unsigned int)NUM2UINT(_arg5_);
    void* counterDesc = (void*)val2ptr(_arg6_);
    void* counterOffset = (void*)val2ptr(_arg7_);
    void* counterDataSize = (void*)val2ptr(_arg8_);
    void* counterTypeEnum = (void*)val2ptr(_arg9_);
    void* counterDataTypeEnum = (void*)val2ptr(_arg10_);
    void* rawCounterMaxValue = (void*)val2ptr(_arg11_);

    rogl_pfn_glGetPerfCounterInfoINTEL(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue);

    return Qnil;
}

static VALUE rogl_glGetPerfQueryDataINTEL(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int queryHandle = (unsigned int)NUM2UINT(_arg1_);
    unsigned int flags = (unsigned int)NUM2UINT(_arg2_);
    int dataSize = (int)NUM2INT(_arg3_);
    void* data = (void*)val2ptr(_arg4_);
    void* bytesWritten = (void*)val2ptr(_arg5_);

    rogl_pfn_glGetPerfQueryDataINTEL(queryHandle, flags, dataSize, data, bytesWritten);

    return Qnil;
}

static VALUE rogl_glGetPerfQueryIdByNameINTEL(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    void* queryName = (void*)val2ptr(_arg1_);
    void* queryId = (void*)val2ptr(_arg2_);

    rogl_pfn_glGetPerfQueryIdByNameINTEL(queryName, queryId);

    return Qnil;
}

static VALUE rogl_glGetPerfQueryInfoINTEL(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_)
{
    unsigned int queryId = (unsigned int)NUM2UINT(_arg1_);
    unsigned int queryNameLength = (unsigned int)NUM2UINT(_arg2_);
    void* queryName = (void*)val2ptr(_arg3_);
    void* dataSize = (void*)val2ptr(_arg4_);
    void* noCounters = (void*)val2ptr(_arg5_);
    void* noInstances = (void*)val2ptr(_arg6_);
    void* capsMask = (void*)val2ptr(_arg7_);

    rogl_pfn_glGetPerfQueryInfoINTEL(queryId, queryNameLength, queryName, dataSize, noCounters, noInstances, capsMask);

    return Qnil;
}

static VALUE rogl_glBlendBarrierKHR(VALUE _obj_)
{
    rogl_pfn_glBlendBarrierKHR();

    return Qnil;
}

static VALUE rogl_glDebugMessageControlKHR(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_)
{
    unsigned int source = (unsigned int)NUM2UINT(_arg1_);
    unsigned int type = (unsigned int)NUM2UINT(_arg2_);
    unsigned int severity = (unsigned int)NUM2UINT(_arg3_);
    int count = (int)NUM2INT(_arg4_);
    void* ids = (void*)val2ptr(_arg5_);
    unsigned char enabled = (unsigned char)NUM2UINT(_arg6_);

    rogl_pfn_glDebugMessageControlKHR(source, type, severity, count, ids, enabled);

    return Qnil;
}

static VALUE rogl_glDebugMessageInsertKHR(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_)
{
    unsigned int source = (unsigned int)NUM2UINT(_arg1_);
    unsigned int type = (unsigned int)NUM2UINT(_arg2_);
    unsigned int id = (unsigned int)NUM2UINT(_arg3_);
    unsigned int severity = (unsigned int)NUM2UINT(_arg4_);
    int length = (int)NUM2INT(_arg5_);
    void* buf = (void*)val2ptr(_arg6_);

    rogl_pfn_glDebugMessageInsertKHR(source, type, id, severity, length, buf);

    return Qnil;
}

static VALUE rogl_glDebugMessageCallbackKHR(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    void* callback = (void*)val2ptr(_arg1_);
    void* userParam = (void*)val2ptr(_arg2_);

    rogl_pfn_glDebugMessageCallbackKHR(callback, userParam);

    return Qnil;
}

static VALUE rogl_glGetDebugMessageLogKHR(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_)
{
    unsigned int count = (unsigned int)NUM2UINT(_arg1_);
    int bufSize = (int)NUM2INT(_arg2_);
    void* sources = (void*)val2ptr(_arg3_);
    void* types = (void*)val2ptr(_arg4_);
    void* ids = (void*)val2ptr(_arg5_);
    void* severities = (void*)val2ptr(_arg6_);
    void* lengths = (void*)val2ptr(_arg7_);
    void* messageLog = (void*)val2ptr(_arg8_);

    unsigned int retval = rogl_pfn_glGetDebugMessageLogKHR(count, bufSize, sources, types, ids, severities, lengths, messageLog);

    return UINT2NUM(retval);
}

static VALUE rogl_glPushDebugGroupKHR(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int source = (unsigned int)NUM2UINT(_arg1_);
    unsigned int id = (unsigned int)NUM2UINT(_arg2_);
    int length = (int)NUM2INT(_arg3_);
    void* message = (void*)val2ptr(_arg4_);

    rogl_pfn_glPushDebugGroupKHR(source, id, length, message);

    return Qnil;
}

static VALUE rogl_glPopDebugGroupKHR(VALUE _obj_)
{
    rogl_pfn_glPopDebugGroupKHR();

    return Qnil;
}

static VALUE rogl_glObjectLabelKHR(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int identifier = (unsigned int)NUM2UINT(_arg1_);
    unsigned int name = (unsigned int)NUM2UINT(_arg2_);
    int length = (int)NUM2INT(_arg3_);
    void* label = (void*)val2ptr(_arg4_);

    rogl_pfn_glObjectLabelKHR(identifier, name, length, label);

    return Qnil;
}

static VALUE rogl_glGetObjectLabelKHR(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int identifier = (unsigned int)NUM2UINT(_arg1_);
    unsigned int name = (unsigned int)NUM2UINT(_arg2_);
    int bufSize = (int)NUM2INT(_arg3_);
    void* length = (void*)val2ptr(_arg4_);
    void* label = (void*)val2ptr(_arg5_);

    rogl_pfn_glGetObjectLabelKHR(identifier, name, bufSize, length, label);

    return Qnil;
}

static VALUE rogl_glObjectPtrLabelKHR(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    void* ptr = (void*)val2ptr(_arg1_);
    int length = (int)NUM2INT(_arg2_);
    void* label = (void*)val2ptr(_arg3_);

    rogl_pfn_glObjectPtrLabelKHR(ptr, length, label);

    return Qnil;
}

static VALUE rogl_glGetObjectPtrLabelKHR(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    void* ptr = (void*)val2ptr(_arg1_);
    int bufSize = (int)NUM2INT(_arg2_);
    void* length = (void*)val2ptr(_arg3_);
    void* label = (void*)val2ptr(_arg4_);

    rogl_pfn_glGetObjectPtrLabelKHR(ptr, bufSize, length, label);

    return Qnil;
}

static VALUE rogl_glGetPointervKHR(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int pname = (unsigned int)NUM2UINT(_arg1_);
    void* params = (void*)val2ptr(_arg2_);

    rogl_pfn_glGetPointervKHR(pname, params);

    return Qnil;
}

static VALUE rogl_glGetGraphicsResetStatusKHR(VALUE _obj_)
{
    unsigned int retval = rogl_pfn_glGetGraphicsResetStatusKHR();

    return UINT2NUM(retval);
}

static VALUE rogl_glReadnPixelsKHR(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_)
{
    int x = (int)NUM2INT(_arg1_);
    int y = (int)NUM2INT(_arg2_);
    int width = (int)NUM2INT(_arg3_);
    int height = (int)NUM2INT(_arg4_);
    unsigned int format = (unsigned int)NUM2UINT(_arg5_);
    unsigned int type = (unsigned int)NUM2UINT(_arg6_);
    int bufSize = (int)NUM2INT(_arg7_);
    void* data = (void*)val2ptr(_arg8_);

    rogl_pfn_glReadnPixelsKHR(x, y, width, height, format, type, bufSize, data);

    return Qnil;
}

static VALUE rogl_glGetnUniformfvKHR(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    int location = (int)NUM2INT(_arg2_);
    int bufSize = (int)NUM2INT(_arg3_);
    void* params = (void*)val2ptr(_arg4_);

    rogl_pfn_glGetnUniformfvKHR(program, location, bufSize, params);

    return Qnil;
}

static VALUE rogl_glGetnUniformivKHR(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    int location = (int)NUM2INT(_arg2_);
    int bufSize = (int)NUM2INT(_arg3_);
    void* params = (void*)val2ptr(_arg4_);

    rogl_pfn_glGetnUniformivKHR(program, location, bufSize, params);

    return Qnil;
}

static VALUE rogl_glGetnUniformuivKHR(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    int location = (int)NUM2INT(_arg2_);
    int bufSize = (int)NUM2INT(_arg3_);
    void* params = (void*)val2ptr(_arg4_);

    rogl_pfn_glGetnUniformuivKHR(program, location, bufSize, params);

    return Qnil;
}

static VALUE rogl_glResizeBuffersMESA(VALUE _obj_)
{
    rogl_pfn_glResizeBuffersMESA();

    return Qnil;
}

static VALUE rogl_glWindowPos2dMESA(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    double x = (double)NUM2DBL(_arg1_);
    double y = (double)NUM2DBL(_arg2_);

    rogl_pfn_glWindowPos2dMESA(x, y);

    return Qnil;
}

static VALUE rogl_glWindowPos2dvMESA(VALUE _obj_, VALUE _arg1_)
{
    void* v = (void*)val2ptr(_arg1_);

    rogl_pfn_glWindowPos2dvMESA(v);

    return Qnil;
}

static VALUE rogl_glWindowPos2fMESA(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    float x = (float)NUM2DBL(_arg1_);
    float y = (float)NUM2DBL(_arg2_);

    rogl_pfn_glWindowPos2fMESA(x, y);

    return Qnil;
}

static VALUE rogl_glWindowPos2fvMESA(VALUE _obj_, VALUE _arg1_)
{
    void* v = (void*)val2ptr(_arg1_);

    rogl_pfn_glWindowPos2fvMESA(v);

    return Qnil;
}

static VALUE rogl_glWindowPos2iMESA(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int x = (int)NUM2INT(_arg1_);
    int y = (int)NUM2INT(_arg2_);

    rogl_pfn_glWindowPos2iMESA(x, y);

    return Qnil;
}

static VALUE rogl_glWindowPos2ivMESA(VALUE _obj_, VALUE _arg1_)
{
    void* v = (void*)val2ptr(_arg1_);

    rogl_pfn_glWindowPos2ivMESA(v);

    return Qnil;
}

static VALUE rogl_glWindowPos2sMESA(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    short x = (short)NUM2INT(_arg1_);
    short y = (short)NUM2INT(_arg2_);

    rogl_pfn_glWindowPos2sMESA(x, y);

    return Qnil;
}

static VALUE rogl_glWindowPos2svMESA(VALUE _obj_, VALUE _arg1_)
{
    void* v = (void*)val2ptr(_arg1_);

    rogl_pfn_glWindowPos2svMESA(v);

    return Qnil;
}

static VALUE rogl_glWindowPos3dMESA(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    double x = (double)NUM2DBL(_arg1_);
    double y = (double)NUM2DBL(_arg2_);
    double z = (double)NUM2DBL(_arg3_);

    rogl_pfn_glWindowPos3dMESA(x, y, z);

    return Qnil;
}

static VALUE rogl_glWindowPos3dvMESA(VALUE _obj_, VALUE _arg1_)
{
    void* v = (void*)val2ptr(_arg1_);

    rogl_pfn_glWindowPos3dvMESA(v);

    return Qnil;
}

static VALUE rogl_glWindowPos3fMESA(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    float x = (float)NUM2DBL(_arg1_);
    float y = (float)NUM2DBL(_arg2_);
    float z = (float)NUM2DBL(_arg3_);

    rogl_pfn_glWindowPos3fMESA(x, y, z);

    return Qnil;
}

static VALUE rogl_glWindowPos3fvMESA(VALUE _obj_, VALUE _arg1_)
{
    void* v = (void*)val2ptr(_arg1_);

    rogl_pfn_glWindowPos3fvMESA(v);

    return Qnil;
}

static VALUE rogl_glWindowPos3iMESA(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    int x = (int)NUM2INT(_arg1_);
    int y = (int)NUM2INT(_arg2_);
    int z = (int)NUM2INT(_arg3_);

    rogl_pfn_glWindowPos3iMESA(x, y, z);

    return Qnil;
}

static VALUE rogl_glWindowPos3ivMESA(VALUE _obj_, VALUE _arg1_)
{
    void* v = (void*)val2ptr(_arg1_);

    rogl_pfn_glWindowPos3ivMESA(v);

    return Qnil;
}

static VALUE rogl_glWindowPos3sMESA(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    short x = (short)NUM2INT(_arg1_);
    short y = (short)NUM2INT(_arg2_);
    short z = (short)NUM2INT(_arg3_);

    rogl_pfn_glWindowPos3sMESA(x, y, z);

    return Qnil;
}

static VALUE rogl_glWindowPos3svMESA(VALUE _obj_, VALUE _arg1_)
{
    void* v = (void*)val2ptr(_arg1_);

    rogl_pfn_glWindowPos3svMESA(v);

    return Qnil;
}

static VALUE rogl_glWindowPos4dMESA(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    double x = (double)NUM2DBL(_arg1_);
    double y = (double)NUM2DBL(_arg2_);
    double z = (double)NUM2DBL(_arg3_);
    double w = (double)NUM2DBL(_arg4_);

    rogl_pfn_glWindowPos4dMESA(x, y, z, w);

    return Qnil;
}

static VALUE rogl_glWindowPos4dvMESA(VALUE _obj_, VALUE _arg1_)
{
    void* v = (void*)val2ptr(_arg1_);

    rogl_pfn_glWindowPos4dvMESA(v);

    return Qnil;
}

static VALUE rogl_glWindowPos4fMESA(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    float x = (float)NUM2DBL(_arg1_);
    float y = (float)NUM2DBL(_arg2_);
    float z = (float)NUM2DBL(_arg3_);
    float w = (float)NUM2DBL(_arg4_);

    rogl_pfn_glWindowPos4fMESA(x, y, z, w);

    return Qnil;
}

static VALUE rogl_glWindowPos4fvMESA(VALUE _obj_, VALUE _arg1_)
{
    void* v = (void*)val2ptr(_arg1_);

    rogl_pfn_glWindowPos4fvMESA(v);

    return Qnil;
}

static VALUE rogl_glWindowPos4iMESA(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    int x = (int)NUM2INT(_arg1_);
    int y = (int)NUM2INT(_arg2_);
    int z = (int)NUM2INT(_arg3_);
    int w = (int)NUM2INT(_arg4_);

    rogl_pfn_glWindowPos4iMESA(x, y, z, w);

    return Qnil;
}

static VALUE rogl_glWindowPos4ivMESA(VALUE _obj_, VALUE _arg1_)
{
    void* v = (void*)val2ptr(_arg1_);

    rogl_pfn_glWindowPos4ivMESA(v);

    return Qnil;
}

static VALUE rogl_glWindowPos4sMESA(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    short x = (short)NUM2INT(_arg1_);
    short y = (short)NUM2INT(_arg2_);
    short z = (short)NUM2INT(_arg3_);
    short w = (short)NUM2INT(_arg4_);

    rogl_pfn_glWindowPos4sMESA(x, y, z, w);

    return Qnil;
}

static VALUE rogl_glWindowPos4svMESA(VALUE _obj_, VALUE _arg1_)
{
    void* v = (void*)val2ptr(_arg1_);

    rogl_pfn_glWindowPos4svMESA(v);

    return Qnil;
}

static VALUE rogl_glBeginConditionalRenderNVX(VALUE _obj_, VALUE _arg1_)
{
    unsigned int id = (unsigned int)NUM2UINT(_arg1_);

    rogl_pfn_glBeginConditionalRenderNVX(id);

    return Qnil;
}

static VALUE rogl_glEndConditionalRenderNVX(VALUE _obj_)
{
    rogl_pfn_glEndConditionalRenderNVX();

    return Qnil;
}

static VALUE rogl_glMultiDrawArraysIndirectBindlessNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int mode = (unsigned int)NUM2UINT(_arg1_);
    void* indirect = (void*)val2ptr(_arg2_);
    int drawCount = (int)NUM2INT(_arg3_);
    int stride = (int)NUM2INT(_arg4_);
    int vertexBufferCount = (int)NUM2INT(_arg5_);

    rogl_pfn_glMultiDrawArraysIndirectBindlessNV(mode, indirect, drawCount, stride, vertexBufferCount);

    return Qnil;
}

static VALUE rogl_glMultiDrawElementsIndirectBindlessNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_)
{
    unsigned int mode = (unsigned int)NUM2UINT(_arg1_);
    unsigned int type = (unsigned int)NUM2UINT(_arg2_);
    void* indirect = (void*)val2ptr(_arg3_);
    int drawCount = (int)NUM2INT(_arg4_);
    int stride = (int)NUM2INT(_arg5_);
    int vertexBufferCount = (int)NUM2INT(_arg6_);

    rogl_pfn_glMultiDrawElementsIndirectBindlessNV(mode, type, indirect, drawCount, stride, vertexBufferCount);

    return Qnil;
}

static VALUE rogl_glMultiDrawArraysIndirectBindlessCountNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_)
{
    unsigned int mode = (unsigned int)NUM2UINT(_arg1_);
    void* indirect = (void*)val2ptr(_arg2_);
    int drawCount = (int)NUM2INT(_arg3_);
    int maxDrawCount = (int)NUM2INT(_arg4_);
    int stride = (int)NUM2INT(_arg5_);
    int vertexBufferCount = (int)NUM2INT(_arg6_);

    rogl_pfn_glMultiDrawArraysIndirectBindlessCountNV(mode, indirect, drawCount, maxDrawCount, stride, vertexBufferCount);

    return Qnil;
}

static VALUE rogl_glMultiDrawElementsIndirectBindlessCountNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_)
{
    unsigned int mode = (unsigned int)NUM2UINT(_arg1_);
    unsigned int type = (unsigned int)NUM2UINT(_arg2_);
    void* indirect = (void*)val2ptr(_arg3_);
    int drawCount = (int)NUM2INT(_arg4_);
    int maxDrawCount = (int)NUM2INT(_arg5_);
    int stride = (int)NUM2INT(_arg6_);
    int vertexBufferCount = (int)NUM2INT(_arg7_);

    rogl_pfn_glMultiDrawElementsIndirectBindlessCountNV(mode, type, indirect, drawCount, maxDrawCount, stride, vertexBufferCount);

    return Qnil;
}

static VALUE rogl_glGetTextureHandleNV(VALUE _obj_, VALUE _arg1_)
{
    unsigned int texture = (unsigned int)NUM2UINT(_arg1_);

    unsigned long long retval = rogl_pfn_glGetTextureHandleNV(texture);

    return ULL2NUM(retval);
}

static VALUE rogl_glGetTextureSamplerHandleNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int texture = (unsigned int)NUM2UINT(_arg1_);
    unsigned int sampler = (unsigned int)NUM2UINT(_arg2_);

    unsigned long long retval = rogl_pfn_glGetTextureSamplerHandleNV(texture, sampler);

    return ULL2NUM(retval);
}

static VALUE rogl_glMakeTextureHandleResidentNV(VALUE _obj_, VALUE _arg1_)
{
    unsigned long long handle = (unsigned long long)NUM2ULL(_arg1_);

    rogl_pfn_glMakeTextureHandleResidentNV(handle);

    return Qnil;
}

static VALUE rogl_glMakeTextureHandleNonResidentNV(VALUE _obj_, VALUE _arg1_)
{
    unsigned long long handle = (unsigned long long)NUM2ULL(_arg1_);

    rogl_pfn_glMakeTextureHandleNonResidentNV(handle);

    return Qnil;
}

static VALUE rogl_glGetImageHandleNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int texture = (unsigned int)NUM2UINT(_arg1_);
    int level = (int)NUM2INT(_arg2_);
    unsigned char layered = (unsigned char)NUM2UINT(_arg3_);
    int layer = (int)NUM2INT(_arg4_);
    unsigned int format = (unsigned int)NUM2UINT(_arg5_);

    unsigned long long retval = rogl_pfn_glGetImageHandleNV(texture, level, layered, layer, format);

    return ULL2NUM(retval);
}

static VALUE rogl_glMakeImageHandleResidentNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned long long handle = (unsigned long long)NUM2ULL(_arg1_);
    unsigned int access = (unsigned int)NUM2UINT(_arg2_);

    rogl_pfn_glMakeImageHandleResidentNV(handle, access);

    return Qnil;
}

static VALUE rogl_glMakeImageHandleNonResidentNV(VALUE _obj_, VALUE _arg1_)
{
    unsigned long long handle = (unsigned long long)NUM2ULL(_arg1_);

    rogl_pfn_glMakeImageHandleNonResidentNV(handle);

    return Qnil;
}

static VALUE rogl_glUniformHandleui64NV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int location = (int)NUM2INT(_arg1_);
    unsigned long long value = (unsigned long long)NUM2ULL(_arg2_);

    rogl_pfn_glUniformHandleui64NV(location, value);

    return Qnil;
}

static VALUE rogl_glUniformHandleui64vNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    int location = (int)NUM2INT(_arg1_);
    int count = (int)NUM2INT(_arg2_);
    void* value = (void*)val2ptr(_arg3_);

    rogl_pfn_glUniformHandleui64vNV(location, count, value);

    return Qnil;
}

static VALUE rogl_glProgramUniformHandleui64NV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    int location = (int)NUM2INT(_arg2_);
    unsigned long long value = (unsigned long long)NUM2ULL(_arg3_);

    rogl_pfn_glProgramUniformHandleui64NV(program, location, value);

    return Qnil;
}

static VALUE rogl_glProgramUniformHandleui64vNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    int location = (int)NUM2INT(_arg2_);
    int count = (int)NUM2INT(_arg3_);
    void* values = (void*)val2ptr(_arg4_);

    rogl_pfn_glProgramUniformHandleui64vNV(program, location, count, values);

    return Qnil;
}

static VALUE rogl_glIsTextureHandleResidentNV(VALUE _obj_, VALUE _arg1_)
{
    unsigned long long handle = (unsigned long long)NUM2ULL(_arg1_);

    unsigned char retval = rogl_pfn_glIsTextureHandleResidentNV(handle);

    return UINT2NUM(retval);
}

static VALUE rogl_glIsImageHandleResidentNV(VALUE _obj_, VALUE _arg1_)
{
    unsigned long long handle = (unsigned long long)NUM2ULL(_arg1_);

    unsigned char retval = rogl_pfn_glIsImageHandleResidentNV(handle);

    return UINT2NUM(retval);
}

static VALUE rogl_glBlendParameteriNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int pname = (unsigned int)NUM2UINT(_arg1_);
    int value = (int)NUM2INT(_arg2_);

    rogl_pfn_glBlendParameteriNV(pname, value);

    return Qnil;
}

static VALUE rogl_glBlendBarrierNV(VALUE _obj_)
{
    rogl_pfn_glBlendBarrierNV();

    return Qnil;
}

static VALUE rogl_glCreateStatesNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int n = (int)NUM2INT(_arg1_);
    void* states = (void*)val2ptr(_arg2_);

    rogl_pfn_glCreateStatesNV(n, states);

    return Qnil;
}

static VALUE rogl_glDeleteStatesNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int n = (int)NUM2INT(_arg1_);
    void* states = (void*)val2ptr(_arg2_);

    rogl_pfn_glDeleteStatesNV(n, states);

    return Qnil;
}

static VALUE rogl_glIsStateNV(VALUE _obj_, VALUE _arg1_)
{
    unsigned int state = (unsigned int)NUM2UINT(_arg1_);

    unsigned char retval = rogl_pfn_glIsStateNV(state);

    return UINT2NUM(retval);
}

static VALUE rogl_glStateCaptureNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int state = (unsigned int)NUM2UINT(_arg1_);
    unsigned int mode = (unsigned int)NUM2UINT(_arg2_);

    rogl_pfn_glStateCaptureNV(state, mode);

    return Qnil;
}

static VALUE rogl_glGetCommandHeaderNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int tokenID = (unsigned int)NUM2UINT(_arg1_);
    unsigned int size = (unsigned int)NUM2UINT(_arg2_);

    unsigned int retval = rogl_pfn_glGetCommandHeaderNV(tokenID, size);

    return UINT2NUM(retval);
}

static VALUE rogl_glGetStageIndexNV(VALUE _obj_, VALUE _arg1_)
{
    unsigned int shadertype = (unsigned int)NUM2UINT(_arg1_);

    unsigned short retval = rogl_pfn_glGetStageIndexNV(shadertype);

    return UINT2NUM(retval);
}

static VALUE rogl_glDrawCommandsNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int primitiveMode = (unsigned int)NUM2UINT(_arg1_);
    unsigned int buffer = (unsigned int)NUM2UINT(_arg2_);
    void* indirects = (void*)val2ptr(_arg3_);
    void* sizes = (void*)val2ptr(_arg4_);
    unsigned int count = (unsigned int)NUM2UINT(_arg5_);

    rogl_pfn_glDrawCommandsNV(primitiveMode, buffer, indirects, sizes, count);

    return Qnil;
}

static VALUE rogl_glDrawCommandsAddressNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int primitiveMode = (unsigned int)NUM2UINT(_arg1_);
    void* indirects = (void*)val2ptr(_arg2_);
    void* sizes = (void*)val2ptr(_arg3_);
    unsigned int count = (unsigned int)NUM2UINT(_arg4_);

    rogl_pfn_glDrawCommandsAddressNV(primitiveMode, indirects, sizes, count);

    return Qnil;
}

static VALUE rogl_glDrawCommandsStatesNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_)
{
    unsigned int buffer = (unsigned int)NUM2UINT(_arg1_);
    void* indirects = (void*)val2ptr(_arg2_);
    void* sizes = (void*)val2ptr(_arg3_);
    void* states = (void*)val2ptr(_arg4_);
    void* fbos = (void*)val2ptr(_arg5_);
    unsigned int count = (unsigned int)NUM2UINT(_arg6_);

    rogl_pfn_glDrawCommandsStatesNV(buffer, indirects, sizes, states, fbos, count);

    return Qnil;
}

static VALUE rogl_glDrawCommandsStatesAddressNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    void* indirects = (void*)val2ptr(_arg1_);
    void* sizes = (void*)val2ptr(_arg2_);
    void* states = (void*)val2ptr(_arg3_);
    void* fbos = (void*)val2ptr(_arg4_);
    unsigned int count = (unsigned int)NUM2UINT(_arg5_);

    rogl_pfn_glDrawCommandsStatesAddressNV(indirects, sizes, states, fbos, count);

    return Qnil;
}

static VALUE rogl_glCreateCommandListsNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int n = (int)NUM2INT(_arg1_);
    void* lists = (void*)val2ptr(_arg2_);

    rogl_pfn_glCreateCommandListsNV(n, lists);

    return Qnil;
}

static VALUE rogl_glDeleteCommandListsNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int n = (int)NUM2INT(_arg1_);
    void* lists = (void*)val2ptr(_arg2_);

    rogl_pfn_glDeleteCommandListsNV(n, lists);

    return Qnil;
}

static VALUE rogl_glIsCommandListNV(VALUE _obj_, VALUE _arg1_)
{
    unsigned int list = (unsigned int)NUM2UINT(_arg1_);

    unsigned char retval = rogl_pfn_glIsCommandListNV(list);

    return UINT2NUM(retval);
}

static VALUE rogl_glListDrawCommandsStatesClientNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_)
{
    unsigned int list = (unsigned int)NUM2UINT(_arg1_);
    unsigned int segment = (unsigned int)NUM2UINT(_arg2_);
    void* indirects = (void*)val2ptr(_arg3_);
    void* sizes = (void*)val2ptr(_arg4_);
    void* states = (void*)val2ptr(_arg5_);
    void* fbos = (void*)val2ptr(_arg6_);
    unsigned int count = (unsigned int)NUM2UINT(_arg7_);

    rogl_pfn_glListDrawCommandsStatesClientNV(list, segment, indirects, sizes, states, fbos, count);

    return Qnil;
}

static VALUE rogl_glCommandListSegmentsNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int list = (unsigned int)NUM2UINT(_arg1_);
    unsigned int segments = (unsigned int)NUM2UINT(_arg2_);

    rogl_pfn_glCommandListSegmentsNV(list, segments);

    return Qnil;
}

static VALUE rogl_glCompileCommandListNV(VALUE _obj_, VALUE _arg1_)
{
    unsigned int list = (unsigned int)NUM2UINT(_arg1_);

    rogl_pfn_glCompileCommandListNV(list);

    return Qnil;
}

static VALUE rogl_glCallCommandListNV(VALUE _obj_, VALUE _arg1_)
{
    unsigned int list = (unsigned int)NUM2UINT(_arg1_);

    rogl_pfn_glCallCommandListNV(list);

    return Qnil;
}

static VALUE rogl_glBeginConditionalRenderNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int id = (unsigned int)NUM2UINT(_arg1_);
    unsigned int mode = (unsigned int)NUM2UINT(_arg2_);

    rogl_pfn_glBeginConditionalRenderNV(id, mode);

    return Qnil;
}

static VALUE rogl_glEndConditionalRenderNV(VALUE _obj_)
{
    rogl_pfn_glEndConditionalRenderNV();

    return Qnil;
}

static VALUE rogl_glSubpixelPrecisionBiasNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int xbits = (unsigned int)NUM2UINT(_arg1_);
    unsigned int ybits = (unsigned int)NUM2UINT(_arg2_);

    rogl_pfn_glSubpixelPrecisionBiasNV(xbits, ybits);

    return Qnil;
}

static VALUE rogl_glConservativeRasterParameterfNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int pname = (unsigned int)NUM2UINT(_arg1_);
    float value = (float)NUM2DBL(_arg2_);

    rogl_pfn_glConservativeRasterParameterfNV(pname, value);

    return Qnil;
}

static VALUE rogl_glCopyImageSubDataNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_, VALUE _arg9_, VALUE _arg10_, VALUE _arg11_, VALUE _arg12_, VALUE _arg13_, VALUE _arg14_, VALUE _arg15_)
{
    unsigned int srcName = (unsigned int)NUM2UINT(_arg1_);
    unsigned int srcTarget = (unsigned int)NUM2UINT(_arg2_);
    int srcLevel = (int)NUM2INT(_arg3_);
    int srcX = (int)NUM2INT(_arg4_);
    int srcY = (int)NUM2INT(_arg5_);
    int srcZ = (int)NUM2INT(_arg6_);
    unsigned int dstName = (unsigned int)NUM2UINT(_arg7_);
    unsigned int dstTarget = (unsigned int)NUM2UINT(_arg8_);
    int dstLevel = (int)NUM2INT(_arg9_);
    int dstX = (int)NUM2INT(_arg10_);
    int dstY = (int)NUM2INT(_arg11_);
    int dstZ = (int)NUM2INT(_arg12_);
    int width = (int)NUM2INT(_arg13_);
    int height = (int)NUM2INT(_arg14_);
    int depth = (int)NUM2INT(_arg15_);

    rogl_pfn_glCopyImageSubDataNV(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);

    return Qnil;
}

static VALUE rogl_glDepthRangedNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    double zNear = (double)NUM2DBL(_arg1_);
    double zFar = (double)NUM2DBL(_arg2_);

    rogl_pfn_glDepthRangedNV(zNear, zFar);

    return Qnil;
}

static VALUE rogl_glClearDepthdNV(VALUE _obj_, VALUE _arg1_)
{
    double depth = (double)NUM2DBL(_arg1_);

    rogl_pfn_glClearDepthdNV(depth);

    return Qnil;
}

static VALUE rogl_glDepthBoundsdNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    double zmin = (double)NUM2DBL(_arg1_);
    double zmax = (double)NUM2DBL(_arg2_);

    rogl_pfn_glDepthBoundsdNV(zmin, zmax);

    return Qnil;
}

static VALUE rogl_glDrawTextureNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_, VALUE _arg9_, VALUE _arg10_, VALUE _arg11_)
{
    unsigned int texture = (unsigned int)NUM2UINT(_arg1_);
    unsigned int sampler = (unsigned int)NUM2UINT(_arg2_);
    float x0 = (float)NUM2DBL(_arg3_);
    float y0 = (float)NUM2DBL(_arg4_);
    float x1 = (float)NUM2DBL(_arg5_);
    float y1 = (float)NUM2DBL(_arg6_);
    float z = (float)NUM2DBL(_arg7_);
    float s0 = (float)NUM2DBL(_arg8_);
    float t0 = (float)NUM2DBL(_arg9_);
    float s1 = (float)NUM2DBL(_arg10_);
    float t1 = (float)NUM2DBL(_arg11_);

    rogl_pfn_glDrawTextureNV(texture, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1);

    return Qnil;
}

static VALUE rogl_glMapControlPointsNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_, VALUE _arg9_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int index = (unsigned int)NUM2UINT(_arg2_);
    unsigned int type = (unsigned int)NUM2UINT(_arg3_);
    int ustride = (int)NUM2INT(_arg4_);
    int vstride = (int)NUM2INT(_arg5_);
    int uorder = (int)NUM2INT(_arg6_);
    int vorder = (int)NUM2INT(_arg7_);
    unsigned char packed = (unsigned char)NUM2UINT(_arg8_);
    void* points = (void*)val2ptr(_arg9_);

    rogl_pfn_glMapControlPointsNV(target, index, type, ustride, vstride, uorder, vorder, packed, points);

    return Qnil;
}

static VALUE rogl_glMapParameterivNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glMapParameterivNV(target, pname, params);

    return Qnil;
}

static VALUE rogl_glMapParameterfvNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glMapParameterfvNV(target, pname, params);

    return Qnil;
}

static VALUE rogl_glGetMapControlPointsNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int index = (unsigned int)NUM2UINT(_arg2_);
    unsigned int type = (unsigned int)NUM2UINT(_arg3_);
    int ustride = (int)NUM2INT(_arg4_);
    int vstride = (int)NUM2INT(_arg5_);
    unsigned char packed = (unsigned char)NUM2UINT(_arg6_);
    void* points = (void*)val2ptr(_arg7_);

    rogl_pfn_glGetMapControlPointsNV(target, index, type, ustride, vstride, packed, points);

    return Qnil;
}

static VALUE rogl_glGetMapParameterivNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetMapParameterivNV(target, pname, params);

    return Qnil;
}

static VALUE rogl_glGetMapParameterfvNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetMapParameterfvNV(target, pname, params);

    return Qnil;
}

static VALUE rogl_glGetMapAttribParameterivNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int index = (unsigned int)NUM2UINT(_arg2_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg3_);
    void* params = (void*)val2ptr(_arg4_);

    rogl_pfn_glGetMapAttribParameterivNV(target, index, pname, params);

    return Qnil;
}

static VALUE rogl_glGetMapAttribParameterfvNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int index = (unsigned int)NUM2UINT(_arg2_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg3_);
    void* params = (void*)val2ptr(_arg4_);

    rogl_pfn_glGetMapAttribParameterfvNV(target, index, pname, params);

    return Qnil;
}

static VALUE rogl_glEvalMapsNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int mode = (unsigned int)NUM2UINT(_arg2_);

    rogl_pfn_glEvalMapsNV(target, mode);

    return Qnil;
}

static VALUE rogl_glGetMultisamplefvNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int pname = (unsigned int)NUM2UINT(_arg1_);
    unsigned int index = (unsigned int)NUM2UINT(_arg2_);
    void* val = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetMultisamplefvNV(pname, index, val);

    return Qnil;
}

static VALUE rogl_glSampleMaskIndexedNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    unsigned int mask = (unsigned int)NUM2UINT(_arg2_);

    rogl_pfn_glSampleMaskIndexedNV(index, mask);

    return Qnil;
}

static VALUE rogl_glTexRenderbufferNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int renderbuffer = (unsigned int)NUM2UINT(_arg2_);

    rogl_pfn_glTexRenderbufferNV(target, renderbuffer);

    return Qnil;
}

static VALUE rogl_glDeleteFencesNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int n = (int)NUM2INT(_arg1_);
    void* fences = (void*)val2ptr(_arg2_);

    rogl_pfn_glDeleteFencesNV(n, fences);

    return Qnil;
}

static VALUE rogl_glGenFencesNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int n = (int)NUM2INT(_arg1_);
    void* fences = (void*)val2ptr(_arg2_);

    rogl_pfn_glGenFencesNV(n, fences);

    return Qnil;
}

static VALUE rogl_glIsFenceNV(VALUE _obj_, VALUE _arg1_)
{
    unsigned int fence = (unsigned int)NUM2UINT(_arg1_);

    unsigned char retval = rogl_pfn_glIsFenceNV(fence);

    return UINT2NUM(retval);
}

static VALUE rogl_glTestFenceNV(VALUE _obj_, VALUE _arg1_)
{
    unsigned int fence = (unsigned int)NUM2UINT(_arg1_);

    unsigned char retval = rogl_pfn_glTestFenceNV(fence);

    return UINT2NUM(retval);
}

static VALUE rogl_glGetFenceivNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int fence = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetFenceivNV(fence, pname, params);

    return Qnil;
}

static VALUE rogl_glFinishFenceNV(VALUE _obj_, VALUE _arg1_)
{
    unsigned int fence = (unsigned int)NUM2UINT(_arg1_);

    rogl_pfn_glFinishFenceNV(fence);

    return Qnil;
}

static VALUE rogl_glSetFenceNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int fence = (unsigned int)NUM2UINT(_arg1_);
    unsigned int condition = (unsigned int)NUM2UINT(_arg2_);

    rogl_pfn_glSetFenceNV(fence, condition);

    return Qnil;
}

static VALUE rogl_glFragmentCoverageColorNV(VALUE _obj_, VALUE _arg1_)
{
    unsigned int color = (unsigned int)NUM2UINT(_arg1_);

    rogl_pfn_glFragmentCoverageColorNV(color);

    return Qnil;
}

static VALUE rogl_glProgramNamedParameter4fNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_)
{
    unsigned int id = (unsigned int)NUM2UINT(_arg1_);
    int len = (int)NUM2INT(_arg2_);
    void* name = (void*)val2ptr(_arg3_);
    float x = (float)NUM2DBL(_arg4_);
    float y = (float)NUM2DBL(_arg5_);
    float z = (float)NUM2DBL(_arg6_);
    float w = (float)NUM2DBL(_arg7_);

    rogl_pfn_glProgramNamedParameter4fNV(id, len, name, x, y, z, w);

    return Qnil;
}

static VALUE rogl_glProgramNamedParameter4fvNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int id = (unsigned int)NUM2UINT(_arg1_);
    int len = (int)NUM2INT(_arg2_);
    void* name = (void*)val2ptr(_arg3_);
    void* v = (void*)val2ptr(_arg4_);

    rogl_pfn_glProgramNamedParameter4fvNV(id, len, name, v);

    return Qnil;
}

static VALUE rogl_glProgramNamedParameter4dNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_)
{
    unsigned int id = (unsigned int)NUM2UINT(_arg1_);
    int len = (int)NUM2INT(_arg2_);
    void* name = (void*)val2ptr(_arg3_);
    double x = (double)NUM2DBL(_arg4_);
    double y = (double)NUM2DBL(_arg5_);
    double z = (double)NUM2DBL(_arg6_);
    double w = (double)NUM2DBL(_arg7_);

    rogl_pfn_glProgramNamedParameter4dNV(id, len, name, x, y, z, w);

    return Qnil;
}

static VALUE rogl_glProgramNamedParameter4dvNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int id = (unsigned int)NUM2UINT(_arg1_);
    int len = (int)NUM2INT(_arg2_);
    void* name = (void*)val2ptr(_arg3_);
    void* v = (void*)val2ptr(_arg4_);

    rogl_pfn_glProgramNamedParameter4dvNV(id, len, name, v);

    return Qnil;
}

static VALUE rogl_glGetProgramNamedParameterfvNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int id = (unsigned int)NUM2UINT(_arg1_);
    int len = (int)NUM2INT(_arg2_);
    void* name = (void*)val2ptr(_arg3_);
    void* params = (void*)val2ptr(_arg4_);

    rogl_pfn_glGetProgramNamedParameterfvNV(id, len, name, params);

    return Qnil;
}

static VALUE rogl_glGetProgramNamedParameterdvNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int id = (unsigned int)NUM2UINT(_arg1_);
    int len = (int)NUM2INT(_arg2_);
    void* name = (void*)val2ptr(_arg3_);
    void* params = (void*)val2ptr(_arg4_);

    rogl_pfn_glGetProgramNamedParameterdvNV(id, len, name, params);

    return Qnil;
}

static VALUE rogl_glCoverageModulationTableNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int n = (int)NUM2INT(_arg1_);
    void* v = (void*)val2ptr(_arg2_);

    rogl_pfn_glCoverageModulationTableNV(n, v);

    return Qnil;
}

static VALUE rogl_glGetCoverageModulationTableNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int bufsize = (int)NUM2INT(_arg1_);
    void* v = (void*)val2ptr(_arg2_);

    rogl_pfn_glGetCoverageModulationTableNV(bufsize, v);

    return Qnil;
}

static VALUE rogl_glCoverageModulationNV(VALUE _obj_, VALUE _arg1_)
{
    unsigned int components = (unsigned int)NUM2UINT(_arg1_);

    rogl_pfn_glCoverageModulationNV(components);

    return Qnil;
}

static VALUE rogl_glRenderbufferStorageMultisampleCoverageNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    int coverageSamples = (int)NUM2INT(_arg2_);
    int colorSamples = (int)NUM2INT(_arg3_);
    unsigned int internalformat = (unsigned int)NUM2UINT(_arg4_);
    int width = (int)NUM2INT(_arg5_);
    int height = (int)NUM2INT(_arg6_);

    rogl_pfn_glRenderbufferStorageMultisampleCoverageNV(target, coverageSamples, colorSamples, internalformat, width, height);

    return Qnil;
}

static VALUE rogl_glProgramVertexLimitNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    int limit = (int)NUM2INT(_arg2_);

    rogl_pfn_glProgramVertexLimitNV(target, limit);

    return Qnil;
}

static VALUE rogl_glFramebufferTextureEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int attachment = (unsigned int)NUM2UINT(_arg2_);
    unsigned int texture = (unsigned int)NUM2UINT(_arg3_);
    int level = (int)NUM2INT(_arg4_);

    rogl_pfn_glFramebufferTextureEXT(target, attachment, texture, level);

    return Qnil;
}

static VALUE rogl_glFramebufferTextureFaceEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int attachment = (unsigned int)NUM2UINT(_arg2_);
    unsigned int texture = (unsigned int)NUM2UINT(_arg3_);
    int level = (int)NUM2INT(_arg4_);
    unsigned int face = (unsigned int)NUM2UINT(_arg5_);

    rogl_pfn_glFramebufferTextureFaceEXT(target, attachment, texture, level, face);

    return Qnil;
}

static VALUE rogl_glProgramLocalParameterI4iNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int index = (unsigned int)NUM2UINT(_arg2_);
    int x = (int)NUM2INT(_arg3_);
    int y = (int)NUM2INT(_arg4_);
    int z = (int)NUM2INT(_arg5_);
    int w = (int)NUM2INT(_arg6_);

    rogl_pfn_glProgramLocalParameterI4iNV(target, index, x, y, z, w);

    return Qnil;
}

static VALUE rogl_glProgramLocalParameterI4ivNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int index = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glProgramLocalParameterI4ivNV(target, index, params);

    return Qnil;
}

static VALUE rogl_glProgramLocalParametersI4ivNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int index = (unsigned int)NUM2UINT(_arg2_);
    int count = (int)NUM2INT(_arg3_);
    void* params = (void*)val2ptr(_arg4_);

    rogl_pfn_glProgramLocalParametersI4ivNV(target, index, count, params);

    return Qnil;
}

static VALUE rogl_glProgramLocalParameterI4uiNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int index = (unsigned int)NUM2UINT(_arg2_);
    unsigned int x = (unsigned int)NUM2UINT(_arg3_);
    unsigned int y = (unsigned int)NUM2UINT(_arg4_);
    unsigned int z = (unsigned int)NUM2UINT(_arg5_);
    unsigned int w = (unsigned int)NUM2UINT(_arg6_);

    rogl_pfn_glProgramLocalParameterI4uiNV(target, index, x, y, z, w);

    return Qnil;
}

static VALUE rogl_glProgramLocalParameterI4uivNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int index = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glProgramLocalParameterI4uivNV(target, index, params);

    return Qnil;
}

static VALUE rogl_glProgramLocalParametersI4uivNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int index = (unsigned int)NUM2UINT(_arg2_);
    int count = (int)NUM2INT(_arg3_);
    void* params = (void*)val2ptr(_arg4_);

    rogl_pfn_glProgramLocalParametersI4uivNV(target, index, count, params);

    return Qnil;
}

static VALUE rogl_glProgramEnvParameterI4iNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int index = (unsigned int)NUM2UINT(_arg2_);
    int x = (int)NUM2INT(_arg3_);
    int y = (int)NUM2INT(_arg4_);
    int z = (int)NUM2INT(_arg5_);
    int w = (int)NUM2INT(_arg6_);

    rogl_pfn_glProgramEnvParameterI4iNV(target, index, x, y, z, w);

    return Qnil;
}

static VALUE rogl_glProgramEnvParameterI4ivNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int index = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glProgramEnvParameterI4ivNV(target, index, params);

    return Qnil;
}

static VALUE rogl_glProgramEnvParametersI4ivNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int index = (unsigned int)NUM2UINT(_arg2_);
    int count = (int)NUM2INT(_arg3_);
    void* params = (void*)val2ptr(_arg4_);

    rogl_pfn_glProgramEnvParametersI4ivNV(target, index, count, params);

    return Qnil;
}

static VALUE rogl_glProgramEnvParameterI4uiNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int index = (unsigned int)NUM2UINT(_arg2_);
    unsigned int x = (unsigned int)NUM2UINT(_arg3_);
    unsigned int y = (unsigned int)NUM2UINT(_arg4_);
    unsigned int z = (unsigned int)NUM2UINT(_arg5_);
    unsigned int w = (unsigned int)NUM2UINT(_arg6_);

    rogl_pfn_glProgramEnvParameterI4uiNV(target, index, x, y, z, w);

    return Qnil;
}

static VALUE rogl_glProgramEnvParameterI4uivNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int index = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glProgramEnvParameterI4uivNV(target, index, params);

    return Qnil;
}

static VALUE rogl_glProgramEnvParametersI4uivNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int index = (unsigned int)NUM2UINT(_arg2_);
    int count = (int)NUM2INT(_arg3_);
    void* params = (void*)val2ptr(_arg4_);

    rogl_pfn_glProgramEnvParametersI4uivNV(target, index, count, params);

    return Qnil;
}

static VALUE rogl_glGetProgramLocalParameterIivNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int index = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetProgramLocalParameterIivNV(target, index, params);

    return Qnil;
}

static VALUE rogl_glGetProgramLocalParameterIuivNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int index = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetProgramLocalParameterIuivNV(target, index, params);

    return Qnil;
}

static VALUE rogl_glGetProgramEnvParameterIivNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int index = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetProgramEnvParameterIivNV(target, index, params);

    return Qnil;
}

static VALUE rogl_glGetProgramEnvParameterIuivNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int index = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetProgramEnvParameterIuivNV(target, index, params);

    return Qnil;
}

static VALUE rogl_glProgramSubroutineParametersuivNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    int count = (int)NUM2INT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glProgramSubroutineParametersuivNV(target, count, params);

    return Qnil;
}

static VALUE rogl_glGetProgramSubroutineParameteruivNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int index = (unsigned int)NUM2UINT(_arg2_);
    void* param = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetProgramSubroutineParameteruivNV(target, index, param);

    return Qnil;
}

static VALUE rogl_glVertex2hNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned short x = (unsigned short)NUM2UINT(_arg1_);
    unsigned short y = (unsigned short)NUM2UINT(_arg2_);

    rogl_pfn_glVertex2hNV(x, y);

    return Qnil;
}

static VALUE rogl_glVertex2hvNV(VALUE _obj_, VALUE _arg1_)
{
    void* v = (void*)val2ptr(_arg1_);

    rogl_pfn_glVertex2hvNV(v);

    return Qnil;
}

static VALUE rogl_glVertex3hNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned short x = (unsigned short)NUM2UINT(_arg1_);
    unsigned short y = (unsigned short)NUM2UINT(_arg2_);
    unsigned short z = (unsigned short)NUM2UINT(_arg3_);

    rogl_pfn_glVertex3hNV(x, y, z);

    return Qnil;
}

static VALUE rogl_glVertex3hvNV(VALUE _obj_, VALUE _arg1_)
{
    void* v = (void*)val2ptr(_arg1_);

    rogl_pfn_glVertex3hvNV(v);

    return Qnil;
}

static VALUE rogl_glVertex4hNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned short x = (unsigned short)NUM2UINT(_arg1_);
    unsigned short y = (unsigned short)NUM2UINT(_arg2_);
    unsigned short z = (unsigned short)NUM2UINT(_arg3_);
    unsigned short w = (unsigned short)NUM2UINT(_arg4_);

    rogl_pfn_glVertex4hNV(x, y, z, w);

    return Qnil;
}

static VALUE rogl_glVertex4hvNV(VALUE _obj_, VALUE _arg1_)
{
    void* v = (void*)val2ptr(_arg1_);

    rogl_pfn_glVertex4hvNV(v);

    return Qnil;
}

static VALUE rogl_glNormal3hNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned short nx = (unsigned short)NUM2UINT(_arg1_);
    unsigned short ny = (unsigned short)NUM2UINT(_arg2_);
    unsigned short nz = (unsigned short)NUM2UINT(_arg3_);

    rogl_pfn_glNormal3hNV(nx, ny, nz);

    return Qnil;
}

static VALUE rogl_glNormal3hvNV(VALUE _obj_, VALUE _arg1_)
{
    void* v = (void*)val2ptr(_arg1_);

    rogl_pfn_glNormal3hvNV(v);

    return Qnil;
}

static VALUE rogl_glColor3hNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned short red = (unsigned short)NUM2UINT(_arg1_);
    unsigned short green = (unsigned short)NUM2UINT(_arg2_);
    unsigned short blue = (unsigned short)NUM2UINT(_arg3_);

    rogl_pfn_glColor3hNV(red, green, blue);

    return Qnil;
}

static VALUE rogl_glColor3hvNV(VALUE _obj_, VALUE _arg1_)
{
    void* v = (void*)val2ptr(_arg1_);

    rogl_pfn_glColor3hvNV(v);

    return Qnil;
}

static VALUE rogl_glColor4hNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned short red = (unsigned short)NUM2UINT(_arg1_);
    unsigned short green = (unsigned short)NUM2UINT(_arg2_);
    unsigned short blue = (unsigned short)NUM2UINT(_arg3_);
    unsigned short alpha = (unsigned short)NUM2UINT(_arg4_);

    rogl_pfn_glColor4hNV(red, green, blue, alpha);

    return Qnil;
}

static VALUE rogl_glColor4hvNV(VALUE _obj_, VALUE _arg1_)
{
    void* v = (void*)val2ptr(_arg1_);

    rogl_pfn_glColor4hvNV(v);

    return Qnil;
}

static VALUE rogl_glTexCoord1hNV(VALUE _obj_, VALUE _arg1_)
{
    unsigned short s = (unsigned short)NUM2UINT(_arg1_);

    rogl_pfn_glTexCoord1hNV(s);

    return Qnil;
}

static VALUE rogl_glTexCoord1hvNV(VALUE _obj_, VALUE _arg1_)
{
    void* v = (void*)val2ptr(_arg1_);

    rogl_pfn_glTexCoord1hvNV(v);

    return Qnil;
}

static VALUE rogl_glTexCoord2hNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned short s = (unsigned short)NUM2UINT(_arg1_);
    unsigned short t = (unsigned short)NUM2UINT(_arg2_);

    rogl_pfn_glTexCoord2hNV(s, t);

    return Qnil;
}

static VALUE rogl_glTexCoord2hvNV(VALUE _obj_, VALUE _arg1_)
{
    void* v = (void*)val2ptr(_arg1_);

    rogl_pfn_glTexCoord2hvNV(v);

    return Qnil;
}

static VALUE rogl_glTexCoord3hNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned short s = (unsigned short)NUM2UINT(_arg1_);
    unsigned short t = (unsigned short)NUM2UINT(_arg2_);
    unsigned short r = (unsigned short)NUM2UINT(_arg3_);

    rogl_pfn_glTexCoord3hNV(s, t, r);

    return Qnil;
}

static VALUE rogl_glTexCoord3hvNV(VALUE _obj_, VALUE _arg1_)
{
    void* v = (void*)val2ptr(_arg1_);

    rogl_pfn_glTexCoord3hvNV(v);

    return Qnil;
}

static VALUE rogl_glTexCoord4hNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned short s = (unsigned short)NUM2UINT(_arg1_);
    unsigned short t = (unsigned short)NUM2UINT(_arg2_);
    unsigned short r = (unsigned short)NUM2UINT(_arg3_);
    unsigned short q = (unsigned short)NUM2UINT(_arg4_);

    rogl_pfn_glTexCoord4hNV(s, t, r, q);

    return Qnil;
}

static VALUE rogl_glTexCoord4hvNV(VALUE _obj_, VALUE _arg1_)
{
    void* v = (void*)val2ptr(_arg1_);

    rogl_pfn_glTexCoord4hvNV(v);

    return Qnil;
}

static VALUE rogl_glMultiTexCoord1hNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned short s = (unsigned short)NUM2UINT(_arg2_);

    rogl_pfn_glMultiTexCoord1hNV(target, s);

    return Qnil;
}

static VALUE rogl_glMultiTexCoord1hvNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    void* v = (void*)val2ptr(_arg2_);

    rogl_pfn_glMultiTexCoord1hvNV(target, v);

    return Qnil;
}

static VALUE rogl_glMultiTexCoord2hNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned short s = (unsigned short)NUM2UINT(_arg2_);
    unsigned short t = (unsigned short)NUM2UINT(_arg3_);

    rogl_pfn_glMultiTexCoord2hNV(target, s, t);

    return Qnil;
}

static VALUE rogl_glMultiTexCoord2hvNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    void* v = (void*)val2ptr(_arg2_);

    rogl_pfn_glMultiTexCoord2hvNV(target, v);

    return Qnil;
}

static VALUE rogl_glMultiTexCoord3hNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned short s = (unsigned short)NUM2UINT(_arg2_);
    unsigned short t = (unsigned short)NUM2UINT(_arg3_);
    unsigned short r = (unsigned short)NUM2UINT(_arg4_);

    rogl_pfn_glMultiTexCoord3hNV(target, s, t, r);

    return Qnil;
}

static VALUE rogl_glMultiTexCoord3hvNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    void* v = (void*)val2ptr(_arg2_);

    rogl_pfn_glMultiTexCoord3hvNV(target, v);

    return Qnil;
}

static VALUE rogl_glMultiTexCoord4hNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned short s = (unsigned short)NUM2UINT(_arg2_);
    unsigned short t = (unsigned short)NUM2UINT(_arg3_);
    unsigned short r = (unsigned short)NUM2UINT(_arg4_);
    unsigned short q = (unsigned short)NUM2UINT(_arg5_);

    rogl_pfn_glMultiTexCoord4hNV(target, s, t, r, q);

    return Qnil;
}

static VALUE rogl_glMultiTexCoord4hvNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    void* v = (void*)val2ptr(_arg2_);

    rogl_pfn_glMultiTexCoord4hvNV(target, v);

    return Qnil;
}

static VALUE rogl_glFogCoordhNV(VALUE _obj_, VALUE _arg1_)
{
    unsigned short fog = (unsigned short)NUM2UINT(_arg1_);

    rogl_pfn_glFogCoordhNV(fog);

    return Qnil;
}

static VALUE rogl_glFogCoordhvNV(VALUE _obj_, VALUE _arg1_)
{
    void* fog = (void*)val2ptr(_arg1_);

    rogl_pfn_glFogCoordhvNV(fog);

    return Qnil;
}

static VALUE rogl_glSecondaryColor3hNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned short red = (unsigned short)NUM2UINT(_arg1_);
    unsigned short green = (unsigned short)NUM2UINT(_arg2_);
    unsigned short blue = (unsigned short)NUM2UINT(_arg3_);

    rogl_pfn_glSecondaryColor3hNV(red, green, blue);

    return Qnil;
}

static VALUE rogl_glSecondaryColor3hvNV(VALUE _obj_, VALUE _arg1_)
{
    void* v = (void*)val2ptr(_arg1_);

    rogl_pfn_glSecondaryColor3hvNV(v);

    return Qnil;
}

static VALUE rogl_glVertexWeighthNV(VALUE _obj_, VALUE _arg1_)
{
    unsigned short weight = (unsigned short)NUM2UINT(_arg1_);

    rogl_pfn_glVertexWeighthNV(weight);

    return Qnil;
}

static VALUE rogl_glVertexWeighthvNV(VALUE _obj_, VALUE _arg1_)
{
    void* weight = (void*)val2ptr(_arg1_);

    rogl_pfn_glVertexWeighthvNV(weight);

    return Qnil;
}

static VALUE rogl_glVertexAttrib1hNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    unsigned short x = (unsigned short)NUM2UINT(_arg2_);

    rogl_pfn_glVertexAttrib1hNV(index, x);

    return Qnil;
}

static VALUE rogl_glVertexAttrib1hvNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    void* v = (void*)val2ptr(_arg2_);

    rogl_pfn_glVertexAttrib1hvNV(index, v);

    return Qnil;
}

static VALUE rogl_glVertexAttrib2hNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    unsigned short x = (unsigned short)NUM2UINT(_arg2_);
    unsigned short y = (unsigned short)NUM2UINT(_arg3_);

    rogl_pfn_glVertexAttrib2hNV(index, x, y);

    return Qnil;
}

static VALUE rogl_glVertexAttrib2hvNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    void* v = (void*)val2ptr(_arg2_);

    rogl_pfn_glVertexAttrib2hvNV(index, v);

    return Qnil;
}

static VALUE rogl_glVertexAttrib3hNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    unsigned short x = (unsigned short)NUM2UINT(_arg2_);
    unsigned short y = (unsigned short)NUM2UINT(_arg3_);
    unsigned short z = (unsigned short)NUM2UINT(_arg4_);

    rogl_pfn_glVertexAttrib3hNV(index, x, y, z);

    return Qnil;
}

static VALUE rogl_glVertexAttrib3hvNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    void* v = (void*)val2ptr(_arg2_);

    rogl_pfn_glVertexAttrib3hvNV(index, v);

    return Qnil;
}

static VALUE rogl_glVertexAttrib4hNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    unsigned short x = (unsigned short)NUM2UINT(_arg2_);
    unsigned short y = (unsigned short)NUM2UINT(_arg3_);
    unsigned short z = (unsigned short)NUM2UINT(_arg4_);
    unsigned short w = (unsigned short)NUM2UINT(_arg5_);

    rogl_pfn_glVertexAttrib4hNV(index, x, y, z, w);

    return Qnil;
}

static VALUE rogl_glVertexAttrib4hvNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    void* v = (void*)val2ptr(_arg2_);

    rogl_pfn_glVertexAttrib4hvNV(index, v);

    return Qnil;
}

static VALUE rogl_glVertexAttribs1hvNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    int n = (int)NUM2INT(_arg2_);
    void* v = (void*)val2ptr(_arg3_);

    rogl_pfn_glVertexAttribs1hvNV(index, n, v);

    return Qnil;
}

static VALUE rogl_glVertexAttribs2hvNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    int n = (int)NUM2INT(_arg2_);
    void* v = (void*)val2ptr(_arg3_);

    rogl_pfn_glVertexAttribs2hvNV(index, n, v);

    return Qnil;
}

static VALUE rogl_glVertexAttribs3hvNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    int n = (int)NUM2INT(_arg2_);
    void* v = (void*)val2ptr(_arg3_);

    rogl_pfn_glVertexAttribs3hvNV(index, n, v);

    return Qnil;
}

static VALUE rogl_glVertexAttribs4hvNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    int n = (int)NUM2INT(_arg2_);
    void* v = (void*)val2ptr(_arg3_);

    rogl_pfn_glVertexAttribs4hvNV(index, n, v);

    return Qnil;
}

static VALUE rogl_glGetInternalformatSampleivNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int internalformat = (unsigned int)NUM2UINT(_arg2_);
    int samples = (int)NUM2INT(_arg3_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg4_);
    int bufSize = (int)NUM2INT(_arg5_);
    void* params = (void*)val2ptr(_arg6_);

    rogl_pfn_glGetInternalformatSampleivNV(target, internalformat, samples, pname, bufSize, params);

    return Qnil;
}

static VALUE rogl_glGenOcclusionQueriesNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int n = (int)NUM2INT(_arg1_);
    void* ids = (void*)val2ptr(_arg2_);

    rogl_pfn_glGenOcclusionQueriesNV(n, ids);

    return Qnil;
}

static VALUE rogl_glDeleteOcclusionQueriesNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int n = (int)NUM2INT(_arg1_);
    void* ids = (void*)val2ptr(_arg2_);

    rogl_pfn_glDeleteOcclusionQueriesNV(n, ids);

    return Qnil;
}

static VALUE rogl_glIsOcclusionQueryNV(VALUE _obj_, VALUE _arg1_)
{
    unsigned int id = (unsigned int)NUM2UINT(_arg1_);

    unsigned char retval = rogl_pfn_glIsOcclusionQueryNV(id);

    return UINT2NUM(retval);
}

static VALUE rogl_glBeginOcclusionQueryNV(VALUE _obj_, VALUE _arg1_)
{
    unsigned int id = (unsigned int)NUM2UINT(_arg1_);

    rogl_pfn_glBeginOcclusionQueryNV(id);

    return Qnil;
}

static VALUE rogl_glEndOcclusionQueryNV(VALUE _obj_)
{
    rogl_pfn_glEndOcclusionQueryNV();

    return Qnil;
}

static VALUE rogl_glGetOcclusionQueryivNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int id = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetOcclusionQueryivNV(id, pname, params);

    return Qnil;
}

static VALUE rogl_glGetOcclusionQueryuivNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int id = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetOcclusionQueryuivNV(id, pname, params);

    return Qnil;
}

static VALUE rogl_glProgramBufferParametersfvNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int bindingIndex = (unsigned int)NUM2UINT(_arg2_);
    unsigned int wordIndex = (unsigned int)NUM2UINT(_arg3_);
    int count = (int)NUM2INT(_arg4_);
    void* params = (void*)val2ptr(_arg5_);

    rogl_pfn_glProgramBufferParametersfvNV(target, bindingIndex, wordIndex, count, params);

    return Qnil;
}

static VALUE rogl_glProgramBufferParametersIivNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int bindingIndex = (unsigned int)NUM2UINT(_arg2_);
    unsigned int wordIndex = (unsigned int)NUM2UINT(_arg3_);
    int count = (int)NUM2INT(_arg4_);
    void* params = (void*)val2ptr(_arg5_);

    rogl_pfn_glProgramBufferParametersIivNV(target, bindingIndex, wordIndex, count, params);

    return Qnil;
}

static VALUE rogl_glProgramBufferParametersIuivNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int bindingIndex = (unsigned int)NUM2UINT(_arg2_);
    unsigned int wordIndex = (unsigned int)NUM2UINT(_arg3_);
    int count = (int)NUM2INT(_arg4_);
    void* params = (void*)val2ptr(_arg5_);

    rogl_pfn_glProgramBufferParametersIuivNV(target, bindingIndex, wordIndex, count, params);

    return Qnil;
}

static VALUE rogl_glGenPathsNV(VALUE _obj_, VALUE _arg1_)
{
    int range = (int)NUM2INT(_arg1_);

    unsigned int retval = rogl_pfn_glGenPathsNV(range);

    return UINT2NUM(retval);
}

static VALUE rogl_glDeletePathsNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int path = (unsigned int)NUM2UINT(_arg1_);
    int range = (int)NUM2INT(_arg2_);

    rogl_pfn_glDeletePathsNV(path, range);

    return Qnil;
}

static VALUE rogl_glIsPathNV(VALUE _obj_, VALUE _arg1_)
{
    unsigned int path = (unsigned int)NUM2UINT(_arg1_);

    unsigned char retval = rogl_pfn_glIsPathNV(path);

    return UINT2NUM(retval);
}

static VALUE rogl_glPathCommandsNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_)
{
    unsigned int path = (unsigned int)NUM2UINT(_arg1_);
    int numCommands = (int)NUM2INT(_arg2_);
    void* commands = (void*)val2ptr(_arg3_);
    int numCoords = (int)NUM2INT(_arg4_);
    unsigned int coordType = (unsigned int)NUM2UINT(_arg5_);
    void* coords = (void*)val2ptr(_arg6_);

    rogl_pfn_glPathCommandsNV(path, numCommands, commands, numCoords, coordType, coords);

    return Qnil;
}

static VALUE rogl_glPathCoordsNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int path = (unsigned int)NUM2UINT(_arg1_);
    int numCoords = (int)NUM2INT(_arg2_);
    unsigned int coordType = (unsigned int)NUM2UINT(_arg3_);
    void* coords = (void*)val2ptr(_arg4_);

    rogl_pfn_glPathCoordsNV(path, numCoords, coordType, coords);

    return Qnil;
}

static VALUE rogl_glPathSubCommandsNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_)
{
    unsigned int path = (unsigned int)NUM2UINT(_arg1_);
    int commandStart = (int)NUM2INT(_arg2_);
    int commandsToDelete = (int)NUM2INT(_arg3_);
    int numCommands = (int)NUM2INT(_arg4_);
    void* commands = (void*)val2ptr(_arg5_);
    int numCoords = (int)NUM2INT(_arg6_);
    unsigned int coordType = (unsigned int)NUM2UINT(_arg7_);
    void* coords = (void*)val2ptr(_arg8_);

    rogl_pfn_glPathSubCommandsNV(path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords);

    return Qnil;
}

static VALUE rogl_glPathSubCoordsNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int path = (unsigned int)NUM2UINT(_arg1_);
    int coordStart = (int)NUM2INT(_arg2_);
    int numCoords = (int)NUM2INT(_arg3_);
    unsigned int coordType = (unsigned int)NUM2UINT(_arg4_);
    void* coords = (void*)val2ptr(_arg5_);

    rogl_pfn_glPathSubCoordsNV(path, coordStart, numCoords, coordType, coords);

    return Qnil;
}

static VALUE rogl_glPathStringNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int path = (unsigned int)NUM2UINT(_arg1_);
    unsigned int format = (unsigned int)NUM2UINT(_arg2_);
    int length = (int)NUM2INT(_arg3_);
    void* pathString = (void*)val2ptr(_arg4_);

    rogl_pfn_glPathStringNV(path, format, length, pathString);

    return Qnil;
}

static VALUE rogl_glPathGlyphsNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_, VALUE _arg9_, VALUE _arg10_)
{
    unsigned int firstPathName = (unsigned int)NUM2UINT(_arg1_);
    unsigned int fontTarget = (unsigned int)NUM2UINT(_arg2_);
    void* fontName = (void*)val2ptr(_arg3_);
    unsigned int fontStyle = (unsigned int)NUM2UINT(_arg4_);
    int numGlyphs = (int)NUM2INT(_arg5_);
    unsigned int type = (unsigned int)NUM2UINT(_arg6_);
    void* charcodes = (void*)val2ptr(_arg7_);
    unsigned int handleMissingGlyphs = (unsigned int)NUM2UINT(_arg8_);
    unsigned int pathParameterTemplate = (unsigned int)NUM2UINT(_arg9_);
    float emScale = (float)NUM2DBL(_arg10_);

    rogl_pfn_glPathGlyphsNV(firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale);

    return Qnil;
}

static VALUE rogl_glPathGlyphRangeNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_, VALUE _arg9_)
{
    unsigned int firstPathName = (unsigned int)NUM2UINT(_arg1_);
    unsigned int fontTarget = (unsigned int)NUM2UINT(_arg2_);
    void* fontName = (void*)val2ptr(_arg3_);
    unsigned int fontStyle = (unsigned int)NUM2UINT(_arg4_);
    unsigned int firstGlyph = (unsigned int)NUM2UINT(_arg5_);
    int numGlyphs = (int)NUM2INT(_arg6_);
    unsigned int handleMissingGlyphs = (unsigned int)NUM2UINT(_arg7_);
    unsigned int pathParameterTemplate = (unsigned int)NUM2UINT(_arg8_);
    float emScale = (float)NUM2DBL(_arg9_);

    rogl_pfn_glPathGlyphRangeNV(firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale);

    return Qnil;
}

static VALUE rogl_glWeightPathsNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int resultPath = (unsigned int)NUM2UINT(_arg1_);
    int numPaths = (int)NUM2INT(_arg2_);
    void* paths = (void*)val2ptr(_arg3_);
    void* weights = (void*)val2ptr(_arg4_);

    rogl_pfn_glWeightPathsNV(resultPath, numPaths, paths, weights);

    return Qnil;
}

static VALUE rogl_glCopyPathNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int resultPath = (unsigned int)NUM2UINT(_arg1_);
    unsigned int srcPath = (unsigned int)NUM2UINT(_arg2_);

    rogl_pfn_glCopyPathNV(resultPath, srcPath);

    return Qnil;
}

static VALUE rogl_glInterpolatePathsNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int resultPath = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pathA = (unsigned int)NUM2UINT(_arg2_);
    unsigned int pathB = (unsigned int)NUM2UINT(_arg3_);
    float weight = (float)NUM2DBL(_arg4_);

    rogl_pfn_glInterpolatePathsNV(resultPath, pathA, pathB, weight);

    return Qnil;
}

static VALUE rogl_glTransformPathNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int resultPath = (unsigned int)NUM2UINT(_arg1_);
    unsigned int srcPath = (unsigned int)NUM2UINT(_arg2_);
    unsigned int transformType = (unsigned int)NUM2UINT(_arg3_);
    void* transformValues = (void*)val2ptr(_arg4_);

    rogl_pfn_glTransformPathNV(resultPath, srcPath, transformType, transformValues);

    return Qnil;
}

static VALUE rogl_glPathParameterivNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int path = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* value = (void*)val2ptr(_arg3_);

    rogl_pfn_glPathParameterivNV(path, pname, value);

    return Qnil;
}

static VALUE rogl_glPathParameteriNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int path = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    int value = (int)NUM2INT(_arg3_);

    rogl_pfn_glPathParameteriNV(path, pname, value);

    return Qnil;
}

static VALUE rogl_glPathParameterfvNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int path = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* value = (void*)val2ptr(_arg3_);

    rogl_pfn_glPathParameterfvNV(path, pname, value);

    return Qnil;
}

static VALUE rogl_glPathParameterfNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int path = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    float value = (float)NUM2DBL(_arg3_);

    rogl_pfn_glPathParameterfNV(path, pname, value);

    return Qnil;
}

static VALUE rogl_glPathDashArrayNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int path = (unsigned int)NUM2UINT(_arg1_);
    int dashCount = (int)NUM2INT(_arg2_);
    void* dashArray = (void*)val2ptr(_arg3_);

    rogl_pfn_glPathDashArrayNV(path, dashCount, dashArray);

    return Qnil;
}

static VALUE rogl_glPathStencilFuncNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int func = (unsigned int)NUM2UINT(_arg1_);
    int ref = (int)NUM2INT(_arg2_);
    unsigned int mask = (unsigned int)NUM2UINT(_arg3_);

    rogl_pfn_glPathStencilFuncNV(func, ref, mask);

    return Qnil;
}

static VALUE rogl_glPathStencilDepthOffsetNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    float factor = (float)NUM2DBL(_arg1_);
    float units = (float)NUM2DBL(_arg2_);

    rogl_pfn_glPathStencilDepthOffsetNV(factor, units);

    return Qnil;
}

static VALUE rogl_glStencilFillPathNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int path = (unsigned int)NUM2UINT(_arg1_);
    unsigned int fillMode = (unsigned int)NUM2UINT(_arg2_);
    unsigned int mask = (unsigned int)NUM2UINT(_arg3_);

    rogl_pfn_glStencilFillPathNV(path, fillMode, mask);

    return Qnil;
}

static VALUE rogl_glStencilStrokePathNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int path = (unsigned int)NUM2UINT(_arg1_);
    int reference = (int)NUM2INT(_arg2_);
    unsigned int mask = (unsigned int)NUM2UINT(_arg3_);

    rogl_pfn_glStencilStrokePathNV(path, reference, mask);

    return Qnil;
}

static VALUE rogl_glStencilFillPathInstancedNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_)
{
    int numPaths = (int)NUM2INT(_arg1_);
    unsigned int pathNameType = (unsigned int)NUM2UINT(_arg2_);
    void* paths = (void*)val2ptr(_arg3_);
    unsigned int pathBase = (unsigned int)NUM2UINT(_arg4_);
    unsigned int fillMode = (unsigned int)NUM2UINT(_arg5_);
    unsigned int mask = (unsigned int)NUM2UINT(_arg6_);
    unsigned int transformType = (unsigned int)NUM2UINT(_arg7_);
    void* transformValues = (void*)val2ptr(_arg8_);

    rogl_pfn_glStencilFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues);

    return Qnil;
}

static VALUE rogl_glStencilStrokePathInstancedNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_)
{
    int numPaths = (int)NUM2INT(_arg1_);
    unsigned int pathNameType = (unsigned int)NUM2UINT(_arg2_);
    void* paths = (void*)val2ptr(_arg3_);
    unsigned int pathBase = (unsigned int)NUM2UINT(_arg4_);
    int reference = (int)NUM2INT(_arg5_);
    unsigned int mask = (unsigned int)NUM2UINT(_arg6_);
    unsigned int transformType = (unsigned int)NUM2UINT(_arg7_);
    void* transformValues = (void*)val2ptr(_arg8_);

    rogl_pfn_glStencilStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues);

    return Qnil;
}

static VALUE rogl_glPathCoverDepthFuncNV(VALUE _obj_, VALUE _arg1_)
{
    unsigned int func = (unsigned int)NUM2UINT(_arg1_);

    rogl_pfn_glPathCoverDepthFuncNV(func);

    return Qnil;
}

static VALUE rogl_glCoverFillPathNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int path = (unsigned int)NUM2UINT(_arg1_);
    unsigned int coverMode = (unsigned int)NUM2UINT(_arg2_);

    rogl_pfn_glCoverFillPathNV(path, coverMode);

    return Qnil;
}

static VALUE rogl_glCoverStrokePathNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int path = (unsigned int)NUM2UINT(_arg1_);
    unsigned int coverMode = (unsigned int)NUM2UINT(_arg2_);

    rogl_pfn_glCoverStrokePathNV(path, coverMode);

    return Qnil;
}

static VALUE rogl_glCoverFillPathInstancedNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_)
{
    int numPaths = (int)NUM2INT(_arg1_);
    unsigned int pathNameType = (unsigned int)NUM2UINT(_arg2_);
    void* paths = (void*)val2ptr(_arg3_);
    unsigned int pathBase = (unsigned int)NUM2UINT(_arg4_);
    unsigned int coverMode = (unsigned int)NUM2UINT(_arg5_);
    unsigned int transformType = (unsigned int)NUM2UINT(_arg6_);
    void* transformValues = (void*)val2ptr(_arg7_);

    rogl_pfn_glCoverFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);

    return Qnil;
}

static VALUE rogl_glCoverStrokePathInstancedNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_)
{
    int numPaths = (int)NUM2INT(_arg1_);
    unsigned int pathNameType = (unsigned int)NUM2UINT(_arg2_);
    void* paths = (void*)val2ptr(_arg3_);
    unsigned int pathBase = (unsigned int)NUM2UINT(_arg4_);
    unsigned int coverMode = (unsigned int)NUM2UINT(_arg5_);
    unsigned int transformType = (unsigned int)NUM2UINT(_arg6_);
    void* transformValues = (void*)val2ptr(_arg7_);

    rogl_pfn_glCoverStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);

    return Qnil;
}

static VALUE rogl_glGetPathParameterivNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int path = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* value = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetPathParameterivNV(path, pname, value);

    return Qnil;
}

static VALUE rogl_glGetPathParameterfvNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int path = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* value = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetPathParameterfvNV(path, pname, value);

    return Qnil;
}

static VALUE rogl_glGetPathCommandsNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int path = (unsigned int)NUM2UINT(_arg1_);
    void* commands = (void*)val2ptr(_arg2_);

    rogl_pfn_glGetPathCommandsNV(path, commands);

    return Qnil;
}

static VALUE rogl_glGetPathCoordsNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int path = (unsigned int)NUM2UINT(_arg1_);
    void* coords = (void*)val2ptr(_arg2_);

    rogl_pfn_glGetPathCoordsNV(path, coords);

    return Qnil;
}

static VALUE rogl_glGetPathDashArrayNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int path = (unsigned int)NUM2UINT(_arg1_);
    void* dashArray = (void*)val2ptr(_arg2_);

    rogl_pfn_glGetPathDashArrayNV(path, dashArray);

    return Qnil;
}

static VALUE rogl_glGetPathMetricsNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_)
{
    unsigned int metricQueryMask = (unsigned int)NUM2UINT(_arg1_);
    int numPaths = (int)NUM2INT(_arg2_);
    unsigned int pathNameType = (unsigned int)NUM2UINT(_arg3_);
    void* paths = (void*)val2ptr(_arg4_);
    unsigned int pathBase = (unsigned int)NUM2UINT(_arg5_);
    int stride = (int)NUM2INT(_arg6_);
    void* metrics = (void*)val2ptr(_arg7_);

    rogl_pfn_glGetPathMetricsNV(metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics);

    return Qnil;
}

static VALUE rogl_glGetPathMetricRangeNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int metricQueryMask = (unsigned int)NUM2UINT(_arg1_);
    unsigned int firstPathName = (unsigned int)NUM2UINT(_arg2_);
    int numPaths = (int)NUM2INT(_arg3_);
    int stride = (int)NUM2INT(_arg4_);
    void* metrics = (void*)val2ptr(_arg5_);

    rogl_pfn_glGetPathMetricRangeNV(metricQueryMask, firstPathName, numPaths, stride, metrics);

    return Qnil;
}

static VALUE rogl_glGetPathSpacingNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_, VALUE _arg9_)
{
    unsigned int pathListMode = (unsigned int)NUM2UINT(_arg1_);
    int numPaths = (int)NUM2INT(_arg2_);
    unsigned int pathNameType = (unsigned int)NUM2UINT(_arg3_);
    void* paths = (void*)val2ptr(_arg4_);
    unsigned int pathBase = (unsigned int)NUM2UINT(_arg5_);
    float advanceScale = (float)NUM2DBL(_arg6_);
    float kerningScale = (float)NUM2DBL(_arg7_);
    unsigned int transformType = (unsigned int)NUM2UINT(_arg8_);
    void* returnedSpacing = (void*)val2ptr(_arg9_);

    rogl_pfn_glGetPathSpacingNV(pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing);

    return Qnil;
}

static VALUE rogl_glIsPointInFillPathNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int path = (unsigned int)NUM2UINT(_arg1_);
    unsigned int mask = (unsigned int)NUM2UINT(_arg2_);
    float x = (float)NUM2DBL(_arg3_);
    float y = (float)NUM2DBL(_arg4_);

    unsigned char retval = rogl_pfn_glIsPointInFillPathNV(path, mask, x, y);

    return UINT2NUM(retval);
}

static VALUE rogl_glIsPointInStrokePathNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int path = (unsigned int)NUM2UINT(_arg1_);
    float x = (float)NUM2DBL(_arg2_);
    float y = (float)NUM2DBL(_arg3_);

    unsigned char retval = rogl_pfn_glIsPointInStrokePathNV(path, x, y);

    return UINT2NUM(retval);
}

static VALUE rogl_glGetPathLengthNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int path = (unsigned int)NUM2UINT(_arg1_);
    int startSegment = (int)NUM2INT(_arg2_);
    int numSegments = (int)NUM2INT(_arg3_);

    float retval = rogl_pfn_glGetPathLengthNV(path, startSegment, numSegments);

    return DBL2NUM(retval);
}

static VALUE rogl_glPointAlongPathNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_)
{
    unsigned int path = (unsigned int)NUM2UINT(_arg1_);
    int startSegment = (int)NUM2INT(_arg2_);
    int numSegments = (int)NUM2INT(_arg3_);
    float distance = (float)NUM2DBL(_arg4_);
    void* x = (void*)val2ptr(_arg5_);
    void* y = (void*)val2ptr(_arg6_);
    void* tangentX = (void*)val2ptr(_arg7_);
    void* tangentY = (void*)val2ptr(_arg8_);

    unsigned char retval = rogl_pfn_glPointAlongPathNV(path, startSegment, numSegments, distance, x, y, tangentX, tangentY);

    return UINT2NUM(retval);
}

static VALUE rogl_glMatrixLoad3x2fNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int matrixMode = (unsigned int)NUM2UINT(_arg1_);
    void* m = (void*)val2ptr(_arg2_);

    rogl_pfn_glMatrixLoad3x2fNV(matrixMode, m);

    return Qnil;
}

static VALUE rogl_glMatrixLoad3x3fNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int matrixMode = (unsigned int)NUM2UINT(_arg1_);
    void* m = (void*)val2ptr(_arg2_);

    rogl_pfn_glMatrixLoad3x3fNV(matrixMode, m);

    return Qnil;
}

static VALUE rogl_glMatrixLoadTranspose3x3fNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int matrixMode = (unsigned int)NUM2UINT(_arg1_);
    void* m = (void*)val2ptr(_arg2_);

    rogl_pfn_glMatrixLoadTranspose3x3fNV(matrixMode, m);

    return Qnil;
}

static VALUE rogl_glMatrixMult3x2fNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int matrixMode = (unsigned int)NUM2UINT(_arg1_);
    void* m = (void*)val2ptr(_arg2_);

    rogl_pfn_glMatrixMult3x2fNV(matrixMode, m);

    return Qnil;
}

static VALUE rogl_glMatrixMult3x3fNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int matrixMode = (unsigned int)NUM2UINT(_arg1_);
    void* m = (void*)val2ptr(_arg2_);

    rogl_pfn_glMatrixMult3x3fNV(matrixMode, m);

    return Qnil;
}

static VALUE rogl_glMatrixMultTranspose3x3fNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int matrixMode = (unsigned int)NUM2UINT(_arg1_);
    void* m = (void*)val2ptr(_arg2_);

    rogl_pfn_glMatrixMultTranspose3x3fNV(matrixMode, m);

    return Qnil;
}

static VALUE rogl_glStencilThenCoverFillPathNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int path = (unsigned int)NUM2UINT(_arg1_);
    unsigned int fillMode = (unsigned int)NUM2UINT(_arg2_);
    unsigned int mask = (unsigned int)NUM2UINT(_arg3_);
    unsigned int coverMode = (unsigned int)NUM2UINT(_arg4_);

    rogl_pfn_glStencilThenCoverFillPathNV(path, fillMode, mask, coverMode);

    return Qnil;
}

static VALUE rogl_glStencilThenCoverStrokePathNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int path = (unsigned int)NUM2UINT(_arg1_);
    int reference = (int)NUM2INT(_arg2_);
    unsigned int mask = (unsigned int)NUM2UINT(_arg3_);
    unsigned int coverMode = (unsigned int)NUM2UINT(_arg4_);

    rogl_pfn_glStencilThenCoverStrokePathNV(path, reference, mask, coverMode);

    return Qnil;
}

static VALUE rogl_glStencilThenCoverFillPathInstancedNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_, VALUE _arg9_)
{
    int numPaths = (int)NUM2INT(_arg1_);
    unsigned int pathNameType = (unsigned int)NUM2UINT(_arg2_);
    void* paths = (void*)val2ptr(_arg3_);
    unsigned int pathBase = (unsigned int)NUM2UINT(_arg4_);
    unsigned int fillMode = (unsigned int)NUM2UINT(_arg5_);
    unsigned int mask = (unsigned int)NUM2UINT(_arg6_);
    unsigned int coverMode = (unsigned int)NUM2UINT(_arg7_);
    unsigned int transformType = (unsigned int)NUM2UINT(_arg8_);
    void* transformValues = (void*)val2ptr(_arg9_);

    rogl_pfn_glStencilThenCoverFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, fillMode, mask, coverMode, transformType, transformValues);

    return Qnil;
}

static VALUE rogl_glStencilThenCoverStrokePathInstancedNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_, VALUE _arg9_)
{
    int numPaths = (int)NUM2INT(_arg1_);
    unsigned int pathNameType = (unsigned int)NUM2UINT(_arg2_);
    void* paths = (void*)val2ptr(_arg3_);
    unsigned int pathBase = (unsigned int)NUM2UINT(_arg4_);
    int reference = (int)NUM2INT(_arg5_);
    unsigned int mask = (unsigned int)NUM2UINT(_arg6_);
    unsigned int coverMode = (unsigned int)NUM2UINT(_arg7_);
    unsigned int transformType = (unsigned int)NUM2UINT(_arg8_);
    void* transformValues = (void*)val2ptr(_arg9_);

    rogl_pfn_glStencilThenCoverStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, reference, mask, coverMode, transformType, transformValues);

    return Qnil;
}

static VALUE rogl_glPathGlyphIndexRangeNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_)
{
    unsigned int fontTarget = (unsigned int)NUM2UINT(_arg1_);
    void* fontName = (void*)val2ptr(_arg2_);
    unsigned int fontStyle = (unsigned int)NUM2UINT(_arg3_);
    unsigned int pathParameterTemplate = (unsigned int)NUM2UINT(_arg4_);
    float emScale = (float)NUM2DBL(_arg5_);
    void* baseAndCount = (void*)val2ptr(_arg6_);

    unsigned int retval = rogl_pfn_glPathGlyphIndexRangeNV(fontTarget, fontName, fontStyle, pathParameterTemplate, emScale, baseAndCount);

    return UINT2NUM(retval);
}

static VALUE rogl_glPathGlyphIndexArrayNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_)
{
    unsigned int firstPathName = (unsigned int)NUM2UINT(_arg1_);
    unsigned int fontTarget = (unsigned int)NUM2UINT(_arg2_);
    void* fontName = (void*)val2ptr(_arg3_);
    unsigned int fontStyle = (unsigned int)NUM2UINT(_arg4_);
    unsigned int firstGlyphIndex = (unsigned int)NUM2UINT(_arg5_);
    int numGlyphs = (int)NUM2INT(_arg6_);
    unsigned int pathParameterTemplate = (unsigned int)NUM2UINT(_arg7_);
    float emScale = (float)NUM2DBL(_arg8_);

    unsigned int retval = rogl_pfn_glPathGlyphIndexArrayNV(firstPathName, fontTarget, fontName, fontStyle, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);

    return UINT2NUM(retval);
}

static VALUE rogl_glPathMemoryGlyphIndexArrayNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_, VALUE _arg9_)
{
    unsigned int firstPathName = (unsigned int)NUM2UINT(_arg1_);
    unsigned int fontTarget = (unsigned int)NUM2UINT(_arg2_);
    ptrdiff_t fontSize = (ptrdiff_t)(_arg3_);
    void* fontData = (void*)val2ptr(_arg4_);
    int faceIndex = (int)NUM2INT(_arg5_);
    unsigned int firstGlyphIndex = (unsigned int)NUM2UINT(_arg6_);
    int numGlyphs = (int)NUM2INT(_arg7_);
    unsigned int pathParameterTemplate = (unsigned int)NUM2UINT(_arg8_);
    float emScale = (float)NUM2DBL(_arg9_);

    unsigned int retval = rogl_pfn_glPathMemoryGlyphIndexArrayNV(firstPathName, fontTarget, fontSize, fontData, faceIndex, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);

    return UINT2NUM(retval);
}

static VALUE rogl_glProgramPathFragmentInputGenNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    int location = (int)NUM2INT(_arg2_);
    unsigned int genMode = (unsigned int)NUM2UINT(_arg3_);
    int components = (int)NUM2INT(_arg4_);
    void* coeffs = (void*)val2ptr(_arg5_);

    rogl_pfn_glProgramPathFragmentInputGenNV(program, location, genMode, components, coeffs);

    return Qnil;
}

static VALUE rogl_glGetProgramResourcefvNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    unsigned int programInterface = (unsigned int)NUM2UINT(_arg2_);
    unsigned int index = (unsigned int)NUM2UINT(_arg3_);
    int propCount = (int)NUM2INT(_arg4_);
    void* props = (void*)val2ptr(_arg5_);
    int bufSize = (int)NUM2INT(_arg6_);
    void* length = (void*)val2ptr(_arg7_);
    void* params = (void*)val2ptr(_arg8_);

    rogl_pfn_glGetProgramResourcefvNV(program, programInterface, index, propCount, props, bufSize, length, params);

    return Qnil;
}

static VALUE rogl_glPathColorGenNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int color = (unsigned int)NUM2UINT(_arg1_);
    unsigned int genMode = (unsigned int)NUM2UINT(_arg2_);
    unsigned int colorFormat = (unsigned int)NUM2UINT(_arg3_);
    void* coeffs = (void*)val2ptr(_arg4_);

    rogl_pfn_glPathColorGenNV(color, genMode, colorFormat, coeffs);

    return Qnil;
}

static VALUE rogl_glPathTexGenNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int texCoordSet = (unsigned int)NUM2UINT(_arg1_);
    unsigned int genMode = (unsigned int)NUM2UINT(_arg2_);
    int components = (int)NUM2INT(_arg3_);
    void* coeffs = (void*)val2ptr(_arg4_);

    rogl_pfn_glPathTexGenNV(texCoordSet, genMode, components, coeffs);

    return Qnil;
}

static VALUE rogl_glPathFogGenNV(VALUE _obj_, VALUE _arg1_)
{
    unsigned int genMode = (unsigned int)NUM2UINT(_arg1_);

    rogl_pfn_glPathFogGenNV(genMode);

    return Qnil;
}

static VALUE rogl_glGetPathColorGenivNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int color = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* value = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetPathColorGenivNV(color, pname, value);

    return Qnil;
}

static VALUE rogl_glGetPathColorGenfvNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int color = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* value = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetPathColorGenfvNV(color, pname, value);

    return Qnil;
}

static VALUE rogl_glGetPathTexGenivNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int texCoordSet = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* value = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetPathTexGenivNV(texCoordSet, pname, value);

    return Qnil;
}

static VALUE rogl_glGetPathTexGenfvNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int texCoordSet = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* value = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetPathTexGenfvNV(texCoordSet, pname, value);

    return Qnil;
}

static VALUE rogl_glPixelDataRangeNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    int length = (int)NUM2INT(_arg2_);
    void* pointer = (void*)val2ptr(_arg3_);

    rogl_pfn_glPixelDataRangeNV(target, length, pointer);

    return Qnil;
}

static VALUE rogl_glFlushPixelDataRangeNV(VALUE _obj_, VALUE _arg1_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);

    rogl_pfn_glFlushPixelDataRangeNV(target);

    return Qnil;
}

static VALUE rogl_glPointParameteriNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int pname = (unsigned int)NUM2UINT(_arg1_);
    int param = (int)NUM2INT(_arg2_);

    rogl_pfn_glPointParameteriNV(pname, param);

    return Qnil;
}

static VALUE rogl_glPointParameterivNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int pname = (unsigned int)NUM2UINT(_arg1_);
    void* params = (void*)val2ptr(_arg2_);

    rogl_pfn_glPointParameterivNV(pname, params);

    return Qnil;
}

static VALUE rogl_glPresentFrameKeyedNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_, VALUE _arg9_, VALUE _arg10_, VALUE _arg11_)
{
    unsigned int video_slot = (unsigned int)NUM2UINT(_arg1_);
    unsigned long long minPresentTime = (unsigned long long)NUM2ULL(_arg2_);
    unsigned int beginPresentTimeId = (unsigned int)NUM2UINT(_arg3_);
    unsigned int presentDurationId = (unsigned int)NUM2UINT(_arg4_);
    unsigned int type = (unsigned int)NUM2UINT(_arg5_);
    unsigned int target0 = (unsigned int)NUM2UINT(_arg6_);
    unsigned int fill0 = (unsigned int)NUM2UINT(_arg7_);
    unsigned int key0 = (unsigned int)NUM2UINT(_arg8_);
    unsigned int target1 = (unsigned int)NUM2UINT(_arg9_);
    unsigned int fill1 = (unsigned int)NUM2UINT(_arg10_);
    unsigned int key1 = (unsigned int)NUM2UINT(_arg11_);

    rogl_pfn_glPresentFrameKeyedNV(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, key0, target1, fill1, key1);

    return Qnil;
}

static VALUE rogl_glPresentFrameDualFillNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_, VALUE _arg9_, VALUE _arg10_, VALUE _arg11_, VALUE _arg12_, VALUE _arg13_)
{
    unsigned int video_slot = (unsigned int)NUM2UINT(_arg1_);
    unsigned long long minPresentTime = (unsigned long long)NUM2ULL(_arg2_);
    unsigned int beginPresentTimeId = (unsigned int)NUM2UINT(_arg3_);
    unsigned int presentDurationId = (unsigned int)NUM2UINT(_arg4_);
    unsigned int type = (unsigned int)NUM2UINT(_arg5_);
    unsigned int target0 = (unsigned int)NUM2UINT(_arg6_);
    unsigned int fill0 = (unsigned int)NUM2UINT(_arg7_);
    unsigned int target1 = (unsigned int)NUM2UINT(_arg8_);
    unsigned int fill1 = (unsigned int)NUM2UINT(_arg9_);
    unsigned int target2 = (unsigned int)NUM2UINT(_arg10_);
    unsigned int fill2 = (unsigned int)NUM2UINT(_arg11_);
    unsigned int target3 = (unsigned int)NUM2UINT(_arg12_);
    unsigned int fill3 = (unsigned int)NUM2UINT(_arg13_);

    rogl_pfn_glPresentFrameDualFillNV(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, target1, fill1, target2, fill2, target3, fill3);

    return Qnil;
}

static VALUE rogl_glGetVideoivNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int video_slot = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetVideoivNV(video_slot, pname, params);

    return Qnil;
}

static VALUE rogl_glGetVideouivNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int video_slot = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetVideouivNV(video_slot, pname, params);

    return Qnil;
}

static VALUE rogl_glGetVideoi64vNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int video_slot = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetVideoi64vNV(video_slot, pname, params);

    return Qnil;
}

static VALUE rogl_glGetVideoui64vNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int video_slot = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetVideoui64vNV(video_slot, pname, params);

    return Qnil;
}

static VALUE rogl_glPrimitiveRestartNV(VALUE _obj_)
{
    rogl_pfn_glPrimitiveRestartNV();

    return Qnil;
}

static VALUE rogl_glPrimitiveRestartIndexNV(VALUE _obj_, VALUE _arg1_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);

    rogl_pfn_glPrimitiveRestartIndexNV(index);

    return Qnil;
}

static VALUE rogl_glCombinerParameterfvNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int pname = (unsigned int)NUM2UINT(_arg1_);
    void* params = (void*)val2ptr(_arg2_);

    rogl_pfn_glCombinerParameterfvNV(pname, params);

    return Qnil;
}

static VALUE rogl_glCombinerParameterfNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int pname = (unsigned int)NUM2UINT(_arg1_);
    float param = (float)NUM2DBL(_arg2_);

    rogl_pfn_glCombinerParameterfNV(pname, param);

    return Qnil;
}

static VALUE rogl_glCombinerParameterivNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int pname = (unsigned int)NUM2UINT(_arg1_);
    void* params = (void*)val2ptr(_arg2_);

    rogl_pfn_glCombinerParameterivNV(pname, params);

    return Qnil;
}

static VALUE rogl_glCombinerParameteriNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int pname = (unsigned int)NUM2UINT(_arg1_);
    int param = (int)NUM2INT(_arg2_);

    rogl_pfn_glCombinerParameteriNV(pname, param);

    return Qnil;
}

static VALUE rogl_glCombinerInputNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_)
{
    unsigned int stage = (unsigned int)NUM2UINT(_arg1_);
    unsigned int portion = (unsigned int)NUM2UINT(_arg2_);
    unsigned int variable = (unsigned int)NUM2UINT(_arg3_);
    unsigned int input = (unsigned int)NUM2UINT(_arg4_);
    unsigned int mapping = (unsigned int)NUM2UINT(_arg5_);
    unsigned int componentUsage = (unsigned int)NUM2UINT(_arg6_);

    rogl_pfn_glCombinerInputNV(stage, portion, variable, input, mapping, componentUsage);

    return Qnil;
}

static VALUE rogl_glCombinerOutputNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_, VALUE _arg9_, VALUE _arg10_)
{
    unsigned int stage = (unsigned int)NUM2UINT(_arg1_);
    unsigned int portion = (unsigned int)NUM2UINT(_arg2_);
    unsigned int abOutput = (unsigned int)NUM2UINT(_arg3_);
    unsigned int cdOutput = (unsigned int)NUM2UINT(_arg4_);
    unsigned int sumOutput = (unsigned int)NUM2UINT(_arg5_);
    unsigned int scale = (unsigned int)NUM2UINT(_arg6_);
    unsigned int bias = (unsigned int)NUM2UINT(_arg7_);
    unsigned char abDotProduct = (unsigned char)NUM2UINT(_arg8_);
    unsigned char cdDotProduct = (unsigned char)NUM2UINT(_arg9_);
    unsigned char muxSum = (unsigned char)NUM2UINT(_arg10_);

    rogl_pfn_glCombinerOutputNV(stage, portion, abOutput, cdOutput, sumOutput, scale, bias, abDotProduct, cdDotProduct, muxSum);

    return Qnil;
}

static VALUE rogl_glFinalCombinerInputNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int variable = (unsigned int)NUM2UINT(_arg1_);
    unsigned int input = (unsigned int)NUM2UINT(_arg2_);
    unsigned int mapping = (unsigned int)NUM2UINT(_arg3_);
    unsigned int componentUsage = (unsigned int)NUM2UINT(_arg4_);

    rogl_pfn_glFinalCombinerInputNV(variable, input, mapping, componentUsage);

    return Qnil;
}

static VALUE rogl_glGetCombinerInputParameterfvNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int stage = (unsigned int)NUM2UINT(_arg1_);
    unsigned int portion = (unsigned int)NUM2UINT(_arg2_);
    unsigned int variable = (unsigned int)NUM2UINT(_arg3_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg4_);
    void* params = (void*)val2ptr(_arg5_);

    rogl_pfn_glGetCombinerInputParameterfvNV(stage, portion, variable, pname, params);

    return Qnil;
}

static VALUE rogl_glGetCombinerInputParameterivNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int stage = (unsigned int)NUM2UINT(_arg1_);
    unsigned int portion = (unsigned int)NUM2UINT(_arg2_);
    unsigned int variable = (unsigned int)NUM2UINT(_arg3_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg4_);
    void* params = (void*)val2ptr(_arg5_);

    rogl_pfn_glGetCombinerInputParameterivNV(stage, portion, variable, pname, params);

    return Qnil;
}

static VALUE rogl_glGetCombinerOutputParameterfvNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int stage = (unsigned int)NUM2UINT(_arg1_);
    unsigned int portion = (unsigned int)NUM2UINT(_arg2_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg3_);
    void* params = (void*)val2ptr(_arg4_);

    rogl_pfn_glGetCombinerOutputParameterfvNV(stage, portion, pname, params);

    return Qnil;
}

static VALUE rogl_glGetCombinerOutputParameterivNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int stage = (unsigned int)NUM2UINT(_arg1_);
    unsigned int portion = (unsigned int)NUM2UINT(_arg2_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg3_);
    void* params = (void*)val2ptr(_arg4_);

    rogl_pfn_glGetCombinerOutputParameterivNV(stage, portion, pname, params);

    return Qnil;
}

static VALUE rogl_glGetFinalCombinerInputParameterfvNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int variable = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetFinalCombinerInputParameterfvNV(variable, pname, params);

    return Qnil;
}

static VALUE rogl_glGetFinalCombinerInputParameterivNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int variable = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetFinalCombinerInputParameterivNV(variable, pname, params);

    return Qnil;
}

static VALUE rogl_glCombinerStageParameterfvNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int stage = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glCombinerStageParameterfvNV(stage, pname, params);

    return Qnil;
}

static VALUE rogl_glGetCombinerStageParameterfvNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int stage = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetCombinerStageParameterfvNV(stage, pname, params);

    return Qnil;
}

static VALUE rogl_glFramebufferSampleLocationsfvNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int start = (unsigned int)NUM2UINT(_arg2_);
    int count = (int)NUM2INT(_arg3_);
    void* v = (void*)val2ptr(_arg4_);

    rogl_pfn_glFramebufferSampleLocationsfvNV(target, start, count, v);

    return Qnil;
}

static VALUE rogl_glNamedFramebufferSampleLocationsfvNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int framebuffer = (unsigned int)NUM2UINT(_arg1_);
    unsigned int start = (unsigned int)NUM2UINT(_arg2_);
    int count = (int)NUM2INT(_arg3_);
    void* v = (void*)val2ptr(_arg4_);

    rogl_pfn_glNamedFramebufferSampleLocationsfvNV(framebuffer, start, count, v);

    return Qnil;
}

static VALUE rogl_glResolveDepthValuesNV(VALUE _obj_)
{
    rogl_pfn_glResolveDepthValuesNV();

    return Qnil;
}

static VALUE rogl_glMakeBufferResidentNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int access = (unsigned int)NUM2UINT(_arg2_);

    rogl_pfn_glMakeBufferResidentNV(target, access);

    return Qnil;
}

static VALUE rogl_glMakeBufferNonResidentNV(VALUE _obj_, VALUE _arg1_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);

    rogl_pfn_glMakeBufferNonResidentNV(target);

    return Qnil;
}

static VALUE rogl_glIsBufferResidentNV(VALUE _obj_, VALUE _arg1_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);

    unsigned char retval = rogl_pfn_glIsBufferResidentNV(target);

    return UINT2NUM(retval);
}

static VALUE rogl_glMakeNamedBufferResidentNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int buffer = (unsigned int)NUM2UINT(_arg1_);
    unsigned int access = (unsigned int)NUM2UINT(_arg2_);

    rogl_pfn_glMakeNamedBufferResidentNV(buffer, access);

    return Qnil;
}

static VALUE rogl_glMakeNamedBufferNonResidentNV(VALUE _obj_, VALUE _arg1_)
{
    unsigned int buffer = (unsigned int)NUM2UINT(_arg1_);

    rogl_pfn_glMakeNamedBufferNonResidentNV(buffer);

    return Qnil;
}

static VALUE rogl_glIsNamedBufferResidentNV(VALUE _obj_, VALUE _arg1_)
{
    unsigned int buffer = (unsigned int)NUM2UINT(_arg1_);

    unsigned char retval = rogl_pfn_glIsNamedBufferResidentNV(buffer);

    return UINT2NUM(retval);
}

static VALUE rogl_glGetBufferParameterui64vNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetBufferParameterui64vNV(target, pname, params);

    return Qnil;
}

static VALUE rogl_glGetNamedBufferParameterui64vNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int buffer = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetNamedBufferParameterui64vNV(buffer, pname, params);

    return Qnil;
}

static VALUE rogl_glGetIntegerui64vNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int value = (unsigned int)NUM2UINT(_arg1_);
    void* result = (void*)val2ptr(_arg2_);

    rogl_pfn_glGetIntegerui64vNV(value, result);

    return Qnil;
}

static VALUE rogl_glUniformui64NV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int location = (int)NUM2INT(_arg1_);
    unsigned long long value = (unsigned long long)NUM2ULL(_arg2_);

    rogl_pfn_glUniformui64NV(location, value);

    return Qnil;
}

static VALUE rogl_glUniformui64vNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    int location = (int)NUM2INT(_arg1_);
    int count = (int)NUM2INT(_arg2_);
    void* value = (void*)val2ptr(_arg3_);

    rogl_pfn_glUniformui64vNV(location, count, value);

    return Qnil;
}

static VALUE rogl_glProgramUniformui64NV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    int location = (int)NUM2INT(_arg2_);
    unsigned long long value = (unsigned long long)NUM2ULL(_arg3_);

    rogl_pfn_glProgramUniformui64NV(program, location, value);

    return Qnil;
}

static VALUE rogl_glProgramUniformui64vNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    int location = (int)NUM2INT(_arg2_);
    int count = (int)NUM2INT(_arg3_);
    void* value = (void*)val2ptr(_arg4_);

    rogl_pfn_glProgramUniformui64vNV(program, location, count, value);

    return Qnil;
}

static VALUE rogl_glTextureBarrierNV(VALUE _obj_)
{
    rogl_pfn_glTextureBarrierNV();

    return Qnil;
}

static VALUE rogl_glTexImage2DMultisampleCoverageNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    int coverageSamples = (int)NUM2INT(_arg2_);
    int colorSamples = (int)NUM2INT(_arg3_);
    int internalFormat = (int)NUM2INT(_arg4_);
    int width = (int)NUM2INT(_arg5_);
    int height = (int)NUM2INT(_arg6_);
    unsigned char fixedSampleLocations = (unsigned char)NUM2UINT(_arg7_);

    rogl_pfn_glTexImage2DMultisampleCoverageNV(target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);

    return Qnil;
}

static VALUE rogl_glTexImage3DMultisampleCoverageNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    int coverageSamples = (int)NUM2INT(_arg2_);
    int colorSamples = (int)NUM2INT(_arg3_);
    int internalFormat = (int)NUM2INT(_arg4_);
    int width = (int)NUM2INT(_arg5_);
    int height = (int)NUM2INT(_arg6_);
    int depth = (int)NUM2INT(_arg7_);
    unsigned char fixedSampleLocations = (unsigned char)NUM2UINT(_arg8_);

    rogl_pfn_glTexImage3DMultisampleCoverageNV(target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);

    return Qnil;
}

static VALUE rogl_glTextureImage2DMultisampleNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_)
{
    unsigned int texture = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    int samples = (int)NUM2INT(_arg3_);
    int internalFormat = (int)NUM2INT(_arg4_);
    int width = (int)NUM2INT(_arg5_);
    int height = (int)NUM2INT(_arg6_);
    unsigned char fixedSampleLocations = (unsigned char)NUM2UINT(_arg7_);

    rogl_pfn_glTextureImage2DMultisampleNV(texture, target, samples, internalFormat, width, height, fixedSampleLocations);

    return Qnil;
}

static VALUE rogl_glTextureImage3DMultisampleNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_)
{
    unsigned int texture = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    int samples = (int)NUM2INT(_arg3_);
    int internalFormat = (int)NUM2INT(_arg4_);
    int width = (int)NUM2INT(_arg5_);
    int height = (int)NUM2INT(_arg6_);
    int depth = (int)NUM2INT(_arg7_);
    unsigned char fixedSampleLocations = (unsigned char)NUM2UINT(_arg8_);

    rogl_pfn_glTextureImage3DMultisampleNV(texture, target, samples, internalFormat, width, height, depth, fixedSampleLocations);

    return Qnil;
}

static VALUE rogl_glTextureImage2DMultisampleCoverageNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_)
{
    unsigned int texture = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    int coverageSamples = (int)NUM2INT(_arg3_);
    int colorSamples = (int)NUM2INT(_arg4_);
    int internalFormat = (int)NUM2INT(_arg5_);
    int width = (int)NUM2INT(_arg6_);
    int height = (int)NUM2INT(_arg7_);
    unsigned char fixedSampleLocations = (unsigned char)NUM2UINT(_arg8_);

    rogl_pfn_glTextureImage2DMultisampleCoverageNV(texture, target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);

    return Qnil;
}

static VALUE rogl_glTextureImage3DMultisampleCoverageNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_, VALUE _arg9_)
{
    unsigned int texture = (unsigned int)NUM2UINT(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    int coverageSamples = (int)NUM2INT(_arg3_);
    int colorSamples = (int)NUM2INT(_arg4_);
    int internalFormat = (int)NUM2INT(_arg5_);
    int width = (int)NUM2INT(_arg6_);
    int height = (int)NUM2INT(_arg7_);
    int depth = (int)NUM2INT(_arg8_);
    unsigned char fixedSampleLocations = (unsigned char)NUM2UINT(_arg9_);

    rogl_pfn_glTextureImage3DMultisampleCoverageNV(texture, target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);

    return Qnil;
}

static VALUE rogl_glBeginTransformFeedbackNV(VALUE _obj_, VALUE _arg1_)
{
    unsigned int primitiveMode = (unsigned int)NUM2UINT(_arg1_);

    rogl_pfn_glBeginTransformFeedbackNV(primitiveMode);

    return Qnil;
}

static VALUE rogl_glEndTransformFeedbackNV(VALUE _obj_)
{
    rogl_pfn_glEndTransformFeedbackNV();

    return Qnil;
}

static VALUE rogl_glTransformFeedbackAttribsNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    int count = (int)NUM2INT(_arg1_);
    void* attribs = (void*)val2ptr(_arg2_);
    unsigned int bufferMode = (unsigned int)NUM2UINT(_arg3_);

    rogl_pfn_glTransformFeedbackAttribsNV(count, attribs, bufferMode);

    return Qnil;
}

static VALUE rogl_glBindBufferRangeNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int index = (unsigned int)NUM2UINT(_arg2_);
    unsigned int buffer = (unsigned int)NUM2UINT(_arg3_);
    ptrdiff_t offset = (ptrdiff_t)(_arg4_);
    ptrdiff_t size = (ptrdiff_t)(_arg5_);

    rogl_pfn_glBindBufferRangeNV(target, index, buffer, offset, size);

    return Qnil;
}

static VALUE rogl_glBindBufferOffsetNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int index = (unsigned int)NUM2UINT(_arg2_);
    unsigned int buffer = (unsigned int)NUM2UINT(_arg3_);
    ptrdiff_t offset = (ptrdiff_t)(_arg4_);

    rogl_pfn_glBindBufferOffsetNV(target, index, buffer, offset);

    return Qnil;
}

static VALUE rogl_glBindBufferBaseNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int index = (unsigned int)NUM2UINT(_arg2_);
    unsigned int buffer = (unsigned int)NUM2UINT(_arg3_);

    rogl_pfn_glBindBufferBaseNV(target, index, buffer);

    return Qnil;
}

static VALUE rogl_glTransformFeedbackVaryingsNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    int count = (int)NUM2INT(_arg2_);
    void* locations = (void*)val2ptr(_arg3_);
    unsigned int bufferMode = (unsigned int)NUM2UINT(_arg4_);

    rogl_pfn_glTransformFeedbackVaryingsNV(program, count, locations, bufferMode);

    return Qnil;
}

static VALUE rogl_glActiveVaryingNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    void* name = (void*)val2ptr(_arg2_);

    rogl_pfn_glActiveVaryingNV(program, name);

    return Qnil;
}

static VALUE rogl_glGetVaryingLocationNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    void* name = (void*)val2ptr(_arg2_);

    int retval = rogl_pfn_glGetVaryingLocationNV(program, name);

    return INT2NUM(retval);
}

static VALUE rogl_glGetActiveVaryingNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    unsigned int index = (unsigned int)NUM2UINT(_arg2_);
    int bufSize = (int)NUM2INT(_arg3_);
    void* length = (void*)val2ptr(_arg4_);
    void* size = (void*)val2ptr(_arg5_);
    void* type = (void*)val2ptr(_arg6_);
    void* name = (void*)val2ptr(_arg7_);

    rogl_pfn_glGetActiveVaryingNV(program, index, bufSize, length, size, type, name);

    return Qnil;
}

static VALUE rogl_glGetTransformFeedbackVaryingNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int program = (unsigned int)NUM2UINT(_arg1_);
    unsigned int index = (unsigned int)NUM2UINT(_arg2_);
    void* location = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetTransformFeedbackVaryingNV(program, index, location);

    return Qnil;
}

static VALUE rogl_glTransformFeedbackStreamAttribsNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    int count = (int)NUM2INT(_arg1_);
    void* attribs = (void*)val2ptr(_arg2_);
    int nbuffers = (int)NUM2INT(_arg3_);
    void* bufstreams = (void*)val2ptr(_arg4_);
    unsigned int bufferMode = (unsigned int)NUM2UINT(_arg5_);

    rogl_pfn_glTransformFeedbackStreamAttribsNV(count, attribs, nbuffers, bufstreams, bufferMode);

    return Qnil;
}

static VALUE rogl_glBindTransformFeedbackNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int id = (unsigned int)NUM2UINT(_arg2_);

    rogl_pfn_glBindTransformFeedbackNV(target, id);

    return Qnil;
}

static VALUE rogl_glDeleteTransformFeedbacksNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int n = (int)NUM2INT(_arg1_);
    void* ids = (void*)val2ptr(_arg2_);

    rogl_pfn_glDeleteTransformFeedbacksNV(n, ids);

    return Qnil;
}

static VALUE rogl_glGenTransformFeedbacksNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int n = (int)NUM2INT(_arg1_);
    void* ids = (void*)val2ptr(_arg2_);

    rogl_pfn_glGenTransformFeedbacksNV(n, ids);

    return Qnil;
}

static VALUE rogl_glIsTransformFeedbackNV(VALUE _obj_, VALUE _arg1_)
{
    unsigned int id = (unsigned int)NUM2UINT(_arg1_);

    unsigned char retval = rogl_pfn_glIsTransformFeedbackNV(id);

    return UINT2NUM(retval);
}

static VALUE rogl_glPauseTransformFeedbackNV(VALUE _obj_)
{
    rogl_pfn_glPauseTransformFeedbackNV();

    return Qnil;
}

static VALUE rogl_glResumeTransformFeedbackNV(VALUE _obj_)
{
    rogl_pfn_glResumeTransformFeedbackNV();

    return Qnil;
}

static VALUE rogl_glDrawTransformFeedbackNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int mode = (unsigned int)NUM2UINT(_arg1_);
    unsigned int id = (unsigned int)NUM2UINT(_arg2_);

    rogl_pfn_glDrawTransformFeedbackNV(mode, id);

    return Qnil;
}

static VALUE rogl_glVDPAUInitNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    void* vdpDevice = (void*)val2ptr(_arg1_);
    void* getProcAddress = (void*)val2ptr(_arg2_);

    rogl_pfn_glVDPAUInitNV(vdpDevice, getProcAddress);

    return Qnil;
}

static VALUE rogl_glVDPAUFiniNV(VALUE _obj_)
{
    rogl_pfn_glVDPAUFiniNV();

    return Qnil;
}

static VALUE rogl_glVDPAURegisterVideoSurfaceNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    void* vdpSurface = (void*)val2ptr(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    int numTextureNames = (int)NUM2INT(_arg3_);
    void* textureNames = (void*)val2ptr(_arg4_);

    ptrdiff_t retval = rogl_pfn_glVDPAURegisterVideoSurfaceNV(vdpSurface, target, numTextureNames, textureNames);

    return (retval);
}

static VALUE rogl_glVDPAURegisterOutputSurfaceNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    void* vdpSurface = (void*)val2ptr(_arg1_);
    unsigned int target = (unsigned int)NUM2UINT(_arg2_);
    int numTextureNames = (int)NUM2INT(_arg3_);
    void* textureNames = (void*)val2ptr(_arg4_);

    ptrdiff_t retval = rogl_pfn_glVDPAURegisterOutputSurfaceNV(vdpSurface, target, numTextureNames, textureNames);

    return (retval);
}

static VALUE rogl_glVDPAUIsSurfaceNV(VALUE _obj_, VALUE _arg1_)
{
    ptrdiff_t surface = (ptrdiff_t)(_arg1_);

    unsigned char retval = rogl_pfn_glVDPAUIsSurfaceNV(surface);

    return UINT2NUM(retval);
}

static VALUE rogl_glVDPAUUnregisterSurfaceNV(VALUE _obj_, VALUE _arg1_)
{
    ptrdiff_t surface = (ptrdiff_t)(_arg1_);

    rogl_pfn_glVDPAUUnregisterSurfaceNV(surface);

    return Qnil;
}

static VALUE rogl_glVDPAUGetSurfaceivNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    ptrdiff_t surface = (ptrdiff_t)(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    int bufSize = (int)NUM2INT(_arg3_);
    void* length = (void*)val2ptr(_arg4_);
    void* values = (void*)val2ptr(_arg5_);

    rogl_pfn_glVDPAUGetSurfaceivNV(surface, pname, bufSize, length, values);

    return Qnil;
}

static VALUE rogl_glVDPAUSurfaceAccessNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    ptrdiff_t surface = (ptrdiff_t)(_arg1_);
    unsigned int access = (unsigned int)NUM2UINT(_arg2_);

    rogl_pfn_glVDPAUSurfaceAccessNV(surface, access);

    return Qnil;
}

static VALUE rogl_glVDPAUMapSurfacesNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int numSurfaces = (int)NUM2INT(_arg1_);
    void* surfaces = (void*)val2ptr(_arg2_);

    rogl_pfn_glVDPAUMapSurfacesNV(numSurfaces, surfaces);

    return Qnil;
}

static VALUE rogl_glVDPAUUnmapSurfacesNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int numSurface = (int)NUM2INT(_arg1_);
    void* surfaces = (void*)val2ptr(_arg2_);

    rogl_pfn_glVDPAUUnmapSurfacesNV(numSurface, surfaces);

    return Qnil;
}

static VALUE rogl_glFlushVertexArrayRangeNV(VALUE _obj_)
{
    rogl_pfn_glFlushVertexArrayRangeNV();

    return Qnil;
}

static VALUE rogl_glVertexArrayRangeNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int length = (int)NUM2INT(_arg1_);
    void* pointer = (void*)val2ptr(_arg2_);

    rogl_pfn_glVertexArrayRangeNV(length, pointer);

    return Qnil;
}

static VALUE rogl_glVertexAttribL1i64NV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    long long x = (long long)NUM2LL(_arg2_);

    rogl_pfn_glVertexAttribL1i64NV(index, x);

    return Qnil;
}

static VALUE rogl_glVertexAttribL2i64NV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    long long x = (long long)NUM2LL(_arg2_);
    long long y = (long long)NUM2LL(_arg3_);

    rogl_pfn_glVertexAttribL2i64NV(index, x, y);

    return Qnil;
}

static VALUE rogl_glVertexAttribL3i64NV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    long long x = (long long)NUM2LL(_arg2_);
    long long y = (long long)NUM2LL(_arg3_);
    long long z = (long long)NUM2LL(_arg4_);

    rogl_pfn_glVertexAttribL3i64NV(index, x, y, z);

    return Qnil;
}

static VALUE rogl_glVertexAttribL4i64NV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    long long x = (long long)NUM2LL(_arg2_);
    long long y = (long long)NUM2LL(_arg3_);
    long long z = (long long)NUM2LL(_arg4_);
    long long w = (long long)NUM2LL(_arg5_);

    rogl_pfn_glVertexAttribL4i64NV(index, x, y, z, w);

    return Qnil;
}

static VALUE rogl_glVertexAttribL1i64vNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    void* v = (void*)val2ptr(_arg2_);

    rogl_pfn_glVertexAttribL1i64vNV(index, v);

    return Qnil;
}

static VALUE rogl_glVertexAttribL2i64vNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    void* v = (void*)val2ptr(_arg2_);

    rogl_pfn_glVertexAttribL2i64vNV(index, v);

    return Qnil;
}

static VALUE rogl_glVertexAttribL3i64vNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    void* v = (void*)val2ptr(_arg2_);

    rogl_pfn_glVertexAttribL3i64vNV(index, v);

    return Qnil;
}

static VALUE rogl_glVertexAttribL4i64vNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    void* v = (void*)val2ptr(_arg2_);

    rogl_pfn_glVertexAttribL4i64vNV(index, v);

    return Qnil;
}

static VALUE rogl_glVertexAttribL1ui64NV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    unsigned long long x = (unsigned long long)NUM2ULL(_arg2_);

    rogl_pfn_glVertexAttribL1ui64NV(index, x);

    return Qnil;
}

static VALUE rogl_glVertexAttribL2ui64NV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    unsigned long long x = (unsigned long long)NUM2ULL(_arg2_);
    unsigned long long y = (unsigned long long)NUM2ULL(_arg3_);

    rogl_pfn_glVertexAttribL2ui64NV(index, x, y);

    return Qnil;
}

static VALUE rogl_glVertexAttribL3ui64NV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    unsigned long long x = (unsigned long long)NUM2ULL(_arg2_);
    unsigned long long y = (unsigned long long)NUM2ULL(_arg3_);
    unsigned long long z = (unsigned long long)NUM2ULL(_arg4_);

    rogl_pfn_glVertexAttribL3ui64NV(index, x, y, z);

    return Qnil;
}

static VALUE rogl_glVertexAttribL4ui64NV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    unsigned long long x = (unsigned long long)NUM2ULL(_arg2_);
    unsigned long long y = (unsigned long long)NUM2ULL(_arg3_);
    unsigned long long z = (unsigned long long)NUM2ULL(_arg4_);
    unsigned long long w = (unsigned long long)NUM2ULL(_arg5_);

    rogl_pfn_glVertexAttribL4ui64NV(index, x, y, z, w);

    return Qnil;
}

static VALUE rogl_glVertexAttribL1ui64vNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    void* v = (void*)val2ptr(_arg2_);

    rogl_pfn_glVertexAttribL1ui64vNV(index, v);

    return Qnil;
}

static VALUE rogl_glVertexAttribL2ui64vNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    void* v = (void*)val2ptr(_arg2_);

    rogl_pfn_glVertexAttribL2ui64vNV(index, v);

    return Qnil;
}

static VALUE rogl_glVertexAttribL3ui64vNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    void* v = (void*)val2ptr(_arg2_);

    rogl_pfn_glVertexAttribL3ui64vNV(index, v);

    return Qnil;
}

static VALUE rogl_glVertexAttribL4ui64vNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    void* v = (void*)val2ptr(_arg2_);

    rogl_pfn_glVertexAttribL4ui64vNV(index, v);

    return Qnil;
}

static VALUE rogl_glGetVertexAttribLi64vNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetVertexAttribLi64vNV(index, pname, params);

    return Qnil;
}

static VALUE rogl_glGetVertexAttribLui64vNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetVertexAttribLui64vNV(index, pname, params);

    return Qnil;
}

static VALUE rogl_glVertexAttribLFormatNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    int size = (int)NUM2INT(_arg2_);
    unsigned int type = (unsigned int)NUM2UINT(_arg3_);
    int stride = (int)NUM2INT(_arg4_);

    rogl_pfn_glVertexAttribLFormatNV(index, size, type, stride);

    return Qnil;
}

static VALUE rogl_glBufferAddressRangeNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int pname = (unsigned int)NUM2UINT(_arg1_);
    unsigned int index = (unsigned int)NUM2UINT(_arg2_);
    unsigned long long address = (unsigned long long)NUM2ULL(_arg3_);
    ptrdiff_t length = (ptrdiff_t)(_arg4_);

    rogl_pfn_glBufferAddressRangeNV(pname, index, address, length);

    return Qnil;
}

static VALUE rogl_glVertexFormatNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    int size = (int)NUM2INT(_arg1_);
    unsigned int type = (unsigned int)NUM2UINT(_arg2_);
    int stride = (int)NUM2INT(_arg3_);

    rogl_pfn_glVertexFormatNV(size, type, stride);

    return Qnil;
}

static VALUE rogl_glNormalFormatNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int type = (unsigned int)NUM2UINT(_arg1_);
    int stride = (int)NUM2INT(_arg2_);

    rogl_pfn_glNormalFormatNV(type, stride);

    return Qnil;
}

static VALUE rogl_glColorFormatNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    int size = (int)NUM2INT(_arg1_);
    unsigned int type = (unsigned int)NUM2UINT(_arg2_);
    int stride = (int)NUM2INT(_arg3_);

    rogl_pfn_glColorFormatNV(size, type, stride);

    return Qnil;
}

static VALUE rogl_glIndexFormatNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int type = (unsigned int)NUM2UINT(_arg1_);
    int stride = (int)NUM2INT(_arg2_);

    rogl_pfn_glIndexFormatNV(type, stride);

    return Qnil;
}

static VALUE rogl_glTexCoordFormatNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    int size = (int)NUM2INT(_arg1_);
    unsigned int type = (unsigned int)NUM2UINT(_arg2_);
    int stride = (int)NUM2INT(_arg3_);

    rogl_pfn_glTexCoordFormatNV(size, type, stride);

    return Qnil;
}

static VALUE rogl_glEdgeFlagFormatNV(VALUE _obj_, VALUE _arg1_)
{
    int stride = (int)NUM2INT(_arg1_);

    rogl_pfn_glEdgeFlagFormatNV(stride);

    return Qnil;
}

static VALUE rogl_glSecondaryColorFormatNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    int size = (int)NUM2INT(_arg1_);
    unsigned int type = (unsigned int)NUM2UINT(_arg2_);
    int stride = (int)NUM2INT(_arg3_);

    rogl_pfn_glSecondaryColorFormatNV(size, type, stride);

    return Qnil;
}

static VALUE rogl_glFogCoordFormatNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int type = (unsigned int)NUM2UINT(_arg1_);
    int stride = (int)NUM2INT(_arg2_);

    rogl_pfn_glFogCoordFormatNV(type, stride);

    return Qnil;
}

static VALUE rogl_glVertexAttribFormatNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    int size = (int)NUM2INT(_arg2_);
    unsigned int type = (unsigned int)NUM2UINT(_arg3_);
    unsigned char normalized = (unsigned char)NUM2UINT(_arg4_);
    int stride = (int)NUM2INT(_arg5_);

    rogl_pfn_glVertexAttribFormatNV(index, size, type, normalized, stride);

    return Qnil;
}

static VALUE rogl_glVertexAttribIFormatNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    int size = (int)NUM2INT(_arg2_);
    unsigned int type = (unsigned int)NUM2UINT(_arg3_);
    int stride = (int)NUM2INT(_arg4_);

    rogl_pfn_glVertexAttribIFormatNV(index, size, type, stride);

    return Qnil;
}

static VALUE rogl_glGetIntegerui64i_vNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int value = (unsigned int)NUM2UINT(_arg1_);
    unsigned int index = (unsigned int)NUM2UINT(_arg2_);
    void* result = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetIntegerui64i_vNV(value, index, result);

    return Qnil;
}

static VALUE rogl_glAreProgramsResidentNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    int n = (int)NUM2INT(_arg1_);
    void* programs = (void*)val2ptr(_arg2_);
    void* residences = (void*)val2ptr(_arg3_);

    unsigned char retval = rogl_pfn_glAreProgramsResidentNV(n, programs, residences);

    return UINT2NUM(retval);
}

static VALUE rogl_glBindProgramNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int id = (unsigned int)NUM2UINT(_arg2_);

    rogl_pfn_glBindProgramNV(target, id);

    return Qnil;
}

static VALUE rogl_glDeleteProgramsNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int n = (int)NUM2INT(_arg1_);
    void* programs = (void*)val2ptr(_arg2_);

    rogl_pfn_glDeleteProgramsNV(n, programs);

    return Qnil;
}

static VALUE rogl_glExecuteProgramNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int id = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glExecuteProgramNV(target, id, params);

    return Qnil;
}

static VALUE rogl_glGenProgramsNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int n = (int)NUM2INT(_arg1_);
    void* programs = (void*)val2ptr(_arg2_);

    rogl_pfn_glGenProgramsNV(n, programs);

    return Qnil;
}

static VALUE rogl_glGetProgramParameterdvNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int index = (unsigned int)NUM2UINT(_arg2_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg3_);
    void* params = (void*)val2ptr(_arg4_);

    rogl_pfn_glGetProgramParameterdvNV(target, index, pname, params);

    return Qnil;
}

static VALUE rogl_glGetProgramParameterfvNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int index = (unsigned int)NUM2UINT(_arg2_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg3_);
    void* params = (void*)val2ptr(_arg4_);

    rogl_pfn_glGetProgramParameterfvNV(target, index, pname, params);

    return Qnil;
}

static VALUE rogl_glGetProgramivNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int id = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetProgramivNV(id, pname, params);

    return Qnil;
}

static VALUE rogl_glGetProgramStringNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int id = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* program = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetProgramStringNV(id, pname, program);

    return Qnil;
}

static VALUE rogl_glGetTrackMatrixivNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int address = (unsigned int)NUM2UINT(_arg2_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg3_);
    void* params = (void*)val2ptr(_arg4_);

    rogl_pfn_glGetTrackMatrixivNV(target, address, pname, params);

    return Qnil;
}

static VALUE rogl_glGetVertexAttribdvNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetVertexAttribdvNV(index, pname, params);

    return Qnil;
}

static VALUE rogl_glGetVertexAttribfvNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetVertexAttribfvNV(index, pname, params);

    return Qnil;
}

static VALUE rogl_glGetVertexAttribivNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetVertexAttribivNV(index, pname, params);

    return Qnil;
}

static VALUE rogl_glGetVertexAttribPointervNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* pointer = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetVertexAttribPointervNV(index, pname, pointer);

    return Qnil;
}

static VALUE rogl_glIsProgramNV(VALUE _obj_, VALUE _arg1_)
{
    unsigned int id = (unsigned int)NUM2UINT(_arg1_);

    unsigned char retval = rogl_pfn_glIsProgramNV(id);

    return UINT2NUM(retval);
}

static VALUE rogl_glLoadProgramNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int id = (unsigned int)NUM2UINT(_arg2_);
    int len = (int)NUM2INT(_arg3_);
    void* program = (void*)val2ptr(_arg4_);

    rogl_pfn_glLoadProgramNV(target, id, len, program);

    return Qnil;
}

static VALUE rogl_glProgramParameter4dNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int index = (unsigned int)NUM2UINT(_arg2_);
    double x = (double)NUM2DBL(_arg3_);
    double y = (double)NUM2DBL(_arg4_);
    double z = (double)NUM2DBL(_arg5_);
    double w = (double)NUM2DBL(_arg6_);

    rogl_pfn_glProgramParameter4dNV(target, index, x, y, z, w);

    return Qnil;
}

static VALUE rogl_glProgramParameter4dvNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int index = (unsigned int)NUM2UINT(_arg2_);
    void* v = (void*)val2ptr(_arg3_);

    rogl_pfn_glProgramParameter4dvNV(target, index, v);

    return Qnil;
}

static VALUE rogl_glProgramParameter4fNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int index = (unsigned int)NUM2UINT(_arg2_);
    float x = (float)NUM2DBL(_arg3_);
    float y = (float)NUM2DBL(_arg4_);
    float z = (float)NUM2DBL(_arg5_);
    float w = (float)NUM2DBL(_arg6_);

    rogl_pfn_glProgramParameter4fNV(target, index, x, y, z, w);

    return Qnil;
}

static VALUE rogl_glProgramParameter4fvNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int index = (unsigned int)NUM2UINT(_arg2_);
    void* v = (void*)val2ptr(_arg3_);

    rogl_pfn_glProgramParameter4fvNV(target, index, v);

    return Qnil;
}

static VALUE rogl_glProgramParameters4dvNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int index = (unsigned int)NUM2UINT(_arg2_);
    int count = (int)NUM2INT(_arg3_);
    void* v = (void*)val2ptr(_arg4_);

    rogl_pfn_glProgramParameters4dvNV(target, index, count, v);

    return Qnil;
}

static VALUE rogl_glProgramParameters4fvNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int index = (unsigned int)NUM2UINT(_arg2_);
    int count = (int)NUM2INT(_arg3_);
    void* v = (void*)val2ptr(_arg4_);

    rogl_pfn_glProgramParameters4fvNV(target, index, count, v);

    return Qnil;
}

static VALUE rogl_glRequestResidentProgramsNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int n = (int)NUM2INT(_arg1_);
    void* programs = (void*)val2ptr(_arg2_);

    rogl_pfn_glRequestResidentProgramsNV(n, programs);

    return Qnil;
}

static VALUE rogl_glTrackMatrixNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int address = (unsigned int)NUM2UINT(_arg2_);
    unsigned int matrix = (unsigned int)NUM2UINT(_arg3_);
    unsigned int transform = (unsigned int)NUM2UINT(_arg4_);

    rogl_pfn_glTrackMatrixNV(target, address, matrix, transform);

    return Qnil;
}

static VALUE rogl_glVertexAttribPointerNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    int fsize = (int)NUM2INT(_arg2_);
    unsigned int type = (unsigned int)NUM2UINT(_arg3_);
    int stride = (int)NUM2INT(_arg4_);
    void* pointer = (void*)val2ptr(_arg5_);

    rogl_pfn_glVertexAttribPointerNV(index, fsize, type, stride, pointer);

    return Qnil;
}

static VALUE rogl_glVertexAttrib1dNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    double x = (double)NUM2DBL(_arg2_);

    rogl_pfn_glVertexAttrib1dNV(index, x);

    return Qnil;
}

static VALUE rogl_glVertexAttrib1dvNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    void* v = (void*)val2ptr(_arg2_);

    rogl_pfn_glVertexAttrib1dvNV(index, v);

    return Qnil;
}

static VALUE rogl_glVertexAttrib1fNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    float x = (float)NUM2DBL(_arg2_);

    rogl_pfn_glVertexAttrib1fNV(index, x);

    return Qnil;
}

static VALUE rogl_glVertexAttrib1fvNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    void* v = (void*)val2ptr(_arg2_);

    rogl_pfn_glVertexAttrib1fvNV(index, v);

    return Qnil;
}

static VALUE rogl_glVertexAttrib1sNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    short x = (short)NUM2INT(_arg2_);

    rogl_pfn_glVertexAttrib1sNV(index, x);

    return Qnil;
}

static VALUE rogl_glVertexAttrib1svNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    void* v = (void*)val2ptr(_arg2_);

    rogl_pfn_glVertexAttrib1svNV(index, v);

    return Qnil;
}

static VALUE rogl_glVertexAttrib2dNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    double x = (double)NUM2DBL(_arg2_);
    double y = (double)NUM2DBL(_arg3_);

    rogl_pfn_glVertexAttrib2dNV(index, x, y);

    return Qnil;
}

static VALUE rogl_glVertexAttrib2dvNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    void* v = (void*)val2ptr(_arg2_);

    rogl_pfn_glVertexAttrib2dvNV(index, v);

    return Qnil;
}

static VALUE rogl_glVertexAttrib2fNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    float x = (float)NUM2DBL(_arg2_);
    float y = (float)NUM2DBL(_arg3_);

    rogl_pfn_glVertexAttrib2fNV(index, x, y);

    return Qnil;
}

static VALUE rogl_glVertexAttrib2fvNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    void* v = (void*)val2ptr(_arg2_);

    rogl_pfn_glVertexAttrib2fvNV(index, v);

    return Qnil;
}

static VALUE rogl_glVertexAttrib2sNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    short x = (short)NUM2INT(_arg2_);
    short y = (short)NUM2INT(_arg3_);

    rogl_pfn_glVertexAttrib2sNV(index, x, y);

    return Qnil;
}

static VALUE rogl_glVertexAttrib2svNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    void* v = (void*)val2ptr(_arg2_);

    rogl_pfn_glVertexAttrib2svNV(index, v);

    return Qnil;
}

static VALUE rogl_glVertexAttrib3dNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    double x = (double)NUM2DBL(_arg2_);
    double y = (double)NUM2DBL(_arg3_);
    double z = (double)NUM2DBL(_arg4_);

    rogl_pfn_glVertexAttrib3dNV(index, x, y, z);

    return Qnil;
}

static VALUE rogl_glVertexAttrib3dvNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    void* v = (void*)val2ptr(_arg2_);

    rogl_pfn_glVertexAttrib3dvNV(index, v);

    return Qnil;
}

static VALUE rogl_glVertexAttrib3fNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    float x = (float)NUM2DBL(_arg2_);
    float y = (float)NUM2DBL(_arg3_);
    float z = (float)NUM2DBL(_arg4_);

    rogl_pfn_glVertexAttrib3fNV(index, x, y, z);

    return Qnil;
}

static VALUE rogl_glVertexAttrib3fvNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    void* v = (void*)val2ptr(_arg2_);

    rogl_pfn_glVertexAttrib3fvNV(index, v);

    return Qnil;
}

static VALUE rogl_glVertexAttrib3sNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    short x = (short)NUM2INT(_arg2_);
    short y = (short)NUM2INT(_arg3_);
    short z = (short)NUM2INT(_arg4_);

    rogl_pfn_glVertexAttrib3sNV(index, x, y, z);

    return Qnil;
}

static VALUE rogl_glVertexAttrib3svNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    void* v = (void*)val2ptr(_arg2_);

    rogl_pfn_glVertexAttrib3svNV(index, v);

    return Qnil;
}

static VALUE rogl_glVertexAttrib4dNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    double x = (double)NUM2DBL(_arg2_);
    double y = (double)NUM2DBL(_arg3_);
    double z = (double)NUM2DBL(_arg4_);
    double w = (double)NUM2DBL(_arg5_);

    rogl_pfn_glVertexAttrib4dNV(index, x, y, z, w);

    return Qnil;
}

static VALUE rogl_glVertexAttrib4dvNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    void* v = (void*)val2ptr(_arg2_);

    rogl_pfn_glVertexAttrib4dvNV(index, v);

    return Qnil;
}

static VALUE rogl_glVertexAttrib4fNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    float x = (float)NUM2DBL(_arg2_);
    float y = (float)NUM2DBL(_arg3_);
    float z = (float)NUM2DBL(_arg4_);
    float w = (float)NUM2DBL(_arg5_);

    rogl_pfn_glVertexAttrib4fNV(index, x, y, z, w);

    return Qnil;
}

static VALUE rogl_glVertexAttrib4fvNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    void* v = (void*)val2ptr(_arg2_);

    rogl_pfn_glVertexAttrib4fvNV(index, v);

    return Qnil;
}

static VALUE rogl_glVertexAttrib4sNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    short x = (short)NUM2INT(_arg2_);
    short y = (short)NUM2INT(_arg3_);
    short z = (short)NUM2INT(_arg4_);
    short w = (short)NUM2INT(_arg5_);

    rogl_pfn_glVertexAttrib4sNV(index, x, y, z, w);

    return Qnil;
}

static VALUE rogl_glVertexAttrib4svNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    void* v = (void*)val2ptr(_arg2_);

    rogl_pfn_glVertexAttrib4svNV(index, v);

    return Qnil;
}

static VALUE rogl_glVertexAttrib4ubNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    unsigned char x = (unsigned char)NUM2UINT(_arg2_);
    unsigned char y = (unsigned char)NUM2UINT(_arg3_);
    unsigned char z = (unsigned char)NUM2UINT(_arg4_);
    unsigned char w = (unsigned char)NUM2UINT(_arg5_);

    rogl_pfn_glVertexAttrib4ubNV(index, x, y, z, w);

    return Qnil;
}

static VALUE rogl_glVertexAttrib4ubvNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    void* v = (void*)val2ptr(_arg2_);

    rogl_pfn_glVertexAttrib4ubvNV(index, v);

    return Qnil;
}

static VALUE rogl_glVertexAttribs1dvNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    int count = (int)NUM2INT(_arg2_);
    void* v = (void*)val2ptr(_arg3_);

    rogl_pfn_glVertexAttribs1dvNV(index, count, v);

    return Qnil;
}

static VALUE rogl_glVertexAttribs1fvNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    int count = (int)NUM2INT(_arg2_);
    void* v = (void*)val2ptr(_arg3_);

    rogl_pfn_glVertexAttribs1fvNV(index, count, v);

    return Qnil;
}

static VALUE rogl_glVertexAttribs1svNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    int count = (int)NUM2INT(_arg2_);
    void* v = (void*)val2ptr(_arg3_);

    rogl_pfn_glVertexAttribs1svNV(index, count, v);

    return Qnil;
}

static VALUE rogl_glVertexAttribs2dvNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    int count = (int)NUM2INT(_arg2_);
    void* v = (void*)val2ptr(_arg3_);

    rogl_pfn_glVertexAttribs2dvNV(index, count, v);

    return Qnil;
}

static VALUE rogl_glVertexAttribs2fvNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    int count = (int)NUM2INT(_arg2_);
    void* v = (void*)val2ptr(_arg3_);

    rogl_pfn_glVertexAttribs2fvNV(index, count, v);

    return Qnil;
}

static VALUE rogl_glVertexAttribs2svNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    int count = (int)NUM2INT(_arg2_);
    void* v = (void*)val2ptr(_arg3_);

    rogl_pfn_glVertexAttribs2svNV(index, count, v);

    return Qnil;
}

static VALUE rogl_glVertexAttribs3dvNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    int count = (int)NUM2INT(_arg2_);
    void* v = (void*)val2ptr(_arg3_);

    rogl_pfn_glVertexAttribs3dvNV(index, count, v);

    return Qnil;
}

static VALUE rogl_glVertexAttribs3fvNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    int count = (int)NUM2INT(_arg2_);
    void* v = (void*)val2ptr(_arg3_);

    rogl_pfn_glVertexAttribs3fvNV(index, count, v);

    return Qnil;
}

static VALUE rogl_glVertexAttribs3svNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    int count = (int)NUM2INT(_arg2_);
    void* v = (void*)val2ptr(_arg3_);

    rogl_pfn_glVertexAttribs3svNV(index, count, v);

    return Qnil;
}

static VALUE rogl_glVertexAttribs4dvNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    int count = (int)NUM2INT(_arg2_);
    void* v = (void*)val2ptr(_arg3_);

    rogl_pfn_glVertexAttribs4dvNV(index, count, v);

    return Qnil;
}

static VALUE rogl_glVertexAttribs4fvNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    int count = (int)NUM2INT(_arg2_);
    void* v = (void*)val2ptr(_arg3_);

    rogl_pfn_glVertexAttribs4fvNV(index, count, v);

    return Qnil;
}

static VALUE rogl_glVertexAttribs4svNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    int count = (int)NUM2INT(_arg2_);
    void* v = (void*)val2ptr(_arg3_);

    rogl_pfn_glVertexAttribs4svNV(index, count, v);

    return Qnil;
}

static VALUE rogl_glVertexAttribs4ubvNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    int count = (int)NUM2INT(_arg2_);
    void* v = (void*)val2ptr(_arg3_);

    rogl_pfn_glVertexAttribs4ubvNV(index, count, v);

    return Qnil;
}

static VALUE rogl_glVertexAttribI1iEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    int x = (int)NUM2INT(_arg2_);

    rogl_pfn_glVertexAttribI1iEXT(index, x);

    return Qnil;
}

static VALUE rogl_glVertexAttribI2iEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    int x = (int)NUM2INT(_arg2_);
    int y = (int)NUM2INT(_arg3_);

    rogl_pfn_glVertexAttribI2iEXT(index, x, y);

    return Qnil;
}

static VALUE rogl_glVertexAttribI3iEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    int x = (int)NUM2INT(_arg2_);
    int y = (int)NUM2INT(_arg3_);
    int z = (int)NUM2INT(_arg4_);

    rogl_pfn_glVertexAttribI3iEXT(index, x, y, z);

    return Qnil;
}

static VALUE rogl_glVertexAttribI4iEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    int x = (int)NUM2INT(_arg2_);
    int y = (int)NUM2INT(_arg3_);
    int z = (int)NUM2INT(_arg4_);
    int w = (int)NUM2INT(_arg5_);

    rogl_pfn_glVertexAttribI4iEXT(index, x, y, z, w);

    return Qnil;
}

static VALUE rogl_glVertexAttribI1uiEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    unsigned int x = (unsigned int)NUM2UINT(_arg2_);

    rogl_pfn_glVertexAttribI1uiEXT(index, x);

    return Qnil;
}

static VALUE rogl_glVertexAttribI2uiEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    unsigned int x = (unsigned int)NUM2UINT(_arg2_);
    unsigned int y = (unsigned int)NUM2UINT(_arg3_);

    rogl_pfn_glVertexAttribI2uiEXT(index, x, y);

    return Qnil;
}

static VALUE rogl_glVertexAttribI3uiEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    unsigned int x = (unsigned int)NUM2UINT(_arg2_);
    unsigned int y = (unsigned int)NUM2UINT(_arg3_);
    unsigned int z = (unsigned int)NUM2UINT(_arg4_);

    rogl_pfn_glVertexAttribI3uiEXT(index, x, y, z);

    return Qnil;
}

static VALUE rogl_glVertexAttribI4uiEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    unsigned int x = (unsigned int)NUM2UINT(_arg2_);
    unsigned int y = (unsigned int)NUM2UINT(_arg3_);
    unsigned int z = (unsigned int)NUM2UINT(_arg4_);
    unsigned int w = (unsigned int)NUM2UINT(_arg5_);

    rogl_pfn_glVertexAttribI4uiEXT(index, x, y, z, w);

    return Qnil;
}

static VALUE rogl_glVertexAttribI1ivEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    void* v = (void*)val2ptr(_arg2_);

    rogl_pfn_glVertexAttribI1ivEXT(index, v);

    return Qnil;
}

static VALUE rogl_glVertexAttribI2ivEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    void* v = (void*)val2ptr(_arg2_);

    rogl_pfn_glVertexAttribI2ivEXT(index, v);

    return Qnil;
}

static VALUE rogl_glVertexAttribI3ivEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    void* v = (void*)val2ptr(_arg2_);

    rogl_pfn_glVertexAttribI3ivEXT(index, v);

    return Qnil;
}

static VALUE rogl_glVertexAttribI4ivEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    void* v = (void*)val2ptr(_arg2_);

    rogl_pfn_glVertexAttribI4ivEXT(index, v);

    return Qnil;
}

static VALUE rogl_glVertexAttribI1uivEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    void* v = (void*)val2ptr(_arg2_);

    rogl_pfn_glVertexAttribI1uivEXT(index, v);

    return Qnil;
}

static VALUE rogl_glVertexAttribI2uivEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    void* v = (void*)val2ptr(_arg2_);

    rogl_pfn_glVertexAttribI2uivEXT(index, v);

    return Qnil;
}

static VALUE rogl_glVertexAttribI3uivEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    void* v = (void*)val2ptr(_arg2_);

    rogl_pfn_glVertexAttribI3uivEXT(index, v);

    return Qnil;
}

static VALUE rogl_glVertexAttribI4uivEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    void* v = (void*)val2ptr(_arg2_);

    rogl_pfn_glVertexAttribI4uivEXT(index, v);

    return Qnil;
}

static VALUE rogl_glVertexAttribI4bvEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    void* v = (void*)val2ptr(_arg2_);

    rogl_pfn_glVertexAttribI4bvEXT(index, v);

    return Qnil;
}

static VALUE rogl_glVertexAttribI4svEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    void* v = (void*)val2ptr(_arg2_);

    rogl_pfn_glVertexAttribI4svEXT(index, v);

    return Qnil;
}

static VALUE rogl_glVertexAttribI4ubvEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    void* v = (void*)val2ptr(_arg2_);

    rogl_pfn_glVertexAttribI4ubvEXT(index, v);

    return Qnil;
}

static VALUE rogl_glVertexAttribI4usvEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    void* v = (void*)val2ptr(_arg2_);

    rogl_pfn_glVertexAttribI4usvEXT(index, v);

    return Qnil;
}

static VALUE rogl_glVertexAttribIPointerEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    int size = (int)NUM2INT(_arg2_);
    unsigned int type = (unsigned int)NUM2UINT(_arg3_);
    int stride = (int)NUM2INT(_arg4_);
    void* pointer = (void*)val2ptr(_arg5_);

    rogl_pfn_glVertexAttribIPointerEXT(index, size, type, stride, pointer);

    return Qnil;
}

static VALUE rogl_glGetVertexAttribIivEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetVertexAttribIivEXT(index, pname, params);

    return Qnil;
}

static VALUE rogl_glGetVertexAttribIuivEXT(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int index = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetVertexAttribIuivEXT(index, pname, params);

    return Qnil;
}

static VALUE rogl_glBeginVideoCaptureNV(VALUE _obj_, VALUE _arg1_)
{
    unsigned int video_capture_slot = (unsigned int)NUM2UINT(_arg1_);

    rogl_pfn_glBeginVideoCaptureNV(video_capture_slot);

    return Qnil;
}

static VALUE rogl_glBindVideoCaptureStreamBufferNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int video_capture_slot = (unsigned int)NUM2UINT(_arg1_);
    unsigned int stream = (unsigned int)NUM2UINT(_arg2_);
    unsigned int frame_region = (unsigned int)NUM2UINT(_arg3_);
    ptrdiff_t offset = (ptrdiff_t)(_arg4_);

    rogl_pfn_glBindVideoCaptureStreamBufferNV(video_capture_slot, stream, frame_region, offset);

    return Qnil;
}

static VALUE rogl_glBindVideoCaptureStreamTextureNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int video_capture_slot = (unsigned int)NUM2UINT(_arg1_);
    unsigned int stream = (unsigned int)NUM2UINT(_arg2_);
    unsigned int frame_region = (unsigned int)NUM2UINT(_arg3_);
    unsigned int target = (unsigned int)NUM2UINT(_arg4_);
    unsigned int texture = (unsigned int)NUM2UINT(_arg5_);

    rogl_pfn_glBindVideoCaptureStreamTextureNV(video_capture_slot, stream, frame_region, target, texture);

    return Qnil;
}

static VALUE rogl_glEndVideoCaptureNV(VALUE _obj_, VALUE _arg1_)
{
    unsigned int video_capture_slot = (unsigned int)NUM2UINT(_arg1_);

    rogl_pfn_glEndVideoCaptureNV(video_capture_slot);

    return Qnil;
}

static VALUE rogl_glGetVideoCaptureivNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int video_capture_slot = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetVideoCaptureivNV(video_capture_slot, pname, params);

    return Qnil;
}

static VALUE rogl_glGetVideoCaptureStreamivNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int video_capture_slot = (unsigned int)NUM2UINT(_arg1_);
    unsigned int stream = (unsigned int)NUM2UINT(_arg2_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg3_);
    void* params = (void*)val2ptr(_arg4_);

    rogl_pfn_glGetVideoCaptureStreamivNV(video_capture_slot, stream, pname, params);

    return Qnil;
}

static VALUE rogl_glGetVideoCaptureStreamfvNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int video_capture_slot = (unsigned int)NUM2UINT(_arg1_);
    unsigned int stream = (unsigned int)NUM2UINT(_arg2_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg3_);
    void* params = (void*)val2ptr(_arg4_);

    rogl_pfn_glGetVideoCaptureStreamfvNV(video_capture_slot, stream, pname, params);

    return Qnil;
}

static VALUE rogl_glGetVideoCaptureStreamdvNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int video_capture_slot = (unsigned int)NUM2UINT(_arg1_);
    unsigned int stream = (unsigned int)NUM2UINT(_arg2_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg3_);
    void* params = (void*)val2ptr(_arg4_);

    rogl_pfn_glGetVideoCaptureStreamdvNV(video_capture_slot, stream, pname, params);

    return Qnil;
}

static VALUE rogl_glVideoCaptureNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int video_capture_slot = (unsigned int)NUM2UINT(_arg1_);
    void* sequence_num = (void*)val2ptr(_arg2_);
    void* capture_time = (void*)val2ptr(_arg3_);

    unsigned int retval = rogl_pfn_glVideoCaptureNV(video_capture_slot, sequence_num, capture_time);

    return UINT2NUM(retval);
}

static VALUE rogl_glVideoCaptureStreamParameterivNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int video_capture_slot = (unsigned int)NUM2UINT(_arg1_);
    unsigned int stream = (unsigned int)NUM2UINT(_arg2_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg3_);
    void* params = (void*)val2ptr(_arg4_);

    rogl_pfn_glVideoCaptureStreamParameterivNV(video_capture_slot, stream, pname, params);

    return Qnil;
}

static VALUE rogl_glVideoCaptureStreamParameterfvNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int video_capture_slot = (unsigned int)NUM2UINT(_arg1_);
    unsigned int stream = (unsigned int)NUM2UINT(_arg2_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg3_);
    void* params = (void*)val2ptr(_arg4_);

    rogl_pfn_glVideoCaptureStreamParameterfvNV(video_capture_slot, stream, pname, params);

    return Qnil;
}

static VALUE rogl_glVideoCaptureStreamParameterdvNV(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int video_capture_slot = (unsigned int)NUM2UINT(_arg1_);
    unsigned int stream = (unsigned int)NUM2UINT(_arg2_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg3_);
    void* params = (void*)val2ptr(_arg4_);

    rogl_pfn_glVideoCaptureStreamParameterdvNV(video_capture_slot, stream, pname, params);

    return Qnil;
}

static VALUE rogl_glMultiTexCoord1bOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int texture = (unsigned int)NUM2UINT(_arg1_);
    char s = (char)NUM2INT(_arg2_);

    rogl_pfn_glMultiTexCoord1bOES(texture, s);

    return Qnil;
}

static VALUE rogl_glMultiTexCoord1bvOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int texture = (unsigned int)NUM2UINT(_arg1_);
    void* coords = (void*)val2ptr(_arg2_);

    rogl_pfn_glMultiTexCoord1bvOES(texture, coords);

    return Qnil;
}

static VALUE rogl_glMultiTexCoord2bOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int texture = (unsigned int)NUM2UINT(_arg1_);
    char s = (char)NUM2INT(_arg2_);
    char t = (char)NUM2INT(_arg3_);

    rogl_pfn_glMultiTexCoord2bOES(texture, s, t);

    return Qnil;
}

static VALUE rogl_glMultiTexCoord2bvOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int texture = (unsigned int)NUM2UINT(_arg1_);
    void* coords = (void*)val2ptr(_arg2_);

    rogl_pfn_glMultiTexCoord2bvOES(texture, coords);

    return Qnil;
}

static VALUE rogl_glMultiTexCoord3bOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int texture = (unsigned int)NUM2UINT(_arg1_);
    char s = (char)NUM2INT(_arg2_);
    char t = (char)NUM2INT(_arg3_);
    char r = (char)NUM2INT(_arg4_);

    rogl_pfn_glMultiTexCoord3bOES(texture, s, t, r);

    return Qnil;
}

static VALUE rogl_glMultiTexCoord3bvOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int texture = (unsigned int)NUM2UINT(_arg1_);
    void* coords = (void*)val2ptr(_arg2_);

    rogl_pfn_glMultiTexCoord3bvOES(texture, coords);

    return Qnil;
}

static VALUE rogl_glMultiTexCoord4bOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int texture = (unsigned int)NUM2UINT(_arg1_);
    char s = (char)NUM2INT(_arg2_);
    char t = (char)NUM2INT(_arg3_);
    char r = (char)NUM2INT(_arg4_);
    char q = (char)NUM2INT(_arg5_);

    rogl_pfn_glMultiTexCoord4bOES(texture, s, t, r, q);

    return Qnil;
}

static VALUE rogl_glMultiTexCoord4bvOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int texture = (unsigned int)NUM2UINT(_arg1_);
    void* coords = (void*)val2ptr(_arg2_);

    rogl_pfn_glMultiTexCoord4bvOES(texture, coords);

    return Qnil;
}

static VALUE rogl_glTexCoord1bOES(VALUE _obj_, VALUE _arg1_)
{
    char s = (char)NUM2INT(_arg1_);

    rogl_pfn_glTexCoord1bOES(s);

    return Qnil;
}

static VALUE rogl_glTexCoord1bvOES(VALUE _obj_, VALUE _arg1_)
{
    void* coords = (void*)val2ptr(_arg1_);

    rogl_pfn_glTexCoord1bvOES(coords);

    return Qnil;
}

static VALUE rogl_glTexCoord2bOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    char s = (char)NUM2INT(_arg1_);
    char t = (char)NUM2INT(_arg2_);

    rogl_pfn_glTexCoord2bOES(s, t);

    return Qnil;
}

static VALUE rogl_glTexCoord2bvOES(VALUE _obj_, VALUE _arg1_)
{
    void* coords = (void*)val2ptr(_arg1_);

    rogl_pfn_glTexCoord2bvOES(coords);

    return Qnil;
}

static VALUE rogl_glTexCoord3bOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    char s = (char)NUM2INT(_arg1_);
    char t = (char)NUM2INT(_arg2_);
    char r = (char)NUM2INT(_arg3_);

    rogl_pfn_glTexCoord3bOES(s, t, r);

    return Qnil;
}

static VALUE rogl_glTexCoord3bvOES(VALUE _obj_, VALUE _arg1_)
{
    void* coords = (void*)val2ptr(_arg1_);

    rogl_pfn_glTexCoord3bvOES(coords);

    return Qnil;
}

static VALUE rogl_glTexCoord4bOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    char s = (char)NUM2INT(_arg1_);
    char t = (char)NUM2INT(_arg2_);
    char r = (char)NUM2INT(_arg3_);
    char q = (char)NUM2INT(_arg4_);

    rogl_pfn_glTexCoord4bOES(s, t, r, q);

    return Qnil;
}

static VALUE rogl_glTexCoord4bvOES(VALUE _obj_, VALUE _arg1_)
{
    void* coords = (void*)val2ptr(_arg1_);

    rogl_pfn_glTexCoord4bvOES(coords);

    return Qnil;
}

static VALUE rogl_glVertex2bOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    char x = (char)NUM2INT(_arg1_);
    char y = (char)NUM2INT(_arg2_);

    rogl_pfn_glVertex2bOES(x, y);

    return Qnil;
}

static VALUE rogl_glVertex2bvOES(VALUE _obj_, VALUE _arg1_)
{
    void* coords = (void*)val2ptr(_arg1_);

    rogl_pfn_glVertex2bvOES(coords);

    return Qnil;
}

static VALUE rogl_glVertex3bOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    char x = (char)NUM2INT(_arg1_);
    char y = (char)NUM2INT(_arg2_);
    char z = (char)NUM2INT(_arg3_);

    rogl_pfn_glVertex3bOES(x, y, z);

    return Qnil;
}

static VALUE rogl_glVertex3bvOES(VALUE _obj_, VALUE _arg1_)
{
    void* coords = (void*)val2ptr(_arg1_);

    rogl_pfn_glVertex3bvOES(coords);

    return Qnil;
}

static VALUE rogl_glVertex4bOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    char x = (char)NUM2INT(_arg1_);
    char y = (char)NUM2INT(_arg2_);
    char z = (char)NUM2INT(_arg3_);
    char w = (char)NUM2INT(_arg4_);

    rogl_pfn_glVertex4bOES(x, y, z, w);

    return Qnil;
}

static VALUE rogl_glVertex4bvOES(VALUE _obj_, VALUE _arg1_)
{
    void* coords = (void*)val2ptr(_arg1_);

    rogl_pfn_glVertex4bvOES(coords);

    return Qnil;
}

static VALUE rogl_glAlphaFuncxOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int func = (unsigned int)NUM2UINT(_arg1_);
    int ref = (int)NUM2INT(_arg2_);

    rogl_pfn_glAlphaFuncxOES(func, ref);

    return Qnil;
}

static VALUE rogl_glClearColorxOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    int red = (int)NUM2INT(_arg1_);
    int green = (int)NUM2INT(_arg2_);
    int blue = (int)NUM2INT(_arg3_);
    int alpha = (int)NUM2INT(_arg4_);

    rogl_pfn_glClearColorxOES(red, green, blue, alpha);

    return Qnil;
}

static VALUE rogl_glClearDepthxOES(VALUE _obj_, VALUE _arg1_)
{
    int depth = (int)NUM2INT(_arg1_);

    rogl_pfn_glClearDepthxOES(depth);

    return Qnil;
}

static VALUE rogl_glClipPlanexOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int plane = (unsigned int)NUM2UINT(_arg1_);
    void* equation = (void*)val2ptr(_arg2_);

    rogl_pfn_glClipPlanexOES(plane, equation);

    return Qnil;
}

static VALUE rogl_glColor4xOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    int red = (int)NUM2INT(_arg1_);
    int green = (int)NUM2INT(_arg2_);
    int blue = (int)NUM2INT(_arg3_);
    int alpha = (int)NUM2INT(_arg4_);

    rogl_pfn_glColor4xOES(red, green, blue, alpha);

    return Qnil;
}

static VALUE rogl_glDepthRangexOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int n = (int)NUM2INT(_arg1_);
    int f = (int)NUM2INT(_arg2_);

    rogl_pfn_glDepthRangexOES(n, f);

    return Qnil;
}

static VALUE rogl_glFogxOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int pname = (unsigned int)NUM2UINT(_arg1_);
    int param = (int)NUM2INT(_arg2_);

    rogl_pfn_glFogxOES(pname, param);

    return Qnil;
}

static VALUE rogl_glFogxvOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int pname = (unsigned int)NUM2UINT(_arg1_);
    void* param = (void*)val2ptr(_arg2_);

    rogl_pfn_glFogxvOES(pname, param);

    return Qnil;
}

static VALUE rogl_glFrustumxOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_)
{
    int l = (int)NUM2INT(_arg1_);
    int r = (int)NUM2INT(_arg2_);
    int b = (int)NUM2INT(_arg3_);
    int t = (int)NUM2INT(_arg4_);
    int n = (int)NUM2INT(_arg5_);
    int f = (int)NUM2INT(_arg6_);

    rogl_pfn_glFrustumxOES(l, r, b, t, n, f);

    return Qnil;
}

static VALUE rogl_glGetClipPlanexOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int plane = (unsigned int)NUM2UINT(_arg1_);
    void* equation = (void*)val2ptr(_arg2_);

    rogl_pfn_glGetClipPlanexOES(plane, equation);

    return Qnil;
}

static VALUE rogl_glGetFixedvOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int pname = (unsigned int)NUM2UINT(_arg1_);
    void* params = (void*)val2ptr(_arg2_);

    rogl_pfn_glGetFixedvOES(pname, params);

    return Qnil;
}

static VALUE rogl_glGetTexEnvxvOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetTexEnvxvOES(target, pname, params);

    return Qnil;
}

static VALUE rogl_glGetTexParameterxvOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetTexParameterxvOES(target, pname, params);

    return Qnil;
}

static VALUE rogl_glLightModelxOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int pname = (unsigned int)NUM2UINT(_arg1_);
    int param = (int)NUM2INT(_arg2_);

    rogl_pfn_glLightModelxOES(pname, param);

    return Qnil;
}

static VALUE rogl_glLightModelxvOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int pname = (unsigned int)NUM2UINT(_arg1_);
    void* param = (void*)val2ptr(_arg2_);

    rogl_pfn_glLightModelxvOES(pname, param);

    return Qnil;
}

static VALUE rogl_glLightxOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int light = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    int param = (int)NUM2INT(_arg3_);

    rogl_pfn_glLightxOES(light, pname, param);

    return Qnil;
}

static VALUE rogl_glLightxvOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int light = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glLightxvOES(light, pname, params);

    return Qnil;
}

static VALUE rogl_glLineWidthxOES(VALUE _obj_, VALUE _arg1_)
{
    int width = (int)NUM2INT(_arg1_);

    rogl_pfn_glLineWidthxOES(width);

    return Qnil;
}

static VALUE rogl_glLoadMatrixxOES(VALUE _obj_, VALUE _arg1_)
{
    void* m = (void*)val2ptr(_arg1_);

    rogl_pfn_glLoadMatrixxOES(m);

    return Qnil;
}

static VALUE rogl_glMaterialxOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int face = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    int param = (int)NUM2INT(_arg3_);

    rogl_pfn_glMaterialxOES(face, pname, param);

    return Qnil;
}

static VALUE rogl_glMaterialxvOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int face = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* param = (void*)val2ptr(_arg3_);

    rogl_pfn_glMaterialxvOES(face, pname, param);

    return Qnil;
}

static VALUE rogl_glMultMatrixxOES(VALUE _obj_, VALUE _arg1_)
{
    void* m = (void*)val2ptr(_arg1_);

    rogl_pfn_glMultMatrixxOES(m);

    return Qnil;
}

static VALUE rogl_glMultiTexCoord4xOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int texture = (unsigned int)NUM2UINT(_arg1_);
    int s = (int)NUM2INT(_arg2_);
    int t = (int)NUM2INT(_arg3_);
    int r = (int)NUM2INT(_arg4_);
    int q = (int)NUM2INT(_arg5_);

    rogl_pfn_glMultiTexCoord4xOES(texture, s, t, r, q);

    return Qnil;
}

static VALUE rogl_glNormal3xOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    int nx = (int)NUM2INT(_arg1_);
    int ny = (int)NUM2INT(_arg2_);
    int nz = (int)NUM2INT(_arg3_);

    rogl_pfn_glNormal3xOES(nx, ny, nz);

    return Qnil;
}

static VALUE rogl_glOrthoxOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_)
{
    int l = (int)NUM2INT(_arg1_);
    int r = (int)NUM2INT(_arg2_);
    int b = (int)NUM2INT(_arg3_);
    int t = (int)NUM2INT(_arg4_);
    int n = (int)NUM2INT(_arg5_);
    int f = (int)NUM2INT(_arg6_);

    rogl_pfn_glOrthoxOES(l, r, b, t, n, f);

    return Qnil;
}

static VALUE rogl_glPointParameterxvOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int pname = (unsigned int)NUM2UINT(_arg1_);
    void* params = (void*)val2ptr(_arg2_);

    rogl_pfn_glPointParameterxvOES(pname, params);

    return Qnil;
}

static VALUE rogl_glPointSizexOES(VALUE _obj_, VALUE _arg1_)
{
    int size = (int)NUM2INT(_arg1_);

    rogl_pfn_glPointSizexOES(size);

    return Qnil;
}

static VALUE rogl_glPolygonOffsetxOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int factor = (int)NUM2INT(_arg1_);
    int units = (int)NUM2INT(_arg2_);

    rogl_pfn_glPolygonOffsetxOES(factor, units);

    return Qnil;
}

static VALUE rogl_glRotatexOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    int angle = (int)NUM2INT(_arg1_);
    int x = (int)NUM2INT(_arg2_);
    int y = (int)NUM2INT(_arg3_);
    int z = (int)NUM2INT(_arg4_);

    rogl_pfn_glRotatexOES(angle, x, y, z);

    return Qnil;
}

static VALUE rogl_glScalexOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    int x = (int)NUM2INT(_arg1_);
    int y = (int)NUM2INT(_arg2_);
    int z = (int)NUM2INT(_arg3_);

    rogl_pfn_glScalexOES(x, y, z);

    return Qnil;
}

static VALUE rogl_glTexEnvxOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    int param = (int)NUM2INT(_arg3_);

    rogl_pfn_glTexEnvxOES(target, pname, param);

    return Qnil;
}

static VALUE rogl_glTexEnvxvOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glTexEnvxvOES(target, pname, params);

    return Qnil;
}

static VALUE rogl_glTexParameterxOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    int param = (int)NUM2INT(_arg3_);

    rogl_pfn_glTexParameterxOES(target, pname, param);

    return Qnil;
}

static VALUE rogl_glTexParameterxvOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glTexParameterxvOES(target, pname, params);

    return Qnil;
}

static VALUE rogl_glTranslatexOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    int x = (int)NUM2INT(_arg1_);
    int y = (int)NUM2INT(_arg2_);
    int z = (int)NUM2INT(_arg3_);

    rogl_pfn_glTranslatexOES(x, y, z);

    return Qnil;
}

static VALUE rogl_glGetLightxvOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int light = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetLightxvOES(light, pname, params);

    return Qnil;
}

static VALUE rogl_glGetMaterialxvOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int face = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetMaterialxvOES(face, pname, params);

    return Qnil;
}

static VALUE rogl_glPointParameterxOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int pname = (unsigned int)NUM2UINT(_arg1_);
    int param = (int)NUM2INT(_arg2_);

    rogl_pfn_glPointParameterxOES(pname, param);

    return Qnil;
}

static VALUE rogl_glSampleCoveragexOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int value = (int)NUM2INT(_arg1_);
    unsigned char invert = (unsigned char)NUM2UINT(_arg2_);

    rogl_pfn_glSampleCoveragexOES(value, invert);

    return Qnil;
}

static VALUE rogl_glAccumxOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int op = (unsigned int)NUM2UINT(_arg1_);
    int value = (int)NUM2INT(_arg2_);

    rogl_pfn_glAccumxOES(op, value);

    return Qnil;
}

static VALUE rogl_glBitmapxOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_)
{
    int width = (int)NUM2INT(_arg1_);
    int height = (int)NUM2INT(_arg2_);
    int xorig = (int)NUM2INT(_arg3_);
    int yorig = (int)NUM2INT(_arg4_);
    int xmove = (int)NUM2INT(_arg5_);
    int ymove = (int)NUM2INT(_arg6_);
    void* bitmap = (void*)val2ptr(_arg7_);

    rogl_pfn_glBitmapxOES(width, height, xorig, yorig, xmove, ymove, bitmap);

    return Qnil;
}

static VALUE rogl_glBlendColorxOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    int red = (int)NUM2INT(_arg1_);
    int green = (int)NUM2INT(_arg2_);
    int blue = (int)NUM2INT(_arg3_);
    int alpha = (int)NUM2INT(_arg4_);

    rogl_pfn_glBlendColorxOES(red, green, blue, alpha);

    return Qnil;
}

static VALUE rogl_glClearAccumxOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    int red = (int)NUM2INT(_arg1_);
    int green = (int)NUM2INT(_arg2_);
    int blue = (int)NUM2INT(_arg3_);
    int alpha = (int)NUM2INT(_arg4_);

    rogl_pfn_glClearAccumxOES(red, green, blue, alpha);

    return Qnil;
}

static VALUE rogl_glColor3xOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    int red = (int)NUM2INT(_arg1_);
    int green = (int)NUM2INT(_arg2_);
    int blue = (int)NUM2INT(_arg3_);

    rogl_pfn_glColor3xOES(red, green, blue);

    return Qnil;
}

static VALUE rogl_glColor3xvOES(VALUE _obj_, VALUE _arg1_)
{
    void* components = (void*)val2ptr(_arg1_);

    rogl_pfn_glColor3xvOES(components);

    return Qnil;
}

static VALUE rogl_glColor4xvOES(VALUE _obj_, VALUE _arg1_)
{
    void* components = (void*)val2ptr(_arg1_);

    rogl_pfn_glColor4xvOES(components);

    return Qnil;
}

static VALUE rogl_glConvolutionParameterxOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    int param = (int)NUM2INT(_arg3_);

    rogl_pfn_glConvolutionParameterxOES(target, pname, param);

    return Qnil;
}

static VALUE rogl_glConvolutionParameterxvOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glConvolutionParameterxvOES(target, pname, params);

    return Qnil;
}

static VALUE rogl_glEvalCoord1xOES(VALUE _obj_, VALUE _arg1_)
{
    int u = (int)NUM2INT(_arg1_);

    rogl_pfn_glEvalCoord1xOES(u);

    return Qnil;
}

static VALUE rogl_glEvalCoord1xvOES(VALUE _obj_, VALUE _arg1_)
{
    void* coords = (void*)val2ptr(_arg1_);

    rogl_pfn_glEvalCoord1xvOES(coords);

    return Qnil;
}

static VALUE rogl_glEvalCoord2xOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int u = (int)NUM2INT(_arg1_);
    int v = (int)NUM2INT(_arg2_);

    rogl_pfn_glEvalCoord2xOES(u, v);

    return Qnil;
}

static VALUE rogl_glEvalCoord2xvOES(VALUE _obj_, VALUE _arg1_)
{
    void* coords = (void*)val2ptr(_arg1_);

    rogl_pfn_glEvalCoord2xvOES(coords);

    return Qnil;
}

static VALUE rogl_glFeedbackBufferxOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    int n = (int)NUM2INT(_arg1_);
    unsigned int type = (unsigned int)NUM2UINT(_arg2_);
    void* buffer = (void*)val2ptr(_arg3_);

    rogl_pfn_glFeedbackBufferxOES(n, type, buffer);

    return Qnil;
}

static VALUE rogl_glGetConvolutionParameterxvOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetConvolutionParameterxvOES(target, pname, params);

    return Qnil;
}

static VALUE rogl_glGetHistogramParameterxvOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetHistogramParameterxvOES(target, pname, params);

    return Qnil;
}

static VALUE rogl_glGetLightxOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int light = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetLightxOES(light, pname, params);

    return Qnil;
}

static VALUE rogl_glGetMapxvOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int query = (unsigned int)NUM2UINT(_arg2_);
    void* v = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetMapxvOES(target, query, v);

    return Qnil;
}

static VALUE rogl_glGetMaterialxOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int face = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    int param = (int)NUM2INT(_arg3_);

    rogl_pfn_glGetMaterialxOES(face, pname, param);

    return Qnil;
}

static VALUE rogl_glGetPixelMapxv(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int map = (unsigned int)NUM2UINT(_arg1_);
    int size = (int)NUM2INT(_arg2_);
    void* values = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetPixelMapxv(map, size, values);

    return Qnil;
}

static VALUE rogl_glGetTexGenxvOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int coord = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetTexGenxvOES(coord, pname, params);

    return Qnil;
}

static VALUE rogl_glGetTexLevelParameterxvOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    int level = (int)NUM2INT(_arg2_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg3_);
    void* params = (void*)val2ptr(_arg4_);

    rogl_pfn_glGetTexLevelParameterxvOES(target, level, pname, params);

    return Qnil;
}

static VALUE rogl_glIndexxOES(VALUE _obj_, VALUE _arg1_)
{
    int component = (int)NUM2INT(_arg1_);

    rogl_pfn_glIndexxOES(component);

    return Qnil;
}

static VALUE rogl_glIndexxvOES(VALUE _obj_, VALUE _arg1_)
{
    void* component = (void*)val2ptr(_arg1_);

    rogl_pfn_glIndexxvOES(component);

    return Qnil;
}

static VALUE rogl_glLoadTransposeMatrixxOES(VALUE _obj_, VALUE _arg1_)
{
    void* m = (void*)val2ptr(_arg1_);

    rogl_pfn_glLoadTransposeMatrixxOES(m);

    return Qnil;
}

static VALUE rogl_glMap1xOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    int u1 = (int)NUM2INT(_arg2_);
    int u2 = (int)NUM2INT(_arg3_);
    int stride = (int)NUM2INT(_arg4_);
    int order = (int)NUM2INT(_arg5_);
    int points = (int)NUM2INT(_arg6_);

    rogl_pfn_glMap1xOES(target, u1, u2, stride, order, points);

    return Qnil;
}

static VALUE rogl_glMap2xOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_, VALUE _arg9_, VALUE _arg10_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    int u1 = (int)NUM2INT(_arg2_);
    int u2 = (int)NUM2INT(_arg3_);
    int ustride = (int)NUM2INT(_arg4_);
    int uorder = (int)NUM2INT(_arg5_);
    int v1 = (int)NUM2INT(_arg6_);
    int v2 = (int)NUM2INT(_arg7_);
    int vstride = (int)NUM2INT(_arg8_);
    int vorder = (int)NUM2INT(_arg9_);
    int points = (int)NUM2INT(_arg10_);

    rogl_pfn_glMap2xOES(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);

    return Qnil;
}

static VALUE rogl_glMapGrid1xOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    int n = (int)NUM2INT(_arg1_);
    int u1 = (int)NUM2INT(_arg2_);
    int u2 = (int)NUM2INT(_arg3_);

    rogl_pfn_glMapGrid1xOES(n, u1, u2);

    return Qnil;
}

static VALUE rogl_glMapGrid2xOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    int n = (int)NUM2INT(_arg1_);
    int u1 = (int)NUM2INT(_arg2_);
    int u2 = (int)NUM2INT(_arg3_);
    int v1 = (int)NUM2INT(_arg4_);
    int v2 = (int)NUM2INT(_arg5_);

    rogl_pfn_glMapGrid2xOES(n, u1, u2, v1, v2);

    return Qnil;
}

static VALUE rogl_glMultTransposeMatrixxOES(VALUE _obj_, VALUE _arg1_)
{
    void* m = (void*)val2ptr(_arg1_);

    rogl_pfn_glMultTransposeMatrixxOES(m);

    return Qnil;
}

static VALUE rogl_glMultiTexCoord1xOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int texture = (unsigned int)NUM2UINT(_arg1_);
    int s = (int)NUM2INT(_arg2_);

    rogl_pfn_glMultiTexCoord1xOES(texture, s);

    return Qnil;
}

static VALUE rogl_glMultiTexCoord1xvOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int texture = (unsigned int)NUM2UINT(_arg1_);
    void* coords = (void*)val2ptr(_arg2_);

    rogl_pfn_glMultiTexCoord1xvOES(texture, coords);

    return Qnil;
}

static VALUE rogl_glMultiTexCoord2xOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int texture = (unsigned int)NUM2UINT(_arg1_);
    int s = (int)NUM2INT(_arg2_);
    int t = (int)NUM2INT(_arg3_);

    rogl_pfn_glMultiTexCoord2xOES(texture, s, t);

    return Qnil;
}

static VALUE rogl_glMultiTexCoord2xvOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int texture = (unsigned int)NUM2UINT(_arg1_);
    void* coords = (void*)val2ptr(_arg2_);

    rogl_pfn_glMultiTexCoord2xvOES(texture, coords);

    return Qnil;
}

static VALUE rogl_glMultiTexCoord3xOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int texture = (unsigned int)NUM2UINT(_arg1_);
    int s = (int)NUM2INT(_arg2_);
    int t = (int)NUM2INT(_arg3_);
    int r = (int)NUM2INT(_arg4_);

    rogl_pfn_glMultiTexCoord3xOES(texture, s, t, r);

    return Qnil;
}

static VALUE rogl_glMultiTexCoord3xvOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int texture = (unsigned int)NUM2UINT(_arg1_);
    void* coords = (void*)val2ptr(_arg2_);

    rogl_pfn_glMultiTexCoord3xvOES(texture, coords);

    return Qnil;
}

static VALUE rogl_glMultiTexCoord4xvOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int texture = (unsigned int)NUM2UINT(_arg1_);
    void* coords = (void*)val2ptr(_arg2_);

    rogl_pfn_glMultiTexCoord4xvOES(texture, coords);

    return Qnil;
}

static VALUE rogl_glNormal3xvOES(VALUE _obj_, VALUE _arg1_)
{
    void* coords = (void*)val2ptr(_arg1_);

    rogl_pfn_glNormal3xvOES(coords);

    return Qnil;
}

static VALUE rogl_glPassThroughxOES(VALUE _obj_, VALUE _arg1_)
{
    int token = (int)NUM2INT(_arg1_);

    rogl_pfn_glPassThroughxOES(token);

    return Qnil;
}

static VALUE rogl_glPixelMapx(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int map = (unsigned int)NUM2UINT(_arg1_);
    int size = (int)NUM2INT(_arg2_);
    void* values = (void*)val2ptr(_arg3_);

    rogl_pfn_glPixelMapx(map, size, values);

    return Qnil;
}

static VALUE rogl_glPixelStorex(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int pname = (unsigned int)NUM2UINT(_arg1_);
    int param = (int)NUM2INT(_arg2_);

    rogl_pfn_glPixelStorex(pname, param);

    return Qnil;
}

static VALUE rogl_glPixelTransferxOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int pname = (unsigned int)NUM2UINT(_arg1_);
    int param = (int)NUM2INT(_arg2_);

    rogl_pfn_glPixelTransferxOES(pname, param);

    return Qnil;
}

static VALUE rogl_glPixelZoomxOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int xfactor = (int)NUM2INT(_arg1_);
    int yfactor = (int)NUM2INT(_arg2_);

    rogl_pfn_glPixelZoomxOES(xfactor, yfactor);

    return Qnil;
}

static VALUE rogl_glPrioritizeTexturesxOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    int n = (int)NUM2INT(_arg1_);
    void* textures = (void*)val2ptr(_arg2_);
    void* priorities = (void*)val2ptr(_arg3_);

    rogl_pfn_glPrioritizeTexturesxOES(n, textures, priorities);

    return Qnil;
}

static VALUE rogl_glRasterPos2xOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int x = (int)NUM2INT(_arg1_);
    int y = (int)NUM2INT(_arg2_);

    rogl_pfn_glRasterPos2xOES(x, y);

    return Qnil;
}

static VALUE rogl_glRasterPos2xvOES(VALUE _obj_, VALUE _arg1_)
{
    void* coords = (void*)val2ptr(_arg1_);

    rogl_pfn_glRasterPos2xvOES(coords);

    return Qnil;
}

static VALUE rogl_glRasterPos3xOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    int x = (int)NUM2INT(_arg1_);
    int y = (int)NUM2INT(_arg2_);
    int z = (int)NUM2INT(_arg3_);

    rogl_pfn_glRasterPos3xOES(x, y, z);

    return Qnil;
}

static VALUE rogl_glRasterPos3xvOES(VALUE _obj_, VALUE _arg1_)
{
    void* coords = (void*)val2ptr(_arg1_);

    rogl_pfn_glRasterPos3xvOES(coords);

    return Qnil;
}

static VALUE rogl_glRasterPos4xOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    int x = (int)NUM2INT(_arg1_);
    int y = (int)NUM2INT(_arg2_);
    int z = (int)NUM2INT(_arg3_);
    int w = (int)NUM2INT(_arg4_);

    rogl_pfn_glRasterPos4xOES(x, y, z, w);

    return Qnil;
}

static VALUE rogl_glRasterPos4xvOES(VALUE _obj_, VALUE _arg1_)
{
    void* coords = (void*)val2ptr(_arg1_);

    rogl_pfn_glRasterPos4xvOES(coords);

    return Qnil;
}

static VALUE rogl_glRectxOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    int x1 = (int)NUM2INT(_arg1_);
    int y1 = (int)NUM2INT(_arg2_);
    int x2 = (int)NUM2INT(_arg3_);
    int y2 = (int)NUM2INT(_arg4_);

    rogl_pfn_glRectxOES(x1, y1, x2, y2);

    return Qnil;
}

static VALUE rogl_glRectxvOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    void* v1 = (void*)val2ptr(_arg1_);
    void* v2 = (void*)val2ptr(_arg2_);

    rogl_pfn_glRectxvOES(v1, v2);

    return Qnil;
}

static VALUE rogl_glTexCoord1xOES(VALUE _obj_, VALUE _arg1_)
{
    int s = (int)NUM2INT(_arg1_);

    rogl_pfn_glTexCoord1xOES(s);

    return Qnil;
}

static VALUE rogl_glTexCoord1xvOES(VALUE _obj_, VALUE _arg1_)
{
    void* coords = (void*)val2ptr(_arg1_);

    rogl_pfn_glTexCoord1xvOES(coords);

    return Qnil;
}

static VALUE rogl_glTexCoord2xOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int s = (int)NUM2INT(_arg1_);
    int t = (int)NUM2INT(_arg2_);

    rogl_pfn_glTexCoord2xOES(s, t);

    return Qnil;
}

static VALUE rogl_glTexCoord2xvOES(VALUE _obj_, VALUE _arg1_)
{
    void* coords = (void*)val2ptr(_arg1_);

    rogl_pfn_glTexCoord2xvOES(coords);

    return Qnil;
}

static VALUE rogl_glTexCoord3xOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    int s = (int)NUM2INT(_arg1_);
    int t = (int)NUM2INT(_arg2_);
    int r = (int)NUM2INT(_arg3_);

    rogl_pfn_glTexCoord3xOES(s, t, r);

    return Qnil;
}

static VALUE rogl_glTexCoord3xvOES(VALUE _obj_, VALUE _arg1_)
{
    void* coords = (void*)val2ptr(_arg1_);

    rogl_pfn_glTexCoord3xvOES(coords);

    return Qnil;
}

static VALUE rogl_glTexCoord4xOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    int s = (int)NUM2INT(_arg1_);
    int t = (int)NUM2INT(_arg2_);
    int r = (int)NUM2INT(_arg3_);
    int q = (int)NUM2INT(_arg4_);

    rogl_pfn_glTexCoord4xOES(s, t, r, q);

    return Qnil;
}

static VALUE rogl_glTexCoord4xvOES(VALUE _obj_, VALUE _arg1_)
{
    void* coords = (void*)val2ptr(_arg1_);

    rogl_pfn_glTexCoord4xvOES(coords);

    return Qnil;
}

static VALUE rogl_glTexGenxOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int coord = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    int param = (int)NUM2INT(_arg3_);

    rogl_pfn_glTexGenxOES(coord, pname, param);

    return Qnil;
}

static VALUE rogl_glTexGenxvOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int coord = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glTexGenxvOES(coord, pname, params);

    return Qnil;
}

static VALUE rogl_glVertex2xOES(VALUE _obj_, VALUE _arg1_)
{
    int x = (int)NUM2INT(_arg1_);

    rogl_pfn_glVertex2xOES(x);

    return Qnil;
}

static VALUE rogl_glVertex2xvOES(VALUE _obj_, VALUE _arg1_)
{
    void* coords = (void*)val2ptr(_arg1_);

    rogl_pfn_glVertex2xvOES(coords);

    return Qnil;
}

static VALUE rogl_glVertex3xOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int x = (int)NUM2INT(_arg1_);
    int y = (int)NUM2INT(_arg2_);

    rogl_pfn_glVertex3xOES(x, y);

    return Qnil;
}

static VALUE rogl_glVertex3xvOES(VALUE _obj_, VALUE _arg1_)
{
    void* coords = (void*)val2ptr(_arg1_);

    rogl_pfn_glVertex3xvOES(coords);

    return Qnil;
}

static VALUE rogl_glVertex4xOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    int x = (int)NUM2INT(_arg1_);
    int y = (int)NUM2INT(_arg2_);
    int z = (int)NUM2INT(_arg3_);

    rogl_pfn_glVertex4xOES(x, y, z);

    return Qnil;
}

static VALUE rogl_glVertex4xvOES(VALUE _obj_, VALUE _arg1_)
{
    void* coords = (void*)val2ptr(_arg1_);

    rogl_pfn_glVertex4xvOES(coords);

    return Qnil;
}

static VALUE rogl_glQueryMatrixxOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    void* mantissa = (void*)val2ptr(_arg1_);
    void* exponent = (void*)val2ptr(_arg2_);

    unsigned int retval = rogl_pfn_glQueryMatrixxOES(mantissa, exponent);

    return UINT2NUM(retval);
}

static VALUE rogl_glClearDepthfOES(VALUE _obj_, VALUE _arg1_)
{
    float depth = (float)NUM2DBL(_arg1_);

    rogl_pfn_glClearDepthfOES(depth);

    return Qnil;
}

static VALUE rogl_glClipPlanefOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int plane = (unsigned int)NUM2UINT(_arg1_);
    void* equation = (void*)val2ptr(_arg2_);

    rogl_pfn_glClipPlanefOES(plane, equation);

    return Qnil;
}

static VALUE rogl_glDepthRangefOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    float n = (float)NUM2DBL(_arg1_);
    float f = (float)NUM2DBL(_arg2_);

    rogl_pfn_glDepthRangefOES(n, f);

    return Qnil;
}

static VALUE rogl_glFrustumfOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_)
{
    float l = (float)NUM2DBL(_arg1_);
    float r = (float)NUM2DBL(_arg2_);
    float b = (float)NUM2DBL(_arg3_);
    float t = (float)NUM2DBL(_arg4_);
    float n = (float)NUM2DBL(_arg5_);
    float f = (float)NUM2DBL(_arg6_);

    rogl_pfn_glFrustumfOES(l, r, b, t, n, f);

    return Qnil;
}

static VALUE rogl_glGetClipPlanefOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int plane = (unsigned int)NUM2UINT(_arg1_);
    void* equation = (void*)val2ptr(_arg2_);

    rogl_pfn_glGetClipPlanefOES(plane, equation);

    return Qnil;
}

static VALUE rogl_glOrthofOES(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_)
{
    float l = (float)NUM2DBL(_arg1_);
    float r = (float)NUM2DBL(_arg2_);
    float b = (float)NUM2DBL(_arg3_);
    float t = (float)NUM2DBL(_arg4_);
    float n = (float)NUM2DBL(_arg5_);
    float f = (float)NUM2DBL(_arg6_);

    rogl_pfn_glOrthofOES(l, r, b, t, n, f);

    return Qnil;
}

static VALUE rogl_glFramebufferTextureMultiviewOVR(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int attachment = (unsigned int)NUM2UINT(_arg2_);
    unsigned int texture = (unsigned int)NUM2UINT(_arg3_);
    int level = (int)NUM2INT(_arg4_);
    int baseViewIndex = (int)NUM2INT(_arg5_);
    int numViews = (int)NUM2INT(_arg6_);

    rogl_pfn_glFramebufferTextureMultiviewOVR(target, attachment, texture, level, baseViewIndex, numViews);

    return Qnil;
}

static VALUE rogl_glHintPGI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    int mode = (int)NUM2INT(_arg2_);

    rogl_pfn_glHintPGI(target, mode);

    return Qnil;
}

static VALUE rogl_glDetailTexFuncSGIS(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    int n = (int)NUM2INT(_arg2_);
    void* points = (void*)val2ptr(_arg3_);

    rogl_pfn_glDetailTexFuncSGIS(target, n, points);

    return Qnil;
}

static VALUE rogl_glGetDetailTexFuncSGIS(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    void* points = (void*)val2ptr(_arg2_);

    rogl_pfn_glGetDetailTexFuncSGIS(target, points);

    return Qnil;
}

static VALUE rogl_glFogFuncSGIS(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int n = (int)NUM2INT(_arg1_);
    void* points = (void*)val2ptr(_arg2_);

    rogl_pfn_glFogFuncSGIS(n, points);

    return Qnil;
}

static VALUE rogl_glGetFogFuncSGIS(VALUE _obj_, VALUE _arg1_)
{
    void* points = (void*)val2ptr(_arg1_);

    rogl_pfn_glGetFogFuncSGIS(points);

    return Qnil;
}

static VALUE rogl_glSampleMaskSGIS(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    float value = (float)NUM2DBL(_arg1_);
    unsigned char invert = (unsigned char)NUM2UINT(_arg2_);

    rogl_pfn_glSampleMaskSGIS(value, invert);

    return Qnil;
}

static VALUE rogl_glSamplePatternSGIS(VALUE _obj_, VALUE _arg1_)
{
    unsigned int pattern = (unsigned int)NUM2UINT(_arg1_);

    rogl_pfn_glSamplePatternSGIS(pattern);

    return Qnil;
}

static VALUE rogl_glPixelTexGenParameteriSGIS(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int pname = (unsigned int)NUM2UINT(_arg1_);
    int param = (int)NUM2INT(_arg2_);

    rogl_pfn_glPixelTexGenParameteriSGIS(pname, param);

    return Qnil;
}

static VALUE rogl_glPixelTexGenParameterivSGIS(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int pname = (unsigned int)NUM2UINT(_arg1_);
    void* params = (void*)val2ptr(_arg2_);

    rogl_pfn_glPixelTexGenParameterivSGIS(pname, params);

    return Qnil;
}

static VALUE rogl_glPixelTexGenParameterfSGIS(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int pname = (unsigned int)NUM2UINT(_arg1_);
    float param = (float)NUM2DBL(_arg2_);

    rogl_pfn_glPixelTexGenParameterfSGIS(pname, param);

    return Qnil;
}

static VALUE rogl_glPixelTexGenParameterfvSGIS(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int pname = (unsigned int)NUM2UINT(_arg1_);
    void* params = (void*)val2ptr(_arg2_);

    rogl_pfn_glPixelTexGenParameterfvSGIS(pname, params);

    return Qnil;
}

static VALUE rogl_glGetPixelTexGenParameterivSGIS(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int pname = (unsigned int)NUM2UINT(_arg1_);
    void* params = (void*)val2ptr(_arg2_);

    rogl_pfn_glGetPixelTexGenParameterivSGIS(pname, params);

    return Qnil;
}

static VALUE rogl_glGetPixelTexGenParameterfvSGIS(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int pname = (unsigned int)NUM2UINT(_arg1_);
    void* params = (void*)val2ptr(_arg2_);

    rogl_pfn_glGetPixelTexGenParameterfvSGIS(pname, params);

    return Qnil;
}

static VALUE rogl_glPointParameterfSGIS(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int pname = (unsigned int)NUM2UINT(_arg1_);
    float param = (float)NUM2DBL(_arg2_);

    rogl_pfn_glPointParameterfSGIS(pname, param);

    return Qnil;
}

static VALUE rogl_glPointParameterfvSGIS(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int pname = (unsigned int)NUM2UINT(_arg1_);
    void* params = (void*)val2ptr(_arg2_);

    rogl_pfn_glPointParameterfvSGIS(pname, params);

    return Qnil;
}

static VALUE rogl_glSharpenTexFuncSGIS(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    int n = (int)NUM2INT(_arg2_);
    void* points = (void*)val2ptr(_arg3_);

    rogl_pfn_glSharpenTexFuncSGIS(target, n, points);

    return Qnil;
}

static VALUE rogl_glGetSharpenTexFuncSGIS(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    void* points = (void*)val2ptr(_arg2_);

    rogl_pfn_glGetSharpenTexFuncSGIS(target, points);

    return Qnil;
}

static VALUE rogl_glTexImage4DSGIS(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_, VALUE _arg9_, VALUE _arg10_, VALUE _arg11_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    int level = (int)NUM2INT(_arg2_);
    unsigned int internalformat = (unsigned int)NUM2UINT(_arg3_);
    int width = (int)NUM2INT(_arg4_);
    int height = (int)NUM2INT(_arg5_);
    int depth = (int)NUM2INT(_arg6_);
    int size4d = (int)NUM2INT(_arg7_);
    int border = (int)NUM2INT(_arg8_);
    unsigned int format = (unsigned int)NUM2UINT(_arg9_);
    unsigned int type = (unsigned int)NUM2UINT(_arg10_);
    void* pixels = (void*)val2ptr(_arg11_);

    rogl_pfn_glTexImage4DSGIS(target, level, internalformat, width, height, depth, size4d, border, format, type, pixels);

    return Qnil;
}

static VALUE rogl_glTexSubImage4DSGIS(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_, VALUE _arg9_, VALUE _arg10_, VALUE _arg11_, VALUE _arg12_, VALUE _arg13_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    int level = (int)NUM2INT(_arg2_);
    int xoffset = (int)NUM2INT(_arg3_);
    int yoffset = (int)NUM2INT(_arg4_);
    int zoffset = (int)NUM2INT(_arg5_);
    int woffset = (int)NUM2INT(_arg6_);
    int width = (int)NUM2INT(_arg7_);
    int height = (int)NUM2INT(_arg8_);
    int depth = (int)NUM2INT(_arg9_);
    int size4d = (int)NUM2INT(_arg10_);
    unsigned int format = (unsigned int)NUM2UINT(_arg11_);
    unsigned int type = (unsigned int)NUM2UINT(_arg12_);
    void* pixels = (void*)val2ptr(_arg13_);

    rogl_pfn_glTexSubImage4DSGIS(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, pixels);

    return Qnil;
}

static VALUE rogl_glTextureColorMaskSGIS(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned char red = (unsigned char)NUM2UINT(_arg1_);
    unsigned char green = (unsigned char)NUM2UINT(_arg2_);
    unsigned char blue = (unsigned char)NUM2UINT(_arg3_);
    unsigned char alpha = (unsigned char)NUM2UINT(_arg4_);

    rogl_pfn_glTextureColorMaskSGIS(red, green, blue, alpha);

    return Qnil;
}

static VALUE rogl_glGetTexFilterFuncSGIS(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int filter = (unsigned int)NUM2UINT(_arg2_);
    void* weights = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetTexFilterFuncSGIS(target, filter, weights);

    return Qnil;
}

static VALUE rogl_glTexFilterFuncSGIS(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int filter = (unsigned int)NUM2UINT(_arg2_);
    int n = (int)NUM2INT(_arg3_);
    void* weights = (void*)val2ptr(_arg4_);

    rogl_pfn_glTexFilterFuncSGIS(target, filter, n, weights);

    return Qnil;
}

static VALUE rogl_glAsyncMarkerSGIX(VALUE _obj_, VALUE _arg1_)
{
    unsigned int marker = (unsigned int)NUM2UINT(_arg1_);

    rogl_pfn_glAsyncMarkerSGIX(marker);

    return Qnil;
}

static VALUE rogl_glFinishAsyncSGIX(VALUE _obj_, VALUE _arg1_)
{
    void* markerp = (void*)val2ptr(_arg1_);

    int retval = rogl_pfn_glFinishAsyncSGIX(markerp);

    return INT2NUM(retval);
}

static VALUE rogl_glPollAsyncSGIX(VALUE _obj_, VALUE _arg1_)
{
    void* markerp = (void*)val2ptr(_arg1_);

    int retval = rogl_pfn_glPollAsyncSGIX(markerp);

    return INT2NUM(retval);
}

static VALUE rogl_glGenAsyncMarkersSGIX(VALUE _obj_, VALUE _arg1_)
{
    int range = (int)NUM2INT(_arg1_);

    unsigned int retval = rogl_pfn_glGenAsyncMarkersSGIX(range);

    return UINT2NUM(retval);
}

static VALUE rogl_glDeleteAsyncMarkersSGIX(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int marker = (unsigned int)NUM2UINT(_arg1_);
    int range = (int)NUM2INT(_arg2_);

    rogl_pfn_glDeleteAsyncMarkersSGIX(marker, range);

    return Qnil;
}

static VALUE rogl_glIsAsyncMarkerSGIX(VALUE _obj_, VALUE _arg1_)
{
    unsigned int marker = (unsigned int)NUM2UINT(_arg1_);

    unsigned char retval = rogl_pfn_glIsAsyncMarkerSGIX(marker);

    return UINT2NUM(retval);
}

static VALUE rogl_glFlushRasterSGIX(VALUE _obj_)
{
    rogl_pfn_glFlushRasterSGIX();

    return Qnil;
}

static VALUE rogl_glFragmentColorMaterialSGIX(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int face = (unsigned int)NUM2UINT(_arg1_);
    unsigned int mode = (unsigned int)NUM2UINT(_arg2_);

    rogl_pfn_glFragmentColorMaterialSGIX(face, mode);

    return Qnil;
}

static VALUE rogl_glFragmentLightfSGIX(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int light = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    float param = (float)NUM2DBL(_arg3_);

    rogl_pfn_glFragmentLightfSGIX(light, pname, param);

    return Qnil;
}

static VALUE rogl_glFragmentLightfvSGIX(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int light = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glFragmentLightfvSGIX(light, pname, params);

    return Qnil;
}

static VALUE rogl_glFragmentLightiSGIX(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int light = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    int param = (int)NUM2INT(_arg3_);

    rogl_pfn_glFragmentLightiSGIX(light, pname, param);

    return Qnil;
}

static VALUE rogl_glFragmentLightivSGIX(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int light = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glFragmentLightivSGIX(light, pname, params);

    return Qnil;
}

static VALUE rogl_glFragmentLightModelfSGIX(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int pname = (unsigned int)NUM2UINT(_arg1_);
    float param = (float)NUM2DBL(_arg2_);

    rogl_pfn_glFragmentLightModelfSGIX(pname, param);

    return Qnil;
}

static VALUE rogl_glFragmentLightModelfvSGIX(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int pname = (unsigned int)NUM2UINT(_arg1_);
    void* params = (void*)val2ptr(_arg2_);

    rogl_pfn_glFragmentLightModelfvSGIX(pname, params);

    return Qnil;
}

static VALUE rogl_glFragmentLightModeliSGIX(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int pname = (unsigned int)NUM2UINT(_arg1_);
    int param = (int)NUM2INT(_arg2_);

    rogl_pfn_glFragmentLightModeliSGIX(pname, param);

    return Qnil;
}

static VALUE rogl_glFragmentLightModelivSGIX(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int pname = (unsigned int)NUM2UINT(_arg1_);
    void* params = (void*)val2ptr(_arg2_);

    rogl_pfn_glFragmentLightModelivSGIX(pname, params);

    return Qnil;
}

static VALUE rogl_glFragmentMaterialfSGIX(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int face = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    float param = (float)NUM2DBL(_arg3_);

    rogl_pfn_glFragmentMaterialfSGIX(face, pname, param);

    return Qnil;
}

static VALUE rogl_glFragmentMaterialfvSGIX(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int face = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glFragmentMaterialfvSGIX(face, pname, params);

    return Qnil;
}

static VALUE rogl_glFragmentMaterialiSGIX(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int face = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    int param = (int)NUM2INT(_arg3_);

    rogl_pfn_glFragmentMaterialiSGIX(face, pname, param);

    return Qnil;
}

static VALUE rogl_glFragmentMaterialivSGIX(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int face = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glFragmentMaterialivSGIX(face, pname, params);

    return Qnil;
}

static VALUE rogl_glGetFragmentLightfvSGIX(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int light = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetFragmentLightfvSGIX(light, pname, params);

    return Qnil;
}

static VALUE rogl_glGetFragmentLightivSGIX(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int light = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetFragmentLightivSGIX(light, pname, params);

    return Qnil;
}

static VALUE rogl_glGetFragmentMaterialfvSGIX(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int face = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetFragmentMaterialfvSGIX(face, pname, params);

    return Qnil;
}

static VALUE rogl_glGetFragmentMaterialivSGIX(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int face = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetFragmentMaterialivSGIX(face, pname, params);

    return Qnil;
}

static VALUE rogl_glLightEnviSGIX(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int pname = (unsigned int)NUM2UINT(_arg1_);
    int param = (int)NUM2INT(_arg2_);

    rogl_pfn_glLightEnviSGIX(pname, param);

    return Qnil;
}

static VALUE rogl_glFrameZoomSGIX(VALUE _obj_, VALUE _arg1_)
{
    int factor = (int)NUM2INT(_arg1_);

    rogl_pfn_glFrameZoomSGIX(factor);

    return Qnil;
}

static VALUE rogl_glIglooInterfaceSGIX(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int pname = (unsigned int)NUM2UINT(_arg1_);
    void* params = (void*)val2ptr(_arg2_);

    rogl_pfn_glIglooInterfaceSGIX(pname, params);

    return Qnil;
}

static VALUE rogl_glGetInstrumentsSGIX(VALUE _obj_)
{
    int retval = rogl_pfn_glGetInstrumentsSGIX();

    return INT2NUM(retval);
}

static VALUE rogl_glInstrumentsBufferSGIX(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    int size = (int)NUM2INT(_arg1_);
    void* buffer = (void*)val2ptr(_arg2_);

    rogl_pfn_glInstrumentsBufferSGIX(size, buffer);

    return Qnil;
}

static VALUE rogl_glPollInstrumentsSGIX(VALUE _obj_, VALUE _arg1_)
{
    void* marker_p = (void*)val2ptr(_arg1_);

    int retval = rogl_pfn_glPollInstrumentsSGIX(marker_p);

    return INT2NUM(retval);
}

static VALUE rogl_glReadInstrumentsSGIX(VALUE _obj_, VALUE _arg1_)
{
    int marker = (int)NUM2INT(_arg1_);

    rogl_pfn_glReadInstrumentsSGIX(marker);

    return Qnil;
}

static VALUE rogl_glStartInstrumentsSGIX(VALUE _obj_)
{
    rogl_pfn_glStartInstrumentsSGIX();

    return Qnil;
}

static VALUE rogl_glStopInstrumentsSGIX(VALUE _obj_, VALUE _arg1_)
{
    int marker = (int)NUM2INT(_arg1_);

    rogl_pfn_glStopInstrumentsSGIX(marker);

    return Qnil;
}

static VALUE rogl_glGetListParameterfvSGIX(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int list = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetListParameterfvSGIX(list, pname, params);

    return Qnil;
}

static VALUE rogl_glGetListParameterivSGIX(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int list = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetListParameterivSGIX(list, pname, params);

    return Qnil;
}

static VALUE rogl_glListParameterfSGIX(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int list = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    float param = (float)NUM2DBL(_arg3_);

    rogl_pfn_glListParameterfSGIX(list, pname, param);

    return Qnil;
}

static VALUE rogl_glListParameterfvSGIX(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int list = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glListParameterfvSGIX(list, pname, params);

    return Qnil;
}

static VALUE rogl_glListParameteriSGIX(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int list = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    int param = (int)NUM2INT(_arg3_);

    rogl_pfn_glListParameteriSGIX(list, pname, param);

    return Qnil;
}

static VALUE rogl_glListParameterivSGIX(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int list = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glListParameterivSGIX(list, pname, params);

    return Qnil;
}

static VALUE rogl_glPixelTexGenSGIX(VALUE _obj_, VALUE _arg1_)
{
    unsigned int mode = (unsigned int)NUM2UINT(_arg1_);

    rogl_pfn_glPixelTexGenSGIX(mode);

    return Qnil;
}

static VALUE rogl_glDeformationMap3dSGIX(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_, VALUE _arg9_, VALUE _arg10_, VALUE _arg11_, VALUE _arg12_, VALUE _arg13_, VALUE _arg14_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    double u1 = (double)NUM2DBL(_arg2_);
    double u2 = (double)NUM2DBL(_arg3_);
    int ustride = (int)NUM2INT(_arg4_);
    int uorder = (int)NUM2INT(_arg5_);
    double v1 = (double)NUM2DBL(_arg6_);
    double v2 = (double)NUM2DBL(_arg7_);
    int vstride = (int)NUM2INT(_arg8_);
    int vorder = (int)NUM2INT(_arg9_);
    double w1 = (double)NUM2DBL(_arg10_);
    double w2 = (double)NUM2DBL(_arg11_);
    int wstride = (int)NUM2INT(_arg12_);
    int worder = (int)NUM2INT(_arg13_);
    void* points = (void*)val2ptr(_arg14_);

    rogl_pfn_glDeformationMap3dSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);

    return Qnil;
}

static VALUE rogl_glDeformationMap3fSGIX(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_, VALUE _arg9_, VALUE _arg10_, VALUE _arg11_, VALUE _arg12_, VALUE _arg13_, VALUE _arg14_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    float u1 = (float)NUM2DBL(_arg2_);
    float u2 = (float)NUM2DBL(_arg3_);
    int ustride = (int)NUM2INT(_arg4_);
    int uorder = (int)NUM2INT(_arg5_);
    float v1 = (float)NUM2DBL(_arg6_);
    float v2 = (float)NUM2DBL(_arg7_);
    int vstride = (int)NUM2INT(_arg8_);
    int vorder = (int)NUM2INT(_arg9_);
    float w1 = (float)NUM2DBL(_arg10_);
    float w2 = (float)NUM2DBL(_arg11_);
    int wstride = (int)NUM2INT(_arg12_);
    int worder = (int)NUM2INT(_arg13_);
    void* points = (void*)val2ptr(_arg14_);

    rogl_pfn_glDeformationMap3fSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);

    return Qnil;
}

static VALUE rogl_glDeformSGIX(VALUE _obj_, VALUE _arg1_)
{
    unsigned int mask = (unsigned int)NUM2UINT(_arg1_);

    rogl_pfn_glDeformSGIX(mask);

    return Qnil;
}

static VALUE rogl_glLoadIdentityDeformationMapSGIX(VALUE _obj_, VALUE _arg1_)
{
    unsigned int mask = (unsigned int)NUM2UINT(_arg1_);

    rogl_pfn_glLoadIdentityDeformationMapSGIX(mask);

    return Qnil;
}

static VALUE rogl_glReferencePlaneSGIX(VALUE _obj_, VALUE _arg1_)
{
    void* equation = (void*)val2ptr(_arg1_);

    rogl_pfn_glReferencePlaneSGIX(equation);

    return Qnil;
}

static VALUE rogl_glSpriteParameterfSGIX(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int pname = (unsigned int)NUM2UINT(_arg1_);
    float param = (float)NUM2DBL(_arg2_);

    rogl_pfn_glSpriteParameterfSGIX(pname, param);

    return Qnil;
}

static VALUE rogl_glSpriteParameterfvSGIX(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int pname = (unsigned int)NUM2UINT(_arg1_);
    void* params = (void*)val2ptr(_arg2_);

    rogl_pfn_glSpriteParameterfvSGIX(pname, params);

    return Qnil;
}

static VALUE rogl_glSpriteParameteriSGIX(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int pname = (unsigned int)NUM2UINT(_arg1_);
    int param = (int)NUM2INT(_arg2_);

    rogl_pfn_glSpriteParameteriSGIX(pname, param);

    return Qnil;
}

static VALUE rogl_glSpriteParameterivSGIX(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    unsigned int pname = (unsigned int)NUM2UINT(_arg1_);
    void* params = (void*)val2ptr(_arg2_);

    rogl_pfn_glSpriteParameterivSGIX(pname, params);

    return Qnil;
}

static VALUE rogl_glTagSampleBufferSGIX(VALUE _obj_)
{
    rogl_pfn_glTagSampleBufferSGIX();

    return Qnil;
}

static VALUE rogl_glColorTableSGI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int internalformat = (unsigned int)NUM2UINT(_arg2_);
    int width = (int)NUM2INT(_arg3_);
    unsigned int format = (unsigned int)NUM2UINT(_arg4_);
    unsigned int type = (unsigned int)NUM2UINT(_arg5_);
    void* table = (void*)val2ptr(_arg6_);

    rogl_pfn_glColorTableSGI(target, internalformat, width, format, type, table);

    return Qnil;
}

static VALUE rogl_glColorTableParameterfvSGI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glColorTableParameterfvSGI(target, pname, params);

    return Qnil;
}

static VALUE rogl_glColorTableParameterivSGI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glColorTableParameterivSGI(target, pname, params);

    return Qnil;
}

static VALUE rogl_glCopyColorTableSGI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int internalformat = (unsigned int)NUM2UINT(_arg2_);
    int x = (int)NUM2INT(_arg3_);
    int y = (int)NUM2INT(_arg4_);
    int width = (int)NUM2INT(_arg5_);

    rogl_pfn_glCopyColorTableSGI(target, internalformat, x, y, width);

    return Qnil;
}

static VALUE rogl_glGetColorTableSGI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int format = (unsigned int)NUM2UINT(_arg2_);
    unsigned int type = (unsigned int)NUM2UINT(_arg3_);
    void* table = (void*)val2ptr(_arg4_);

    rogl_pfn_glGetColorTableSGI(target, format, type, table);

    return Qnil;
}

static VALUE rogl_glGetColorTableParameterfvSGI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetColorTableParameterfvSGI(target, pname, params);

    return Qnil;
}

static VALUE rogl_glGetColorTableParameterivSGI(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int target = (unsigned int)NUM2UINT(_arg1_);
    unsigned int pname = (unsigned int)NUM2UINT(_arg2_);
    void* params = (void*)val2ptr(_arg3_);

    rogl_pfn_glGetColorTableParameterivSGI(target, pname, params);

    return Qnil;
}

static VALUE rogl_glFinishTextureSUNX(VALUE _obj_)
{
    rogl_pfn_glFinishTextureSUNX();

    return Qnil;
}

static VALUE rogl_glGlobalAlphaFactorbSUN(VALUE _obj_, VALUE _arg1_)
{
    char factor = (char)NUM2INT(_arg1_);

    rogl_pfn_glGlobalAlphaFactorbSUN(factor);

    return Qnil;
}

static VALUE rogl_glGlobalAlphaFactorsSUN(VALUE _obj_, VALUE _arg1_)
{
    short factor = (short)NUM2INT(_arg1_);

    rogl_pfn_glGlobalAlphaFactorsSUN(factor);

    return Qnil;
}

static VALUE rogl_glGlobalAlphaFactoriSUN(VALUE _obj_, VALUE _arg1_)
{
    int factor = (int)NUM2INT(_arg1_);

    rogl_pfn_glGlobalAlphaFactoriSUN(factor);

    return Qnil;
}

static VALUE rogl_glGlobalAlphaFactorfSUN(VALUE _obj_, VALUE _arg1_)
{
    float factor = (float)NUM2DBL(_arg1_);

    rogl_pfn_glGlobalAlphaFactorfSUN(factor);

    return Qnil;
}

static VALUE rogl_glGlobalAlphaFactordSUN(VALUE _obj_, VALUE _arg1_)
{
    double factor = (double)NUM2DBL(_arg1_);

    rogl_pfn_glGlobalAlphaFactordSUN(factor);

    return Qnil;
}

static VALUE rogl_glGlobalAlphaFactorubSUN(VALUE _obj_, VALUE _arg1_)
{
    unsigned char factor = (unsigned char)NUM2UINT(_arg1_);

    rogl_pfn_glGlobalAlphaFactorubSUN(factor);

    return Qnil;
}

static VALUE rogl_glGlobalAlphaFactorusSUN(VALUE _obj_, VALUE _arg1_)
{
    unsigned short factor = (unsigned short)NUM2UINT(_arg1_);

    rogl_pfn_glGlobalAlphaFactorusSUN(factor);

    return Qnil;
}

static VALUE rogl_glGlobalAlphaFactoruiSUN(VALUE _obj_, VALUE _arg1_)
{
    unsigned int factor = (unsigned int)NUM2UINT(_arg1_);

    rogl_pfn_glGlobalAlphaFactoruiSUN(factor);

    return Qnil;
}

static VALUE rogl_glDrawMeshArraysSUN(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int mode = (unsigned int)NUM2UINT(_arg1_);
    int first = (int)NUM2INT(_arg2_);
    int count = (int)NUM2INT(_arg3_);
    int width = (int)NUM2INT(_arg4_);

    rogl_pfn_glDrawMeshArraysSUN(mode, first, count, width);

    return Qnil;
}

static VALUE rogl_glReplacementCodeuiSUN(VALUE _obj_, VALUE _arg1_)
{
    unsigned int code = (unsigned int)NUM2UINT(_arg1_);

    rogl_pfn_glReplacementCodeuiSUN(code);

    return Qnil;
}

static VALUE rogl_glReplacementCodeusSUN(VALUE _obj_, VALUE _arg1_)
{
    unsigned short code = (unsigned short)NUM2UINT(_arg1_);

    rogl_pfn_glReplacementCodeusSUN(code);

    return Qnil;
}

static VALUE rogl_glReplacementCodeubSUN(VALUE _obj_, VALUE _arg1_)
{
    unsigned char code = (unsigned char)NUM2UINT(_arg1_);

    rogl_pfn_glReplacementCodeubSUN(code);

    return Qnil;
}

static VALUE rogl_glReplacementCodeuivSUN(VALUE _obj_, VALUE _arg1_)
{
    void* code = (void*)val2ptr(_arg1_);

    rogl_pfn_glReplacementCodeuivSUN(code);

    return Qnil;
}

static VALUE rogl_glReplacementCodeusvSUN(VALUE _obj_, VALUE _arg1_)
{
    void* code = (void*)val2ptr(_arg1_);

    rogl_pfn_glReplacementCodeusvSUN(code);

    return Qnil;
}

static VALUE rogl_glReplacementCodeubvSUN(VALUE _obj_, VALUE _arg1_)
{
    void* code = (void*)val2ptr(_arg1_);

    rogl_pfn_glReplacementCodeubvSUN(code);

    return Qnil;
}

static VALUE rogl_glReplacementCodePointerSUN(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    unsigned int type = (unsigned int)NUM2UINT(_arg1_);
    int stride = (int)NUM2INT(_arg2_);
    void* pointer = (void*)val2ptr(_arg3_);

    rogl_pfn_glReplacementCodePointerSUN(type, stride, pointer);

    return Qnil;
}

static VALUE rogl_glColor4ubVertex2fSUN(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_)
{
    unsigned char r = (unsigned char)NUM2UINT(_arg1_);
    unsigned char g = (unsigned char)NUM2UINT(_arg2_);
    unsigned char b = (unsigned char)NUM2UINT(_arg3_);
    unsigned char a = (unsigned char)NUM2UINT(_arg4_);
    float x = (float)NUM2DBL(_arg5_);
    float y = (float)NUM2DBL(_arg6_);

    rogl_pfn_glColor4ubVertex2fSUN(r, g, b, a, x, y);

    return Qnil;
}

static VALUE rogl_glColor4ubVertex2fvSUN(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    void* c = (void*)val2ptr(_arg1_);
    void* v = (void*)val2ptr(_arg2_);

    rogl_pfn_glColor4ubVertex2fvSUN(c, v);

    return Qnil;
}

static VALUE rogl_glColor4ubVertex3fSUN(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_)
{
    unsigned char r = (unsigned char)NUM2UINT(_arg1_);
    unsigned char g = (unsigned char)NUM2UINT(_arg2_);
    unsigned char b = (unsigned char)NUM2UINT(_arg3_);
    unsigned char a = (unsigned char)NUM2UINT(_arg4_);
    float x = (float)NUM2DBL(_arg5_);
    float y = (float)NUM2DBL(_arg6_);
    float z = (float)NUM2DBL(_arg7_);

    rogl_pfn_glColor4ubVertex3fSUN(r, g, b, a, x, y, z);

    return Qnil;
}

static VALUE rogl_glColor4ubVertex3fvSUN(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    void* c = (void*)val2ptr(_arg1_);
    void* v = (void*)val2ptr(_arg2_);

    rogl_pfn_glColor4ubVertex3fvSUN(c, v);

    return Qnil;
}

static VALUE rogl_glColor3fVertex3fSUN(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_)
{
    float r = (float)NUM2DBL(_arg1_);
    float g = (float)NUM2DBL(_arg2_);
    float b = (float)NUM2DBL(_arg3_);
    float x = (float)NUM2DBL(_arg4_);
    float y = (float)NUM2DBL(_arg5_);
    float z = (float)NUM2DBL(_arg6_);

    rogl_pfn_glColor3fVertex3fSUN(r, g, b, x, y, z);

    return Qnil;
}

static VALUE rogl_glColor3fVertex3fvSUN(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    void* c = (void*)val2ptr(_arg1_);
    void* v = (void*)val2ptr(_arg2_);

    rogl_pfn_glColor3fVertex3fvSUN(c, v);

    return Qnil;
}

static VALUE rogl_glNormal3fVertex3fSUN(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_)
{
    float nx = (float)NUM2DBL(_arg1_);
    float ny = (float)NUM2DBL(_arg2_);
    float nz = (float)NUM2DBL(_arg3_);
    float x = (float)NUM2DBL(_arg4_);
    float y = (float)NUM2DBL(_arg5_);
    float z = (float)NUM2DBL(_arg6_);

    rogl_pfn_glNormal3fVertex3fSUN(nx, ny, nz, x, y, z);

    return Qnil;
}

static VALUE rogl_glNormal3fVertex3fvSUN(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    void* n = (void*)val2ptr(_arg1_);
    void* v = (void*)val2ptr(_arg2_);

    rogl_pfn_glNormal3fVertex3fvSUN(n, v);

    return Qnil;
}

static VALUE rogl_glColor4fNormal3fVertex3fSUN(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_, VALUE _arg9_, VALUE _arg10_)
{
    float r = (float)NUM2DBL(_arg1_);
    float g = (float)NUM2DBL(_arg2_);
    float b = (float)NUM2DBL(_arg3_);
    float a = (float)NUM2DBL(_arg4_);
    float nx = (float)NUM2DBL(_arg5_);
    float ny = (float)NUM2DBL(_arg6_);
    float nz = (float)NUM2DBL(_arg7_);
    float x = (float)NUM2DBL(_arg8_);
    float y = (float)NUM2DBL(_arg9_);
    float z = (float)NUM2DBL(_arg10_);

    rogl_pfn_glColor4fNormal3fVertex3fSUN(r, g, b, a, nx, ny, nz, x, y, z);

    return Qnil;
}

static VALUE rogl_glColor4fNormal3fVertex3fvSUN(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    void* c = (void*)val2ptr(_arg1_);
    void* n = (void*)val2ptr(_arg2_);
    void* v = (void*)val2ptr(_arg3_);

    rogl_pfn_glColor4fNormal3fVertex3fvSUN(c, n, v);

    return Qnil;
}

static VALUE rogl_glTexCoord2fVertex3fSUN(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    float s = (float)NUM2DBL(_arg1_);
    float t = (float)NUM2DBL(_arg2_);
    float x = (float)NUM2DBL(_arg3_);
    float y = (float)NUM2DBL(_arg4_);
    float z = (float)NUM2DBL(_arg5_);

    rogl_pfn_glTexCoord2fVertex3fSUN(s, t, x, y, z);

    return Qnil;
}

static VALUE rogl_glTexCoord2fVertex3fvSUN(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    void* tc = (void*)val2ptr(_arg1_);
    void* v = (void*)val2ptr(_arg2_);

    rogl_pfn_glTexCoord2fVertex3fvSUN(tc, v);

    return Qnil;
}

static VALUE rogl_glTexCoord4fVertex4fSUN(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_)
{
    float s = (float)NUM2DBL(_arg1_);
    float t = (float)NUM2DBL(_arg2_);
    float p = (float)NUM2DBL(_arg3_);
    float q = (float)NUM2DBL(_arg4_);
    float x = (float)NUM2DBL(_arg5_);
    float y = (float)NUM2DBL(_arg6_);
    float z = (float)NUM2DBL(_arg7_);
    float w = (float)NUM2DBL(_arg8_);

    rogl_pfn_glTexCoord4fVertex4fSUN(s, t, p, q, x, y, z, w);

    return Qnil;
}

static VALUE rogl_glTexCoord4fVertex4fvSUN(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    void* tc = (void*)val2ptr(_arg1_);
    void* v = (void*)val2ptr(_arg2_);

    rogl_pfn_glTexCoord4fVertex4fvSUN(tc, v);

    return Qnil;
}

static VALUE rogl_glTexCoord2fColor4ubVertex3fSUN(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_, VALUE _arg9_)
{
    float s = (float)NUM2DBL(_arg1_);
    float t = (float)NUM2DBL(_arg2_);
    unsigned char r = (unsigned char)NUM2UINT(_arg3_);
    unsigned char g = (unsigned char)NUM2UINT(_arg4_);
    unsigned char b = (unsigned char)NUM2UINT(_arg5_);
    unsigned char a = (unsigned char)NUM2UINT(_arg6_);
    float x = (float)NUM2DBL(_arg7_);
    float y = (float)NUM2DBL(_arg8_);
    float z = (float)NUM2DBL(_arg9_);

    rogl_pfn_glTexCoord2fColor4ubVertex3fSUN(s, t, r, g, b, a, x, y, z);

    return Qnil;
}

static VALUE rogl_glTexCoord2fColor4ubVertex3fvSUN(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    void* tc = (void*)val2ptr(_arg1_);
    void* c = (void*)val2ptr(_arg2_);
    void* v = (void*)val2ptr(_arg3_);

    rogl_pfn_glTexCoord2fColor4ubVertex3fvSUN(tc, c, v);

    return Qnil;
}

static VALUE rogl_glTexCoord2fColor3fVertex3fSUN(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_)
{
    float s = (float)NUM2DBL(_arg1_);
    float t = (float)NUM2DBL(_arg2_);
    float r = (float)NUM2DBL(_arg3_);
    float g = (float)NUM2DBL(_arg4_);
    float b = (float)NUM2DBL(_arg5_);
    float x = (float)NUM2DBL(_arg6_);
    float y = (float)NUM2DBL(_arg7_);
    float z = (float)NUM2DBL(_arg8_);

    rogl_pfn_glTexCoord2fColor3fVertex3fSUN(s, t, r, g, b, x, y, z);

    return Qnil;
}

static VALUE rogl_glTexCoord2fColor3fVertex3fvSUN(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    void* tc = (void*)val2ptr(_arg1_);
    void* c = (void*)val2ptr(_arg2_);
    void* v = (void*)val2ptr(_arg3_);

    rogl_pfn_glTexCoord2fColor3fVertex3fvSUN(tc, c, v);

    return Qnil;
}

static VALUE rogl_glTexCoord2fNormal3fVertex3fSUN(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_)
{
    float s = (float)NUM2DBL(_arg1_);
    float t = (float)NUM2DBL(_arg2_);
    float nx = (float)NUM2DBL(_arg3_);
    float ny = (float)NUM2DBL(_arg4_);
    float nz = (float)NUM2DBL(_arg5_);
    float x = (float)NUM2DBL(_arg6_);
    float y = (float)NUM2DBL(_arg7_);
    float z = (float)NUM2DBL(_arg8_);

    rogl_pfn_glTexCoord2fNormal3fVertex3fSUN(s, t, nx, ny, nz, x, y, z);

    return Qnil;
}

static VALUE rogl_glTexCoord2fNormal3fVertex3fvSUN(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    void* tc = (void*)val2ptr(_arg1_);
    void* n = (void*)val2ptr(_arg2_);
    void* v = (void*)val2ptr(_arg3_);

    rogl_pfn_glTexCoord2fNormal3fVertex3fvSUN(tc, n, v);

    return Qnil;
}

static VALUE rogl_glTexCoord2fColor4fNormal3fVertex3fSUN(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_, VALUE _arg9_, VALUE _arg10_, VALUE _arg11_, VALUE _arg12_)
{
    float s = (float)NUM2DBL(_arg1_);
    float t = (float)NUM2DBL(_arg2_);
    float r = (float)NUM2DBL(_arg3_);
    float g = (float)NUM2DBL(_arg4_);
    float b = (float)NUM2DBL(_arg5_);
    float a = (float)NUM2DBL(_arg6_);
    float nx = (float)NUM2DBL(_arg7_);
    float ny = (float)NUM2DBL(_arg8_);
    float nz = (float)NUM2DBL(_arg9_);
    float x = (float)NUM2DBL(_arg10_);
    float y = (float)NUM2DBL(_arg11_);
    float z = (float)NUM2DBL(_arg12_);

    rogl_pfn_glTexCoord2fColor4fNormal3fVertex3fSUN(s, t, r, g, b, a, nx, ny, nz, x, y, z);

    return Qnil;
}

static VALUE rogl_glTexCoord2fColor4fNormal3fVertex3fvSUN(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    void* tc = (void*)val2ptr(_arg1_);
    void* c = (void*)val2ptr(_arg2_);
    void* n = (void*)val2ptr(_arg3_);
    void* v = (void*)val2ptr(_arg4_);

    rogl_pfn_glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c, n, v);

    return Qnil;
}

static VALUE rogl_glTexCoord4fColor4fNormal3fVertex4fSUN(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_, VALUE _arg9_, VALUE _arg10_, VALUE _arg11_, VALUE _arg12_, VALUE _arg13_, VALUE _arg14_, VALUE _arg15_)
{
    float s = (float)NUM2DBL(_arg1_);
    float t = (float)NUM2DBL(_arg2_);
    float p = (float)NUM2DBL(_arg3_);
    float q = (float)NUM2DBL(_arg4_);
    float r = (float)NUM2DBL(_arg5_);
    float g = (float)NUM2DBL(_arg6_);
    float b = (float)NUM2DBL(_arg7_);
    float a = (float)NUM2DBL(_arg8_);
    float nx = (float)NUM2DBL(_arg9_);
    float ny = (float)NUM2DBL(_arg10_);
    float nz = (float)NUM2DBL(_arg11_);
    float x = (float)NUM2DBL(_arg12_);
    float y = (float)NUM2DBL(_arg13_);
    float z = (float)NUM2DBL(_arg14_);
    float w = (float)NUM2DBL(_arg15_);

    rogl_pfn_glTexCoord4fColor4fNormal3fVertex4fSUN(s, t, p, q, r, g, b, a, nx, ny, nz, x, y, z, w);

    return Qnil;
}

static VALUE rogl_glTexCoord4fColor4fNormal3fVertex4fvSUN(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    void* tc = (void*)val2ptr(_arg1_);
    void* c = (void*)val2ptr(_arg2_);
    void* n = (void*)val2ptr(_arg3_);
    void* v = (void*)val2ptr(_arg4_);

    rogl_pfn_glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c, n, v);

    return Qnil;
}

static VALUE rogl_glReplacementCodeuiVertex3fSUN(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    unsigned int rc = (unsigned int)NUM2UINT(_arg1_);
    float x = (float)NUM2DBL(_arg2_);
    float y = (float)NUM2DBL(_arg3_);
    float z = (float)NUM2DBL(_arg4_);

    rogl_pfn_glReplacementCodeuiVertex3fSUN(rc, x, y, z);

    return Qnil;
}

static VALUE rogl_glReplacementCodeuiVertex3fvSUN(VALUE _obj_, VALUE _arg1_, VALUE _arg2_)
{
    void* rc = (void*)val2ptr(_arg1_);
    void* v = (void*)val2ptr(_arg2_);

    rogl_pfn_glReplacementCodeuiVertex3fvSUN(rc, v);

    return Qnil;
}

static VALUE rogl_glReplacementCodeuiColor4ubVertex3fSUN(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_)
{
    unsigned int rc = (unsigned int)NUM2UINT(_arg1_);
    unsigned char r = (unsigned char)NUM2UINT(_arg2_);
    unsigned char g = (unsigned char)NUM2UINT(_arg3_);
    unsigned char b = (unsigned char)NUM2UINT(_arg4_);
    unsigned char a = (unsigned char)NUM2UINT(_arg5_);
    float x = (float)NUM2DBL(_arg6_);
    float y = (float)NUM2DBL(_arg7_);
    float z = (float)NUM2DBL(_arg8_);

    rogl_pfn_glReplacementCodeuiColor4ubVertex3fSUN(rc, r, g, b, a, x, y, z);

    return Qnil;
}

static VALUE rogl_glReplacementCodeuiColor4ubVertex3fvSUN(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    void* rc = (void*)val2ptr(_arg1_);
    void* c = (void*)val2ptr(_arg2_);
    void* v = (void*)val2ptr(_arg3_);

    rogl_pfn_glReplacementCodeuiColor4ubVertex3fvSUN(rc, c, v);

    return Qnil;
}

static VALUE rogl_glReplacementCodeuiColor3fVertex3fSUN(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_)
{
    unsigned int rc = (unsigned int)NUM2UINT(_arg1_);
    float r = (float)NUM2DBL(_arg2_);
    float g = (float)NUM2DBL(_arg3_);
    float b = (float)NUM2DBL(_arg4_);
    float x = (float)NUM2DBL(_arg5_);
    float y = (float)NUM2DBL(_arg6_);
    float z = (float)NUM2DBL(_arg7_);

    rogl_pfn_glReplacementCodeuiColor3fVertex3fSUN(rc, r, g, b, x, y, z);

    return Qnil;
}

static VALUE rogl_glReplacementCodeuiColor3fVertex3fvSUN(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    void* rc = (void*)val2ptr(_arg1_);
    void* c = (void*)val2ptr(_arg2_);
    void* v = (void*)val2ptr(_arg3_);

    rogl_pfn_glReplacementCodeuiColor3fVertex3fvSUN(rc, c, v);

    return Qnil;
}

static VALUE rogl_glReplacementCodeuiNormal3fVertex3fSUN(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_)
{
    unsigned int rc = (unsigned int)NUM2UINT(_arg1_);
    float nx = (float)NUM2DBL(_arg2_);
    float ny = (float)NUM2DBL(_arg3_);
    float nz = (float)NUM2DBL(_arg4_);
    float x = (float)NUM2DBL(_arg5_);
    float y = (float)NUM2DBL(_arg6_);
    float z = (float)NUM2DBL(_arg7_);

    rogl_pfn_glReplacementCodeuiNormal3fVertex3fSUN(rc, nx, ny, nz, x, y, z);

    return Qnil;
}

static VALUE rogl_glReplacementCodeuiNormal3fVertex3fvSUN(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    void* rc = (void*)val2ptr(_arg1_);
    void* n = (void*)val2ptr(_arg2_);
    void* v = (void*)val2ptr(_arg3_);

    rogl_pfn_glReplacementCodeuiNormal3fVertex3fvSUN(rc, n, v);

    return Qnil;
}

static VALUE rogl_glReplacementCodeuiColor4fNormal3fVertex3fSUN(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_, VALUE _arg9_, VALUE _arg10_, VALUE _arg11_)
{
    unsigned int rc = (unsigned int)NUM2UINT(_arg1_);
    float r = (float)NUM2DBL(_arg2_);
    float g = (float)NUM2DBL(_arg3_);
    float b = (float)NUM2DBL(_arg4_);
    float a = (float)NUM2DBL(_arg5_);
    float nx = (float)NUM2DBL(_arg6_);
    float ny = (float)NUM2DBL(_arg7_);
    float nz = (float)NUM2DBL(_arg8_);
    float x = (float)NUM2DBL(_arg9_);
    float y = (float)NUM2DBL(_arg10_);
    float z = (float)NUM2DBL(_arg11_);

    rogl_pfn_glReplacementCodeuiColor4fNormal3fVertex3fSUN(rc, r, g, b, a, nx, ny, nz, x, y, z);

    return Qnil;
}

static VALUE rogl_glReplacementCodeuiColor4fNormal3fVertex3fvSUN(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    void* rc = (void*)val2ptr(_arg1_);
    void* c = (void*)val2ptr(_arg2_);
    void* n = (void*)val2ptr(_arg3_);
    void* v = (void*)val2ptr(_arg4_);

    rogl_pfn_glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c, n, v);

    return Qnil;
}

static VALUE rogl_glReplacementCodeuiTexCoord2fVertex3fSUN(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_)
{
    unsigned int rc = (unsigned int)NUM2UINT(_arg1_);
    float s = (float)NUM2DBL(_arg2_);
    float t = (float)NUM2DBL(_arg3_);
    float x = (float)NUM2DBL(_arg4_);
    float y = (float)NUM2DBL(_arg5_);
    float z = (float)NUM2DBL(_arg6_);

    rogl_pfn_glReplacementCodeuiTexCoord2fVertex3fSUN(rc, s, t, x, y, z);

    return Qnil;
}

static VALUE rogl_glReplacementCodeuiTexCoord2fVertex3fvSUN(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_)
{
    void* rc = (void*)val2ptr(_arg1_);
    void* tc = (void*)val2ptr(_arg2_);
    void* v = (void*)val2ptr(_arg3_);

    rogl_pfn_glReplacementCodeuiTexCoord2fVertex3fvSUN(rc, tc, v);

    return Qnil;
}

static VALUE rogl_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_, VALUE _arg9_)
{
    unsigned int rc = (unsigned int)NUM2UINT(_arg1_);
    float s = (float)NUM2DBL(_arg2_);
    float t = (float)NUM2DBL(_arg3_);
    float nx = (float)NUM2DBL(_arg4_);
    float ny = (float)NUM2DBL(_arg5_);
    float nz = (float)NUM2DBL(_arg6_);
    float x = (float)NUM2DBL(_arg7_);
    float y = (float)NUM2DBL(_arg8_);
    float z = (float)NUM2DBL(_arg9_);

    rogl_pfn_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(rc, s, t, nx, ny, nz, x, y, z);

    return Qnil;
}

static VALUE rogl_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_)
{
    void* rc = (void*)val2ptr(_arg1_);
    void* tc = (void*)val2ptr(_arg2_);
    void* n = (void*)val2ptr(_arg3_);
    void* v = (void*)val2ptr(_arg4_);

    rogl_pfn_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc, n, v);

    return Qnil;
}

static VALUE rogl_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_, VALUE _arg6_, VALUE _arg7_, VALUE _arg8_, VALUE _arg9_, VALUE _arg10_, VALUE _arg11_, VALUE _arg12_, VALUE _arg13_)
{
    unsigned int rc = (unsigned int)NUM2UINT(_arg1_);
    float s = (float)NUM2DBL(_arg2_);
    float t = (float)NUM2DBL(_arg3_);
    float r = (float)NUM2DBL(_arg4_);
    float g = (float)NUM2DBL(_arg5_);
    float b = (float)NUM2DBL(_arg6_);
    float a = (float)NUM2DBL(_arg7_);
    float nx = (float)NUM2DBL(_arg8_);
    float ny = (float)NUM2DBL(_arg9_);
    float nz = (float)NUM2DBL(_arg10_);
    float x = (float)NUM2DBL(_arg11_);
    float y = (float)NUM2DBL(_arg12_);
    float z = (float)NUM2DBL(_arg13_);

    rogl_pfn_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(rc, s, t, r, g, b, a, nx, ny, nz, x, y, z);

    return Qnil;
}

static VALUE rogl_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(VALUE _obj_, VALUE _arg1_, VALUE _arg2_, VALUE _arg3_, VALUE _arg4_, VALUE _arg5_)
{
    void* rc = (void*)val2ptr(_arg1_);
    void* tc = (void*)val2ptr(_arg2_);
    void* c = (void*)val2ptr(_arg3_);
    void* n = (void*)val2ptr(_arg4_);
    void* v = (void*)val2ptr(_arg5_);

    rogl_pfn_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c, n, v);

    return Qnil;
}


static void rogl_InitRubyExtCommand( VALUE* pmROGL )
{
    rb_define_method(*pmROGL, "glTbufferMask3DFX", rogl_glTbufferMask3DFX, 1);
    rb_define_method(*pmROGL, "glDebugMessageEnableAMD", rogl_glDebugMessageEnableAMD, 5);
    rb_define_method(*pmROGL, "glDebugMessageInsertAMD", rogl_glDebugMessageInsertAMD, 5);
    rb_define_method(*pmROGL, "glDebugMessageCallbackAMD", rogl_glDebugMessageCallbackAMD, 2);
    rb_define_method(*pmROGL, "glGetDebugMessageLogAMD", rogl_glGetDebugMessageLogAMD, 7);
    rb_define_method(*pmROGL, "glBlendFuncIndexedAMD", rogl_glBlendFuncIndexedAMD, 3);
    rb_define_method(*pmROGL, "glBlendFuncSeparateIndexedAMD", rogl_glBlendFuncSeparateIndexedAMD, 5);
    rb_define_method(*pmROGL, "glBlendEquationIndexedAMD", rogl_glBlendEquationIndexedAMD, 2);
    rb_define_method(*pmROGL, "glBlendEquationSeparateIndexedAMD", rogl_glBlendEquationSeparateIndexedAMD, 3);
    rb_define_method(*pmROGL, "glVertexAttribParameteriAMD", rogl_glVertexAttribParameteriAMD, 3);
    rb_define_method(*pmROGL, "glMultiDrawArraysIndirectAMD", rogl_glMultiDrawArraysIndirectAMD, 4);
    rb_define_method(*pmROGL, "glMultiDrawElementsIndirectAMD", rogl_glMultiDrawElementsIndirectAMD, 5);
    rb_define_method(*pmROGL, "glGenNamesAMD", rogl_glGenNamesAMD, 3);
    rb_define_method(*pmROGL, "glDeleteNamesAMD", rogl_glDeleteNamesAMD, 3);
    rb_define_method(*pmROGL, "glIsNameAMD", rogl_glIsNameAMD, 2);
    rb_define_method(*pmROGL, "glQueryObjectParameteruiAMD", rogl_glQueryObjectParameteruiAMD, 4);
    rb_define_method(*pmROGL, "glGetPerfMonitorGroupsAMD", rogl_glGetPerfMonitorGroupsAMD, 3);
    rb_define_method(*pmROGL, "glGetPerfMonitorCountersAMD", rogl_glGetPerfMonitorCountersAMD, 5);
    rb_define_method(*pmROGL, "glGetPerfMonitorGroupStringAMD", rogl_glGetPerfMonitorGroupStringAMD, 4);
    rb_define_method(*pmROGL, "glGetPerfMonitorCounterStringAMD", rogl_glGetPerfMonitorCounterStringAMD, 5);
    rb_define_method(*pmROGL, "glGetPerfMonitorCounterInfoAMD", rogl_glGetPerfMonitorCounterInfoAMD, 4);
    rb_define_method(*pmROGL, "glGenPerfMonitorsAMD", rogl_glGenPerfMonitorsAMD, 2);
    rb_define_method(*pmROGL, "glDeletePerfMonitorsAMD", rogl_glDeletePerfMonitorsAMD, 2);
    rb_define_method(*pmROGL, "glSelectPerfMonitorCountersAMD", rogl_glSelectPerfMonitorCountersAMD, 5);
    rb_define_method(*pmROGL, "glBeginPerfMonitorAMD", rogl_glBeginPerfMonitorAMD, 1);
    rb_define_method(*pmROGL, "glEndPerfMonitorAMD", rogl_glEndPerfMonitorAMD, 1);
    rb_define_method(*pmROGL, "glGetPerfMonitorCounterDataAMD", rogl_glGetPerfMonitorCounterDataAMD, 5);
    rb_define_method(*pmROGL, "glSetMultisamplefvAMD", rogl_glSetMultisamplefvAMD, 3);
    rb_define_method(*pmROGL, "glTexStorageSparseAMD", rogl_glTexStorageSparseAMD, 7);
    rb_define_method(*pmROGL, "glTextureStorageSparseAMD", rogl_glTextureStorageSparseAMD, 8);
    rb_define_method(*pmROGL, "glStencilOpValueAMD", rogl_glStencilOpValueAMD, 2);
    rb_define_method(*pmROGL, "glTessellationFactorAMD", rogl_glTessellationFactorAMD, 1);
    rb_define_method(*pmROGL, "glTessellationModeAMD", rogl_glTessellationModeAMD, 1);
    rb_define_method(*pmROGL, "glElementPointerAPPLE", rogl_glElementPointerAPPLE, 2);
    rb_define_method(*pmROGL, "glDrawElementArrayAPPLE", rogl_glDrawElementArrayAPPLE, 3);
    rb_define_method(*pmROGL, "glDrawRangeElementArrayAPPLE", rogl_glDrawRangeElementArrayAPPLE, 5);
    rb_define_method(*pmROGL, "glMultiDrawElementArrayAPPLE", rogl_glMultiDrawElementArrayAPPLE, 4);
    rb_define_method(*pmROGL, "glMultiDrawRangeElementArrayAPPLE", rogl_glMultiDrawRangeElementArrayAPPLE, 6);
    rb_define_method(*pmROGL, "glGenFencesAPPLE", rogl_glGenFencesAPPLE, 2);
    rb_define_method(*pmROGL, "glDeleteFencesAPPLE", rogl_glDeleteFencesAPPLE, 2);
    rb_define_method(*pmROGL, "glSetFenceAPPLE", rogl_glSetFenceAPPLE, 1);
    rb_define_method(*pmROGL, "glIsFenceAPPLE", rogl_glIsFenceAPPLE, 1);
    rb_define_method(*pmROGL, "glTestFenceAPPLE", rogl_glTestFenceAPPLE, 1);
    rb_define_method(*pmROGL, "glFinishFenceAPPLE", rogl_glFinishFenceAPPLE, 1);
    rb_define_method(*pmROGL, "glTestObjectAPPLE", rogl_glTestObjectAPPLE, 2);
    rb_define_method(*pmROGL, "glFinishObjectAPPLE", rogl_glFinishObjectAPPLE, 2);
    rb_define_method(*pmROGL, "glBufferParameteriAPPLE", rogl_glBufferParameteriAPPLE, 3);
    rb_define_method(*pmROGL, "glFlushMappedBufferRangeAPPLE", rogl_glFlushMappedBufferRangeAPPLE, 3);
    rb_define_method(*pmROGL, "glObjectPurgeableAPPLE", rogl_glObjectPurgeableAPPLE, 3);
    rb_define_method(*pmROGL, "glObjectUnpurgeableAPPLE", rogl_glObjectUnpurgeableAPPLE, 3);
    rb_define_method(*pmROGL, "glGetObjectParameterivAPPLE", rogl_glGetObjectParameterivAPPLE, 4);
    rb_define_method(*pmROGL, "glTextureRangeAPPLE", rogl_glTextureRangeAPPLE, 3);
    rb_define_method(*pmROGL, "glGetTexParameterPointervAPPLE", rogl_glGetTexParameterPointervAPPLE, 3);
    rb_define_method(*pmROGL, "glBindVertexArrayAPPLE", rogl_glBindVertexArrayAPPLE, 1);
    rb_define_method(*pmROGL, "glDeleteVertexArraysAPPLE", rogl_glDeleteVertexArraysAPPLE, 2);
    rb_define_method(*pmROGL, "glGenVertexArraysAPPLE", rogl_glGenVertexArraysAPPLE, 2);
    rb_define_method(*pmROGL, "glIsVertexArrayAPPLE", rogl_glIsVertexArrayAPPLE, 1);
    rb_define_method(*pmROGL, "glVertexArrayRangeAPPLE", rogl_glVertexArrayRangeAPPLE, 2);
    rb_define_method(*pmROGL, "glFlushVertexArrayRangeAPPLE", rogl_glFlushVertexArrayRangeAPPLE, 2);
    rb_define_method(*pmROGL, "glVertexArrayParameteriAPPLE", rogl_glVertexArrayParameteriAPPLE, 2);
    rb_define_method(*pmROGL, "glEnableVertexAttribAPPLE", rogl_glEnableVertexAttribAPPLE, 2);
    rb_define_method(*pmROGL, "glDisableVertexAttribAPPLE", rogl_glDisableVertexAttribAPPLE, 2);
    rb_define_method(*pmROGL, "glIsVertexAttribEnabledAPPLE", rogl_glIsVertexAttribEnabledAPPLE, 2);
    rb_define_method(*pmROGL, "glMapVertexAttrib1dAPPLE", rogl_glMapVertexAttrib1dAPPLE, 7);
    rb_define_method(*pmROGL, "glMapVertexAttrib1fAPPLE", rogl_glMapVertexAttrib1fAPPLE, 7);
    rb_define_method(*pmROGL, "glMapVertexAttrib2dAPPLE", rogl_glMapVertexAttrib2dAPPLE, 11);
    rb_define_method(*pmROGL, "glMapVertexAttrib2fAPPLE", rogl_glMapVertexAttrib2fAPPLE, 11);
    rb_define_method(*pmROGL, "glPrimitiveBoundingBoxARB", rogl_glPrimitiveBoundingBoxARB, 8);
    rb_define_method(*pmROGL, "glGetTextureHandleARB", rogl_glGetTextureHandleARB, 1);
    rb_define_method(*pmROGL, "glGetTextureSamplerHandleARB", rogl_glGetTextureSamplerHandleARB, 2);
    rb_define_method(*pmROGL, "glMakeTextureHandleResidentARB", rogl_glMakeTextureHandleResidentARB, 1);
    rb_define_method(*pmROGL, "glMakeTextureHandleNonResidentARB", rogl_glMakeTextureHandleNonResidentARB, 1);
    rb_define_method(*pmROGL, "glGetImageHandleARB", rogl_glGetImageHandleARB, 5);
    rb_define_method(*pmROGL, "glMakeImageHandleResidentARB", rogl_glMakeImageHandleResidentARB, 2);
    rb_define_method(*pmROGL, "glMakeImageHandleNonResidentARB", rogl_glMakeImageHandleNonResidentARB, 1);
    rb_define_method(*pmROGL, "glUniformHandleui64ARB", rogl_glUniformHandleui64ARB, 2);
    rb_define_method(*pmROGL, "glUniformHandleui64vARB", rogl_glUniformHandleui64vARB, 3);
    rb_define_method(*pmROGL, "glProgramUniformHandleui64ARB", rogl_glProgramUniformHandleui64ARB, 3);
    rb_define_method(*pmROGL, "glProgramUniformHandleui64vARB", rogl_glProgramUniformHandleui64vARB, 4);
    rb_define_method(*pmROGL, "glIsTextureHandleResidentARB", rogl_glIsTextureHandleResidentARB, 1);
    rb_define_method(*pmROGL, "glIsImageHandleResidentARB", rogl_glIsImageHandleResidentARB, 1);
    rb_define_method(*pmROGL, "glVertexAttribL1ui64ARB", rogl_glVertexAttribL1ui64ARB, 2);
    rb_define_method(*pmROGL, "glVertexAttribL1ui64vARB", rogl_glVertexAttribL1ui64vARB, 2);
    rb_define_method(*pmROGL, "glGetVertexAttribLui64vARB", rogl_glGetVertexAttribLui64vARB, 3);
    rb_define_method(*pmROGL, "glCreateSyncFromCLeventARB", rogl_glCreateSyncFromCLeventARB, 3);
    rb_define_method(*pmROGL, "glClampColorARB", rogl_glClampColorARB, 2);
    rb_define_method(*pmROGL, "glDispatchComputeGroupSizeARB", rogl_glDispatchComputeGroupSizeARB, 6);
    rb_define_method(*pmROGL, "glDebugMessageControlARB", rogl_glDebugMessageControlARB, 6);
    rb_define_method(*pmROGL, "glDebugMessageInsertARB", rogl_glDebugMessageInsertARB, 6);
    rb_define_method(*pmROGL, "glDebugMessageCallbackARB", rogl_glDebugMessageCallbackARB, 2);
    rb_define_method(*pmROGL, "glGetDebugMessageLogARB", rogl_glGetDebugMessageLogARB, 8);
    rb_define_method(*pmROGL, "glDrawBuffersARB", rogl_glDrawBuffersARB, 2);
    rb_define_method(*pmROGL, "glBlendEquationiARB", rogl_glBlendEquationiARB, 2);
    rb_define_method(*pmROGL, "glBlendEquationSeparateiARB", rogl_glBlendEquationSeparateiARB, 3);
    rb_define_method(*pmROGL, "glBlendFunciARB", rogl_glBlendFunciARB, 3);
    rb_define_method(*pmROGL, "glBlendFuncSeparateiARB", rogl_glBlendFuncSeparateiARB, 5);
    rb_define_method(*pmROGL, "glDrawArraysInstancedARB", rogl_glDrawArraysInstancedARB, 4);
    rb_define_method(*pmROGL, "glDrawElementsInstancedARB", rogl_glDrawElementsInstancedARB, 5);
    rb_define_method(*pmROGL, "glProgramParameteriARB", rogl_glProgramParameteriARB, 3);
    rb_define_method(*pmROGL, "glFramebufferTextureARB", rogl_glFramebufferTextureARB, 4);
    rb_define_method(*pmROGL, "glFramebufferTextureLayerARB", rogl_glFramebufferTextureLayerARB, 5);
    rb_define_method(*pmROGL, "glFramebufferTextureFaceARB", rogl_glFramebufferTextureFaceARB, 5);
    rb_define_method(*pmROGL, "glUniform1i64ARB", rogl_glUniform1i64ARB, 2);
    rb_define_method(*pmROGL, "glUniform2i64ARB", rogl_glUniform2i64ARB, 3);
    rb_define_method(*pmROGL, "glUniform3i64ARB", rogl_glUniform3i64ARB, 4);
    rb_define_method(*pmROGL, "glUniform4i64ARB", rogl_glUniform4i64ARB, 5);
    rb_define_method(*pmROGL, "glUniform1i64vARB", rogl_glUniform1i64vARB, 3);
    rb_define_method(*pmROGL, "glUniform2i64vARB", rogl_glUniform2i64vARB, 3);
    rb_define_method(*pmROGL, "glUniform3i64vARB", rogl_glUniform3i64vARB, 3);
    rb_define_method(*pmROGL, "glUniform4i64vARB", rogl_glUniform4i64vARB, 3);
    rb_define_method(*pmROGL, "glUniform1ui64ARB", rogl_glUniform1ui64ARB, 2);
    rb_define_method(*pmROGL, "glUniform2ui64ARB", rogl_glUniform2ui64ARB, 3);
    rb_define_method(*pmROGL, "glUniform3ui64ARB", rogl_glUniform3ui64ARB, 4);
    rb_define_method(*pmROGL, "glUniform4ui64ARB", rogl_glUniform4ui64ARB, 5);
    rb_define_method(*pmROGL, "glUniform1ui64vARB", rogl_glUniform1ui64vARB, 3);
    rb_define_method(*pmROGL, "glUniform2ui64vARB", rogl_glUniform2ui64vARB, 3);
    rb_define_method(*pmROGL, "glUniform3ui64vARB", rogl_glUniform3ui64vARB, 3);
    rb_define_method(*pmROGL, "glUniform4ui64vARB", rogl_glUniform4ui64vARB, 3);
    rb_define_method(*pmROGL, "glGetUniformi64vARB", rogl_glGetUniformi64vARB, 3);
    rb_define_method(*pmROGL, "glGetUniformui64vARB", rogl_glGetUniformui64vARB, 3);
    rb_define_method(*pmROGL, "glGetnUniformi64vARB", rogl_glGetnUniformi64vARB, 4);
    rb_define_method(*pmROGL, "glGetnUniformui64vARB", rogl_glGetnUniformui64vARB, 4);
    rb_define_method(*pmROGL, "glProgramUniform1i64ARB", rogl_glProgramUniform1i64ARB, 3);
    rb_define_method(*pmROGL, "glProgramUniform2i64ARB", rogl_glProgramUniform2i64ARB, 4);
    rb_define_method(*pmROGL, "glProgramUniform3i64ARB", rogl_glProgramUniform3i64ARB, 5);
    rb_define_method(*pmROGL, "glProgramUniform4i64ARB", rogl_glProgramUniform4i64ARB, 6);
    rb_define_method(*pmROGL, "glProgramUniform1i64vARB", rogl_glProgramUniform1i64vARB, 4);
    rb_define_method(*pmROGL, "glProgramUniform2i64vARB", rogl_glProgramUniform2i64vARB, 4);
    rb_define_method(*pmROGL, "glProgramUniform3i64vARB", rogl_glProgramUniform3i64vARB, 4);
    rb_define_method(*pmROGL, "glProgramUniform4i64vARB", rogl_glProgramUniform4i64vARB, 4);
    rb_define_method(*pmROGL, "glProgramUniform1ui64ARB", rogl_glProgramUniform1ui64ARB, 3);
    rb_define_method(*pmROGL, "glProgramUniform2ui64ARB", rogl_glProgramUniform2ui64ARB, 4);
    rb_define_method(*pmROGL, "glProgramUniform3ui64ARB", rogl_glProgramUniform3ui64ARB, 5);
    rb_define_method(*pmROGL, "glProgramUniform4ui64ARB", rogl_glProgramUniform4ui64ARB, 6);
    rb_define_method(*pmROGL, "glProgramUniform1ui64vARB", rogl_glProgramUniform1ui64vARB, 4);
    rb_define_method(*pmROGL, "glProgramUniform2ui64vARB", rogl_glProgramUniform2ui64vARB, 4);
    rb_define_method(*pmROGL, "glProgramUniform3ui64vARB", rogl_glProgramUniform3ui64vARB, 4);
    rb_define_method(*pmROGL, "glProgramUniform4ui64vARB", rogl_glProgramUniform4ui64vARB, 4);
    rb_define_method(*pmROGL, "glColorTable", rogl_glColorTable, 6);
    rb_define_method(*pmROGL, "glColorTableParameterfv", rogl_glColorTableParameterfv, 3);
    rb_define_method(*pmROGL, "glColorTableParameteriv", rogl_glColorTableParameteriv, 3);
    rb_define_method(*pmROGL, "glCopyColorTable", rogl_glCopyColorTable, 5);
    rb_define_method(*pmROGL, "glGetColorTable", rogl_glGetColorTable, 4);
    rb_define_method(*pmROGL, "glGetColorTableParameterfv", rogl_glGetColorTableParameterfv, 3);
    rb_define_method(*pmROGL, "glGetColorTableParameteriv", rogl_glGetColorTableParameteriv, 3);
    rb_define_method(*pmROGL, "glColorSubTable", rogl_glColorSubTable, 6);
    rb_define_method(*pmROGL, "glCopyColorSubTable", rogl_glCopyColorSubTable, 5);
    rb_define_method(*pmROGL, "glConvolutionFilter1D", rogl_glConvolutionFilter1D, 6);
    rb_define_method(*pmROGL, "glConvolutionFilter2D", rogl_glConvolutionFilter2D, 7);
    rb_define_method(*pmROGL, "glConvolutionParameterf", rogl_glConvolutionParameterf, 3);
    rb_define_method(*pmROGL, "glConvolutionParameterfv", rogl_glConvolutionParameterfv, 3);
    rb_define_method(*pmROGL, "glConvolutionParameteri", rogl_glConvolutionParameteri, 3);
    rb_define_method(*pmROGL, "glConvolutionParameteriv", rogl_glConvolutionParameteriv, 3);
    rb_define_method(*pmROGL, "glCopyConvolutionFilter1D", rogl_glCopyConvolutionFilter1D, 5);
    rb_define_method(*pmROGL, "glCopyConvolutionFilter2D", rogl_glCopyConvolutionFilter2D, 6);
    rb_define_method(*pmROGL, "glGetConvolutionFilter", rogl_glGetConvolutionFilter, 4);
    rb_define_method(*pmROGL, "glGetConvolutionParameterfv", rogl_glGetConvolutionParameterfv, 3);
    rb_define_method(*pmROGL, "glGetConvolutionParameteriv", rogl_glGetConvolutionParameteriv, 3);
    rb_define_method(*pmROGL, "glGetSeparableFilter", rogl_glGetSeparableFilter, 6);
    rb_define_method(*pmROGL, "glSeparableFilter2D", rogl_glSeparableFilter2D, 8);
    rb_define_method(*pmROGL, "glGetHistogram", rogl_glGetHistogram, 5);
    rb_define_method(*pmROGL, "glGetHistogramParameterfv", rogl_glGetHistogramParameterfv, 3);
    rb_define_method(*pmROGL, "glGetHistogramParameteriv", rogl_glGetHistogramParameteriv, 3);
    rb_define_method(*pmROGL, "glGetMinmax", rogl_glGetMinmax, 5);
    rb_define_method(*pmROGL, "glGetMinmaxParameterfv", rogl_glGetMinmaxParameterfv, 3);
    rb_define_method(*pmROGL, "glGetMinmaxParameteriv", rogl_glGetMinmaxParameteriv, 3);
    rb_define_method(*pmROGL, "glHistogram", rogl_glHistogram, 4);
    rb_define_method(*pmROGL, "glMinmax", rogl_glMinmax, 3);
    rb_define_method(*pmROGL, "glResetHistogram", rogl_glResetHistogram, 1);
    rb_define_method(*pmROGL, "glResetMinmax", rogl_glResetMinmax, 1);
    rb_define_method(*pmROGL, "glMultiDrawArraysIndirectCountARB", rogl_glMultiDrawArraysIndirectCountARB, 5);
    rb_define_method(*pmROGL, "glMultiDrawElementsIndirectCountARB", rogl_glMultiDrawElementsIndirectCountARB, 6);
    rb_define_method(*pmROGL, "glVertexAttribDivisorARB", rogl_glVertexAttribDivisorARB, 2);
    rb_define_method(*pmROGL, "glCurrentPaletteMatrixARB", rogl_glCurrentPaletteMatrixARB, 1);
    rb_define_method(*pmROGL, "glMatrixIndexubvARB", rogl_glMatrixIndexubvARB, 2);
    rb_define_method(*pmROGL, "glMatrixIndexusvARB", rogl_glMatrixIndexusvARB, 2);
    rb_define_method(*pmROGL, "glMatrixIndexuivARB", rogl_glMatrixIndexuivARB, 2);
    rb_define_method(*pmROGL, "glMatrixIndexPointerARB", rogl_glMatrixIndexPointerARB, 4);
    rb_define_method(*pmROGL, "glSampleCoverageARB", rogl_glSampleCoverageARB, 2);
    rb_define_method(*pmROGL, "glActiveTextureARB", rogl_glActiveTextureARB, 1);
    rb_define_method(*pmROGL, "glClientActiveTextureARB", rogl_glClientActiveTextureARB, 1);
    rb_define_method(*pmROGL, "glMultiTexCoord1dARB", rogl_glMultiTexCoord1dARB, 2);
    rb_define_method(*pmROGL, "glMultiTexCoord1dvARB", rogl_glMultiTexCoord1dvARB, 2);
    rb_define_method(*pmROGL, "glMultiTexCoord1fARB", rogl_glMultiTexCoord1fARB, 2);
    rb_define_method(*pmROGL, "glMultiTexCoord1fvARB", rogl_glMultiTexCoord1fvARB, 2);
    rb_define_method(*pmROGL, "glMultiTexCoord1iARB", rogl_glMultiTexCoord1iARB, 2);
    rb_define_method(*pmROGL, "glMultiTexCoord1ivARB", rogl_glMultiTexCoord1ivARB, 2);
    rb_define_method(*pmROGL, "glMultiTexCoord1sARB", rogl_glMultiTexCoord1sARB, 2);
    rb_define_method(*pmROGL, "glMultiTexCoord1svARB", rogl_glMultiTexCoord1svARB, 2);
    rb_define_method(*pmROGL, "glMultiTexCoord2dARB", rogl_glMultiTexCoord2dARB, 3);
    rb_define_method(*pmROGL, "glMultiTexCoord2dvARB", rogl_glMultiTexCoord2dvARB, 2);
    rb_define_method(*pmROGL, "glMultiTexCoord2fARB", rogl_glMultiTexCoord2fARB, 3);
    rb_define_method(*pmROGL, "glMultiTexCoord2fvARB", rogl_glMultiTexCoord2fvARB, 2);
    rb_define_method(*pmROGL, "glMultiTexCoord2iARB", rogl_glMultiTexCoord2iARB, 3);
    rb_define_method(*pmROGL, "glMultiTexCoord2ivARB", rogl_glMultiTexCoord2ivARB, 2);
    rb_define_method(*pmROGL, "glMultiTexCoord2sARB", rogl_glMultiTexCoord2sARB, 3);
    rb_define_method(*pmROGL, "glMultiTexCoord2svARB", rogl_glMultiTexCoord2svARB, 2);
    rb_define_method(*pmROGL, "glMultiTexCoord3dARB", rogl_glMultiTexCoord3dARB, 4);
    rb_define_method(*pmROGL, "glMultiTexCoord3dvARB", rogl_glMultiTexCoord3dvARB, 2);
    rb_define_method(*pmROGL, "glMultiTexCoord3fARB", rogl_glMultiTexCoord3fARB, 4);
    rb_define_method(*pmROGL, "glMultiTexCoord3fvARB", rogl_glMultiTexCoord3fvARB, 2);
    rb_define_method(*pmROGL, "glMultiTexCoord3iARB", rogl_glMultiTexCoord3iARB, 4);
    rb_define_method(*pmROGL, "glMultiTexCoord3ivARB", rogl_glMultiTexCoord3ivARB, 2);
    rb_define_method(*pmROGL, "glMultiTexCoord3sARB", rogl_glMultiTexCoord3sARB, 4);
    rb_define_method(*pmROGL, "glMultiTexCoord3svARB", rogl_glMultiTexCoord3svARB, 2);
    rb_define_method(*pmROGL, "glMultiTexCoord4dARB", rogl_glMultiTexCoord4dARB, 5);
    rb_define_method(*pmROGL, "glMultiTexCoord4dvARB", rogl_glMultiTexCoord4dvARB, 2);
    rb_define_method(*pmROGL, "glMultiTexCoord4fARB", rogl_glMultiTexCoord4fARB, 5);
    rb_define_method(*pmROGL, "glMultiTexCoord4fvARB", rogl_glMultiTexCoord4fvARB, 2);
    rb_define_method(*pmROGL, "glMultiTexCoord4iARB", rogl_glMultiTexCoord4iARB, 5);
    rb_define_method(*pmROGL, "glMultiTexCoord4ivARB", rogl_glMultiTexCoord4ivARB, 2);
    rb_define_method(*pmROGL, "glMultiTexCoord4sARB", rogl_glMultiTexCoord4sARB, 5);
    rb_define_method(*pmROGL, "glMultiTexCoord4svARB", rogl_glMultiTexCoord4svARB, 2);
    rb_define_method(*pmROGL, "glGenQueriesARB", rogl_glGenQueriesARB, 2);
    rb_define_method(*pmROGL, "glDeleteQueriesARB", rogl_glDeleteQueriesARB, 2);
    rb_define_method(*pmROGL, "glIsQueryARB", rogl_glIsQueryARB, 1);
    rb_define_method(*pmROGL, "glBeginQueryARB", rogl_glBeginQueryARB, 2);
    rb_define_method(*pmROGL, "glEndQueryARB", rogl_glEndQueryARB, 1);
    rb_define_method(*pmROGL, "glGetQueryivARB", rogl_glGetQueryivARB, 3);
    rb_define_method(*pmROGL, "glGetQueryObjectivARB", rogl_glGetQueryObjectivARB, 3);
    rb_define_method(*pmROGL, "glGetQueryObjectuivARB", rogl_glGetQueryObjectuivARB, 3);
    rb_define_method(*pmROGL, "glMaxShaderCompilerThreadsARB", rogl_glMaxShaderCompilerThreadsARB, 1);
    rb_define_method(*pmROGL, "glPointParameterfARB", rogl_glPointParameterfARB, 2);
    rb_define_method(*pmROGL, "glPointParameterfvARB", rogl_glPointParameterfvARB, 2);
    rb_define_method(*pmROGL, "glGetGraphicsResetStatusARB", rogl_glGetGraphicsResetStatusARB, 0);
    rb_define_method(*pmROGL, "glGetnTexImageARB", rogl_glGetnTexImageARB, 6);
    rb_define_method(*pmROGL, "glReadnPixelsARB", rogl_glReadnPixelsARB, 8);
    rb_define_method(*pmROGL, "glGetnCompressedTexImageARB", rogl_glGetnCompressedTexImageARB, 4);
    rb_define_method(*pmROGL, "glGetnUniformfvARB", rogl_glGetnUniformfvARB, 4);
    rb_define_method(*pmROGL, "glGetnUniformivARB", rogl_glGetnUniformivARB, 4);
    rb_define_method(*pmROGL, "glGetnUniformuivARB", rogl_glGetnUniformuivARB, 4);
    rb_define_method(*pmROGL, "glGetnUniformdvARB", rogl_glGetnUniformdvARB, 4);
    rb_define_method(*pmROGL, "glGetnMapdvARB", rogl_glGetnMapdvARB, 4);
    rb_define_method(*pmROGL, "glGetnMapfvARB", rogl_glGetnMapfvARB, 4);
    rb_define_method(*pmROGL, "glGetnMapivARB", rogl_glGetnMapivARB, 4);
    rb_define_method(*pmROGL, "glGetnPixelMapfvARB", rogl_glGetnPixelMapfvARB, 3);
    rb_define_method(*pmROGL, "glGetnPixelMapuivARB", rogl_glGetnPixelMapuivARB, 3);
    rb_define_method(*pmROGL, "glGetnPixelMapusvARB", rogl_glGetnPixelMapusvARB, 3);
    rb_define_method(*pmROGL, "glGetnPolygonStippleARB", rogl_glGetnPolygonStippleARB, 2);
    rb_define_method(*pmROGL, "glGetnColorTableARB", rogl_glGetnColorTableARB, 5);
    rb_define_method(*pmROGL, "glGetnConvolutionFilterARB", rogl_glGetnConvolutionFilterARB, 5);
    rb_define_method(*pmROGL, "glGetnSeparableFilterARB", rogl_glGetnSeparableFilterARB, 8);
    rb_define_method(*pmROGL, "glGetnHistogramARB", rogl_glGetnHistogramARB, 6);
    rb_define_method(*pmROGL, "glGetnMinmaxARB", rogl_glGetnMinmaxARB, 6);
    rb_define_method(*pmROGL, "glFramebufferSampleLocationsfvARB", rogl_glFramebufferSampleLocationsfvARB, 4);
    rb_define_method(*pmROGL, "glNamedFramebufferSampleLocationsfvARB", rogl_glNamedFramebufferSampleLocationsfvARB, 4);
    rb_define_method(*pmROGL, "glEvaluateDepthValuesARB", rogl_glEvaluateDepthValuesARB, 0);
    rb_define_method(*pmROGL, "glMinSampleShadingARB", rogl_glMinSampleShadingARB, 1);
    rb_define_method(*pmROGL, "glDeleteObjectARB", rogl_glDeleteObjectARB, 1);
    rb_define_method(*pmROGL, "glGetHandleARB", rogl_glGetHandleARB, 1);
    rb_define_method(*pmROGL, "glDetachObjectARB", rogl_glDetachObjectARB, 2);
    rb_define_method(*pmROGL, "glCreateShaderObjectARB", rogl_glCreateShaderObjectARB, 1);
    rb_define_method(*pmROGL, "glShaderSourceARB", rogl_glShaderSourceARB, 4);
    rb_define_method(*pmROGL, "glCompileShaderARB", rogl_glCompileShaderARB, 1);
    rb_define_method(*pmROGL, "glCreateProgramObjectARB", rogl_glCreateProgramObjectARB, 0);
    rb_define_method(*pmROGL, "glAttachObjectARB", rogl_glAttachObjectARB, 2);
    rb_define_method(*pmROGL, "glLinkProgramARB", rogl_glLinkProgramARB, 1);
    rb_define_method(*pmROGL, "glUseProgramObjectARB", rogl_glUseProgramObjectARB, 1);
    rb_define_method(*pmROGL, "glValidateProgramARB", rogl_glValidateProgramARB, 1);
    rb_define_method(*pmROGL, "glUniform1fARB", rogl_glUniform1fARB, 2);
    rb_define_method(*pmROGL, "glUniform2fARB", rogl_glUniform2fARB, 3);
    rb_define_method(*pmROGL, "glUniform3fARB", rogl_glUniform3fARB, 4);
    rb_define_method(*pmROGL, "glUniform4fARB", rogl_glUniform4fARB, 5);
    rb_define_method(*pmROGL, "glUniform1iARB", rogl_glUniform1iARB, 2);
    rb_define_method(*pmROGL, "glUniform2iARB", rogl_glUniform2iARB, 3);
    rb_define_method(*pmROGL, "glUniform3iARB", rogl_glUniform3iARB, 4);
    rb_define_method(*pmROGL, "glUniform4iARB", rogl_glUniform4iARB, 5);
    rb_define_method(*pmROGL, "glUniform1fvARB", rogl_glUniform1fvARB, 3);
    rb_define_method(*pmROGL, "glUniform2fvARB", rogl_glUniform2fvARB, 3);
    rb_define_method(*pmROGL, "glUniform3fvARB", rogl_glUniform3fvARB, 3);
    rb_define_method(*pmROGL, "glUniform4fvARB", rogl_glUniform4fvARB, 3);
    rb_define_method(*pmROGL, "glUniform1ivARB", rogl_glUniform1ivARB, 3);
    rb_define_method(*pmROGL, "glUniform2ivARB", rogl_glUniform2ivARB, 3);
    rb_define_method(*pmROGL, "glUniform3ivARB", rogl_glUniform3ivARB, 3);
    rb_define_method(*pmROGL, "glUniform4ivARB", rogl_glUniform4ivARB, 3);
    rb_define_method(*pmROGL, "glUniformMatrix2fvARB", rogl_glUniformMatrix2fvARB, 4);
    rb_define_method(*pmROGL, "glUniformMatrix3fvARB", rogl_glUniformMatrix3fvARB, 4);
    rb_define_method(*pmROGL, "glUniformMatrix4fvARB", rogl_glUniformMatrix4fvARB, 4);
    rb_define_method(*pmROGL, "glGetObjectParameterfvARB", rogl_glGetObjectParameterfvARB, 3);
    rb_define_method(*pmROGL, "glGetObjectParameterivARB", rogl_glGetObjectParameterivARB, 3);
    rb_define_method(*pmROGL, "glGetInfoLogARB", rogl_glGetInfoLogARB, 4);
    rb_define_method(*pmROGL, "glGetAttachedObjectsARB", rogl_glGetAttachedObjectsARB, 4);
    rb_define_method(*pmROGL, "glGetUniformLocationARB", rogl_glGetUniformLocationARB, 2);
    rb_define_method(*pmROGL, "glGetActiveUniformARB", rogl_glGetActiveUniformARB, 7);
    rb_define_method(*pmROGL, "glGetUniformfvARB", rogl_glGetUniformfvARB, 3);
    rb_define_method(*pmROGL, "glGetUniformivARB", rogl_glGetUniformivARB, 3);
    rb_define_method(*pmROGL, "glGetShaderSourceARB", rogl_glGetShaderSourceARB, 4);
    rb_define_method(*pmROGL, "glNamedStringARB", rogl_glNamedStringARB, 5);
    rb_define_method(*pmROGL, "glDeleteNamedStringARB", rogl_glDeleteNamedStringARB, 2);
    rb_define_method(*pmROGL, "glCompileShaderIncludeARB", rogl_glCompileShaderIncludeARB, 4);
    rb_define_method(*pmROGL, "glIsNamedStringARB", rogl_glIsNamedStringARB, 2);
    rb_define_method(*pmROGL, "glGetNamedStringARB", rogl_glGetNamedStringARB, 5);
    rb_define_method(*pmROGL, "glGetNamedStringivARB", rogl_glGetNamedStringivARB, 4);
    rb_define_method(*pmROGL, "glBufferPageCommitmentARB", rogl_glBufferPageCommitmentARB, 4);
    rb_define_method(*pmROGL, "glNamedBufferPageCommitmentEXT", rogl_glNamedBufferPageCommitmentEXT, 4);
    rb_define_method(*pmROGL, "glNamedBufferPageCommitmentARB", rogl_glNamedBufferPageCommitmentARB, 4);
    rb_define_method(*pmROGL, "glTexPageCommitmentARB", rogl_glTexPageCommitmentARB, 9);
    rb_define_method(*pmROGL, "glTexBufferARB", rogl_glTexBufferARB, 3);
    rb_define_method(*pmROGL, "glCompressedTexImage3DARB", rogl_glCompressedTexImage3DARB, 9);
    rb_define_method(*pmROGL, "glCompressedTexImage2DARB", rogl_glCompressedTexImage2DARB, 8);
    rb_define_method(*pmROGL, "glCompressedTexImage1DARB", rogl_glCompressedTexImage1DARB, 7);
    rb_define_method(*pmROGL, "glCompressedTexSubImage3DARB", rogl_glCompressedTexSubImage3DARB, 11);
    rb_define_method(*pmROGL, "glCompressedTexSubImage2DARB", rogl_glCompressedTexSubImage2DARB, 9);
    rb_define_method(*pmROGL, "glCompressedTexSubImage1DARB", rogl_glCompressedTexSubImage1DARB, 7);
    rb_define_method(*pmROGL, "glGetCompressedTexImageARB", rogl_glGetCompressedTexImageARB, 3);
    rb_define_method(*pmROGL, "glLoadTransposeMatrixfARB", rogl_glLoadTransposeMatrixfARB, 1);
    rb_define_method(*pmROGL, "glLoadTransposeMatrixdARB", rogl_glLoadTransposeMatrixdARB, 1);
    rb_define_method(*pmROGL, "glMultTransposeMatrixfARB", rogl_glMultTransposeMatrixfARB, 1);
    rb_define_method(*pmROGL, "glMultTransposeMatrixdARB", rogl_glMultTransposeMatrixdARB, 1);
    rb_define_method(*pmROGL, "glWeightbvARB", rogl_glWeightbvARB, 2);
    rb_define_method(*pmROGL, "glWeightsvARB", rogl_glWeightsvARB, 2);
    rb_define_method(*pmROGL, "glWeightivARB", rogl_glWeightivARB, 2);
    rb_define_method(*pmROGL, "glWeightfvARB", rogl_glWeightfvARB, 2);
    rb_define_method(*pmROGL, "glWeightdvARB", rogl_glWeightdvARB, 2);
    rb_define_method(*pmROGL, "glWeightubvARB", rogl_glWeightubvARB, 2);
    rb_define_method(*pmROGL, "glWeightusvARB", rogl_glWeightusvARB, 2);
    rb_define_method(*pmROGL, "glWeightuivARB", rogl_glWeightuivARB, 2);
    rb_define_method(*pmROGL, "glWeightPointerARB", rogl_glWeightPointerARB, 4);
    rb_define_method(*pmROGL, "glVertexBlendARB", rogl_glVertexBlendARB, 1);
    rb_define_method(*pmROGL, "glBindBufferARB", rogl_glBindBufferARB, 2);
    rb_define_method(*pmROGL, "glDeleteBuffersARB", rogl_glDeleteBuffersARB, 2);
    rb_define_method(*pmROGL, "glGenBuffersARB", rogl_glGenBuffersARB, 2);
    rb_define_method(*pmROGL, "glIsBufferARB", rogl_glIsBufferARB, 1);
    rb_define_method(*pmROGL, "glBufferDataARB", rogl_glBufferDataARB, 4);
    rb_define_method(*pmROGL, "glBufferSubDataARB", rogl_glBufferSubDataARB, 4);
    rb_define_method(*pmROGL, "glGetBufferSubDataARB", rogl_glGetBufferSubDataARB, 4);
    rb_define_method(*pmROGL, "glMapBufferARB", rogl_glMapBufferARB, 2);
    rb_define_method(*pmROGL, "glUnmapBufferARB", rogl_glUnmapBufferARB, 1);
    rb_define_method(*pmROGL, "glGetBufferParameterivARB", rogl_glGetBufferParameterivARB, 3);
    rb_define_method(*pmROGL, "glGetBufferPointervARB", rogl_glGetBufferPointervARB, 3);
    rb_define_method(*pmROGL, "glBindAttribLocationARB", rogl_glBindAttribLocationARB, 3);
    rb_define_method(*pmROGL, "glGetActiveAttribARB", rogl_glGetActiveAttribARB, 7);
    rb_define_method(*pmROGL, "glGetAttribLocationARB", rogl_glGetAttribLocationARB, 2);
    rb_define_method(*pmROGL, "glWindowPos2dARB", rogl_glWindowPos2dARB, 2);
    rb_define_method(*pmROGL, "glWindowPos2dvARB", rogl_glWindowPos2dvARB, 1);
    rb_define_method(*pmROGL, "glWindowPos2fARB", rogl_glWindowPos2fARB, 2);
    rb_define_method(*pmROGL, "glWindowPos2fvARB", rogl_glWindowPos2fvARB, 1);
    rb_define_method(*pmROGL, "glWindowPos2iARB", rogl_glWindowPos2iARB, 2);
    rb_define_method(*pmROGL, "glWindowPos2ivARB", rogl_glWindowPos2ivARB, 1);
    rb_define_method(*pmROGL, "glWindowPos2sARB", rogl_glWindowPos2sARB, 2);
    rb_define_method(*pmROGL, "glWindowPos2svARB", rogl_glWindowPos2svARB, 1);
    rb_define_method(*pmROGL, "glWindowPos3dARB", rogl_glWindowPos3dARB, 3);
    rb_define_method(*pmROGL, "glWindowPos3dvARB", rogl_glWindowPos3dvARB, 1);
    rb_define_method(*pmROGL, "glWindowPos3fARB", rogl_glWindowPos3fARB, 3);
    rb_define_method(*pmROGL, "glWindowPos3fvARB", rogl_glWindowPos3fvARB, 1);
    rb_define_method(*pmROGL, "glWindowPos3iARB", rogl_glWindowPos3iARB, 3);
    rb_define_method(*pmROGL, "glWindowPos3ivARB", rogl_glWindowPos3ivARB, 1);
    rb_define_method(*pmROGL, "glWindowPos3sARB", rogl_glWindowPos3sARB, 3);
    rb_define_method(*pmROGL, "glWindowPos3svARB", rogl_glWindowPos3svARB, 1);
    rb_define_method(*pmROGL, "glDrawBuffersATI", rogl_glDrawBuffersATI, 2);
    rb_define_method(*pmROGL, "glElementPointerATI", rogl_glElementPointerATI, 2);
    rb_define_method(*pmROGL, "glDrawElementArrayATI", rogl_glDrawElementArrayATI, 2);
    rb_define_method(*pmROGL, "glDrawRangeElementArrayATI", rogl_glDrawRangeElementArrayATI, 4);
    rb_define_method(*pmROGL, "glTexBumpParameterivATI", rogl_glTexBumpParameterivATI, 2);
    rb_define_method(*pmROGL, "glTexBumpParameterfvATI", rogl_glTexBumpParameterfvATI, 2);
    rb_define_method(*pmROGL, "glGetTexBumpParameterivATI", rogl_glGetTexBumpParameterivATI, 2);
    rb_define_method(*pmROGL, "glGetTexBumpParameterfvATI", rogl_glGetTexBumpParameterfvATI, 2);
    rb_define_method(*pmROGL, "glGenFragmentShadersATI", rogl_glGenFragmentShadersATI, 1);
    rb_define_method(*pmROGL, "glBindFragmentShaderATI", rogl_glBindFragmentShaderATI, 1);
    rb_define_method(*pmROGL, "glDeleteFragmentShaderATI", rogl_glDeleteFragmentShaderATI, 1);
    rb_define_method(*pmROGL, "glBeginFragmentShaderATI", rogl_glBeginFragmentShaderATI, 0);
    rb_define_method(*pmROGL, "glEndFragmentShaderATI", rogl_glEndFragmentShaderATI, 0);
    rb_define_method(*pmROGL, "glPassTexCoordATI", rogl_glPassTexCoordATI, 3);
    rb_define_method(*pmROGL, "glSampleMapATI", rogl_glSampleMapATI, 3);
    rb_define_method(*pmROGL, "glColorFragmentOp1ATI", rogl_glColorFragmentOp1ATI, 7);
    rb_define_method(*pmROGL, "glColorFragmentOp2ATI", rogl_glColorFragmentOp2ATI, 10);
    rb_define_method(*pmROGL, "glColorFragmentOp3ATI", rogl_glColorFragmentOp3ATI, 13);
    rb_define_method(*pmROGL, "glAlphaFragmentOp1ATI", rogl_glAlphaFragmentOp1ATI, 6);
    rb_define_method(*pmROGL, "glAlphaFragmentOp2ATI", rogl_glAlphaFragmentOp2ATI, 9);
    rb_define_method(*pmROGL, "glAlphaFragmentOp3ATI", rogl_glAlphaFragmentOp3ATI, 12);
    rb_define_method(*pmROGL, "glSetFragmentShaderConstantATI", rogl_glSetFragmentShaderConstantATI, 2);
    rb_define_method(*pmROGL, "glMapObjectBufferATI", rogl_glMapObjectBufferATI, 1);
    rb_define_method(*pmROGL, "glUnmapObjectBufferATI", rogl_glUnmapObjectBufferATI, 1);
    rb_define_method(*pmROGL, "glPNTrianglesiATI", rogl_glPNTrianglesiATI, 2);
    rb_define_method(*pmROGL, "glPNTrianglesfATI", rogl_glPNTrianglesfATI, 2);
    rb_define_method(*pmROGL, "glStencilOpSeparateATI", rogl_glStencilOpSeparateATI, 4);
    rb_define_method(*pmROGL, "glStencilFuncSeparateATI", rogl_glStencilFuncSeparateATI, 4);
    rb_define_method(*pmROGL, "glNewObjectBufferATI", rogl_glNewObjectBufferATI, 3);
    rb_define_method(*pmROGL, "glIsObjectBufferATI", rogl_glIsObjectBufferATI, 1);
    rb_define_method(*pmROGL, "glUpdateObjectBufferATI", rogl_glUpdateObjectBufferATI, 5);
    rb_define_method(*pmROGL, "glGetObjectBufferfvATI", rogl_glGetObjectBufferfvATI, 3);
    rb_define_method(*pmROGL, "glGetObjectBufferivATI", rogl_glGetObjectBufferivATI, 3);
    rb_define_method(*pmROGL, "glFreeObjectBufferATI", rogl_glFreeObjectBufferATI, 1);
    rb_define_method(*pmROGL, "glArrayObjectATI", rogl_glArrayObjectATI, 6);
    rb_define_method(*pmROGL, "glGetArrayObjectfvATI", rogl_glGetArrayObjectfvATI, 3);
    rb_define_method(*pmROGL, "glGetArrayObjectivATI", rogl_glGetArrayObjectivATI, 3);
    rb_define_method(*pmROGL, "glVariantArrayObjectATI", rogl_glVariantArrayObjectATI, 5);
    rb_define_method(*pmROGL, "glGetVariantArrayObjectfvATI", rogl_glGetVariantArrayObjectfvATI, 3);
    rb_define_method(*pmROGL, "glGetVariantArrayObjectivATI", rogl_glGetVariantArrayObjectivATI, 3);
    rb_define_method(*pmROGL, "glVertexAttribArrayObjectATI", rogl_glVertexAttribArrayObjectATI, 7);
    rb_define_method(*pmROGL, "glGetVertexAttribArrayObjectfvATI", rogl_glGetVertexAttribArrayObjectfvATI, 3);
    rb_define_method(*pmROGL, "glGetVertexAttribArrayObjectivATI", rogl_glGetVertexAttribArrayObjectivATI, 3);
    rb_define_method(*pmROGL, "glVertexStream1sATI", rogl_glVertexStream1sATI, 2);
    rb_define_method(*pmROGL, "glVertexStream1svATI", rogl_glVertexStream1svATI, 2);
    rb_define_method(*pmROGL, "glVertexStream1iATI", rogl_glVertexStream1iATI, 2);
    rb_define_method(*pmROGL, "glVertexStream1ivATI", rogl_glVertexStream1ivATI, 2);
    rb_define_method(*pmROGL, "glVertexStream1fATI", rogl_glVertexStream1fATI, 2);
    rb_define_method(*pmROGL, "glVertexStream1fvATI", rogl_glVertexStream1fvATI, 2);
    rb_define_method(*pmROGL, "glVertexStream1dATI", rogl_glVertexStream1dATI, 2);
    rb_define_method(*pmROGL, "glVertexStream1dvATI", rogl_glVertexStream1dvATI, 2);
    rb_define_method(*pmROGL, "glVertexStream2sATI", rogl_glVertexStream2sATI, 3);
    rb_define_method(*pmROGL, "glVertexStream2svATI", rogl_glVertexStream2svATI, 2);
    rb_define_method(*pmROGL, "glVertexStream2iATI", rogl_glVertexStream2iATI, 3);
    rb_define_method(*pmROGL, "glVertexStream2ivATI", rogl_glVertexStream2ivATI, 2);
    rb_define_method(*pmROGL, "glVertexStream2fATI", rogl_glVertexStream2fATI, 3);
    rb_define_method(*pmROGL, "glVertexStream2fvATI", rogl_glVertexStream2fvATI, 2);
    rb_define_method(*pmROGL, "glVertexStream2dATI", rogl_glVertexStream2dATI, 3);
    rb_define_method(*pmROGL, "glVertexStream2dvATI", rogl_glVertexStream2dvATI, 2);
    rb_define_method(*pmROGL, "glVertexStream3sATI", rogl_glVertexStream3sATI, 4);
    rb_define_method(*pmROGL, "glVertexStream3svATI", rogl_glVertexStream3svATI, 2);
    rb_define_method(*pmROGL, "glVertexStream3iATI", rogl_glVertexStream3iATI, 4);
    rb_define_method(*pmROGL, "glVertexStream3ivATI", rogl_glVertexStream3ivATI, 2);
    rb_define_method(*pmROGL, "glVertexStream3fATI", rogl_glVertexStream3fATI, 4);
    rb_define_method(*pmROGL, "glVertexStream3fvATI", rogl_glVertexStream3fvATI, 2);
    rb_define_method(*pmROGL, "glVertexStream3dATI", rogl_glVertexStream3dATI, 4);
    rb_define_method(*pmROGL, "glVertexStream3dvATI", rogl_glVertexStream3dvATI, 2);
    rb_define_method(*pmROGL, "glVertexStream4sATI", rogl_glVertexStream4sATI, 5);
    rb_define_method(*pmROGL, "glVertexStream4svATI", rogl_glVertexStream4svATI, 2);
    rb_define_method(*pmROGL, "glVertexStream4iATI", rogl_glVertexStream4iATI, 5);
    rb_define_method(*pmROGL, "glVertexStream4ivATI", rogl_glVertexStream4ivATI, 2);
    rb_define_method(*pmROGL, "glVertexStream4fATI", rogl_glVertexStream4fATI, 5);
    rb_define_method(*pmROGL, "glVertexStream4fvATI", rogl_glVertexStream4fvATI, 2);
    rb_define_method(*pmROGL, "glVertexStream4dATI", rogl_glVertexStream4dATI, 5);
    rb_define_method(*pmROGL, "glVertexStream4dvATI", rogl_glVertexStream4dvATI, 2);
    rb_define_method(*pmROGL, "glNormalStream3bATI", rogl_glNormalStream3bATI, 4);
    rb_define_method(*pmROGL, "glNormalStream3bvATI", rogl_glNormalStream3bvATI, 2);
    rb_define_method(*pmROGL, "glNormalStream3sATI", rogl_glNormalStream3sATI, 4);
    rb_define_method(*pmROGL, "glNormalStream3svATI", rogl_glNormalStream3svATI, 2);
    rb_define_method(*pmROGL, "glNormalStream3iATI", rogl_glNormalStream3iATI, 4);
    rb_define_method(*pmROGL, "glNormalStream3ivATI", rogl_glNormalStream3ivATI, 2);
    rb_define_method(*pmROGL, "glNormalStream3fATI", rogl_glNormalStream3fATI, 4);
    rb_define_method(*pmROGL, "glNormalStream3fvATI", rogl_glNormalStream3fvATI, 2);
    rb_define_method(*pmROGL, "glNormalStream3dATI", rogl_glNormalStream3dATI, 4);
    rb_define_method(*pmROGL, "glNormalStream3dvATI", rogl_glNormalStream3dvATI, 2);
    rb_define_method(*pmROGL, "glClientActiveVertexStreamATI", rogl_glClientActiveVertexStreamATI, 1);
    rb_define_method(*pmROGL, "glVertexBlendEnviATI", rogl_glVertexBlendEnviATI, 2);
    rb_define_method(*pmROGL, "glVertexBlendEnvfATI", rogl_glVertexBlendEnvfATI, 2);
    rb_define_method(*pmROGL, "glUniformBufferEXT", rogl_glUniformBufferEXT, 3);
    rb_define_method(*pmROGL, "glGetUniformBufferSizeEXT", rogl_glGetUniformBufferSizeEXT, 2);
    rb_define_method(*pmROGL, "glGetUniformOffsetEXT", rogl_glGetUniformOffsetEXT, 2);
    rb_define_method(*pmROGL, "glBlendColorEXT", rogl_glBlendColorEXT, 4);
    rb_define_method(*pmROGL, "glBlendEquationSeparateEXT", rogl_glBlendEquationSeparateEXT, 2);
    rb_define_method(*pmROGL, "glBlendFuncSeparateEXT", rogl_glBlendFuncSeparateEXT, 4);
    rb_define_method(*pmROGL, "glBlendEquationEXT", rogl_glBlendEquationEXT, 1);
    rb_define_method(*pmROGL, "glColorSubTableEXT", rogl_glColorSubTableEXT, 6);
    rb_define_method(*pmROGL, "glCopyColorSubTableEXT", rogl_glCopyColorSubTableEXT, 5);
    rb_define_method(*pmROGL, "glLockArraysEXT", rogl_glLockArraysEXT, 2);
    rb_define_method(*pmROGL, "glUnlockArraysEXT", rogl_glUnlockArraysEXT, 0);
    rb_define_method(*pmROGL, "glConvolutionFilter1DEXT", rogl_glConvolutionFilter1DEXT, 6);
    rb_define_method(*pmROGL, "glConvolutionFilter2DEXT", rogl_glConvolutionFilter2DEXT, 7);
    rb_define_method(*pmROGL, "glConvolutionParameterfEXT", rogl_glConvolutionParameterfEXT, 3);
    rb_define_method(*pmROGL, "glConvolutionParameterfvEXT", rogl_glConvolutionParameterfvEXT, 3);
    rb_define_method(*pmROGL, "glConvolutionParameteriEXT", rogl_glConvolutionParameteriEXT, 3);
    rb_define_method(*pmROGL, "glConvolutionParameterivEXT", rogl_glConvolutionParameterivEXT, 3);
    rb_define_method(*pmROGL, "glCopyConvolutionFilter1DEXT", rogl_glCopyConvolutionFilter1DEXT, 5);
    rb_define_method(*pmROGL, "glCopyConvolutionFilter2DEXT", rogl_glCopyConvolutionFilter2DEXT, 6);
    rb_define_method(*pmROGL, "glGetConvolutionFilterEXT", rogl_glGetConvolutionFilterEXT, 4);
    rb_define_method(*pmROGL, "glGetConvolutionParameterfvEXT", rogl_glGetConvolutionParameterfvEXT, 3);
    rb_define_method(*pmROGL, "glGetConvolutionParameterivEXT", rogl_glGetConvolutionParameterivEXT, 3);
    rb_define_method(*pmROGL, "glGetSeparableFilterEXT", rogl_glGetSeparableFilterEXT, 6);
    rb_define_method(*pmROGL, "glSeparableFilter2DEXT", rogl_glSeparableFilter2DEXT, 8);
    rb_define_method(*pmROGL, "glTangent3bEXT", rogl_glTangent3bEXT, 3);
    rb_define_method(*pmROGL, "glTangent3bvEXT", rogl_glTangent3bvEXT, 1);
    rb_define_method(*pmROGL, "glTangent3dEXT", rogl_glTangent3dEXT, 3);
    rb_define_method(*pmROGL, "glTangent3dvEXT", rogl_glTangent3dvEXT, 1);
    rb_define_method(*pmROGL, "glTangent3fEXT", rogl_glTangent3fEXT, 3);
    rb_define_method(*pmROGL, "glTangent3fvEXT", rogl_glTangent3fvEXT, 1);
    rb_define_method(*pmROGL, "glTangent3iEXT", rogl_glTangent3iEXT, 3);
    rb_define_method(*pmROGL, "glTangent3ivEXT", rogl_glTangent3ivEXT, 1);
    rb_define_method(*pmROGL, "glTangent3sEXT", rogl_glTangent3sEXT, 3);
    rb_define_method(*pmROGL, "glTangent3svEXT", rogl_glTangent3svEXT, 1);
    rb_define_method(*pmROGL, "glBinormal3bEXT", rogl_glBinormal3bEXT, 3);
    rb_define_method(*pmROGL, "glBinormal3bvEXT", rogl_glBinormal3bvEXT, 1);
    rb_define_method(*pmROGL, "glBinormal3dEXT", rogl_glBinormal3dEXT, 3);
    rb_define_method(*pmROGL, "glBinormal3dvEXT", rogl_glBinormal3dvEXT, 1);
    rb_define_method(*pmROGL, "glBinormal3fEXT", rogl_glBinormal3fEXT, 3);
    rb_define_method(*pmROGL, "glBinormal3fvEXT", rogl_glBinormal3fvEXT, 1);
    rb_define_method(*pmROGL, "glBinormal3iEXT", rogl_glBinormal3iEXT, 3);
    rb_define_method(*pmROGL, "glBinormal3ivEXT", rogl_glBinormal3ivEXT, 1);
    rb_define_method(*pmROGL, "glBinormal3sEXT", rogl_glBinormal3sEXT, 3);
    rb_define_method(*pmROGL, "glBinormal3svEXT", rogl_glBinormal3svEXT, 1);
    rb_define_method(*pmROGL, "glTangentPointerEXT", rogl_glTangentPointerEXT, 3);
    rb_define_method(*pmROGL, "glBinormalPointerEXT", rogl_glBinormalPointerEXT, 3);
    rb_define_method(*pmROGL, "glCopyTexImage1DEXT", rogl_glCopyTexImage1DEXT, 7);
    rb_define_method(*pmROGL, "glCopyTexImage2DEXT", rogl_glCopyTexImage2DEXT, 8);
    rb_define_method(*pmROGL, "glCopyTexSubImage1DEXT", rogl_glCopyTexSubImage1DEXT, 6);
    rb_define_method(*pmROGL, "glCopyTexSubImage2DEXT", rogl_glCopyTexSubImage2DEXT, 8);
    rb_define_method(*pmROGL, "glCopyTexSubImage3DEXT", rogl_glCopyTexSubImage3DEXT, 9);
    rb_define_method(*pmROGL, "glCullParameterdvEXT", rogl_glCullParameterdvEXT, 2);
    rb_define_method(*pmROGL, "glCullParameterfvEXT", rogl_glCullParameterfvEXT, 2);
    rb_define_method(*pmROGL, "glLabelObjectEXT", rogl_glLabelObjectEXT, 4);
    rb_define_method(*pmROGL, "glGetObjectLabelEXT", rogl_glGetObjectLabelEXT, 5);
    rb_define_method(*pmROGL, "glInsertEventMarkerEXT", rogl_glInsertEventMarkerEXT, 2);
    rb_define_method(*pmROGL, "glPushGroupMarkerEXT", rogl_glPushGroupMarkerEXT, 2);
    rb_define_method(*pmROGL, "glPopGroupMarkerEXT", rogl_glPopGroupMarkerEXT, 0);
    rb_define_method(*pmROGL, "glDepthBoundsEXT", rogl_glDepthBoundsEXT, 2);
    rb_define_method(*pmROGL, "glMatrixLoadfEXT", rogl_glMatrixLoadfEXT, 2);
    rb_define_method(*pmROGL, "glMatrixLoaddEXT", rogl_glMatrixLoaddEXT, 2);
    rb_define_method(*pmROGL, "glMatrixMultfEXT", rogl_glMatrixMultfEXT, 2);
    rb_define_method(*pmROGL, "glMatrixMultdEXT", rogl_glMatrixMultdEXT, 2);
    rb_define_method(*pmROGL, "glMatrixLoadIdentityEXT", rogl_glMatrixLoadIdentityEXT, 1);
    rb_define_method(*pmROGL, "glMatrixRotatefEXT", rogl_glMatrixRotatefEXT, 5);
    rb_define_method(*pmROGL, "glMatrixRotatedEXT", rogl_glMatrixRotatedEXT, 5);
    rb_define_method(*pmROGL, "glMatrixScalefEXT", rogl_glMatrixScalefEXT, 4);
    rb_define_method(*pmROGL, "glMatrixScaledEXT", rogl_glMatrixScaledEXT, 4);
    rb_define_method(*pmROGL, "glMatrixTranslatefEXT", rogl_glMatrixTranslatefEXT, 4);
    rb_define_method(*pmROGL, "glMatrixTranslatedEXT", rogl_glMatrixTranslatedEXT, 4);
    rb_define_method(*pmROGL, "glMatrixFrustumEXT", rogl_glMatrixFrustumEXT, 7);
    rb_define_method(*pmROGL, "glMatrixOrthoEXT", rogl_glMatrixOrthoEXT, 7);
    rb_define_method(*pmROGL, "glMatrixPopEXT", rogl_glMatrixPopEXT, 1);
    rb_define_method(*pmROGL, "glMatrixPushEXT", rogl_glMatrixPushEXT, 1);
    rb_define_method(*pmROGL, "glClientAttribDefaultEXT", rogl_glClientAttribDefaultEXT, 1);
    rb_define_method(*pmROGL, "glPushClientAttribDefaultEXT", rogl_glPushClientAttribDefaultEXT, 1);
    rb_define_method(*pmROGL, "glTextureParameterfEXT", rogl_glTextureParameterfEXT, 4);
    rb_define_method(*pmROGL, "glTextureParameterfvEXT", rogl_glTextureParameterfvEXT, 4);
    rb_define_method(*pmROGL, "glTextureParameteriEXT", rogl_glTextureParameteriEXT, 4);
    rb_define_method(*pmROGL, "glTextureParameterivEXT", rogl_glTextureParameterivEXT, 4);
    rb_define_method(*pmROGL, "glTextureImage1DEXT", rogl_glTextureImage1DEXT, 9);
    rb_define_method(*pmROGL, "glTextureImage2DEXT", rogl_glTextureImage2DEXT, 10);
    rb_define_method(*pmROGL, "glTextureSubImage1DEXT", rogl_glTextureSubImage1DEXT, 8);
    rb_define_method(*pmROGL, "glTextureSubImage2DEXT", rogl_glTextureSubImage2DEXT, 10);
    rb_define_method(*pmROGL, "glCopyTextureImage1DEXT", rogl_glCopyTextureImage1DEXT, 8);
    rb_define_method(*pmROGL, "glCopyTextureImage2DEXT", rogl_glCopyTextureImage2DEXT, 9);
    rb_define_method(*pmROGL, "glCopyTextureSubImage1DEXT", rogl_glCopyTextureSubImage1DEXT, 7);
    rb_define_method(*pmROGL, "glCopyTextureSubImage2DEXT", rogl_glCopyTextureSubImage2DEXT, 9);
    rb_define_method(*pmROGL, "glGetTextureImageEXT", rogl_glGetTextureImageEXT, 6);
    rb_define_method(*pmROGL, "glGetTextureParameterfvEXT", rogl_glGetTextureParameterfvEXT, 4);
    rb_define_method(*pmROGL, "glGetTextureParameterivEXT", rogl_glGetTextureParameterivEXT, 4);
    rb_define_method(*pmROGL, "glGetTextureLevelParameterfvEXT", rogl_glGetTextureLevelParameterfvEXT, 5);
    rb_define_method(*pmROGL, "glGetTextureLevelParameterivEXT", rogl_glGetTextureLevelParameterivEXT, 5);
    rb_define_method(*pmROGL, "glTextureImage3DEXT", rogl_glTextureImage3DEXT, 11);
    rb_define_method(*pmROGL, "glTextureSubImage3DEXT", rogl_glTextureSubImage3DEXT, 12);
    rb_define_method(*pmROGL, "glCopyTextureSubImage3DEXT", rogl_glCopyTextureSubImage3DEXT, 10);
    rb_define_method(*pmROGL, "glBindMultiTextureEXT", rogl_glBindMultiTextureEXT, 3);
    rb_define_method(*pmROGL, "glMultiTexCoordPointerEXT", rogl_glMultiTexCoordPointerEXT, 5);
    rb_define_method(*pmROGL, "glMultiTexEnvfEXT", rogl_glMultiTexEnvfEXT, 4);
    rb_define_method(*pmROGL, "glMultiTexEnvfvEXT", rogl_glMultiTexEnvfvEXT, 4);
    rb_define_method(*pmROGL, "glMultiTexEnviEXT", rogl_glMultiTexEnviEXT, 4);
    rb_define_method(*pmROGL, "glMultiTexEnvivEXT", rogl_glMultiTexEnvivEXT, 4);
    rb_define_method(*pmROGL, "glMultiTexGendEXT", rogl_glMultiTexGendEXT, 4);
    rb_define_method(*pmROGL, "glMultiTexGendvEXT", rogl_glMultiTexGendvEXT, 4);
    rb_define_method(*pmROGL, "glMultiTexGenfEXT", rogl_glMultiTexGenfEXT, 4);
    rb_define_method(*pmROGL, "glMultiTexGenfvEXT", rogl_glMultiTexGenfvEXT, 4);
    rb_define_method(*pmROGL, "glMultiTexGeniEXT", rogl_glMultiTexGeniEXT, 4);
    rb_define_method(*pmROGL, "glMultiTexGenivEXT", rogl_glMultiTexGenivEXT, 4);
    rb_define_method(*pmROGL, "glGetMultiTexEnvfvEXT", rogl_glGetMultiTexEnvfvEXT, 4);
    rb_define_method(*pmROGL, "glGetMultiTexEnvivEXT", rogl_glGetMultiTexEnvivEXT, 4);
    rb_define_method(*pmROGL, "glGetMultiTexGendvEXT", rogl_glGetMultiTexGendvEXT, 4);
    rb_define_method(*pmROGL, "glGetMultiTexGenfvEXT", rogl_glGetMultiTexGenfvEXT, 4);
    rb_define_method(*pmROGL, "glGetMultiTexGenivEXT", rogl_glGetMultiTexGenivEXT, 4);
    rb_define_method(*pmROGL, "glMultiTexParameteriEXT", rogl_glMultiTexParameteriEXT, 4);
    rb_define_method(*pmROGL, "glMultiTexParameterivEXT", rogl_glMultiTexParameterivEXT, 4);
    rb_define_method(*pmROGL, "glMultiTexParameterfEXT", rogl_glMultiTexParameterfEXT, 4);
    rb_define_method(*pmROGL, "glMultiTexParameterfvEXT", rogl_glMultiTexParameterfvEXT, 4);
    rb_define_method(*pmROGL, "glMultiTexImage1DEXT", rogl_glMultiTexImage1DEXT, 9);
    rb_define_method(*pmROGL, "glMultiTexImage2DEXT", rogl_glMultiTexImage2DEXT, 10);
    rb_define_method(*pmROGL, "glMultiTexSubImage1DEXT", rogl_glMultiTexSubImage1DEXT, 8);
    rb_define_method(*pmROGL, "glMultiTexSubImage2DEXT", rogl_glMultiTexSubImage2DEXT, 10);
    rb_define_method(*pmROGL, "glCopyMultiTexImage1DEXT", rogl_glCopyMultiTexImage1DEXT, 8);
    rb_define_method(*pmROGL, "glCopyMultiTexImage2DEXT", rogl_glCopyMultiTexImage2DEXT, 9);
    rb_define_method(*pmROGL, "glCopyMultiTexSubImage1DEXT", rogl_glCopyMultiTexSubImage1DEXT, 7);
    rb_define_method(*pmROGL, "glCopyMultiTexSubImage2DEXT", rogl_glCopyMultiTexSubImage2DEXT, 9);
    rb_define_method(*pmROGL, "glGetMultiTexImageEXT", rogl_glGetMultiTexImageEXT, 6);
    rb_define_method(*pmROGL, "glGetMultiTexParameterfvEXT", rogl_glGetMultiTexParameterfvEXT, 4);
    rb_define_method(*pmROGL, "glGetMultiTexParameterivEXT", rogl_glGetMultiTexParameterivEXT, 4);
    rb_define_method(*pmROGL, "glGetMultiTexLevelParameterfvEXT", rogl_glGetMultiTexLevelParameterfvEXT, 5);
    rb_define_method(*pmROGL, "glGetMultiTexLevelParameterivEXT", rogl_glGetMultiTexLevelParameterivEXT, 5);
    rb_define_method(*pmROGL, "glMultiTexImage3DEXT", rogl_glMultiTexImage3DEXT, 11);
    rb_define_method(*pmROGL, "glMultiTexSubImage3DEXT", rogl_glMultiTexSubImage3DEXT, 12);
    rb_define_method(*pmROGL, "glCopyMultiTexSubImage3DEXT", rogl_glCopyMultiTexSubImage3DEXT, 10);
    rb_define_method(*pmROGL, "glEnableClientStateIndexedEXT", rogl_glEnableClientStateIndexedEXT, 2);
    rb_define_method(*pmROGL, "glDisableClientStateIndexedEXT", rogl_glDisableClientStateIndexedEXT, 2);
    rb_define_method(*pmROGL, "glGetFloatIndexedvEXT", rogl_glGetFloatIndexedvEXT, 3);
    rb_define_method(*pmROGL, "glGetDoubleIndexedvEXT", rogl_glGetDoubleIndexedvEXT, 3);
    rb_define_method(*pmROGL, "glGetPointerIndexedvEXT", rogl_glGetPointerIndexedvEXT, 3);
    rb_define_method(*pmROGL, "glCompressedTextureImage3DEXT", rogl_glCompressedTextureImage3DEXT, 10);
    rb_define_method(*pmROGL, "glCompressedTextureImage2DEXT", rogl_glCompressedTextureImage2DEXT, 9);
    rb_define_method(*pmROGL, "glCompressedTextureImage1DEXT", rogl_glCompressedTextureImage1DEXT, 8);
    rb_define_method(*pmROGL, "glCompressedTextureSubImage3DEXT", rogl_glCompressedTextureSubImage3DEXT, 12);
    rb_define_method(*pmROGL, "glCompressedTextureSubImage2DEXT", rogl_glCompressedTextureSubImage2DEXT, 10);
    rb_define_method(*pmROGL, "glCompressedTextureSubImage1DEXT", rogl_glCompressedTextureSubImage1DEXT, 8);
    rb_define_method(*pmROGL, "glGetCompressedTextureImageEXT", rogl_glGetCompressedTextureImageEXT, 4);
    rb_define_method(*pmROGL, "glCompressedMultiTexImage3DEXT", rogl_glCompressedMultiTexImage3DEXT, 10);
    rb_define_method(*pmROGL, "glCompressedMultiTexImage2DEXT", rogl_glCompressedMultiTexImage2DEXT, 9);
    rb_define_method(*pmROGL, "glCompressedMultiTexImage1DEXT", rogl_glCompressedMultiTexImage1DEXT, 8);
    rb_define_method(*pmROGL, "glCompressedMultiTexSubImage3DEXT", rogl_glCompressedMultiTexSubImage3DEXT, 12);
    rb_define_method(*pmROGL, "glCompressedMultiTexSubImage2DEXT", rogl_glCompressedMultiTexSubImage2DEXT, 10);
    rb_define_method(*pmROGL, "glCompressedMultiTexSubImage1DEXT", rogl_glCompressedMultiTexSubImage1DEXT, 8);
    rb_define_method(*pmROGL, "glGetCompressedMultiTexImageEXT", rogl_glGetCompressedMultiTexImageEXT, 4);
    rb_define_method(*pmROGL, "glMatrixLoadTransposefEXT", rogl_glMatrixLoadTransposefEXT, 2);
    rb_define_method(*pmROGL, "glMatrixLoadTransposedEXT", rogl_glMatrixLoadTransposedEXT, 2);
    rb_define_method(*pmROGL, "glMatrixMultTransposefEXT", rogl_glMatrixMultTransposefEXT, 2);
    rb_define_method(*pmROGL, "glMatrixMultTransposedEXT", rogl_glMatrixMultTransposedEXT, 2);
    rb_define_method(*pmROGL, "glNamedBufferDataEXT", rogl_glNamedBufferDataEXT, 4);
    rb_define_method(*pmROGL, "glNamedBufferSubDataEXT", rogl_glNamedBufferSubDataEXT, 4);
    rb_define_method(*pmROGL, "glMapNamedBufferEXT", rogl_glMapNamedBufferEXT, 2);
    rb_define_method(*pmROGL, "glUnmapNamedBufferEXT", rogl_glUnmapNamedBufferEXT, 1);
    rb_define_method(*pmROGL, "glGetNamedBufferParameterivEXT", rogl_glGetNamedBufferParameterivEXT, 3);
    rb_define_method(*pmROGL, "glGetNamedBufferPointervEXT", rogl_glGetNamedBufferPointervEXT, 3);
    rb_define_method(*pmROGL, "glGetNamedBufferSubDataEXT", rogl_glGetNamedBufferSubDataEXT, 4);
    rb_define_method(*pmROGL, "glTextureBufferEXT", rogl_glTextureBufferEXT, 4);
    rb_define_method(*pmROGL, "glMultiTexBufferEXT", rogl_glMultiTexBufferEXT, 4);
    rb_define_method(*pmROGL, "glTextureParameterIivEXT", rogl_glTextureParameterIivEXT, 4);
    rb_define_method(*pmROGL, "glTextureParameterIuivEXT", rogl_glTextureParameterIuivEXT, 4);
    rb_define_method(*pmROGL, "glGetTextureParameterIivEXT", rogl_glGetTextureParameterIivEXT, 4);
    rb_define_method(*pmROGL, "glGetTextureParameterIuivEXT", rogl_glGetTextureParameterIuivEXT, 4);
    rb_define_method(*pmROGL, "glMultiTexParameterIivEXT", rogl_glMultiTexParameterIivEXT, 4);
    rb_define_method(*pmROGL, "glMultiTexParameterIuivEXT", rogl_glMultiTexParameterIuivEXT, 4);
    rb_define_method(*pmROGL, "glGetMultiTexParameterIivEXT", rogl_glGetMultiTexParameterIivEXT, 4);
    rb_define_method(*pmROGL, "glGetMultiTexParameterIuivEXT", rogl_glGetMultiTexParameterIuivEXT, 4);
    rb_define_method(*pmROGL, "glNamedProgramLocalParameters4fvEXT", rogl_glNamedProgramLocalParameters4fvEXT, 5);
    rb_define_method(*pmROGL, "glNamedProgramLocalParameterI4iEXT", rogl_glNamedProgramLocalParameterI4iEXT, 7);
    rb_define_method(*pmROGL, "glNamedProgramLocalParameterI4ivEXT", rogl_glNamedProgramLocalParameterI4ivEXT, 4);
    rb_define_method(*pmROGL, "glNamedProgramLocalParametersI4ivEXT", rogl_glNamedProgramLocalParametersI4ivEXT, 5);
    rb_define_method(*pmROGL, "glNamedProgramLocalParameterI4uiEXT", rogl_glNamedProgramLocalParameterI4uiEXT, 7);
    rb_define_method(*pmROGL, "glNamedProgramLocalParameterI4uivEXT", rogl_glNamedProgramLocalParameterI4uivEXT, 4);
    rb_define_method(*pmROGL, "glNamedProgramLocalParametersI4uivEXT", rogl_glNamedProgramLocalParametersI4uivEXT, 5);
    rb_define_method(*pmROGL, "glGetNamedProgramLocalParameterIivEXT", rogl_glGetNamedProgramLocalParameterIivEXT, 4);
    rb_define_method(*pmROGL, "glGetNamedProgramLocalParameterIuivEXT", rogl_glGetNamedProgramLocalParameterIuivEXT, 4);
    rb_define_method(*pmROGL, "glEnableClientStateiEXT", rogl_glEnableClientStateiEXT, 2);
    rb_define_method(*pmROGL, "glDisableClientStateiEXT", rogl_glDisableClientStateiEXT, 2);
    rb_define_method(*pmROGL, "glGetFloati_vEXT", rogl_glGetFloati_vEXT, 3);
    rb_define_method(*pmROGL, "glGetDoublei_vEXT", rogl_glGetDoublei_vEXT, 3);
    rb_define_method(*pmROGL, "glGetPointeri_vEXT", rogl_glGetPointeri_vEXT, 3);
    rb_define_method(*pmROGL, "glNamedProgramStringEXT", rogl_glNamedProgramStringEXT, 5);
    rb_define_method(*pmROGL, "glNamedProgramLocalParameter4dEXT", rogl_glNamedProgramLocalParameter4dEXT, 7);
    rb_define_method(*pmROGL, "glNamedProgramLocalParameter4dvEXT", rogl_glNamedProgramLocalParameter4dvEXT, 4);
    rb_define_method(*pmROGL, "glNamedProgramLocalParameter4fEXT", rogl_glNamedProgramLocalParameter4fEXT, 7);
    rb_define_method(*pmROGL, "glNamedProgramLocalParameter4fvEXT", rogl_glNamedProgramLocalParameter4fvEXT, 4);
    rb_define_method(*pmROGL, "glGetNamedProgramLocalParameterdvEXT", rogl_glGetNamedProgramLocalParameterdvEXT, 4);
    rb_define_method(*pmROGL, "glGetNamedProgramLocalParameterfvEXT", rogl_glGetNamedProgramLocalParameterfvEXT, 4);
    rb_define_method(*pmROGL, "glGetNamedProgramivEXT", rogl_glGetNamedProgramivEXT, 4);
    rb_define_method(*pmROGL, "glGetNamedProgramStringEXT", rogl_glGetNamedProgramStringEXT, 4);
    rb_define_method(*pmROGL, "glNamedRenderbufferStorageEXT", rogl_glNamedRenderbufferStorageEXT, 4);
    rb_define_method(*pmROGL, "glGetNamedRenderbufferParameterivEXT", rogl_glGetNamedRenderbufferParameterivEXT, 3);
    rb_define_method(*pmROGL, "glNamedRenderbufferStorageMultisampleEXT", rogl_glNamedRenderbufferStorageMultisampleEXT, 5);
    rb_define_method(*pmROGL, "glNamedRenderbufferStorageMultisampleCoverageEXT", rogl_glNamedRenderbufferStorageMultisampleCoverageEXT, 6);
    rb_define_method(*pmROGL, "glCheckNamedFramebufferStatusEXT", rogl_glCheckNamedFramebufferStatusEXT, 2);
    rb_define_method(*pmROGL, "glNamedFramebufferTexture1DEXT", rogl_glNamedFramebufferTexture1DEXT, 5);
    rb_define_method(*pmROGL, "glNamedFramebufferTexture2DEXT", rogl_glNamedFramebufferTexture2DEXT, 5);
    rb_define_method(*pmROGL, "glNamedFramebufferTexture3DEXT", rogl_glNamedFramebufferTexture3DEXT, 6);
    rb_define_method(*pmROGL, "glNamedFramebufferRenderbufferEXT", rogl_glNamedFramebufferRenderbufferEXT, 4);
    rb_define_method(*pmROGL, "glGetNamedFramebufferAttachmentParameterivEXT", rogl_glGetNamedFramebufferAttachmentParameterivEXT, 4);
    rb_define_method(*pmROGL, "glGenerateTextureMipmapEXT", rogl_glGenerateTextureMipmapEXT, 2);
    rb_define_method(*pmROGL, "glGenerateMultiTexMipmapEXT", rogl_glGenerateMultiTexMipmapEXT, 2);
    rb_define_method(*pmROGL, "glFramebufferDrawBufferEXT", rogl_glFramebufferDrawBufferEXT, 2);
    rb_define_method(*pmROGL, "glFramebufferDrawBuffersEXT", rogl_glFramebufferDrawBuffersEXT, 3);
    rb_define_method(*pmROGL, "glFramebufferReadBufferEXT", rogl_glFramebufferReadBufferEXT, 2);
    rb_define_method(*pmROGL, "glGetFramebufferParameterivEXT", rogl_glGetFramebufferParameterivEXT, 3);
    rb_define_method(*pmROGL, "glNamedCopyBufferSubDataEXT", rogl_glNamedCopyBufferSubDataEXT, 5);
    rb_define_method(*pmROGL, "glNamedFramebufferTextureEXT", rogl_glNamedFramebufferTextureEXT, 4);
    rb_define_method(*pmROGL, "glNamedFramebufferTextureLayerEXT", rogl_glNamedFramebufferTextureLayerEXT, 5);
    rb_define_method(*pmROGL, "glNamedFramebufferTextureFaceEXT", rogl_glNamedFramebufferTextureFaceEXT, 5);
    rb_define_method(*pmROGL, "glTextureRenderbufferEXT", rogl_glTextureRenderbufferEXT, 3);
    rb_define_method(*pmROGL, "glMultiTexRenderbufferEXT", rogl_glMultiTexRenderbufferEXT, 3);
    rb_define_method(*pmROGL, "glVertexArrayVertexOffsetEXT", rogl_glVertexArrayVertexOffsetEXT, 6);
    rb_define_method(*pmROGL, "glVertexArrayColorOffsetEXT", rogl_glVertexArrayColorOffsetEXT, 6);
    rb_define_method(*pmROGL, "glVertexArrayEdgeFlagOffsetEXT", rogl_glVertexArrayEdgeFlagOffsetEXT, 4);
    rb_define_method(*pmROGL, "glVertexArrayIndexOffsetEXT", rogl_glVertexArrayIndexOffsetEXT, 5);
    rb_define_method(*pmROGL, "glVertexArrayNormalOffsetEXT", rogl_glVertexArrayNormalOffsetEXT, 5);
    rb_define_method(*pmROGL, "glVertexArrayTexCoordOffsetEXT", rogl_glVertexArrayTexCoordOffsetEXT, 6);
    rb_define_method(*pmROGL, "glVertexArrayMultiTexCoordOffsetEXT", rogl_glVertexArrayMultiTexCoordOffsetEXT, 7);
    rb_define_method(*pmROGL, "glVertexArrayFogCoordOffsetEXT", rogl_glVertexArrayFogCoordOffsetEXT, 5);
    rb_define_method(*pmROGL, "glVertexArraySecondaryColorOffsetEXT", rogl_glVertexArraySecondaryColorOffsetEXT, 6);
    rb_define_method(*pmROGL, "glVertexArrayVertexAttribOffsetEXT", rogl_glVertexArrayVertexAttribOffsetEXT, 8);
    rb_define_method(*pmROGL, "glVertexArrayVertexAttribIOffsetEXT", rogl_glVertexArrayVertexAttribIOffsetEXT, 7);
    rb_define_method(*pmROGL, "glEnableVertexArrayEXT", rogl_glEnableVertexArrayEXT, 2);
    rb_define_method(*pmROGL, "glDisableVertexArrayEXT", rogl_glDisableVertexArrayEXT, 2);
    rb_define_method(*pmROGL, "glEnableVertexArrayAttribEXT", rogl_glEnableVertexArrayAttribEXT, 2);
    rb_define_method(*pmROGL, "glDisableVertexArrayAttribEXT", rogl_glDisableVertexArrayAttribEXT, 2);
    rb_define_method(*pmROGL, "glGetVertexArrayIntegervEXT", rogl_glGetVertexArrayIntegervEXT, 3);
    rb_define_method(*pmROGL, "glGetVertexArrayPointervEXT", rogl_glGetVertexArrayPointervEXT, 3);
    rb_define_method(*pmROGL, "glGetVertexArrayIntegeri_vEXT", rogl_glGetVertexArrayIntegeri_vEXT, 4);
    rb_define_method(*pmROGL, "glGetVertexArrayPointeri_vEXT", rogl_glGetVertexArrayPointeri_vEXT, 4);
    rb_define_method(*pmROGL, "glMapNamedBufferRangeEXT", rogl_glMapNamedBufferRangeEXT, 4);
    rb_define_method(*pmROGL, "glFlushMappedNamedBufferRangeEXT", rogl_glFlushMappedNamedBufferRangeEXT, 3);
    rb_define_method(*pmROGL, "glNamedBufferStorageEXT", rogl_glNamedBufferStorageEXT, 4);
    rb_define_method(*pmROGL, "glClearNamedBufferDataEXT", rogl_glClearNamedBufferDataEXT, 5);
    rb_define_method(*pmROGL, "glClearNamedBufferSubDataEXT", rogl_glClearNamedBufferSubDataEXT, 7);
    rb_define_method(*pmROGL, "glNamedFramebufferParameteriEXT", rogl_glNamedFramebufferParameteriEXT, 3);
    rb_define_method(*pmROGL, "glGetNamedFramebufferParameterivEXT", rogl_glGetNamedFramebufferParameterivEXT, 3);
    rb_define_method(*pmROGL, "glProgramUniform1dEXT", rogl_glProgramUniform1dEXT, 3);
    rb_define_method(*pmROGL, "glProgramUniform2dEXT", rogl_glProgramUniform2dEXT, 4);
    rb_define_method(*pmROGL, "glProgramUniform3dEXT", rogl_glProgramUniform3dEXT, 5);
    rb_define_method(*pmROGL, "glProgramUniform4dEXT", rogl_glProgramUniform4dEXT, 6);
    rb_define_method(*pmROGL, "glProgramUniform1dvEXT", rogl_glProgramUniform1dvEXT, 4);
    rb_define_method(*pmROGL, "glProgramUniform2dvEXT", rogl_glProgramUniform2dvEXT, 4);
    rb_define_method(*pmROGL, "glProgramUniform3dvEXT", rogl_glProgramUniform3dvEXT, 4);
    rb_define_method(*pmROGL, "glProgramUniform4dvEXT", rogl_glProgramUniform4dvEXT, 4);
    rb_define_method(*pmROGL, "glProgramUniformMatrix2dvEXT", rogl_glProgramUniformMatrix2dvEXT, 5);
    rb_define_method(*pmROGL, "glProgramUniformMatrix3dvEXT", rogl_glProgramUniformMatrix3dvEXT, 5);
    rb_define_method(*pmROGL, "glProgramUniformMatrix4dvEXT", rogl_glProgramUniformMatrix4dvEXT, 5);
    rb_define_method(*pmROGL, "glProgramUniformMatrix2x3dvEXT", rogl_glProgramUniformMatrix2x3dvEXT, 5);
    rb_define_method(*pmROGL, "glProgramUniformMatrix2x4dvEXT", rogl_glProgramUniformMatrix2x4dvEXT, 5);
    rb_define_method(*pmROGL, "glProgramUniformMatrix3x2dvEXT", rogl_glProgramUniformMatrix3x2dvEXT, 5);
    rb_define_method(*pmROGL, "glProgramUniformMatrix3x4dvEXT", rogl_glProgramUniformMatrix3x4dvEXT, 5);
    rb_define_method(*pmROGL, "glProgramUniformMatrix4x2dvEXT", rogl_glProgramUniformMatrix4x2dvEXT, 5);
    rb_define_method(*pmROGL, "glProgramUniformMatrix4x3dvEXT", rogl_glProgramUniformMatrix4x3dvEXT, 5);
    rb_define_method(*pmROGL, "glTextureBufferRangeEXT", rogl_glTextureBufferRangeEXT, 6);
    rb_define_method(*pmROGL, "glTextureStorage1DEXT", rogl_glTextureStorage1DEXT, 5);
    rb_define_method(*pmROGL, "glTextureStorage2DEXT", rogl_glTextureStorage2DEXT, 6);
    rb_define_method(*pmROGL, "glTextureStorage3DEXT", rogl_glTextureStorage3DEXT, 7);
    rb_define_method(*pmROGL, "glTextureStorage2DMultisampleEXT", rogl_glTextureStorage2DMultisampleEXT, 7);
    rb_define_method(*pmROGL, "glTextureStorage3DMultisampleEXT", rogl_glTextureStorage3DMultisampleEXT, 8);
    rb_define_method(*pmROGL, "glVertexArrayBindVertexBufferEXT", rogl_glVertexArrayBindVertexBufferEXT, 5);
    rb_define_method(*pmROGL, "glVertexArrayVertexAttribFormatEXT", rogl_glVertexArrayVertexAttribFormatEXT, 6);
    rb_define_method(*pmROGL, "glVertexArrayVertexAttribIFormatEXT", rogl_glVertexArrayVertexAttribIFormatEXT, 5);
    rb_define_method(*pmROGL, "glVertexArrayVertexAttribLFormatEXT", rogl_glVertexArrayVertexAttribLFormatEXT, 5);
    rb_define_method(*pmROGL, "glVertexArrayVertexAttribBindingEXT", rogl_glVertexArrayVertexAttribBindingEXT, 3);
    rb_define_method(*pmROGL, "glVertexArrayVertexBindingDivisorEXT", rogl_glVertexArrayVertexBindingDivisorEXT, 3);
    rb_define_method(*pmROGL, "glVertexArrayVertexAttribLOffsetEXT", rogl_glVertexArrayVertexAttribLOffsetEXT, 7);
    rb_define_method(*pmROGL, "glTexturePageCommitmentEXT", rogl_glTexturePageCommitmentEXT, 9);
    rb_define_method(*pmROGL, "glVertexArrayVertexAttribDivisorEXT", rogl_glVertexArrayVertexAttribDivisorEXT, 3);
    rb_define_method(*pmROGL, "glColorMaskIndexedEXT", rogl_glColorMaskIndexedEXT, 5);
    rb_define_method(*pmROGL, "glDrawArraysInstancedEXT", rogl_glDrawArraysInstancedEXT, 4);
    rb_define_method(*pmROGL, "glDrawElementsInstancedEXT", rogl_glDrawElementsInstancedEXT, 5);
    rb_define_method(*pmROGL, "glDrawRangeElementsEXT", rogl_glDrawRangeElementsEXT, 6);
    rb_define_method(*pmROGL, "glFogCoordfEXT", rogl_glFogCoordfEXT, 1);
    rb_define_method(*pmROGL, "glFogCoordfvEXT", rogl_glFogCoordfvEXT, 1);
    rb_define_method(*pmROGL, "glFogCoorddEXT", rogl_glFogCoorddEXT, 1);
    rb_define_method(*pmROGL, "glFogCoorddvEXT", rogl_glFogCoorddvEXT, 1);
    rb_define_method(*pmROGL, "glFogCoordPointerEXT", rogl_glFogCoordPointerEXT, 3);
    rb_define_method(*pmROGL, "glBlitFramebufferEXT", rogl_glBlitFramebufferEXT, 10);
    rb_define_method(*pmROGL, "glRenderbufferStorageMultisampleEXT", rogl_glRenderbufferStorageMultisampleEXT, 5);
    rb_define_method(*pmROGL, "glIsRenderbufferEXT", rogl_glIsRenderbufferEXT, 1);
    rb_define_method(*pmROGL, "glBindRenderbufferEXT", rogl_glBindRenderbufferEXT, 2);
    rb_define_method(*pmROGL, "glDeleteRenderbuffersEXT", rogl_glDeleteRenderbuffersEXT, 2);
    rb_define_method(*pmROGL, "glGenRenderbuffersEXT", rogl_glGenRenderbuffersEXT, 2);
    rb_define_method(*pmROGL, "glRenderbufferStorageEXT", rogl_glRenderbufferStorageEXT, 4);
    rb_define_method(*pmROGL, "glGetRenderbufferParameterivEXT", rogl_glGetRenderbufferParameterivEXT, 3);
    rb_define_method(*pmROGL, "glIsFramebufferEXT", rogl_glIsFramebufferEXT, 1);
    rb_define_method(*pmROGL, "glBindFramebufferEXT", rogl_glBindFramebufferEXT, 2);
    rb_define_method(*pmROGL, "glDeleteFramebuffersEXT", rogl_glDeleteFramebuffersEXT, 2);
    rb_define_method(*pmROGL, "glGenFramebuffersEXT", rogl_glGenFramebuffersEXT, 2);
    rb_define_method(*pmROGL, "glCheckFramebufferStatusEXT", rogl_glCheckFramebufferStatusEXT, 1);
    rb_define_method(*pmROGL, "glFramebufferTexture1DEXT", rogl_glFramebufferTexture1DEXT, 5);
    rb_define_method(*pmROGL, "glFramebufferTexture2DEXT", rogl_glFramebufferTexture2DEXT, 5);
    rb_define_method(*pmROGL, "glFramebufferTexture3DEXT", rogl_glFramebufferTexture3DEXT, 6);
    rb_define_method(*pmROGL, "glFramebufferRenderbufferEXT", rogl_glFramebufferRenderbufferEXT, 4);
    rb_define_method(*pmROGL, "glGetFramebufferAttachmentParameterivEXT", rogl_glGetFramebufferAttachmentParameterivEXT, 4);
    rb_define_method(*pmROGL, "glGenerateMipmapEXT", rogl_glGenerateMipmapEXT, 1);
    rb_define_method(*pmROGL, "glProgramEnvParameters4fvEXT", rogl_glProgramEnvParameters4fvEXT, 4);
    rb_define_method(*pmROGL, "glProgramLocalParameters4fvEXT", rogl_glProgramLocalParameters4fvEXT, 4);
    rb_define_method(*pmROGL, "glGetUniformuivEXT", rogl_glGetUniformuivEXT, 3);
    rb_define_method(*pmROGL, "glBindFragDataLocationEXT", rogl_glBindFragDataLocationEXT, 3);
    rb_define_method(*pmROGL, "glGetFragDataLocationEXT", rogl_glGetFragDataLocationEXT, 2);
    rb_define_method(*pmROGL, "glUniform1uiEXT", rogl_glUniform1uiEXT, 2);
    rb_define_method(*pmROGL, "glUniform2uiEXT", rogl_glUniform2uiEXT, 3);
    rb_define_method(*pmROGL, "glUniform3uiEXT", rogl_glUniform3uiEXT, 4);
    rb_define_method(*pmROGL, "glUniform4uiEXT", rogl_glUniform4uiEXT, 5);
    rb_define_method(*pmROGL, "glUniform1uivEXT", rogl_glUniform1uivEXT, 3);
    rb_define_method(*pmROGL, "glUniform2uivEXT", rogl_glUniform2uivEXT, 3);
    rb_define_method(*pmROGL, "glUniform3uivEXT", rogl_glUniform3uivEXT, 3);
    rb_define_method(*pmROGL, "glUniform4uivEXT", rogl_glUniform4uivEXT, 3);
    rb_define_method(*pmROGL, "glGetHistogramEXT", rogl_glGetHistogramEXT, 5);
    rb_define_method(*pmROGL, "glGetHistogramParameterfvEXT", rogl_glGetHistogramParameterfvEXT, 3);
    rb_define_method(*pmROGL, "glGetHistogramParameterivEXT", rogl_glGetHistogramParameterivEXT, 3);
    rb_define_method(*pmROGL, "glGetMinmaxEXT", rogl_glGetMinmaxEXT, 5);
    rb_define_method(*pmROGL, "glGetMinmaxParameterfvEXT", rogl_glGetMinmaxParameterfvEXT, 3);
    rb_define_method(*pmROGL, "glGetMinmaxParameterivEXT", rogl_glGetMinmaxParameterivEXT, 3);
    rb_define_method(*pmROGL, "glHistogramEXT", rogl_glHistogramEXT, 4);
    rb_define_method(*pmROGL, "glMinmaxEXT", rogl_glMinmaxEXT, 3);
    rb_define_method(*pmROGL, "glResetHistogramEXT", rogl_glResetHistogramEXT, 1);
    rb_define_method(*pmROGL, "glResetMinmaxEXT", rogl_glResetMinmaxEXT, 1);
    rb_define_method(*pmROGL, "glIndexFuncEXT", rogl_glIndexFuncEXT, 2);
    rb_define_method(*pmROGL, "glIndexMaterialEXT", rogl_glIndexMaterialEXT, 2);
    rb_define_method(*pmROGL, "glApplyTextureEXT", rogl_glApplyTextureEXT, 1);
    rb_define_method(*pmROGL, "glTextureLightEXT", rogl_glTextureLightEXT, 1);
    rb_define_method(*pmROGL, "glTextureMaterialEXT", rogl_glTextureMaterialEXT, 2);
    rb_define_method(*pmROGL, "glMultiDrawArraysEXT", rogl_glMultiDrawArraysEXT, 4);
    rb_define_method(*pmROGL, "glMultiDrawElementsEXT", rogl_glMultiDrawElementsEXT, 5);
    rb_define_method(*pmROGL, "glSampleMaskEXT", rogl_glSampleMaskEXT, 2);
    rb_define_method(*pmROGL, "glSamplePatternEXT", rogl_glSamplePatternEXT, 1);
    rb_define_method(*pmROGL, "glColorTableEXT", rogl_glColorTableEXT, 6);
    rb_define_method(*pmROGL, "glGetColorTableEXT", rogl_glGetColorTableEXT, 4);
    rb_define_method(*pmROGL, "glGetColorTableParameterivEXT", rogl_glGetColorTableParameterivEXT, 3);
    rb_define_method(*pmROGL, "glGetColorTableParameterfvEXT", rogl_glGetColorTableParameterfvEXT, 3);
    rb_define_method(*pmROGL, "glPixelTransformParameteriEXT", rogl_glPixelTransformParameteriEXT, 3);
    rb_define_method(*pmROGL, "glPixelTransformParameterfEXT", rogl_glPixelTransformParameterfEXT, 3);
    rb_define_method(*pmROGL, "glPixelTransformParameterivEXT", rogl_glPixelTransformParameterivEXT, 3);
    rb_define_method(*pmROGL, "glPixelTransformParameterfvEXT", rogl_glPixelTransformParameterfvEXT, 3);
    rb_define_method(*pmROGL, "glGetPixelTransformParameterivEXT", rogl_glGetPixelTransformParameterivEXT, 3);
    rb_define_method(*pmROGL, "glGetPixelTransformParameterfvEXT", rogl_glGetPixelTransformParameterfvEXT, 3);
    rb_define_method(*pmROGL, "glPointParameterfEXT", rogl_glPointParameterfEXT, 2);
    rb_define_method(*pmROGL, "glPointParameterfvEXT", rogl_glPointParameterfvEXT, 2);
    rb_define_method(*pmROGL, "glPolygonOffsetEXT", rogl_glPolygonOffsetEXT, 2);
    rb_define_method(*pmROGL, "glPolygonOffsetClampEXT", rogl_glPolygonOffsetClampEXT, 3);
    rb_define_method(*pmROGL, "glProvokingVertexEXT", rogl_glProvokingVertexEXT, 1);
    rb_define_method(*pmROGL, "glSecondaryColor3bEXT", rogl_glSecondaryColor3bEXT, 3);
    rb_define_method(*pmROGL, "glSecondaryColor3bvEXT", rogl_glSecondaryColor3bvEXT, 1);
    rb_define_method(*pmROGL, "glSecondaryColor3dEXT", rogl_glSecondaryColor3dEXT, 3);
    rb_define_method(*pmROGL, "glSecondaryColor3dvEXT", rogl_glSecondaryColor3dvEXT, 1);
    rb_define_method(*pmROGL, "glSecondaryColor3fEXT", rogl_glSecondaryColor3fEXT, 3);
    rb_define_method(*pmROGL, "glSecondaryColor3fvEXT", rogl_glSecondaryColor3fvEXT, 1);
    rb_define_method(*pmROGL, "glSecondaryColor3iEXT", rogl_glSecondaryColor3iEXT, 3);
    rb_define_method(*pmROGL, "glSecondaryColor3ivEXT", rogl_glSecondaryColor3ivEXT, 1);
    rb_define_method(*pmROGL, "glSecondaryColor3sEXT", rogl_glSecondaryColor3sEXT, 3);
    rb_define_method(*pmROGL, "glSecondaryColor3svEXT", rogl_glSecondaryColor3svEXT, 1);
    rb_define_method(*pmROGL, "glSecondaryColor3ubEXT", rogl_glSecondaryColor3ubEXT, 3);
    rb_define_method(*pmROGL, "glSecondaryColor3ubvEXT", rogl_glSecondaryColor3ubvEXT, 1);
    rb_define_method(*pmROGL, "glSecondaryColor3uiEXT", rogl_glSecondaryColor3uiEXT, 3);
    rb_define_method(*pmROGL, "glSecondaryColor3uivEXT", rogl_glSecondaryColor3uivEXT, 1);
    rb_define_method(*pmROGL, "glSecondaryColor3usEXT", rogl_glSecondaryColor3usEXT, 3);
    rb_define_method(*pmROGL, "glSecondaryColor3usvEXT", rogl_glSecondaryColor3usvEXT, 1);
    rb_define_method(*pmROGL, "glSecondaryColorPointerEXT", rogl_glSecondaryColorPointerEXT, 4);
    rb_define_method(*pmROGL, "glUseShaderProgramEXT", rogl_glUseShaderProgramEXT, 2);
    rb_define_method(*pmROGL, "glActiveProgramEXT", rogl_glActiveProgramEXT, 1);
    rb_define_method(*pmROGL, "glCreateShaderProgramEXT", rogl_glCreateShaderProgramEXT, 2);
    rb_define_method(*pmROGL, "glActiveShaderProgramEXT", rogl_glActiveShaderProgramEXT, 2);
    rb_define_method(*pmROGL, "glBindProgramPipelineEXT", rogl_glBindProgramPipelineEXT, 1);
    rb_define_method(*pmROGL, "glCreateShaderProgramvEXT", rogl_glCreateShaderProgramvEXT, 3);
    rb_define_method(*pmROGL, "glDeleteProgramPipelinesEXT", rogl_glDeleteProgramPipelinesEXT, 2);
    rb_define_method(*pmROGL, "glGenProgramPipelinesEXT", rogl_glGenProgramPipelinesEXT, 2);
    rb_define_method(*pmROGL, "glGetProgramPipelineInfoLogEXT", rogl_glGetProgramPipelineInfoLogEXT, 4);
    rb_define_method(*pmROGL, "glGetProgramPipelineivEXT", rogl_glGetProgramPipelineivEXT, 3);
    rb_define_method(*pmROGL, "glIsProgramPipelineEXT", rogl_glIsProgramPipelineEXT, 1);
    rb_define_method(*pmROGL, "glUseProgramStagesEXT", rogl_glUseProgramStagesEXT, 3);
    rb_define_method(*pmROGL, "glValidateProgramPipelineEXT", rogl_glValidateProgramPipelineEXT, 1);
    rb_define_method(*pmROGL, "glBindImageTextureEXT", rogl_glBindImageTextureEXT, 7);
    rb_define_method(*pmROGL, "glMemoryBarrierEXT", rogl_glMemoryBarrierEXT, 1);
    rb_define_method(*pmROGL, "glStencilClearTagEXT", rogl_glStencilClearTagEXT, 2);
    rb_define_method(*pmROGL, "glActiveStencilFaceEXT", rogl_glActiveStencilFaceEXT, 1);
    rb_define_method(*pmROGL, "glTexSubImage1DEXT", rogl_glTexSubImage1DEXT, 7);
    rb_define_method(*pmROGL, "glTexSubImage2DEXT", rogl_glTexSubImage2DEXT, 9);
    rb_define_method(*pmROGL, "glTexImage3DEXT", rogl_glTexImage3DEXT, 10);
    rb_define_method(*pmROGL, "glTexSubImage3DEXT", rogl_glTexSubImage3DEXT, 11);
    rb_define_method(*pmROGL, "glTexBufferEXT", rogl_glTexBufferEXT, 3);
    rb_define_method(*pmROGL, "glTexParameterIivEXT", rogl_glTexParameterIivEXT, 3);
    rb_define_method(*pmROGL, "glTexParameterIuivEXT", rogl_glTexParameterIuivEXT, 3);
    rb_define_method(*pmROGL, "glGetTexParameterIivEXT", rogl_glGetTexParameterIivEXT, 3);
    rb_define_method(*pmROGL, "glGetTexParameterIuivEXT", rogl_glGetTexParameterIuivEXT, 3);
    rb_define_method(*pmROGL, "glClearColorIiEXT", rogl_glClearColorIiEXT, 4);
    rb_define_method(*pmROGL, "glClearColorIuiEXT", rogl_glClearColorIuiEXT, 4);
    rb_define_method(*pmROGL, "glAreTexturesResidentEXT", rogl_glAreTexturesResidentEXT, 3);
    rb_define_method(*pmROGL, "glBindTextureEXT", rogl_glBindTextureEXT, 2);
    rb_define_method(*pmROGL, "glDeleteTexturesEXT", rogl_glDeleteTexturesEXT, 2);
    rb_define_method(*pmROGL, "glGenTexturesEXT", rogl_glGenTexturesEXT, 2);
    rb_define_method(*pmROGL, "glIsTextureEXT", rogl_glIsTextureEXT, 1);
    rb_define_method(*pmROGL, "glPrioritizeTexturesEXT", rogl_glPrioritizeTexturesEXT, 3);
    rb_define_method(*pmROGL, "glTextureNormalEXT", rogl_glTextureNormalEXT, 1);
    rb_define_method(*pmROGL, "glGetQueryObjecti64vEXT", rogl_glGetQueryObjecti64vEXT, 3);
    rb_define_method(*pmROGL, "glGetQueryObjectui64vEXT", rogl_glGetQueryObjectui64vEXT, 3);
    rb_define_method(*pmROGL, "glBeginTransformFeedbackEXT", rogl_glBeginTransformFeedbackEXT, 1);
    rb_define_method(*pmROGL, "glEndTransformFeedbackEXT", rogl_glEndTransformFeedbackEXT, 0);
    rb_define_method(*pmROGL, "glBindBufferRangeEXT", rogl_glBindBufferRangeEXT, 5);
    rb_define_method(*pmROGL, "glBindBufferOffsetEXT", rogl_glBindBufferOffsetEXT, 4);
    rb_define_method(*pmROGL, "glBindBufferBaseEXT", rogl_glBindBufferBaseEXT, 3);
    rb_define_method(*pmROGL, "glTransformFeedbackVaryingsEXT", rogl_glTransformFeedbackVaryingsEXT, 4);
    rb_define_method(*pmROGL, "glGetTransformFeedbackVaryingEXT", rogl_glGetTransformFeedbackVaryingEXT, 7);
    rb_define_method(*pmROGL, "glArrayElementEXT", rogl_glArrayElementEXT, 1);
    rb_define_method(*pmROGL, "glColorPointerEXT", rogl_glColorPointerEXT, 5);
    rb_define_method(*pmROGL, "glDrawArraysEXT", rogl_glDrawArraysEXT, 3);
    rb_define_method(*pmROGL, "glEdgeFlagPointerEXT", rogl_glEdgeFlagPointerEXT, 3);
    rb_define_method(*pmROGL, "glGetPointervEXT", rogl_glGetPointervEXT, 2);
    rb_define_method(*pmROGL, "glIndexPointerEXT", rogl_glIndexPointerEXT, 4);
    rb_define_method(*pmROGL, "glNormalPointerEXT", rogl_glNormalPointerEXT, 4);
    rb_define_method(*pmROGL, "glTexCoordPointerEXT", rogl_glTexCoordPointerEXT, 5);
    rb_define_method(*pmROGL, "glVertexPointerEXT", rogl_glVertexPointerEXT, 5);
    rb_define_method(*pmROGL, "glVertexAttribL1dEXT", rogl_glVertexAttribL1dEXT, 2);
    rb_define_method(*pmROGL, "glVertexAttribL2dEXT", rogl_glVertexAttribL2dEXT, 3);
    rb_define_method(*pmROGL, "glVertexAttribL3dEXT", rogl_glVertexAttribL3dEXT, 4);
    rb_define_method(*pmROGL, "glVertexAttribL4dEXT", rogl_glVertexAttribL4dEXT, 5);
    rb_define_method(*pmROGL, "glVertexAttribL1dvEXT", rogl_glVertexAttribL1dvEXT, 2);
    rb_define_method(*pmROGL, "glVertexAttribL2dvEXT", rogl_glVertexAttribL2dvEXT, 2);
    rb_define_method(*pmROGL, "glVertexAttribL3dvEXT", rogl_glVertexAttribL3dvEXT, 2);
    rb_define_method(*pmROGL, "glVertexAttribL4dvEXT", rogl_glVertexAttribL4dvEXT, 2);
    rb_define_method(*pmROGL, "glVertexAttribLPointerEXT", rogl_glVertexAttribLPointerEXT, 5);
    rb_define_method(*pmROGL, "glGetVertexAttribLdvEXT", rogl_glGetVertexAttribLdvEXT, 3);
    rb_define_method(*pmROGL, "glBeginVertexShaderEXT", rogl_glBeginVertexShaderEXT, 0);
    rb_define_method(*pmROGL, "glEndVertexShaderEXT", rogl_glEndVertexShaderEXT, 0);
    rb_define_method(*pmROGL, "glBindVertexShaderEXT", rogl_glBindVertexShaderEXT, 1);
    rb_define_method(*pmROGL, "glGenVertexShadersEXT", rogl_glGenVertexShadersEXT, 1);
    rb_define_method(*pmROGL, "glDeleteVertexShaderEXT", rogl_glDeleteVertexShaderEXT, 1);
    rb_define_method(*pmROGL, "glShaderOp1EXT", rogl_glShaderOp1EXT, 3);
    rb_define_method(*pmROGL, "glShaderOp2EXT", rogl_glShaderOp2EXT, 4);
    rb_define_method(*pmROGL, "glShaderOp3EXT", rogl_glShaderOp3EXT, 5);
    rb_define_method(*pmROGL, "glSwizzleEXT", rogl_glSwizzleEXT, 6);
    rb_define_method(*pmROGL, "glWriteMaskEXT", rogl_glWriteMaskEXT, 6);
    rb_define_method(*pmROGL, "glInsertComponentEXT", rogl_glInsertComponentEXT, 3);
    rb_define_method(*pmROGL, "glExtractComponentEXT", rogl_glExtractComponentEXT, 3);
    rb_define_method(*pmROGL, "glGenSymbolsEXT", rogl_glGenSymbolsEXT, 4);
    rb_define_method(*pmROGL, "glSetInvariantEXT", rogl_glSetInvariantEXT, 3);
    rb_define_method(*pmROGL, "glSetLocalConstantEXT", rogl_glSetLocalConstantEXT, 3);
    rb_define_method(*pmROGL, "glVariantbvEXT", rogl_glVariantbvEXT, 2);
    rb_define_method(*pmROGL, "glVariantsvEXT", rogl_glVariantsvEXT, 2);
    rb_define_method(*pmROGL, "glVariantivEXT", rogl_glVariantivEXT, 2);
    rb_define_method(*pmROGL, "glVariantfvEXT", rogl_glVariantfvEXT, 2);
    rb_define_method(*pmROGL, "glVariantdvEXT", rogl_glVariantdvEXT, 2);
    rb_define_method(*pmROGL, "glVariantubvEXT", rogl_glVariantubvEXT, 2);
    rb_define_method(*pmROGL, "glVariantusvEXT", rogl_glVariantusvEXT, 2);
    rb_define_method(*pmROGL, "glVariantuivEXT", rogl_glVariantuivEXT, 2);
    rb_define_method(*pmROGL, "glVariantPointerEXT", rogl_glVariantPointerEXT, 4);
    rb_define_method(*pmROGL, "glEnableVariantClientStateEXT", rogl_glEnableVariantClientStateEXT, 1);
    rb_define_method(*pmROGL, "glDisableVariantClientStateEXT", rogl_glDisableVariantClientStateEXT, 1);
    rb_define_method(*pmROGL, "glBindLightParameterEXT", rogl_glBindLightParameterEXT, 2);
    rb_define_method(*pmROGL, "glBindMaterialParameterEXT", rogl_glBindMaterialParameterEXT, 2);
    rb_define_method(*pmROGL, "glBindTexGenParameterEXT", rogl_glBindTexGenParameterEXT, 3);
    rb_define_method(*pmROGL, "glBindTextureUnitParameterEXT", rogl_glBindTextureUnitParameterEXT, 2);
    rb_define_method(*pmROGL, "glBindParameterEXT", rogl_glBindParameterEXT, 1);
    rb_define_method(*pmROGL, "glIsVariantEnabledEXT", rogl_glIsVariantEnabledEXT, 2);
    rb_define_method(*pmROGL, "glGetVariantBooleanvEXT", rogl_glGetVariantBooleanvEXT, 3);
    rb_define_method(*pmROGL, "glGetVariantIntegervEXT", rogl_glGetVariantIntegervEXT, 3);
    rb_define_method(*pmROGL, "glGetVariantFloatvEXT", rogl_glGetVariantFloatvEXT, 3);
    rb_define_method(*pmROGL, "glGetVariantPointervEXT", rogl_glGetVariantPointervEXT, 3);
    rb_define_method(*pmROGL, "glGetInvariantBooleanvEXT", rogl_glGetInvariantBooleanvEXT, 3);
    rb_define_method(*pmROGL, "glGetInvariantIntegervEXT", rogl_glGetInvariantIntegervEXT, 3);
    rb_define_method(*pmROGL, "glGetInvariantFloatvEXT", rogl_glGetInvariantFloatvEXT, 3);
    rb_define_method(*pmROGL, "glGetLocalConstantBooleanvEXT", rogl_glGetLocalConstantBooleanvEXT, 3);
    rb_define_method(*pmROGL, "glGetLocalConstantIntegervEXT", rogl_glGetLocalConstantIntegervEXT, 3);
    rb_define_method(*pmROGL, "glGetLocalConstantFloatvEXT", rogl_glGetLocalConstantFloatvEXT, 3);
    rb_define_method(*pmROGL, "glVertexWeightfEXT", rogl_glVertexWeightfEXT, 1);
    rb_define_method(*pmROGL, "glVertexWeightfvEXT", rogl_glVertexWeightfvEXT, 1);
    rb_define_method(*pmROGL, "glVertexWeightPointerEXT", rogl_glVertexWeightPointerEXT, 4);
    rb_define_method(*pmROGL, "glImportSyncEXT", rogl_glImportSyncEXT, 3);
    rb_define_method(*pmROGL, "glFrameTerminatorGREMEDY", rogl_glFrameTerminatorGREMEDY, 0);
    rb_define_method(*pmROGL, "glStringMarkerGREMEDY", rogl_glStringMarkerGREMEDY, 2);
    rb_define_method(*pmROGL, "glImageTransformParameteriHP", rogl_glImageTransformParameteriHP, 3);
    rb_define_method(*pmROGL, "glImageTransformParameterfHP", rogl_glImageTransformParameterfHP, 3);
    rb_define_method(*pmROGL, "glImageTransformParameterivHP", rogl_glImageTransformParameterivHP, 3);
    rb_define_method(*pmROGL, "glImageTransformParameterfvHP", rogl_glImageTransformParameterfvHP, 3);
    rb_define_method(*pmROGL, "glGetImageTransformParameterivHP", rogl_glGetImageTransformParameterivHP, 3);
    rb_define_method(*pmROGL, "glGetImageTransformParameterfvHP", rogl_glGetImageTransformParameterfvHP, 3);
    rb_define_method(*pmROGL, "glMultiModeDrawArraysIBM", rogl_glMultiModeDrawArraysIBM, 5);
    rb_define_method(*pmROGL, "glMultiModeDrawElementsIBM", rogl_glMultiModeDrawElementsIBM, 6);
    rb_define_method(*pmROGL, "glFlushStaticDataIBM", rogl_glFlushStaticDataIBM, 1);
    rb_define_method(*pmROGL, "glColorPointerListIBM", rogl_glColorPointerListIBM, 5);
    rb_define_method(*pmROGL, "glSecondaryColorPointerListIBM", rogl_glSecondaryColorPointerListIBM, 5);
    rb_define_method(*pmROGL, "glEdgeFlagPointerListIBM", rogl_glEdgeFlagPointerListIBM, 3);
    rb_define_method(*pmROGL, "glFogCoordPointerListIBM", rogl_glFogCoordPointerListIBM, 4);
    rb_define_method(*pmROGL, "glIndexPointerListIBM", rogl_glIndexPointerListIBM, 4);
    rb_define_method(*pmROGL, "glNormalPointerListIBM", rogl_glNormalPointerListIBM, 4);
    rb_define_method(*pmROGL, "glTexCoordPointerListIBM", rogl_glTexCoordPointerListIBM, 5);
    rb_define_method(*pmROGL, "glVertexPointerListIBM", rogl_glVertexPointerListIBM, 5);
    rb_define_method(*pmROGL, "glBlendFuncSeparateINGR", rogl_glBlendFuncSeparateINGR, 4);
    rb_define_method(*pmROGL, "glApplyFramebufferAttachmentCMAAINTEL", rogl_glApplyFramebufferAttachmentCMAAINTEL, 0);
    rb_define_method(*pmROGL, "glSyncTextureINTEL", rogl_glSyncTextureINTEL, 1);
    rb_define_method(*pmROGL, "glUnmapTexture2DINTEL", rogl_glUnmapTexture2DINTEL, 2);
    rb_define_method(*pmROGL, "glMapTexture2DINTEL", rogl_glMapTexture2DINTEL, 5);
    rb_define_method(*pmROGL, "glVertexPointervINTEL", rogl_glVertexPointervINTEL, 3);
    rb_define_method(*pmROGL, "glNormalPointervINTEL", rogl_glNormalPointervINTEL, 2);
    rb_define_method(*pmROGL, "glColorPointervINTEL", rogl_glColorPointervINTEL, 3);
    rb_define_method(*pmROGL, "glTexCoordPointervINTEL", rogl_glTexCoordPointervINTEL, 3);
    rb_define_method(*pmROGL, "glBeginPerfQueryINTEL", rogl_glBeginPerfQueryINTEL, 1);
    rb_define_method(*pmROGL, "glCreatePerfQueryINTEL", rogl_glCreatePerfQueryINTEL, 2);
    rb_define_method(*pmROGL, "glDeletePerfQueryINTEL", rogl_glDeletePerfQueryINTEL, 1);
    rb_define_method(*pmROGL, "glEndPerfQueryINTEL", rogl_glEndPerfQueryINTEL, 1);
    rb_define_method(*pmROGL, "glGetFirstPerfQueryIdINTEL", rogl_glGetFirstPerfQueryIdINTEL, 1);
    rb_define_method(*pmROGL, "glGetNextPerfQueryIdINTEL", rogl_glGetNextPerfQueryIdINTEL, 2);
    rb_define_method(*pmROGL, "glGetPerfCounterInfoINTEL", rogl_glGetPerfCounterInfoINTEL, 11);
    rb_define_method(*pmROGL, "glGetPerfQueryDataINTEL", rogl_glGetPerfQueryDataINTEL, 5);
    rb_define_method(*pmROGL, "glGetPerfQueryIdByNameINTEL", rogl_glGetPerfQueryIdByNameINTEL, 2);
    rb_define_method(*pmROGL, "glGetPerfQueryInfoINTEL", rogl_glGetPerfQueryInfoINTEL, 7);
    rb_define_method(*pmROGL, "glBlendBarrierKHR", rogl_glBlendBarrierKHR, 0);
    rb_define_method(*pmROGL, "glDebugMessageControlKHR", rogl_glDebugMessageControlKHR, 6);
    rb_define_method(*pmROGL, "glDebugMessageInsertKHR", rogl_glDebugMessageInsertKHR, 6);
    rb_define_method(*pmROGL, "glDebugMessageCallbackKHR", rogl_glDebugMessageCallbackKHR, 2);
    rb_define_method(*pmROGL, "glGetDebugMessageLogKHR", rogl_glGetDebugMessageLogKHR, 8);
    rb_define_method(*pmROGL, "glPushDebugGroupKHR", rogl_glPushDebugGroupKHR, 4);
    rb_define_method(*pmROGL, "glPopDebugGroupKHR", rogl_glPopDebugGroupKHR, 0);
    rb_define_method(*pmROGL, "glObjectLabelKHR", rogl_glObjectLabelKHR, 4);
    rb_define_method(*pmROGL, "glGetObjectLabelKHR", rogl_glGetObjectLabelKHR, 5);
    rb_define_method(*pmROGL, "glObjectPtrLabelKHR", rogl_glObjectPtrLabelKHR, 3);
    rb_define_method(*pmROGL, "glGetObjectPtrLabelKHR", rogl_glGetObjectPtrLabelKHR, 4);
    rb_define_method(*pmROGL, "glGetPointervKHR", rogl_glGetPointervKHR, 2);
    rb_define_method(*pmROGL, "glGetGraphicsResetStatusKHR", rogl_glGetGraphicsResetStatusKHR, 0);
    rb_define_method(*pmROGL, "glReadnPixelsKHR", rogl_glReadnPixelsKHR, 8);
    rb_define_method(*pmROGL, "glGetnUniformfvKHR", rogl_glGetnUniformfvKHR, 4);
    rb_define_method(*pmROGL, "glGetnUniformivKHR", rogl_glGetnUniformivKHR, 4);
    rb_define_method(*pmROGL, "glGetnUniformuivKHR", rogl_glGetnUniformuivKHR, 4);
    rb_define_method(*pmROGL, "glResizeBuffersMESA", rogl_glResizeBuffersMESA, 0);
    rb_define_method(*pmROGL, "glWindowPos2dMESA", rogl_glWindowPos2dMESA, 2);
    rb_define_method(*pmROGL, "glWindowPos2dvMESA", rogl_glWindowPos2dvMESA, 1);
    rb_define_method(*pmROGL, "glWindowPos2fMESA", rogl_glWindowPos2fMESA, 2);
    rb_define_method(*pmROGL, "glWindowPos2fvMESA", rogl_glWindowPos2fvMESA, 1);
    rb_define_method(*pmROGL, "glWindowPos2iMESA", rogl_glWindowPos2iMESA, 2);
    rb_define_method(*pmROGL, "glWindowPos2ivMESA", rogl_glWindowPos2ivMESA, 1);
    rb_define_method(*pmROGL, "glWindowPos2sMESA", rogl_glWindowPos2sMESA, 2);
    rb_define_method(*pmROGL, "glWindowPos2svMESA", rogl_glWindowPos2svMESA, 1);
    rb_define_method(*pmROGL, "glWindowPos3dMESA", rogl_glWindowPos3dMESA, 3);
    rb_define_method(*pmROGL, "glWindowPos3dvMESA", rogl_glWindowPos3dvMESA, 1);
    rb_define_method(*pmROGL, "glWindowPos3fMESA", rogl_glWindowPos3fMESA, 3);
    rb_define_method(*pmROGL, "glWindowPos3fvMESA", rogl_glWindowPos3fvMESA, 1);
    rb_define_method(*pmROGL, "glWindowPos3iMESA", rogl_glWindowPos3iMESA, 3);
    rb_define_method(*pmROGL, "glWindowPos3ivMESA", rogl_glWindowPos3ivMESA, 1);
    rb_define_method(*pmROGL, "glWindowPos3sMESA", rogl_glWindowPos3sMESA, 3);
    rb_define_method(*pmROGL, "glWindowPos3svMESA", rogl_glWindowPos3svMESA, 1);
    rb_define_method(*pmROGL, "glWindowPos4dMESA", rogl_glWindowPos4dMESA, 4);
    rb_define_method(*pmROGL, "glWindowPos4dvMESA", rogl_glWindowPos4dvMESA, 1);
    rb_define_method(*pmROGL, "glWindowPos4fMESA", rogl_glWindowPos4fMESA, 4);
    rb_define_method(*pmROGL, "glWindowPos4fvMESA", rogl_glWindowPos4fvMESA, 1);
    rb_define_method(*pmROGL, "glWindowPos4iMESA", rogl_glWindowPos4iMESA, 4);
    rb_define_method(*pmROGL, "glWindowPos4ivMESA", rogl_glWindowPos4ivMESA, 1);
    rb_define_method(*pmROGL, "glWindowPos4sMESA", rogl_glWindowPos4sMESA, 4);
    rb_define_method(*pmROGL, "glWindowPos4svMESA", rogl_glWindowPos4svMESA, 1);
    rb_define_method(*pmROGL, "glBeginConditionalRenderNVX", rogl_glBeginConditionalRenderNVX, 1);
    rb_define_method(*pmROGL, "glEndConditionalRenderNVX", rogl_glEndConditionalRenderNVX, 0);
    rb_define_method(*pmROGL, "glMultiDrawArraysIndirectBindlessNV", rogl_glMultiDrawArraysIndirectBindlessNV, 5);
    rb_define_method(*pmROGL, "glMultiDrawElementsIndirectBindlessNV", rogl_glMultiDrawElementsIndirectBindlessNV, 6);
    rb_define_method(*pmROGL, "glMultiDrawArraysIndirectBindlessCountNV", rogl_glMultiDrawArraysIndirectBindlessCountNV, 6);
    rb_define_method(*pmROGL, "glMultiDrawElementsIndirectBindlessCountNV", rogl_glMultiDrawElementsIndirectBindlessCountNV, 7);
    rb_define_method(*pmROGL, "glGetTextureHandleNV", rogl_glGetTextureHandleNV, 1);
    rb_define_method(*pmROGL, "glGetTextureSamplerHandleNV", rogl_glGetTextureSamplerHandleNV, 2);
    rb_define_method(*pmROGL, "glMakeTextureHandleResidentNV", rogl_glMakeTextureHandleResidentNV, 1);
    rb_define_method(*pmROGL, "glMakeTextureHandleNonResidentNV", rogl_glMakeTextureHandleNonResidentNV, 1);
    rb_define_method(*pmROGL, "glGetImageHandleNV", rogl_glGetImageHandleNV, 5);
    rb_define_method(*pmROGL, "glMakeImageHandleResidentNV", rogl_glMakeImageHandleResidentNV, 2);
    rb_define_method(*pmROGL, "glMakeImageHandleNonResidentNV", rogl_glMakeImageHandleNonResidentNV, 1);
    rb_define_method(*pmROGL, "glUniformHandleui64NV", rogl_glUniformHandleui64NV, 2);
    rb_define_method(*pmROGL, "glUniformHandleui64vNV", rogl_glUniformHandleui64vNV, 3);
    rb_define_method(*pmROGL, "glProgramUniformHandleui64NV", rogl_glProgramUniformHandleui64NV, 3);
    rb_define_method(*pmROGL, "glProgramUniformHandleui64vNV", rogl_glProgramUniformHandleui64vNV, 4);
    rb_define_method(*pmROGL, "glIsTextureHandleResidentNV", rogl_glIsTextureHandleResidentNV, 1);
    rb_define_method(*pmROGL, "glIsImageHandleResidentNV", rogl_glIsImageHandleResidentNV, 1);
    rb_define_method(*pmROGL, "glBlendParameteriNV", rogl_glBlendParameteriNV, 2);
    rb_define_method(*pmROGL, "glBlendBarrierNV", rogl_glBlendBarrierNV, 0);
    rb_define_method(*pmROGL, "glCreateStatesNV", rogl_glCreateStatesNV, 2);
    rb_define_method(*pmROGL, "glDeleteStatesNV", rogl_glDeleteStatesNV, 2);
    rb_define_method(*pmROGL, "glIsStateNV", rogl_glIsStateNV, 1);
    rb_define_method(*pmROGL, "glStateCaptureNV", rogl_glStateCaptureNV, 2);
    rb_define_method(*pmROGL, "glGetCommandHeaderNV", rogl_glGetCommandHeaderNV, 2);
    rb_define_method(*pmROGL, "glGetStageIndexNV", rogl_glGetStageIndexNV, 1);
    rb_define_method(*pmROGL, "glDrawCommandsNV", rogl_glDrawCommandsNV, 5);
    rb_define_method(*pmROGL, "glDrawCommandsAddressNV", rogl_glDrawCommandsAddressNV, 4);
    rb_define_method(*pmROGL, "glDrawCommandsStatesNV", rogl_glDrawCommandsStatesNV, 6);
    rb_define_method(*pmROGL, "glDrawCommandsStatesAddressNV", rogl_glDrawCommandsStatesAddressNV, 5);
    rb_define_method(*pmROGL, "glCreateCommandListsNV", rogl_glCreateCommandListsNV, 2);
    rb_define_method(*pmROGL, "glDeleteCommandListsNV", rogl_glDeleteCommandListsNV, 2);
    rb_define_method(*pmROGL, "glIsCommandListNV", rogl_glIsCommandListNV, 1);
    rb_define_method(*pmROGL, "glListDrawCommandsStatesClientNV", rogl_glListDrawCommandsStatesClientNV, 7);
    rb_define_method(*pmROGL, "glCommandListSegmentsNV", rogl_glCommandListSegmentsNV, 2);
    rb_define_method(*pmROGL, "glCompileCommandListNV", rogl_glCompileCommandListNV, 1);
    rb_define_method(*pmROGL, "glCallCommandListNV", rogl_glCallCommandListNV, 1);
    rb_define_method(*pmROGL, "glBeginConditionalRenderNV", rogl_glBeginConditionalRenderNV, 2);
    rb_define_method(*pmROGL, "glEndConditionalRenderNV", rogl_glEndConditionalRenderNV, 0);
    rb_define_method(*pmROGL, "glSubpixelPrecisionBiasNV", rogl_glSubpixelPrecisionBiasNV, 2);
    rb_define_method(*pmROGL, "glConservativeRasterParameterfNV", rogl_glConservativeRasterParameterfNV, 2);
    rb_define_method(*pmROGL, "glCopyImageSubDataNV", rogl_glCopyImageSubDataNV, 15);
    rb_define_method(*pmROGL, "glDepthRangedNV", rogl_glDepthRangedNV, 2);
    rb_define_method(*pmROGL, "glClearDepthdNV", rogl_glClearDepthdNV, 1);
    rb_define_method(*pmROGL, "glDepthBoundsdNV", rogl_glDepthBoundsdNV, 2);
    rb_define_method(*pmROGL, "glDrawTextureNV", rogl_glDrawTextureNV, 11);
    rb_define_method(*pmROGL, "glMapControlPointsNV", rogl_glMapControlPointsNV, 9);
    rb_define_method(*pmROGL, "glMapParameterivNV", rogl_glMapParameterivNV, 3);
    rb_define_method(*pmROGL, "glMapParameterfvNV", rogl_glMapParameterfvNV, 3);
    rb_define_method(*pmROGL, "glGetMapControlPointsNV", rogl_glGetMapControlPointsNV, 7);
    rb_define_method(*pmROGL, "glGetMapParameterivNV", rogl_glGetMapParameterivNV, 3);
    rb_define_method(*pmROGL, "glGetMapParameterfvNV", rogl_glGetMapParameterfvNV, 3);
    rb_define_method(*pmROGL, "glGetMapAttribParameterivNV", rogl_glGetMapAttribParameterivNV, 4);
    rb_define_method(*pmROGL, "glGetMapAttribParameterfvNV", rogl_glGetMapAttribParameterfvNV, 4);
    rb_define_method(*pmROGL, "glEvalMapsNV", rogl_glEvalMapsNV, 2);
    rb_define_method(*pmROGL, "glGetMultisamplefvNV", rogl_glGetMultisamplefvNV, 3);
    rb_define_method(*pmROGL, "glSampleMaskIndexedNV", rogl_glSampleMaskIndexedNV, 2);
    rb_define_method(*pmROGL, "glTexRenderbufferNV", rogl_glTexRenderbufferNV, 2);
    rb_define_method(*pmROGL, "glDeleteFencesNV", rogl_glDeleteFencesNV, 2);
    rb_define_method(*pmROGL, "glGenFencesNV", rogl_glGenFencesNV, 2);
    rb_define_method(*pmROGL, "glIsFenceNV", rogl_glIsFenceNV, 1);
    rb_define_method(*pmROGL, "glTestFenceNV", rogl_glTestFenceNV, 1);
    rb_define_method(*pmROGL, "glGetFenceivNV", rogl_glGetFenceivNV, 3);
    rb_define_method(*pmROGL, "glFinishFenceNV", rogl_glFinishFenceNV, 1);
    rb_define_method(*pmROGL, "glSetFenceNV", rogl_glSetFenceNV, 2);
    rb_define_method(*pmROGL, "glFragmentCoverageColorNV", rogl_glFragmentCoverageColorNV, 1);
    rb_define_method(*pmROGL, "glProgramNamedParameter4fNV", rogl_glProgramNamedParameter4fNV, 7);
    rb_define_method(*pmROGL, "glProgramNamedParameter4fvNV", rogl_glProgramNamedParameter4fvNV, 4);
    rb_define_method(*pmROGL, "glProgramNamedParameter4dNV", rogl_glProgramNamedParameter4dNV, 7);
    rb_define_method(*pmROGL, "glProgramNamedParameter4dvNV", rogl_glProgramNamedParameter4dvNV, 4);
    rb_define_method(*pmROGL, "glGetProgramNamedParameterfvNV", rogl_glGetProgramNamedParameterfvNV, 4);
    rb_define_method(*pmROGL, "glGetProgramNamedParameterdvNV", rogl_glGetProgramNamedParameterdvNV, 4);
    rb_define_method(*pmROGL, "glCoverageModulationTableNV", rogl_glCoverageModulationTableNV, 2);
    rb_define_method(*pmROGL, "glGetCoverageModulationTableNV", rogl_glGetCoverageModulationTableNV, 2);
    rb_define_method(*pmROGL, "glCoverageModulationNV", rogl_glCoverageModulationNV, 1);
    rb_define_method(*pmROGL, "glRenderbufferStorageMultisampleCoverageNV", rogl_glRenderbufferStorageMultisampleCoverageNV, 6);
    rb_define_method(*pmROGL, "glProgramVertexLimitNV", rogl_glProgramVertexLimitNV, 2);
    rb_define_method(*pmROGL, "glFramebufferTextureEXT", rogl_glFramebufferTextureEXT, 4);
    rb_define_method(*pmROGL, "glFramebufferTextureFaceEXT", rogl_glFramebufferTextureFaceEXT, 5);
    rb_define_method(*pmROGL, "glProgramLocalParameterI4iNV", rogl_glProgramLocalParameterI4iNV, 6);
    rb_define_method(*pmROGL, "glProgramLocalParameterI4ivNV", rogl_glProgramLocalParameterI4ivNV, 3);
    rb_define_method(*pmROGL, "glProgramLocalParametersI4ivNV", rogl_glProgramLocalParametersI4ivNV, 4);
    rb_define_method(*pmROGL, "glProgramLocalParameterI4uiNV", rogl_glProgramLocalParameterI4uiNV, 6);
    rb_define_method(*pmROGL, "glProgramLocalParameterI4uivNV", rogl_glProgramLocalParameterI4uivNV, 3);
    rb_define_method(*pmROGL, "glProgramLocalParametersI4uivNV", rogl_glProgramLocalParametersI4uivNV, 4);
    rb_define_method(*pmROGL, "glProgramEnvParameterI4iNV", rogl_glProgramEnvParameterI4iNV, 6);
    rb_define_method(*pmROGL, "glProgramEnvParameterI4ivNV", rogl_glProgramEnvParameterI4ivNV, 3);
    rb_define_method(*pmROGL, "glProgramEnvParametersI4ivNV", rogl_glProgramEnvParametersI4ivNV, 4);
    rb_define_method(*pmROGL, "glProgramEnvParameterI4uiNV", rogl_glProgramEnvParameterI4uiNV, 6);
    rb_define_method(*pmROGL, "glProgramEnvParameterI4uivNV", rogl_glProgramEnvParameterI4uivNV, 3);
    rb_define_method(*pmROGL, "glProgramEnvParametersI4uivNV", rogl_glProgramEnvParametersI4uivNV, 4);
    rb_define_method(*pmROGL, "glGetProgramLocalParameterIivNV", rogl_glGetProgramLocalParameterIivNV, 3);
    rb_define_method(*pmROGL, "glGetProgramLocalParameterIuivNV", rogl_glGetProgramLocalParameterIuivNV, 3);
    rb_define_method(*pmROGL, "glGetProgramEnvParameterIivNV", rogl_glGetProgramEnvParameterIivNV, 3);
    rb_define_method(*pmROGL, "glGetProgramEnvParameterIuivNV", rogl_glGetProgramEnvParameterIuivNV, 3);
    rb_define_method(*pmROGL, "glProgramSubroutineParametersuivNV", rogl_glProgramSubroutineParametersuivNV, 3);
    rb_define_method(*pmROGL, "glGetProgramSubroutineParameteruivNV", rogl_glGetProgramSubroutineParameteruivNV, 3);
    rb_define_method(*pmROGL, "glVertex2hNV", rogl_glVertex2hNV, 2);
    rb_define_method(*pmROGL, "glVertex2hvNV", rogl_glVertex2hvNV, 1);
    rb_define_method(*pmROGL, "glVertex3hNV", rogl_glVertex3hNV, 3);
    rb_define_method(*pmROGL, "glVertex3hvNV", rogl_glVertex3hvNV, 1);
    rb_define_method(*pmROGL, "glVertex4hNV", rogl_glVertex4hNV, 4);
    rb_define_method(*pmROGL, "glVertex4hvNV", rogl_glVertex4hvNV, 1);
    rb_define_method(*pmROGL, "glNormal3hNV", rogl_glNormal3hNV, 3);
    rb_define_method(*pmROGL, "glNormal3hvNV", rogl_glNormal3hvNV, 1);
    rb_define_method(*pmROGL, "glColor3hNV", rogl_glColor3hNV, 3);
    rb_define_method(*pmROGL, "glColor3hvNV", rogl_glColor3hvNV, 1);
    rb_define_method(*pmROGL, "glColor4hNV", rogl_glColor4hNV, 4);
    rb_define_method(*pmROGL, "glColor4hvNV", rogl_glColor4hvNV, 1);
    rb_define_method(*pmROGL, "glTexCoord1hNV", rogl_glTexCoord1hNV, 1);
    rb_define_method(*pmROGL, "glTexCoord1hvNV", rogl_glTexCoord1hvNV, 1);
    rb_define_method(*pmROGL, "glTexCoord2hNV", rogl_glTexCoord2hNV, 2);
    rb_define_method(*pmROGL, "glTexCoord2hvNV", rogl_glTexCoord2hvNV, 1);
    rb_define_method(*pmROGL, "glTexCoord3hNV", rogl_glTexCoord3hNV, 3);
    rb_define_method(*pmROGL, "glTexCoord3hvNV", rogl_glTexCoord3hvNV, 1);
    rb_define_method(*pmROGL, "glTexCoord4hNV", rogl_glTexCoord4hNV, 4);
    rb_define_method(*pmROGL, "glTexCoord4hvNV", rogl_glTexCoord4hvNV, 1);
    rb_define_method(*pmROGL, "glMultiTexCoord1hNV", rogl_glMultiTexCoord1hNV, 2);
    rb_define_method(*pmROGL, "glMultiTexCoord1hvNV", rogl_glMultiTexCoord1hvNV, 2);
    rb_define_method(*pmROGL, "glMultiTexCoord2hNV", rogl_glMultiTexCoord2hNV, 3);
    rb_define_method(*pmROGL, "glMultiTexCoord2hvNV", rogl_glMultiTexCoord2hvNV, 2);
    rb_define_method(*pmROGL, "glMultiTexCoord3hNV", rogl_glMultiTexCoord3hNV, 4);
    rb_define_method(*pmROGL, "glMultiTexCoord3hvNV", rogl_glMultiTexCoord3hvNV, 2);
    rb_define_method(*pmROGL, "glMultiTexCoord4hNV", rogl_glMultiTexCoord4hNV, 5);
    rb_define_method(*pmROGL, "glMultiTexCoord4hvNV", rogl_glMultiTexCoord4hvNV, 2);
    rb_define_method(*pmROGL, "glFogCoordhNV", rogl_glFogCoordhNV, 1);
    rb_define_method(*pmROGL, "glFogCoordhvNV", rogl_glFogCoordhvNV, 1);
    rb_define_method(*pmROGL, "glSecondaryColor3hNV", rogl_glSecondaryColor3hNV, 3);
    rb_define_method(*pmROGL, "glSecondaryColor3hvNV", rogl_glSecondaryColor3hvNV, 1);
    rb_define_method(*pmROGL, "glVertexWeighthNV", rogl_glVertexWeighthNV, 1);
    rb_define_method(*pmROGL, "glVertexWeighthvNV", rogl_glVertexWeighthvNV, 1);
    rb_define_method(*pmROGL, "glVertexAttrib1hNV", rogl_glVertexAttrib1hNV, 2);
    rb_define_method(*pmROGL, "glVertexAttrib1hvNV", rogl_glVertexAttrib1hvNV, 2);
    rb_define_method(*pmROGL, "glVertexAttrib2hNV", rogl_glVertexAttrib2hNV, 3);
    rb_define_method(*pmROGL, "glVertexAttrib2hvNV", rogl_glVertexAttrib2hvNV, 2);
    rb_define_method(*pmROGL, "glVertexAttrib3hNV", rogl_glVertexAttrib3hNV, 4);
    rb_define_method(*pmROGL, "glVertexAttrib3hvNV", rogl_glVertexAttrib3hvNV, 2);
    rb_define_method(*pmROGL, "glVertexAttrib4hNV", rogl_glVertexAttrib4hNV, 5);
    rb_define_method(*pmROGL, "glVertexAttrib4hvNV", rogl_glVertexAttrib4hvNV, 2);
    rb_define_method(*pmROGL, "glVertexAttribs1hvNV", rogl_glVertexAttribs1hvNV, 3);
    rb_define_method(*pmROGL, "glVertexAttribs2hvNV", rogl_glVertexAttribs2hvNV, 3);
    rb_define_method(*pmROGL, "glVertexAttribs3hvNV", rogl_glVertexAttribs3hvNV, 3);
    rb_define_method(*pmROGL, "glVertexAttribs4hvNV", rogl_glVertexAttribs4hvNV, 3);
    rb_define_method(*pmROGL, "glGetInternalformatSampleivNV", rogl_glGetInternalformatSampleivNV, 6);
    rb_define_method(*pmROGL, "glGenOcclusionQueriesNV", rogl_glGenOcclusionQueriesNV, 2);
    rb_define_method(*pmROGL, "glDeleteOcclusionQueriesNV", rogl_glDeleteOcclusionQueriesNV, 2);
    rb_define_method(*pmROGL, "glIsOcclusionQueryNV", rogl_glIsOcclusionQueryNV, 1);
    rb_define_method(*pmROGL, "glBeginOcclusionQueryNV", rogl_glBeginOcclusionQueryNV, 1);
    rb_define_method(*pmROGL, "glEndOcclusionQueryNV", rogl_glEndOcclusionQueryNV, 0);
    rb_define_method(*pmROGL, "glGetOcclusionQueryivNV", rogl_glGetOcclusionQueryivNV, 3);
    rb_define_method(*pmROGL, "glGetOcclusionQueryuivNV", rogl_glGetOcclusionQueryuivNV, 3);
    rb_define_method(*pmROGL, "glProgramBufferParametersfvNV", rogl_glProgramBufferParametersfvNV, 5);
    rb_define_method(*pmROGL, "glProgramBufferParametersIivNV", rogl_glProgramBufferParametersIivNV, 5);
    rb_define_method(*pmROGL, "glProgramBufferParametersIuivNV", rogl_glProgramBufferParametersIuivNV, 5);
    rb_define_method(*pmROGL, "glGenPathsNV", rogl_glGenPathsNV, 1);
    rb_define_method(*pmROGL, "glDeletePathsNV", rogl_glDeletePathsNV, 2);
    rb_define_method(*pmROGL, "glIsPathNV", rogl_glIsPathNV, 1);
    rb_define_method(*pmROGL, "glPathCommandsNV", rogl_glPathCommandsNV, 6);
    rb_define_method(*pmROGL, "glPathCoordsNV", rogl_glPathCoordsNV, 4);
    rb_define_method(*pmROGL, "glPathSubCommandsNV", rogl_glPathSubCommandsNV, 8);
    rb_define_method(*pmROGL, "glPathSubCoordsNV", rogl_glPathSubCoordsNV, 5);
    rb_define_method(*pmROGL, "glPathStringNV", rogl_glPathStringNV, 4);
    rb_define_method(*pmROGL, "glPathGlyphsNV", rogl_glPathGlyphsNV, 10);
    rb_define_method(*pmROGL, "glPathGlyphRangeNV", rogl_glPathGlyphRangeNV, 9);
    rb_define_method(*pmROGL, "glWeightPathsNV", rogl_glWeightPathsNV, 4);
    rb_define_method(*pmROGL, "glCopyPathNV", rogl_glCopyPathNV, 2);
    rb_define_method(*pmROGL, "glInterpolatePathsNV", rogl_glInterpolatePathsNV, 4);
    rb_define_method(*pmROGL, "glTransformPathNV", rogl_glTransformPathNV, 4);
    rb_define_method(*pmROGL, "glPathParameterivNV", rogl_glPathParameterivNV, 3);
    rb_define_method(*pmROGL, "glPathParameteriNV", rogl_glPathParameteriNV, 3);
    rb_define_method(*pmROGL, "glPathParameterfvNV", rogl_glPathParameterfvNV, 3);
    rb_define_method(*pmROGL, "glPathParameterfNV", rogl_glPathParameterfNV, 3);
    rb_define_method(*pmROGL, "glPathDashArrayNV", rogl_glPathDashArrayNV, 3);
    rb_define_method(*pmROGL, "glPathStencilFuncNV", rogl_glPathStencilFuncNV, 3);
    rb_define_method(*pmROGL, "glPathStencilDepthOffsetNV", rogl_glPathStencilDepthOffsetNV, 2);
    rb_define_method(*pmROGL, "glStencilFillPathNV", rogl_glStencilFillPathNV, 3);
    rb_define_method(*pmROGL, "glStencilStrokePathNV", rogl_glStencilStrokePathNV, 3);
    rb_define_method(*pmROGL, "glStencilFillPathInstancedNV", rogl_glStencilFillPathInstancedNV, 8);
    rb_define_method(*pmROGL, "glStencilStrokePathInstancedNV", rogl_glStencilStrokePathInstancedNV, 8);
    rb_define_method(*pmROGL, "glPathCoverDepthFuncNV", rogl_glPathCoverDepthFuncNV, 1);
    rb_define_method(*pmROGL, "glCoverFillPathNV", rogl_glCoverFillPathNV, 2);
    rb_define_method(*pmROGL, "glCoverStrokePathNV", rogl_glCoverStrokePathNV, 2);
    rb_define_method(*pmROGL, "glCoverFillPathInstancedNV", rogl_glCoverFillPathInstancedNV, 7);
    rb_define_method(*pmROGL, "glCoverStrokePathInstancedNV", rogl_glCoverStrokePathInstancedNV, 7);
    rb_define_method(*pmROGL, "glGetPathParameterivNV", rogl_glGetPathParameterivNV, 3);
    rb_define_method(*pmROGL, "glGetPathParameterfvNV", rogl_glGetPathParameterfvNV, 3);
    rb_define_method(*pmROGL, "glGetPathCommandsNV", rogl_glGetPathCommandsNV, 2);
    rb_define_method(*pmROGL, "glGetPathCoordsNV", rogl_glGetPathCoordsNV, 2);
    rb_define_method(*pmROGL, "glGetPathDashArrayNV", rogl_glGetPathDashArrayNV, 2);
    rb_define_method(*pmROGL, "glGetPathMetricsNV", rogl_glGetPathMetricsNV, 7);
    rb_define_method(*pmROGL, "glGetPathMetricRangeNV", rogl_glGetPathMetricRangeNV, 5);
    rb_define_method(*pmROGL, "glGetPathSpacingNV", rogl_glGetPathSpacingNV, 9);
    rb_define_method(*pmROGL, "glIsPointInFillPathNV", rogl_glIsPointInFillPathNV, 4);
    rb_define_method(*pmROGL, "glIsPointInStrokePathNV", rogl_glIsPointInStrokePathNV, 3);
    rb_define_method(*pmROGL, "glGetPathLengthNV", rogl_glGetPathLengthNV, 3);
    rb_define_method(*pmROGL, "glPointAlongPathNV", rogl_glPointAlongPathNV, 8);
    rb_define_method(*pmROGL, "glMatrixLoad3x2fNV", rogl_glMatrixLoad3x2fNV, 2);
    rb_define_method(*pmROGL, "glMatrixLoad3x3fNV", rogl_glMatrixLoad3x3fNV, 2);
    rb_define_method(*pmROGL, "glMatrixLoadTranspose3x3fNV", rogl_glMatrixLoadTranspose3x3fNV, 2);
    rb_define_method(*pmROGL, "glMatrixMult3x2fNV", rogl_glMatrixMult3x2fNV, 2);
    rb_define_method(*pmROGL, "glMatrixMult3x3fNV", rogl_glMatrixMult3x3fNV, 2);
    rb_define_method(*pmROGL, "glMatrixMultTranspose3x3fNV", rogl_glMatrixMultTranspose3x3fNV, 2);
    rb_define_method(*pmROGL, "glStencilThenCoverFillPathNV", rogl_glStencilThenCoverFillPathNV, 4);
    rb_define_method(*pmROGL, "glStencilThenCoverStrokePathNV", rogl_glStencilThenCoverStrokePathNV, 4);
    rb_define_method(*pmROGL, "glStencilThenCoverFillPathInstancedNV", rogl_glStencilThenCoverFillPathInstancedNV, 9);
    rb_define_method(*pmROGL, "glStencilThenCoverStrokePathInstancedNV", rogl_glStencilThenCoverStrokePathInstancedNV, 9);
    rb_define_method(*pmROGL, "glPathGlyphIndexRangeNV", rogl_glPathGlyphIndexRangeNV, 6);
    rb_define_method(*pmROGL, "glPathGlyphIndexArrayNV", rogl_glPathGlyphIndexArrayNV, 8);
    rb_define_method(*pmROGL, "glPathMemoryGlyphIndexArrayNV", rogl_glPathMemoryGlyphIndexArrayNV, 9);
    rb_define_method(*pmROGL, "glProgramPathFragmentInputGenNV", rogl_glProgramPathFragmentInputGenNV, 5);
    rb_define_method(*pmROGL, "glGetProgramResourcefvNV", rogl_glGetProgramResourcefvNV, 8);
    rb_define_method(*pmROGL, "glPathColorGenNV", rogl_glPathColorGenNV, 4);
    rb_define_method(*pmROGL, "glPathTexGenNV", rogl_glPathTexGenNV, 4);
    rb_define_method(*pmROGL, "glPathFogGenNV", rogl_glPathFogGenNV, 1);
    rb_define_method(*pmROGL, "glGetPathColorGenivNV", rogl_glGetPathColorGenivNV, 3);
    rb_define_method(*pmROGL, "glGetPathColorGenfvNV", rogl_glGetPathColorGenfvNV, 3);
    rb_define_method(*pmROGL, "glGetPathTexGenivNV", rogl_glGetPathTexGenivNV, 3);
    rb_define_method(*pmROGL, "glGetPathTexGenfvNV", rogl_glGetPathTexGenfvNV, 3);
    rb_define_method(*pmROGL, "glPixelDataRangeNV", rogl_glPixelDataRangeNV, 3);
    rb_define_method(*pmROGL, "glFlushPixelDataRangeNV", rogl_glFlushPixelDataRangeNV, 1);
    rb_define_method(*pmROGL, "glPointParameteriNV", rogl_glPointParameteriNV, 2);
    rb_define_method(*pmROGL, "glPointParameterivNV", rogl_glPointParameterivNV, 2);
    rb_define_method(*pmROGL, "glPresentFrameKeyedNV", rogl_glPresentFrameKeyedNV, 11);
    rb_define_method(*pmROGL, "glPresentFrameDualFillNV", rogl_glPresentFrameDualFillNV, 13);
    rb_define_method(*pmROGL, "glGetVideoivNV", rogl_glGetVideoivNV, 3);
    rb_define_method(*pmROGL, "glGetVideouivNV", rogl_glGetVideouivNV, 3);
    rb_define_method(*pmROGL, "glGetVideoi64vNV", rogl_glGetVideoi64vNV, 3);
    rb_define_method(*pmROGL, "glGetVideoui64vNV", rogl_glGetVideoui64vNV, 3);
    rb_define_method(*pmROGL, "glPrimitiveRestartNV", rogl_glPrimitiveRestartNV, 0);
    rb_define_method(*pmROGL, "glPrimitiveRestartIndexNV", rogl_glPrimitiveRestartIndexNV, 1);
    rb_define_method(*pmROGL, "glCombinerParameterfvNV", rogl_glCombinerParameterfvNV, 2);
    rb_define_method(*pmROGL, "glCombinerParameterfNV", rogl_glCombinerParameterfNV, 2);
    rb_define_method(*pmROGL, "glCombinerParameterivNV", rogl_glCombinerParameterivNV, 2);
    rb_define_method(*pmROGL, "glCombinerParameteriNV", rogl_glCombinerParameteriNV, 2);
    rb_define_method(*pmROGL, "glCombinerInputNV", rogl_glCombinerInputNV, 6);
    rb_define_method(*pmROGL, "glCombinerOutputNV", rogl_glCombinerOutputNV, 10);
    rb_define_method(*pmROGL, "glFinalCombinerInputNV", rogl_glFinalCombinerInputNV, 4);
    rb_define_method(*pmROGL, "glGetCombinerInputParameterfvNV", rogl_glGetCombinerInputParameterfvNV, 5);
    rb_define_method(*pmROGL, "glGetCombinerInputParameterivNV", rogl_glGetCombinerInputParameterivNV, 5);
    rb_define_method(*pmROGL, "glGetCombinerOutputParameterfvNV", rogl_glGetCombinerOutputParameterfvNV, 4);
    rb_define_method(*pmROGL, "glGetCombinerOutputParameterivNV", rogl_glGetCombinerOutputParameterivNV, 4);
    rb_define_method(*pmROGL, "glGetFinalCombinerInputParameterfvNV", rogl_glGetFinalCombinerInputParameterfvNV, 3);
    rb_define_method(*pmROGL, "glGetFinalCombinerInputParameterivNV", rogl_glGetFinalCombinerInputParameterivNV, 3);
    rb_define_method(*pmROGL, "glCombinerStageParameterfvNV", rogl_glCombinerStageParameterfvNV, 3);
    rb_define_method(*pmROGL, "glGetCombinerStageParameterfvNV", rogl_glGetCombinerStageParameterfvNV, 3);
    rb_define_method(*pmROGL, "glFramebufferSampleLocationsfvNV", rogl_glFramebufferSampleLocationsfvNV, 4);
    rb_define_method(*pmROGL, "glNamedFramebufferSampleLocationsfvNV", rogl_glNamedFramebufferSampleLocationsfvNV, 4);
    rb_define_method(*pmROGL, "glResolveDepthValuesNV", rogl_glResolveDepthValuesNV, 0);
    rb_define_method(*pmROGL, "glMakeBufferResidentNV", rogl_glMakeBufferResidentNV, 2);
    rb_define_method(*pmROGL, "glMakeBufferNonResidentNV", rogl_glMakeBufferNonResidentNV, 1);
    rb_define_method(*pmROGL, "glIsBufferResidentNV", rogl_glIsBufferResidentNV, 1);
    rb_define_method(*pmROGL, "glMakeNamedBufferResidentNV", rogl_glMakeNamedBufferResidentNV, 2);
    rb_define_method(*pmROGL, "glMakeNamedBufferNonResidentNV", rogl_glMakeNamedBufferNonResidentNV, 1);
    rb_define_method(*pmROGL, "glIsNamedBufferResidentNV", rogl_glIsNamedBufferResidentNV, 1);
    rb_define_method(*pmROGL, "glGetBufferParameterui64vNV", rogl_glGetBufferParameterui64vNV, 3);
    rb_define_method(*pmROGL, "glGetNamedBufferParameterui64vNV", rogl_glGetNamedBufferParameterui64vNV, 3);
    rb_define_method(*pmROGL, "glGetIntegerui64vNV", rogl_glGetIntegerui64vNV, 2);
    rb_define_method(*pmROGL, "glUniformui64NV", rogl_glUniformui64NV, 2);
    rb_define_method(*pmROGL, "glUniformui64vNV", rogl_glUniformui64vNV, 3);
    rb_define_method(*pmROGL, "glProgramUniformui64NV", rogl_glProgramUniformui64NV, 3);
    rb_define_method(*pmROGL, "glProgramUniformui64vNV", rogl_glProgramUniformui64vNV, 4);
    rb_define_method(*pmROGL, "glTextureBarrierNV", rogl_glTextureBarrierNV, 0);
    rb_define_method(*pmROGL, "glTexImage2DMultisampleCoverageNV", rogl_glTexImage2DMultisampleCoverageNV, 7);
    rb_define_method(*pmROGL, "glTexImage3DMultisampleCoverageNV", rogl_glTexImage3DMultisampleCoverageNV, 8);
    rb_define_method(*pmROGL, "glTextureImage2DMultisampleNV", rogl_glTextureImage2DMultisampleNV, 7);
    rb_define_method(*pmROGL, "glTextureImage3DMultisampleNV", rogl_glTextureImage3DMultisampleNV, 8);
    rb_define_method(*pmROGL, "glTextureImage2DMultisampleCoverageNV", rogl_glTextureImage2DMultisampleCoverageNV, 8);
    rb_define_method(*pmROGL, "glTextureImage3DMultisampleCoverageNV", rogl_glTextureImage3DMultisampleCoverageNV, 9);
    rb_define_method(*pmROGL, "glBeginTransformFeedbackNV", rogl_glBeginTransformFeedbackNV, 1);
    rb_define_method(*pmROGL, "glEndTransformFeedbackNV", rogl_glEndTransformFeedbackNV, 0);
    rb_define_method(*pmROGL, "glTransformFeedbackAttribsNV", rogl_glTransformFeedbackAttribsNV, 3);
    rb_define_method(*pmROGL, "glBindBufferRangeNV", rogl_glBindBufferRangeNV, 5);
    rb_define_method(*pmROGL, "glBindBufferOffsetNV", rogl_glBindBufferOffsetNV, 4);
    rb_define_method(*pmROGL, "glBindBufferBaseNV", rogl_glBindBufferBaseNV, 3);
    rb_define_method(*pmROGL, "glTransformFeedbackVaryingsNV", rogl_glTransformFeedbackVaryingsNV, 4);
    rb_define_method(*pmROGL, "glActiveVaryingNV", rogl_glActiveVaryingNV, 2);
    rb_define_method(*pmROGL, "glGetVaryingLocationNV", rogl_glGetVaryingLocationNV, 2);
    rb_define_method(*pmROGL, "glGetActiveVaryingNV", rogl_glGetActiveVaryingNV, 7);
    rb_define_method(*pmROGL, "glGetTransformFeedbackVaryingNV", rogl_glGetTransformFeedbackVaryingNV, 3);
    rb_define_method(*pmROGL, "glTransformFeedbackStreamAttribsNV", rogl_glTransformFeedbackStreamAttribsNV, 5);
    rb_define_method(*pmROGL, "glBindTransformFeedbackNV", rogl_glBindTransformFeedbackNV, 2);
    rb_define_method(*pmROGL, "glDeleteTransformFeedbacksNV", rogl_glDeleteTransformFeedbacksNV, 2);
    rb_define_method(*pmROGL, "glGenTransformFeedbacksNV", rogl_glGenTransformFeedbacksNV, 2);
    rb_define_method(*pmROGL, "glIsTransformFeedbackNV", rogl_glIsTransformFeedbackNV, 1);
    rb_define_method(*pmROGL, "glPauseTransformFeedbackNV", rogl_glPauseTransformFeedbackNV, 0);
    rb_define_method(*pmROGL, "glResumeTransformFeedbackNV", rogl_glResumeTransformFeedbackNV, 0);
    rb_define_method(*pmROGL, "glDrawTransformFeedbackNV", rogl_glDrawTransformFeedbackNV, 2);
    rb_define_method(*pmROGL, "glVDPAUInitNV", rogl_glVDPAUInitNV, 2);
    rb_define_method(*pmROGL, "glVDPAUFiniNV", rogl_glVDPAUFiniNV, 0);
    rb_define_method(*pmROGL, "glVDPAURegisterVideoSurfaceNV", rogl_glVDPAURegisterVideoSurfaceNV, 4);
    rb_define_method(*pmROGL, "glVDPAURegisterOutputSurfaceNV", rogl_glVDPAURegisterOutputSurfaceNV, 4);
    rb_define_method(*pmROGL, "glVDPAUIsSurfaceNV", rogl_glVDPAUIsSurfaceNV, 1);
    rb_define_method(*pmROGL, "glVDPAUUnregisterSurfaceNV", rogl_glVDPAUUnregisterSurfaceNV, 1);
    rb_define_method(*pmROGL, "glVDPAUGetSurfaceivNV", rogl_glVDPAUGetSurfaceivNV, 5);
    rb_define_method(*pmROGL, "glVDPAUSurfaceAccessNV", rogl_glVDPAUSurfaceAccessNV, 2);
    rb_define_method(*pmROGL, "glVDPAUMapSurfacesNV", rogl_glVDPAUMapSurfacesNV, 2);
    rb_define_method(*pmROGL, "glVDPAUUnmapSurfacesNV", rogl_glVDPAUUnmapSurfacesNV, 2);
    rb_define_method(*pmROGL, "glFlushVertexArrayRangeNV", rogl_glFlushVertexArrayRangeNV, 0);
    rb_define_method(*pmROGL, "glVertexArrayRangeNV", rogl_glVertexArrayRangeNV, 2);
    rb_define_method(*pmROGL, "glVertexAttribL1i64NV", rogl_glVertexAttribL1i64NV, 2);
    rb_define_method(*pmROGL, "glVertexAttribL2i64NV", rogl_glVertexAttribL2i64NV, 3);
    rb_define_method(*pmROGL, "glVertexAttribL3i64NV", rogl_glVertexAttribL3i64NV, 4);
    rb_define_method(*pmROGL, "glVertexAttribL4i64NV", rogl_glVertexAttribL4i64NV, 5);
    rb_define_method(*pmROGL, "glVertexAttribL1i64vNV", rogl_glVertexAttribL1i64vNV, 2);
    rb_define_method(*pmROGL, "glVertexAttribL2i64vNV", rogl_glVertexAttribL2i64vNV, 2);
    rb_define_method(*pmROGL, "glVertexAttribL3i64vNV", rogl_glVertexAttribL3i64vNV, 2);
    rb_define_method(*pmROGL, "glVertexAttribL4i64vNV", rogl_glVertexAttribL4i64vNV, 2);
    rb_define_method(*pmROGL, "glVertexAttribL1ui64NV", rogl_glVertexAttribL1ui64NV, 2);
    rb_define_method(*pmROGL, "glVertexAttribL2ui64NV", rogl_glVertexAttribL2ui64NV, 3);
    rb_define_method(*pmROGL, "glVertexAttribL3ui64NV", rogl_glVertexAttribL3ui64NV, 4);
    rb_define_method(*pmROGL, "glVertexAttribL4ui64NV", rogl_glVertexAttribL4ui64NV, 5);
    rb_define_method(*pmROGL, "glVertexAttribL1ui64vNV", rogl_glVertexAttribL1ui64vNV, 2);
    rb_define_method(*pmROGL, "glVertexAttribL2ui64vNV", rogl_glVertexAttribL2ui64vNV, 2);
    rb_define_method(*pmROGL, "glVertexAttribL3ui64vNV", rogl_glVertexAttribL3ui64vNV, 2);
    rb_define_method(*pmROGL, "glVertexAttribL4ui64vNV", rogl_glVertexAttribL4ui64vNV, 2);
    rb_define_method(*pmROGL, "glGetVertexAttribLi64vNV", rogl_glGetVertexAttribLi64vNV, 3);
    rb_define_method(*pmROGL, "glGetVertexAttribLui64vNV", rogl_glGetVertexAttribLui64vNV, 3);
    rb_define_method(*pmROGL, "glVertexAttribLFormatNV", rogl_glVertexAttribLFormatNV, 4);
    rb_define_method(*pmROGL, "glBufferAddressRangeNV", rogl_glBufferAddressRangeNV, 4);
    rb_define_method(*pmROGL, "glVertexFormatNV", rogl_glVertexFormatNV, 3);
    rb_define_method(*pmROGL, "glNormalFormatNV", rogl_glNormalFormatNV, 2);
    rb_define_method(*pmROGL, "glColorFormatNV", rogl_glColorFormatNV, 3);
    rb_define_method(*pmROGL, "glIndexFormatNV", rogl_glIndexFormatNV, 2);
    rb_define_method(*pmROGL, "glTexCoordFormatNV", rogl_glTexCoordFormatNV, 3);
    rb_define_method(*pmROGL, "glEdgeFlagFormatNV", rogl_glEdgeFlagFormatNV, 1);
    rb_define_method(*pmROGL, "glSecondaryColorFormatNV", rogl_glSecondaryColorFormatNV, 3);
    rb_define_method(*pmROGL, "glFogCoordFormatNV", rogl_glFogCoordFormatNV, 2);
    rb_define_method(*pmROGL, "glVertexAttribFormatNV", rogl_glVertexAttribFormatNV, 5);
    rb_define_method(*pmROGL, "glVertexAttribIFormatNV", rogl_glVertexAttribIFormatNV, 4);
    rb_define_method(*pmROGL, "glGetIntegerui64i_vNV", rogl_glGetIntegerui64i_vNV, 3);
    rb_define_method(*pmROGL, "glAreProgramsResidentNV", rogl_glAreProgramsResidentNV, 3);
    rb_define_method(*pmROGL, "glBindProgramNV", rogl_glBindProgramNV, 2);
    rb_define_method(*pmROGL, "glDeleteProgramsNV", rogl_glDeleteProgramsNV, 2);
    rb_define_method(*pmROGL, "glExecuteProgramNV", rogl_glExecuteProgramNV, 3);
    rb_define_method(*pmROGL, "glGenProgramsNV", rogl_glGenProgramsNV, 2);
    rb_define_method(*pmROGL, "glGetProgramParameterdvNV", rogl_glGetProgramParameterdvNV, 4);
    rb_define_method(*pmROGL, "glGetProgramParameterfvNV", rogl_glGetProgramParameterfvNV, 4);
    rb_define_method(*pmROGL, "glGetProgramivNV", rogl_glGetProgramivNV, 3);
    rb_define_method(*pmROGL, "glGetProgramStringNV", rogl_glGetProgramStringNV, 3);
    rb_define_method(*pmROGL, "glGetTrackMatrixivNV", rogl_glGetTrackMatrixivNV, 4);
    rb_define_method(*pmROGL, "glGetVertexAttribdvNV", rogl_glGetVertexAttribdvNV, 3);
    rb_define_method(*pmROGL, "glGetVertexAttribfvNV", rogl_glGetVertexAttribfvNV, 3);
    rb_define_method(*pmROGL, "glGetVertexAttribivNV", rogl_glGetVertexAttribivNV, 3);
    rb_define_method(*pmROGL, "glGetVertexAttribPointervNV", rogl_glGetVertexAttribPointervNV, 3);
    rb_define_method(*pmROGL, "glIsProgramNV", rogl_glIsProgramNV, 1);
    rb_define_method(*pmROGL, "glLoadProgramNV", rogl_glLoadProgramNV, 4);
    rb_define_method(*pmROGL, "glProgramParameter4dNV", rogl_glProgramParameter4dNV, 6);
    rb_define_method(*pmROGL, "glProgramParameter4dvNV", rogl_glProgramParameter4dvNV, 3);
    rb_define_method(*pmROGL, "glProgramParameter4fNV", rogl_glProgramParameter4fNV, 6);
    rb_define_method(*pmROGL, "glProgramParameter4fvNV", rogl_glProgramParameter4fvNV, 3);
    rb_define_method(*pmROGL, "glProgramParameters4dvNV", rogl_glProgramParameters4dvNV, 4);
    rb_define_method(*pmROGL, "glProgramParameters4fvNV", rogl_glProgramParameters4fvNV, 4);
    rb_define_method(*pmROGL, "glRequestResidentProgramsNV", rogl_glRequestResidentProgramsNV, 2);
    rb_define_method(*pmROGL, "glTrackMatrixNV", rogl_glTrackMatrixNV, 4);
    rb_define_method(*pmROGL, "glVertexAttribPointerNV", rogl_glVertexAttribPointerNV, 5);
    rb_define_method(*pmROGL, "glVertexAttrib1dNV", rogl_glVertexAttrib1dNV, 2);
    rb_define_method(*pmROGL, "glVertexAttrib1dvNV", rogl_glVertexAttrib1dvNV, 2);
    rb_define_method(*pmROGL, "glVertexAttrib1fNV", rogl_glVertexAttrib1fNV, 2);
    rb_define_method(*pmROGL, "glVertexAttrib1fvNV", rogl_glVertexAttrib1fvNV, 2);
    rb_define_method(*pmROGL, "glVertexAttrib1sNV", rogl_glVertexAttrib1sNV, 2);
    rb_define_method(*pmROGL, "glVertexAttrib1svNV", rogl_glVertexAttrib1svNV, 2);
    rb_define_method(*pmROGL, "glVertexAttrib2dNV", rogl_glVertexAttrib2dNV, 3);
    rb_define_method(*pmROGL, "glVertexAttrib2dvNV", rogl_glVertexAttrib2dvNV, 2);
    rb_define_method(*pmROGL, "glVertexAttrib2fNV", rogl_glVertexAttrib2fNV, 3);
    rb_define_method(*pmROGL, "glVertexAttrib2fvNV", rogl_glVertexAttrib2fvNV, 2);
    rb_define_method(*pmROGL, "glVertexAttrib2sNV", rogl_glVertexAttrib2sNV, 3);
    rb_define_method(*pmROGL, "glVertexAttrib2svNV", rogl_glVertexAttrib2svNV, 2);
    rb_define_method(*pmROGL, "glVertexAttrib3dNV", rogl_glVertexAttrib3dNV, 4);
    rb_define_method(*pmROGL, "glVertexAttrib3dvNV", rogl_glVertexAttrib3dvNV, 2);
    rb_define_method(*pmROGL, "glVertexAttrib3fNV", rogl_glVertexAttrib3fNV, 4);
    rb_define_method(*pmROGL, "glVertexAttrib3fvNV", rogl_glVertexAttrib3fvNV, 2);
    rb_define_method(*pmROGL, "glVertexAttrib3sNV", rogl_glVertexAttrib3sNV, 4);
    rb_define_method(*pmROGL, "glVertexAttrib3svNV", rogl_glVertexAttrib3svNV, 2);
    rb_define_method(*pmROGL, "glVertexAttrib4dNV", rogl_glVertexAttrib4dNV, 5);
    rb_define_method(*pmROGL, "glVertexAttrib4dvNV", rogl_glVertexAttrib4dvNV, 2);
    rb_define_method(*pmROGL, "glVertexAttrib4fNV", rogl_glVertexAttrib4fNV, 5);
    rb_define_method(*pmROGL, "glVertexAttrib4fvNV", rogl_glVertexAttrib4fvNV, 2);
    rb_define_method(*pmROGL, "glVertexAttrib4sNV", rogl_glVertexAttrib4sNV, 5);
    rb_define_method(*pmROGL, "glVertexAttrib4svNV", rogl_glVertexAttrib4svNV, 2);
    rb_define_method(*pmROGL, "glVertexAttrib4ubNV", rogl_glVertexAttrib4ubNV, 5);
    rb_define_method(*pmROGL, "glVertexAttrib4ubvNV", rogl_glVertexAttrib4ubvNV, 2);
    rb_define_method(*pmROGL, "glVertexAttribs1dvNV", rogl_glVertexAttribs1dvNV, 3);
    rb_define_method(*pmROGL, "glVertexAttribs1fvNV", rogl_glVertexAttribs1fvNV, 3);
    rb_define_method(*pmROGL, "glVertexAttribs1svNV", rogl_glVertexAttribs1svNV, 3);
    rb_define_method(*pmROGL, "glVertexAttribs2dvNV", rogl_glVertexAttribs2dvNV, 3);
    rb_define_method(*pmROGL, "glVertexAttribs2fvNV", rogl_glVertexAttribs2fvNV, 3);
    rb_define_method(*pmROGL, "glVertexAttribs2svNV", rogl_glVertexAttribs2svNV, 3);
    rb_define_method(*pmROGL, "glVertexAttribs3dvNV", rogl_glVertexAttribs3dvNV, 3);
    rb_define_method(*pmROGL, "glVertexAttribs3fvNV", rogl_glVertexAttribs3fvNV, 3);
    rb_define_method(*pmROGL, "glVertexAttribs3svNV", rogl_glVertexAttribs3svNV, 3);
    rb_define_method(*pmROGL, "glVertexAttribs4dvNV", rogl_glVertexAttribs4dvNV, 3);
    rb_define_method(*pmROGL, "glVertexAttribs4fvNV", rogl_glVertexAttribs4fvNV, 3);
    rb_define_method(*pmROGL, "glVertexAttribs4svNV", rogl_glVertexAttribs4svNV, 3);
    rb_define_method(*pmROGL, "glVertexAttribs4ubvNV", rogl_glVertexAttribs4ubvNV, 3);
    rb_define_method(*pmROGL, "glVertexAttribI1iEXT", rogl_glVertexAttribI1iEXT, 2);
    rb_define_method(*pmROGL, "glVertexAttribI2iEXT", rogl_glVertexAttribI2iEXT, 3);
    rb_define_method(*pmROGL, "glVertexAttribI3iEXT", rogl_glVertexAttribI3iEXT, 4);
    rb_define_method(*pmROGL, "glVertexAttribI4iEXT", rogl_glVertexAttribI4iEXT, 5);
    rb_define_method(*pmROGL, "glVertexAttribI1uiEXT", rogl_glVertexAttribI1uiEXT, 2);
    rb_define_method(*pmROGL, "glVertexAttribI2uiEXT", rogl_glVertexAttribI2uiEXT, 3);
    rb_define_method(*pmROGL, "glVertexAttribI3uiEXT", rogl_glVertexAttribI3uiEXT, 4);
    rb_define_method(*pmROGL, "glVertexAttribI4uiEXT", rogl_glVertexAttribI4uiEXT, 5);
    rb_define_method(*pmROGL, "glVertexAttribI1ivEXT", rogl_glVertexAttribI1ivEXT, 2);
    rb_define_method(*pmROGL, "glVertexAttribI2ivEXT", rogl_glVertexAttribI2ivEXT, 2);
    rb_define_method(*pmROGL, "glVertexAttribI3ivEXT", rogl_glVertexAttribI3ivEXT, 2);
    rb_define_method(*pmROGL, "glVertexAttribI4ivEXT", rogl_glVertexAttribI4ivEXT, 2);
    rb_define_method(*pmROGL, "glVertexAttribI1uivEXT", rogl_glVertexAttribI1uivEXT, 2);
    rb_define_method(*pmROGL, "glVertexAttribI2uivEXT", rogl_glVertexAttribI2uivEXT, 2);
    rb_define_method(*pmROGL, "glVertexAttribI3uivEXT", rogl_glVertexAttribI3uivEXT, 2);
    rb_define_method(*pmROGL, "glVertexAttribI4uivEXT", rogl_glVertexAttribI4uivEXT, 2);
    rb_define_method(*pmROGL, "glVertexAttribI4bvEXT", rogl_glVertexAttribI4bvEXT, 2);
    rb_define_method(*pmROGL, "glVertexAttribI4svEXT", rogl_glVertexAttribI4svEXT, 2);
    rb_define_method(*pmROGL, "glVertexAttribI4ubvEXT", rogl_glVertexAttribI4ubvEXT, 2);
    rb_define_method(*pmROGL, "glVertexAttribI4usvEXT", rogl_glVertexAttribI4usvEXT, 2);
    rb_define_method(*pmROGL, "glVertexAttribIPointerEXT", rogl_glVertexAttribIPointerEXT, 5);
    rb_define_method(*pmROGL, "glGetVertexAttribIivEXT", rogl_glGetVertexAttribIivEXT, 3);
    rb_define_method(*pmROGL, "glGetVertexAttribIuivEXT", rogl_glGetVertexAttribIuivEXT, 3);
    rb_define_method(*pmROGL, "glBeginVideoCaptureNV", rogl_glBeginVideoCaptureNV, 1);
    rb_define_method(*pmROGL, "glBindVideoCaptureStreamBufferNV", rogl_glBindVideoCaptureStreamBufferNV, 4);
    rb_define_method(*pmROGL, "glBindVideoCaptureStreamTextureNV", rogl_glBindVideoCaptureStreamTextureNV, 5);
    rb_define_method(*pmROGL, "glEndVideoCaptureNV", rogl_glEndVideoCaptureNV, 1);
    rb_define_method(*pmROGL, "glGetVideoCaptureivNV", rogl_glGetVideoCaptureivNV, 3);
    rb_define_method(*pmROGL, "glGetVideoCaptureStreamivNV", rogl_glGetVideoCaptureStreamivNV, 4);
    rb_define_method(*pmROGL, "glGetVideoCaptureStreamfvNV", rogl_glGetVideoCaptureStreamfvNV, 4);
    rb_define_method(*pmROGL, "glGetVideoCaptureStreamdvNV", rogl_glGetVideoCaptureStreamdvNV, 4);
    rb_define_method(*pmROGL, "glVideoCaptureNV", rogl_glVideoCaptureNV, 3);
    rb_define_method(*pmROGL, "glVideoCaptureStreamParameterivNV", rogl_glVideoCaptureStreamParameterivNV, 4);
    rb_define_method(*pmROGL, "glVideoCaptureStreamParameterfvNV", rogl_glVideoCaptureStreamParameterfvNV, 4);
    rb_define_method(*pmROGL, "glVideoCaptureStreamParameterdvNV", rogl_glVideoCaptureStreamParameterdvNV, 4);
    rb_define_method(*pmROGL, "glMultiTexCoord1bOES", rogl_glMultiTexCoord1bOES, 2);
    rb_define_method(*pmROGL, "glMultiTexCoord1bvOES", rogl_glMultiTexCoord1bvOES, 2);
    rb_define_method(*pmROGL, "glMultiTexCoord2bOES", rogl_glMultiTexCoord2bOES, 3);
    rb_define_method(*pmROGL, "glMultiTexCoord2bvOES", rogl_glMultiTexCoord2bvOES, 2);
    rb_define_method(*pmROGL, "glMultiTexCoord3bOES", rogl_glMultiTexCoord3bOES, 4);
    rb_define_method(*pmROGL, "glMultiTexCoord3bvOES", rogl_glMultiTexCoord3bvOES, 2);
    rb_define_method(*pmROGL, "glMultiTexCoord4bOES", rogl_glMultiTexCoord4bOES, 5);
    rb_define_method(*pmROGL, "glMultiTexCoord4bvOES", rogl_glMultiTexCoord4bvOES, 2);
    rb_define_method(*pmROGL, "glTexCoord1bOES", rogl_glTexCoord1bOES, 1);
    rb_define_method(*pmROGL, "glTexCoord1bvOES", rogl_glTexCoord1bvOES, 1);
    rb_define_method(*pmROGL, "glTexCoord2bOES", rogl_glTexCoord2bOES, 2);
    rb_define_method(*pmROGL, "glTexCoord2bvOES", rogl_glTexCoord2bvOES, 1);
    rb_define_method(*pmROGL, "glTexCoord3bOES", rogl_glTexCoord3bOES, 3);
    rb_define_method(*pmROGL, "glTexCoord3bvOES", rogl_glTexCoord3bvOES, 1);
    rb_define_method(*pmROGL, "glTexCoord4bOES", rogl_glTexCoord4bOES, 4);
    rb_define_method(*pmROGL, "glTexCoord4bvOES", rogl_glTexCoord4bvOES, 1);
    rb_define_method(*pmROGL, "glVertex2bOES", rogl_glVertex2bOES, 2);
    rb_define_method(*pmROGL, "glVertex2bvOES", rogl_glVertex2bvOES, 1);
    rb_define_method(*pmROGL, "glVertex3bOES", rogl_glVertex3bOES, 3);
    rb_define_method(*pmROGL, "glVertex3bvOES", rogl_glVertex3bvOES, 1);
    rb_define_method(*pmROGL, "glVertex4bOES", rogl_glVertex4bOES, 4);
    rb_define_method(*pmROGL, "glVertex4bvOES", rogl_glVertex4bvOES, 1);
    rb_define_method(*pmROGL, "glAlphaFuncxOES", rogl_glAlphaFuncxOES, 2);
    rb_define_method(*pmROGL, "glClearColorxOES", rogl_glClearColorxOES, 4);
    rb_define_method(*pmROGL, "glClearDepthxOES", rogl_glClearDepthxOES, 1);
    rb_define_method(*pmROGL, "glClipPlanexOES", rogl_glClipPlanexOES, 2);
    rb_define_method(*pmROGL, "glColor4xOES", rogl_glColor4xOES, 4);
    rb_define_method(*pmROGL, "glDepthRangexOES", rogl_glDepthRangexOES, 2);
    rb_define_method(*pmROGL, "glFogxOES", rogl_glFogxOES, 2);
    rb_define_method(*pmROGL, "glFogxvOES", rogl_glFogxvOES, 2);
    rb_define_method(*pmROGL, "glFrustumxOES", rogl_glFrustumxOES, 6);
    rb_define_method(*pmROGL, "glGetClipPlanexOES", rogl_glGetClipPlanexOES, 2);
    rb_define_method(*pmROGL, "glGetFixedvOES", rogl_glGetFixedvOES, 2);
    rb_define_method(*pmROGL, "glGetTexEnvxvOES", rogl_glGetTexEnvxvOES, 3);
    rb_define_method(*pmROGL, "glGetTexParameterxvOES", rogl_glGetTexParameterxvOES, 3);
    rb_define_method(*pmROGL, "glLightModelxOES", rogl_glLightModelxOES, 2);
    rb_define_method(*pmROGL, "glLightModelxvOES", rogl_glLightModelxvOES, 2);
    rb_define_method(*pmROGL, "glLightxOES", rogl_glLightxOES, 3);
    rb_define_method(*pmROGL, "glLightxvOES", rogl_glLightxvOES, 3);
    rb_define_method(*pmROGL, "glLineWidthxOES", rogl_glLineWidthxOES, 1);
    rb_define_method(*pmROGL, "glLoadMatrixxOES", rogl_glLoadMatrixxOES, 1);
    rb_define_method(*pmROGL, "glMaterialxOES", rogl_glMaterialxOES, 3);
    rb_define_method(*pmROGL, "glMaterialxvOES", rogl_glMaterialxvOES, 3);
    rb_define_method(*pmROGL, "glMultMatrixxOES", rogl_glMultMatrixxOES, 1);
    rb_define_method(*pmROGL, "glMultiTexCoord4xOES", rogl_glMultiTexCoord4xOES, 5);
    rb_define_method(*pmROGL, "glNormal3xOES", rogl_glNormal3xOES, 3);
    rb_define_method(*pmROGL, "glOrthoxOES", rogl_glOrthoxOES, 6);
    rb_define_method(*pmROGL, "glPointParameterxvOES", rogl_glPointParameterxvOES, 2);
    rb_define_method(*pmROGL, "glPointSizexOES", rogl_glPointSizexOES, 1);
    rb_define_method(*pmROGL, "glPolygonOffsetxOES", rogl_glPolygonOffsetxOES, 2);
    rb_define_method(*pmROGL, "glRotatexOES", rogl_glRotatexOES, 4);
    rb_define_method(*pmROGL, "glScalexOES", rogl_glScalexOES, 3);
    rb_define_method(*pmROGL, "glTexEnvxOES", rogl_glTexEnvxOES, 3);
    rb_define_method(*pmROGL, "glTexEnvxvOES", rogl_glTexEnvxvOES, 3);
    rb_define_method(*pmROGL, "glTexParameterxOES", rogl_glTexParameterxOES, 3);
    rb_define_method(*pmROGL, "glTexParameterxvOES", rogl_glTexParameterxvOES, 3);
    rb_define_method(*pmROGL, "glTranslatexOES", rogl_glTranslatexOES, 3);
    rb_define_method(*pmROGL, "glGetLightxvOES", rogl_glGetLightxvOES, 3);
    rb_define_method(*pmROGL, "glGetMaterialxvOES", rogl_glGetMaterialxvOES, 3);
    rb_define_method(*pmROGL, "glPointParameterxOES", rogl_glPointParameterxOES, 2);
    rb_define_method(*pmROGL, "glSampleCoveragexOES", rogl_glSampleCoveragexOES, 2);
    rb_define_method(*pmROGL, "glAccumxOES", rogl_glAccumxOES, 2);
    rb_define_method(*pmROGL, "glBitmapxOES", rogl_glBitmapxOES, 7);
    rb_define_method(*pmROGL, "glBlendColorxOES", rogl_glBlendColorxOES, 4);
    rb_define_method(*pmROGL, "glClearAccumxOES", rogl_glClearAccumxOES, 4);
    rb_define_method(*pmROGL, "glColor3xOES", rogl_glColor3xOES, 3);
    rb_define_method(*pmROGL, "glColor3xvOES", rogl_glColor3xvOES, 1);
    rb_define_method(*pmROGL, "glColor4xvOES", rogl_glColor4xvOES, 1);
    rb_define_method(*pmROGL, "glConvolutionParameterxOES", rogl_glConvolutionParameterxOES, 3);
    rb_define_method(*pmROGL, "glConvolutionParameterxvOES", rogl_glConvolutionParameterxvOES, 3);
    rb_define_method(*pmROGL, "glEvalCoord1xOES", rogl_glEvalCoord1xOES, 1);
    rb_define_method(*pmROGL, "glEvalCoord1xvOES", rogl_glEvalCoord1xvOES, 1);
    rb_define_method(*pmROGL, "glEvalCoord2xOES", rogl_glEvalCoord2xOES, 2);
    rb_define_method(*pmROGL, "glEvalCoord2xvOES", rogl_glEvalCoord2xvOES, 1);
    rb_define_method(*pmROGL, "glFeedbackBufferxOES", rogl_glFeedbackBufferxOES, 3);
    rb_define_method(*pmROGL, "glGetConvolutionParameterxvOES", rogl_glGetConvolutionParameterxvOES, 3);
    rb_define_method(*pmROGL, "glGetHistogramParameterxvOES", rogl_glGetHistogramParameterxvOES, 3);
    rb_define_method(*pmROGL, "glGetLightxOES", rogl_glGetLightxOES, 3);
    rb_define_method(*pmROGL, "glGetMapxvOES", rogl_glGetMapxvOES, 3);
    rb_define_method(*pmROGL, "glGetMaterialxOES", rogl_glGetMaterialxOES, 3);
    rb_define_method(*pmROGL, "glGetPixelMapxv", rogl_glGetPixelMapxv, 3);
    rb_define_method(*pmROGL, "glGetTexGenxvOES", rogl_glGetTexGenxvOES, 3);
    rb_define_method(*pmROGL, "glGetTexLevelParameterxvOES", rogl_glGetTexLevelParameterxvOES, 4);
    rb_define_method(*pmROGL, "glIndexxOES", rogl_glIndexxOES, 1);
    rb_define_method(*pmROGL, "glIndexxvOES", rogl_glIndexxvOES, 1);
    rb_define_method(*pmROGL, "glLoadTransposeMatrixxOES", rogl_glLoadTransposeMatrixxOES, 1);
    rb_define_method(*pmROGL, "glMap1xOES", rogl_glMap1xOES, 6);
    rb_define_method(*pmROGL, "glMap2xOES", rogl_glMap2xOES, 10);
    rb_define_method(*pmROGL, "glMapGrid1xOES", rogl_glMapGrid1xOES, 3);
    rb_define_method(*pmROGL, "glMapGrid2xOES", rogl_glMapGrid2xOES, 5);
    rb_define_method(*pmROGL, "glMultTransposeMatrixxOES", rogl_glMultTransposeMatrixxOES, 1);
    rb_define_method(*pmROGL, "glMultiTexCoord1xOES", rogl_glMultiTexCoord1xOES, 2);
    rb_define_method(*pmROGL, "glMultiTexCoord1xvOES", rogl_glMultiTexCoord1xvOES, 2);
    rb_define_method(*pmROGL, "glMultiTexCoord2xOES", rogl_glMultiTexCoord2xOES, 3);
    rb_define_method(*pmROGL, "glMultiTexCoord2xvOES", rogl_glMultiTexCoord2xvOES, 2);
    rb_define_method(*pmROGL, "glMultiTexCoord3xOES", rogl_glMultiTexCoord3xOES, 4);
    rb_define_method(*pmROGL, "glMultiTexCoord3xvOES", rogl_glMultiTexCoord3xvOES, 2);
    rb_define_method(*pmROGL, "glMultiTexCoord4xvOES", rogl_glMultiTexCoord4xvOES, 2);
    rb_define_method(*pmROGL, "glNormal3xvOES", rogl_glNormal3xvOES, 1);
    rb_define_method(*pmROGL, "glPassThroughxOES", rogl_glPassThroughxOES, 1);
    rb_define_method(*pmROGL, "glPixelMapx", rogl_glPixelMapx, 3);
    rb_define_method(*pmROGL, "glPixelStorex", rogl_glPixelStorex, 2);
    rb_define_method(*pmROGL, "glPixelTransferxOES", rogl_glPixelTransferxOES, 2);
    rb_define_method(*pmROGL, "glPixelZoomxOES", rogl_glPixelZoomxOES, 2);
    rb_define_method(*pmROGL, "glPrioritizeTexturesxOES", rogl_glPrioritizeTexturesxOES, 3);
    rb_define_method(*pmROGL, "glRasterPos2xOES", rogl_glRasterPos2xOES, 2);
    rb_define_method(*pmROGL, "glRasterPos2xvOES", rogl_glRasterPos2xvOES, 1);
    rb_define_method(*pmROGL, "glRasterPos3xOES", rogl_glRasterPos3xOES, 3);
    rb_define_method(*pmROGL, "glRasterPos3xvOES", rogl_glRasterPos3xvOES, 1);
    rb_define_method(*pmROGL, "glRasterPos4xOES", rogl_glRasterPos4xOES, 4);
    rb_define_method(*pmROGL, "glRasterPos4xvOES", rogl_glRasterPos4xvOES, 1);
    rb_define_method(*pmROGL, "glRectxOES", rogl_glRectxOES, 4);
    rb_define_method(*pmROGL, "glRectxvOES", rogl_glRectxvOES, 2);
    rb_define_method(*pmROGL, "glTexCoord1xOES", rogl_glTexCoord1xOES, 1);
    rb_define_method(*pmROGL, "glTexCoord1xvOES", rogl_glTexCoord1xvOES, 1);
    rb_define_method(*pmROGL, "glTexCoord2xOES", rogl_glTexCoord2xOES, 2);
    rb_define_method(*pmROGL, "glTexCoord2xvOES", rogl_glTexCoord2xvOES, 1);
    rb_define_method(*pmROGL, "glTexCoord3xOES", rogl_glTexCoord3xOES, 3);
    rb_define_method(*pmROGL, "glTexCoord3xvOES", rogl_glTexCoord3xvOES, 1);
    rb_define_method(*pmROGL, "glTexCoord4xOES", rogl_glTexCoord4xOES, 4);
    rb_define_method(*pmROGL, "glTexCoord4xvOES", rogl_glTexCoord4xvOES, 1);
    rb_define_method(*pmROGL, "glTexGenxOES", rogl_glTexGenxOES, 3);
    rb_define_method(*pmROGL, "glTexGenxvOES", rogl_glTexGenxvOES, 3);
    rb_define_method(*pmROGL, "glVertex2xOES", rogl_glVertex2xOES, 1);
    rb_define_method(*pmROGL, "glVertex2xvOES", rogl_glVertex2xvOES, 1);
    rb_define_method(*pmROGL, "glVertex3xOES", rogl_glVertex3xOES, 2);
    rb_define_method(*pmROGL, "glVertex3xvOES", rogl_glVertex3xvOES, 1);
    rb_define_method(*pmROGL, "glVertex4xOES", rogl_glVertex4xOES, 3);
    rb_define_method(*pmROGL, "glVertex4xvOES", rogl_glVertex4xvOES, 1);
    rb_define_method(*pmROGL, "glQueryMatrixxOES", rogl_glQueryMatrixxOES, 2);
    rb_define_method(*pmROGL, "glClearDepthfOES", rogl_glClearDepthfOES, 1);
    rb_define_method(*pmROGL, "glClipPlanefOES", rogl_glClipPlanefOES, 2);
    rb_define_method(*pmROGL, "glDepthRangefOES", rogl_glDepthRangefOES, 2);
    rb_define_method(*pmROGL, "glFrustumfOES", rogl_glFrustumfOES, 6);
    rb_define_method(*pmROGL, "glGetClipPlanefOES", rogl_glGetClipPlanefOES, 2);
    rb_define_method(*pmROGL, "glOrthofOES", rogl_glOrthofOES, 6);
    rb_define_method(*pmROGL, "glFramebufferTextureMultiviewOVR", rogl_glFramebufferTextureMultiviewOVR, 6);
    rb_define_method(*pmROGL, "glHintPGI", rogl_glHintPGI, 2);
    rb_define_method(*pmROGL, "glDetailTexFuncSGIS", rogl_glDetailTexFuncSGIS, 3);
    rb_define_method(*pmROGL, "glGetDetailTexFuncSGIS", rogl_glGetDetailTexFuncSGIS, 2);
    rb_define_method(*pmROGL, "glFogFuncSGIS", rogl_glFogFuncSGIS, 2);
    rb_define_method(*pmROGL, "glGetFogFuncSGIS", rogl_glGetFogFuncSGIS, 1);
    rb_define_method(*pmROGL, "glSampleMaskSGIS", rogl_glSampleMaskSGIS, 2);
    rb_define_method(*pmROGL, "glSamplePatternSGIS", rogl_glSamplePatternSGIS, 1);
    rb_define_method(*pmROGL, "glPixelTexGenParameteriSGIS", rogl_glPixelTexGenParameteriSGIS, 2);
    rb_define_method(*pmROGL, "glPixelTexGenParameterivSGIS", rogl_glPixelTexGenParameterivSGIS, 2);
    rb_define_method(*pmROGL, "glPixelTexGenParameterfSGIS", rogl_glPixelTexGenParameterfSGIS, 2);
    rb_define_method(*pmROGL, "glPixelTexGenParameterfvSGIS", rogl_glPixelTexGenParameterfvSGIS, 2);
    rb_define_method(*pmROGL, "glGetPixelTexGenParameterivSGIS", rogl_glGetPixelTexGenParameterivSGIS, 2);
    rb_define_method(*pmROGL, "glGetPixelTexGenParameterfvSGIS", rogl_glGetPixelTexGenParameterfvSGIS, 2);
    rb_define_method(*pmROGL, "glPointParameterfSGIS", rogl_glPointParameterfSGIS, 2);
    rb_define_method(*pmROGL, "glPointParameterfvSGIS", rogl_glPointParameterfvSGIS, 2);
    rb_define_method(*pmROGL, "glSharpenTexFuncSGIS", rogl_glSharpenTexFuncSGIS, 3);
    rb_define_method(*pmROGL, "glGetSharpenTexFuncSGIS", rogl_glGetSharpenTexFuncSGIS, 2);
    rb_define_method(*pmROGL, "glTexImage4DSGIS", rogl_glTexImage4DSGIS, 11);
    rb_define_method(*pmROGL, "glTexSubImage4DSGIS", rogl_glTexSubImage4DSGIS, 13);
    rb_define_method(*pmROGL, "glTextureColorMaskSGIS", rogl_glTextureColorMaskSGIS, 4);
    rb_define_method(*pmROGL, "glGetTexFilterFuncSGIS", rogl_glGetTexFilterFuncSGIS, 3);
    rb_define_method(*pmROGL, "glTexFilterFuncSGIS", rogl_glTexFilterFuncSGIS, 4);
    rb_define_method(*pmROGL, "glAsyncMarkerSGIX", rogl_glAsyncMarkerSGIX, 1);
    rb_define_method(*pmROGL, "glFinishAsyncSGIX", rogl_glFinishAsyncSGIX, 1);
    rb_define_method(*pmROGL, "glPollAsyncSGIX", rogl_glPollAsyncSGIX, 1);
    rb_define_method(*pmROGL, "glGenAsyncMarkersSGIX", rogl_glGenAsyncMarkersSGIX, 1);
    rb_define_method(*pmROGL, "glDeleteAsyncMarkersSGIX", rogl_glDeleteAsyncMarkersSGIX, 2);
    rb_define_method(*pmROGL, "glIsAsyncMarkerSGIX", rogl_glIsAsyncMarkerSGIX, 1);
    rb_define_method(*pmROGL, "glFlushRasterSGIX", rogl_glFlushRasterSGIX, 0);
    rb_define_method(*pmROGL, "glFragmentColorMaterialSGIX", rogl_glFragmentColorMaterialSGIX, 2);
    rb_define_method(*pmROGL, "glFragmentLightfSGIX", rogl_glFragmentLightfSGIX, 3);
    rb_define_method(*pmROGL, "glFragmentLightfvSGIX", rogl_glFragmentLightfvSGIX, 3);
    rb_define_method(*pmROGL, "glFragmentLightiSGIX", rogl_glFragmentLightiSGIX, 3);
    rb_define_method(*pmROGL, "glFragmentLightivSGIX", rogl_glFragmentLightivSGIX, 3);
    rb_define_method(*pmROGL, "glFragmentLightModelfSGIX", rogl_glFragmentLightModelfSGIX, 2);
    rb_define_method(*pmROGL, "glFragmentLightModelfvSGIX", rogl_glFragmentLightModelfvSGIX, 2);
    rb_define_method(*pmROGL, "glFragmentLightModeliSGIX", rogl_glFragmentLightModeliSGIX, 2);
    rb_define_method(*pmROGL, "glFragmentLightModelivSGIX", rogl_glFragmentLightModelivSGIX, 2);
    rb_define_method(*pmROGL, "glFragmentMaterialfSGIX", rogl_glFragmentMaterialfSGIX, 3);
    rb_define_method(*pmROGL, "glFragmentMaterialfvSGIX", rogl_glFragmentMaterialfvSGIX, 3);
    rb_define_method(*pmROGL, "glFragmentMaterialiSGIX", rogl_glFragmentMaterialiSGIX, 3);
    rb_define_method(*pmROGL, "glFragmentMaterialivSGIX", rogl_glFragmentMaterialivSGIX, 3);
    rb_define_method(*pmROGL, "glGetFragmentLightfvSGIX", rogl_glGetFragmentLightfvSGIX, 3);
    rb_define_method(*pmROGL, "glGetFragmentLightivSGIX", rogl_glGetFragmentLightivSGIX, 3);
    rb_define_method(*pmROGL, "glGetFragmentMaterialfvSGIX", rogl_glGetFragmentMaterialfvSGIX, 3);
    rb_define_method(*pmROGL, "glGetFragmentMaterialivSGIX", rogl_glGetFragmentMaterialivSGIX, 3);
    rb_define_method(*pmROGL, "glLightEnviSGIX", rogl_glLightEnviSGIX, 2);
    rb_define_method(*pmROGL, "glFrameZoomSGIX", rogl_glFrameZoomSGIX, 1);
    rb_define_method(*pmROGL, "glIglooInterfaceSGIX", rogl_glIglooInterfaceSGIX, 2);
    rb_define_method(*pmROGL, "glGetInstrumentsSGIX", rogl_glGetInstrumentsSGIX, 0);
    rb_define_method(*pmROGL, "glInstrumentsBufferSGIX", rogl_glInstrumentsBufferSGIX, 2);
    rb_define_method(*pmROGL, "glPollInstrumentsSGIX", rogl_glPollInstrumentsSGIX, 1);
    rb_define_method(*pmROGL, "glReadInstrumentsSGIX", rogl_glReadInstrumentsSGIX, 1);
    rb_define_method(*pmROGL, "glStartInstrumentsSGIX", rogl_glStartInstrumentsSGIX, 0);
    rb_define_method(*pmROGL, "glStopInstrumentsSGIX", rogl_glStopInstrumentsSGIX, 1);
    rb_define_method(*pmROGL, "glGetListParameterfvSGIX", rogl_glGetListParameterfvSGIX, 3);
    rb_define_method(*pmROGL, "glGetListParameterivSGIX", rogl_glGetListParameterivSGIX, 3);
    rb_define_method(*pmROGL, "glListParameterfSGIX", rogl_glListParameterfSGIX, 3);
    rb_define_method(*pmROGL, "glListParameterfvSGIX", rogl_glListParameterfvSGIX, 3);
    rb_define_method(*pmROGL, "glListParameteriSGIX", rogl_glListParameteriSGIX, 3);
    rb_define_method(*pmROGL, "glListParameterivSGIX", rogl_glListParameterivSGIX, 3);
    rb_define_method(*pmROGL, "glPixelTexGenSGIX", rogl_glPixelTexGenSGIX, 1);
    rb_define_method(*pmROGL, "glDeformationMap3dSGIX", rogl_glDeformationMap3dSGIX, 14);
    rb_define_method(*pmROGL, "glDeformationMap3fSGIX", rogl_glDeformationMap3fSGIX, 14);
    rb_define_method(*pmROGL, "glDeformSGIX", rogl_glDeformSGIX, 1);
    rb_define_method(*pmROGL, "glLoadIdentityDeformationMapSGIX", rogl_glLoadIdentityDeformationMapSGIX, 1);
    rb_define_method(*pmROGL, "glReferencePlaneSGIX", rogl_glReferencePlaneSGIX, 1);
    rb_define_method(*pmROGL, "glSpriteParameterfSGIX", rogl_glSpriteParameterfSGIX, 2);
    rb_define_method(*pmROGL, "glSpriteParameterfvSGIX", rogl_glSpriteParameterfvSGIX, 2);
    rb_define_method(*pmROGL, "glSpriteParameteriSGIX", rogl_glSpriteParameteriSGIX, 2);
    rb_define_method(*pmROGL, "glSpriteParameterivSGIX", rogl_glSpriteParameterivSGIX, 2);
    rb_define_method(*pmROGL, "glTagSampleBufferSGIX", rogl_glTagSampleBufferSGIX, 0);
    rb_define_method(*pmROGL, "glColorTableSGI", rogl_glColorTableSGI, 6);
    rb_define_method(*pmROGL, "glColorTableParameterfvSGI", rogl_glColorTableParameterfvSGI, 3);
    rb_define_method(*pmROGL, "glColorTableParameterivSGI", rogl_glColorTableParameterivSGI, 3);
    rb_define_method(*pmROGL, "glCopyColorTableSGI", rogl_glCopyColorTableSGI, 5);
    rb_define_method(*pmROGL, "glGetColorTableSGI", rogl_glGetColorTableSGI, 4);
    rb_define_method(*pmROGL, "glGetColorTableParameterfvSGI", rogl_glGetColorTableParameterfvSGI, 3);
    rb_define_method(*pmROGL, "glGetColorTableParameterivSGI", rogl_glGetColorTableParameterivSGI, 3);
    rb_define_method(*pmROGL, "glFinishTextureSUNX", rogl_glFinishTextureSUNX, 0);
    rb_define_method(*pmROGL, "glGlobalAlphaFactorbSUN", rogl_glGlobalAlphaFactorbSUN, 1);
    rb_define_method(*pmROGL, "glGlobalAlphaFactorsSUN", rogl_glGlobalAlphaFactorsSUN, 1);
    rb_define_method(*pmROGL, "glGlobalAlphaFactoriSUN", rogl_glGlobalAlphaFactoriSUN, 1);
    rb_define_method(*pmROGL, "glGlobalAlphaFactorfSUN", rogl_glGlobalAlphaFactorfSUN, 1);
    rb_define_method(*pmROGL, "glGlobalAlphaFactordSUN", rogl_glGlobalAlphaFactordSUN, 1);
    rb_define_method(*pmROGL, "glGlobalAlphaFactorubSUN", rogl_glGlobalAlphaFactorubSUN, 1);
    rb_define_method(*pmROGL, "glGlobalAlphaFactorusSUN", rogl_glGlobalAlphaFactorusSUN, 1);
    rb_define_method(*pmROGL, "glGlobalAlphaFactoruiSUN", rogl_glGlobalAlphaFactoruiSUN, 1);
    rb_define_method(*pmROGL, "glDrawMeshArraysSUN", rogl_glDrawMeshArraysSUN, 4);
    rb_define_method(*pmROGL, "glReplacementCodeuiSUN", rogl_glReplacementCodeuiSUN, 1);
    rb_define_method(*pmROGL, "glReplacementCodeusSUN", rogl_glReplacementCodeusSUN, 1);
    rb_define_method(*pmROGL, "glReplacementCodeubSUN", rogl_glReplacementCodeubSUN, 1);
    rb_define_method(*pmROGL, "glReplacementCodeuivSUN", rogl_glReplacementCodeuivSUN, 1);
    rb_define_method(*pmROGL, "glReplacementCodeusvSUN", rogl_glReplacementCodeusvSUN, 1);
    rb_define_method(*pmROGL, "glReplacementCodeubvSUN", rogl_glReplacementCodeubvSUN, 1);
    rb_define_method(*pmROGL, "glReplacementCodePointerSUN", rogl_glReplacementCodePointerSUN, 3);
    rb_define_method(*pmROGL, "glColor4ubVertex2fSUN", rogl_glColor4ubVertex2fSUN, 6);
    rb_define_method(*pmROGL, "glColor4ubVertex2fvSUN", rogl_glColor4ubVertex2fvSUN, 2);
    rb_define_method(*pmROGL, "glColor4ubVertex3fSUN", rogl_glColor4ubVertex3fSUN, 7);
    rb_define_method(*pmROGL, "glColor4ubVertex3fvSUN", rogl_glColor4ubVertex3fvSUN, 2);
    rb_define_method(*pmROGL, "glColor3fVertex3fSUN", rogl_glColor3fVertex3fSUN, 6);
    rb_define_method(*pmROGL, "glColor3fVertex3fvSUN", rogl_glColor3fVertex3fvSUN, 2);
    rb_define_method(*pmROGL, "glNormal3fVertex3fSUN", rogl_glNormal3fVertex3fSUN, 6);
    rb_define_method(*pmROGL, "glNormal3fVertex3fvSUN", rogl_glNormal3fVertex3fvSUN, 2);
    rb_define_method(*pmROGL, "glColor4fNormal3fVertex3fSUN", rogl_glColor4fNormal3fVertex3fSUN, 10);
    rb_define_method(*pmROGL, "glColor4fNormal3fVertex3fvSUN", rogl_glColor4fNormal3fVertex3fvSUN, 3);
    rb_define_method(*pmROGL, "glTexCoord2fVertex3fSUN", rogl_glTexCoord2fVertex3fSUN, 5);
    rb_define_method(*pmROGL, "glTexCoord2fVertex3fvSUN", rogl_glTexCoord2fVertex3fvSUN, 2);
    rb_define_method(*pmROGL, "glTexCoord4fVertex4fSUN", rogl_glTexCoord4fVertex4fSUN, 8);
    rb_define_method(*pmROGL, "glTexCoord4fVertex4fvSUN", rogl_glTexCoord4fVertex4fvSUN, 2);
    rb_define_method(*pmROGL, "glTexCoord2fColor4ubVertex3fSUN", rogl_glTexCoord2fColor4ubVertex3fSUN, 9);
    rb_define_method(*pmROGL, "glTexCoord2fColor4ubVertex3fvSUN", rogl_glTexCoord2fColor4ubVertex3fvSUN, 3);
    rb_define_method(*pmROGL, "glTexCoord2fColor3fVertex3fSUN", rogl_glTexCoord2fColor3fVertex3fSUN, 8);
    rb_define_method(*pmROGL, "glTexCoord2fColor3fVertex3fvSUN", rogl_glTexCoord2fColor3fVertex3fvSUN, 3);
    rb_define_method(*pmROGL, "glTexCoord2fNormal3fVertex3fSUN", rogl_glTexCoord2fNormal3fVertex3fSUN, 8);
    rb_define_method(*pmROGL, "glTexCoord2fNormal3fVertex3fvSUN", rogl_glTexCoord2fNormal3fVertex3fvSUN, 3);
    rb_define_method(*pmROGL, "glTexCoord2fColor4fNormal3fVertex3fSUN", rogl_glTexCoord2fColor4fNormal3fVertex3fSUN, 12);
    rb_define_method(*pmROGL, "glTexCoord2fColor4fNormal3fVertex3fvSUN", rogl_glTexCoord2fColor4fNormal3fVertex3fvSUN, 4);
    rb_define_method(*pmROGL, "glTexCoord4fColor4fNormal3fVertex4fSUN", rogl_glTexCoord4fColor4fNormal3fVertex4fSUN, 15);
    rb_define_method(*pmROGL, "glTexCoord4fColor4fNormal3fVertex4fvSUN", rogl_glTexCoord4fColor4fNormal3fVertex4fvSUN, 4);
    rb_define_method(*pmROGL, "glReplacementCodeuiVertex3fSUN", rogl_glReplacementCodeuiVertex3fSUN, 4);
    rb_define_method(*pmROGL, "glReplacementCodeuiVertex3fvSUN", rogl_glReplacementCodeuiVertex3fvSUN, 2);
    rb_define_method(*pmROGL, "glReplacementCodeuiColor4ubVertex3fSUN", rogl_glReplacementCodeuiColor4ubVertex3fSUN, 8);
    rb_define_method(*pmROGL, "glReplacementCodeuiColor4ubVertex3fvSUN", rogl_glReplacementCodeuiColor4ubVertex3fvSUN, 3);
    rb_define_method(*pmROGL, "glReplacementCodeuiColor3fVertex3fSUN", rogl_glReplacementCodeuiColor3fVertex3fSUN, 7);
    rb_define_method(*pmROGL, "glReplacementCodeuiColor3fVertex3fvSUN", rogl_glReplacementCodeuiColor3fVertex3fvSUN, 3);
    rb_define_method(*pmROGL, "glReplacementCodeuiNormal3fVertex3fSUN", rogl_glReplacementCodeuiNormal3fVertex3fSUN, 7);
    rb_define_method(*pmROGL, "glReplacementCodeuiNormal3fVertex3fvSUN", rogl_glReplacementCodeuiNormal3fVertex3fvSUN, 3);
    rb_define_method(*pmROGL, "glReplacementCodeuiColor4fNormal3fVertex3fSUN", rogl_glReplacementCodeuiColor4fNormal3fVertex3fSUN, 11);
    rb_define_method(*pmROGL, "glReplacementCodeuiColor4fNormal3fVertex3fvSUN", rogl_glReplacementCodeuiColor4fNormal3fVertex3fvSUN, 4);
    rb_define_method(*pmROGL, "glReplacementCodeuiTexCoord2fVertex3fSUN", rogl_glReplacementCodeuiTexCoord2fVertex3fSUN, 6);
    rb_define_method(*pmROGL, "glReplacementCodeuiTexCoord2fVertex3fvSUN", rogl_glReplacementCodeuiTexCoord2fVertex3fvSUN, 3);
    rb_define_method(*pmROGL, "glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN", rogl_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN, 9);
    rb_define_method(*pmROGL, "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN", rogl_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN, 4);
    rb_define_method(*pmROGL, "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN", rogl_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN, 13);
    rb_define_method(*pmROGL, "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN", rogl_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN, 5);
}

static void rogl_InitRubyExtEnum( VALUE* pmROGL )
{
    rb_define_const(*pmROGL, "GL_MULTISAMPLE_3DFX", UINT2NUM(0x86B2));
    rb_define_const(*pmROGL, "GL_SAMPLE_BUFFERS_3DFX", UINT2NUM(0x86B3));
    rb_define_const(*pmROGL, "GL_SAMPLES_3DFX", UINT2NUM(0x86B4));
    rb_define_const(*pmROGL, "GL_MULTISAMPLE_BIT_3DFX", UINT2NUM(0x20000000));
    rb_define_const(*pmROGL, "GL_COMPRESSED_RGB_FXT1_3DFX", UINT2NUM(0x86B0));
    rb_define_const(*pmROGL, "GL_COMPRESSED_RGBA_FXT1_3DFX", UINT2NUM(0x86B1));
    rb_define_const(*pmROGL, "GL_FACTOR_MIN_AMD", UINT2NUM(0x901C));
    rb_define_const(*pmROGL, "GL_FACTOR_MAX_AMD", UINT2NUM(0x901D));
    rb_define_const(*pmROGL, "GL_MAX_DEBUG_MESSAGE_LENGTH_AMD", UINT2NUM(0x9143));
    rb_define_const(*pmROGL, "GL_MAX_DEBUG_LOGGED_MESSAGES_AMD", UINT2NUM(0x9144));
    rb_define_const(*pmROGL, "GL_DEBUG_LOGGED_MESSAGES_AMD", UINT2NUM(0x9145));
    rb_define_const(*pmROGL, "GL_DEBUG_SEVERITY_HIGH_AMD", UINT2NUM(0x9146));
    rb_define_const(*pmROGL, "GL_DEBUG_SEVERITY_MEDIUM_AMD", UINT2NUM(0x9147));
    rb_define_const(*pmROGL, "GL_DEBUG_SEVERITY_LOW_AMD", UINT2NUM(0x9148));
    rb_define_const(*pmROGL, "GL_DEBUG_CATEGORY_API_ERROR_AMD", UINT2NUM(0x9149));
    rb_define_const(*pmROGL, "GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD", UINT2NUM(0x914A));
    rb_define_const(*pmROGL, "GL_DEBUG_CATEGORY_DEPRECATION_AMD", UINT2NUM(0x914B));
    rb_define_const(*pmROGL, "GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD", UINT2NUM(0x914C));
    rb_define_const(*pmROGL, "GL_DEBUG_CATEGORY_PERFORMANCE_AMD", UINT2NUM(0x914D));
    rb_define_const(*pmROGL, "GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD", UINT2NUM(0x914E));
    rb_define_const(*pmROGL, "GL_DEBUG_CATEGORY_APPLICATION_AMD", UINT2NUM(0x914F));
    rb_define_const(*pmROGL, "GL_DEBUG_CATEGORY_OTHER_AMD", UINT2NUM(0x9150));
    rb_define_const(*pmROGL, "GL_DEPTH_CLAMP_NEAR_AMD", UINT2NUM(0x901E));
    rb_define_const(*pmROGL, "GL_DEPTH_CLAMP_FAR_AMD", UINT2NUM(0x901F));
    rb_define_const(*pmROGL, "GL_VERTEX_ELEMENT_SWIZZLE_AMD", UINT2NUM(0x91A4));
    rb_define_const(*pmROGL, "GL_VERTEX_ID_SWIZZLE_AMD", UINT2NUM(0x91A5));
    rb_define_const(*pmROGL, "GL_DATA_BUFFER_AMD", UINT2NUM(0x9151));
    rb_define_const(*pmROGL, "GL_PERFORMANCE_MONITOR_AMD", UINT2NUM(0x9152));
    rb_define_const(*pmROGL, "GL_QUERY_OBJECT_AMD", UINT2NUM(0x9153));
    rb_define_const(*pmROGL, "GL_VERTEX_ARRAY_OBJECT_AMD", UINT2NUM(0x9154));
    rb_define_const(*pmROGL, "GL_SAMPLER_OBJECT_AMD", UINT2NUM(0x9155));
    rb_define_const(*pmROGL, "GL_OCCLUSION_QUERY_EVENT_MASK_AMD", UINT2NUM(0x874F));
    rb_define_const(*pmROGL, "GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD", UINT2NUM(0x00000001));
    rb_define_const(*pmROGL, "GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD", UINT2NUM(0x00000002));
    rb_define_const(*pmROGL, "GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD", UINT2NUM(0x00000004));
    rb_define_const(*pmROGL, "GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD", UINT2NUM(0x00000008));
    rb_define_const(*pmROGL, "GL_QUERY_ALL_EVENT_BITS_AMD", UINT2NUM(0xFFFFFFFF));
    rb_define_const(*pmROGL, "GL_COUNTER_TYPE_AMD", UINT2NUM(0x8BC0));
    rb_define_const(*pmROGL, "GL_COUNTER_RANGE_AMD", UINT2NUM(0x8BC1));
    rb_define_const(*pmROGL, "GL_UNSIGNED_INT64_AMD", UINT2NUM(0x8BC2));
    rb_define_const(*pmROGL, "GL_PERCENTAGE_AMD", UINT2NUM(0x8BC3));
    rb_define_const(*pmROGL, "GL_PERFMON_RESULT_AVAILABLE_AMD", UINT2NUM(0x8BC4));
    rb_define_const(*pmROGL, "GL_PERFMON_RESULT_SIZE_AMD", UINT2NUM(0x8BC5));
    rb_define_const(*pmROGL, "GL_PERFMON_RESULT_AMD", UINT2NUM(0x8BC6));
    rb_define_const(*pmROGL, "GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD", UINT2NUM(0x9160));
    rb_define_const(*pmROGL, "GL_QUERY_BUFFER_AMD", UINT2NUM(0x9192));
    rb_define_const(*pmROGL, "GL_QUERY_BUFFER_BINDING_AMD", UINT2NUM(0x9193));
    rb_define_const(*pmROGL, "GL_QUERY_RESULT_NO_WAIT_AMD", UINT2NUM(0x9194));
    rb_define_const(*pmROGL, "GL_SUBSAMPLE_DISTANCE_AMD", UINT2NUM(0x883F));
    rb_define_const(*pmROGL, "GL_VIRTUAL_PAGE_SIZE_X_AMD", UINT2NUM(0x9195));
    rb_define_const(*pmROGL, "GL_VIRTUAL_PAGE_SIZE_Y_AMD", UINT2NUM(0x9196));
    rb_define_const(*pmROGL, "GL_VIRTUAL_PAGE_SIZE_Z_AMD", UINT2NUM(0x9197));
    rb_define_const(*pmROGL, "GL_MAX_SPARSE_TEXTURE_SIZE_AMD", UINT2NUM(0x9198));
    rb_define_const(*pmROGL, "GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD", UINT2NUM(0x9199));
    rb_define_const(*pmROGL, "GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS", UINT2NUM(0x919A));
    rb_define_const(*pmROGL, "GL_MIN_SPARSE_LEVEL_AMD", UINT2NUM(0x919B));
    rb_define_const(*pmROGL, "GL_MIN_LOD_WARNING_AMD", UINT2NUM(0x919C));
    rb_define_const(*pmROGL, "GL_TEXTURE_STORAGE_SPARSE_BIT_AMD", UINT2NUM(0x00000001));
    rb_define_const(*pmROGL, "GL_SET_AMD", UINT2NUM(0x874A));
    rb_define_const(*pmROGL, "GL_REPLACE_VALUE_AMD", UINT2NUM(0x874B));
    rb_define_const(*pmROGL, "GL_STENCIL_OP_VALUE_AMD", UINT2NUM(0x874C));
    rb_define_const(*pmROGL, "GL_STENCIL_BACK_OP_VALUE_AMD", UINT2NUM(0x874D));
    rb_define_const(*pmROGL, "GL_STREAM_RASTERIZATION_AMD", UINT2NUM(0x91A0));
    rb_define_const(*pmROGL, "GL_SAMPLER_BUFFER_AMD", UINT2NUM(0x9001));
    rb_define_const(*pmROGL, "GL_INT_SAMPLER_BUFFER_AMD", UINT2NUM(0x9002));
    rb_define_const(*pmROGL, "GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD", UINT2NUM(0x9003));
    rb_define_const(*pmROGL, "GL_TESSELLATION_MODE_AMD", UINT2NUM(0x9004));
    rb_define_const(*pmROGL, "GL_TESSELLATION_FACTOR_AMD", UINT2NUM(0x9005));
    rb_define_const(*pmROGL, "GL_DISCRETE_AMD", UINT2NUM(0x9006));
    rb_define_const(*pmROGL, "GL_CONTINUOUS_AMD", UINT2NUM(0x9007));
    rb_define_const(*pmROGL, "GL_AUX_DEPTH_STENCIL_APPLE", UINT2NUM(0x8A14));
    rb_define_const(*pmROGL, "GL_UNPACK_CLIENT_STORAGE_APPLE", UINT2NUM(0x85B2));
    rb_define_const(*pmROGL, "GL_ELEMENT_ARRAY_APPLE", UINT2NUM(0x8A0C));
    rb_define_const(*pmROGL, "GL_ELEMENT_ARRAY_TYPE_APPLE", UINT2NUM(0x8A0D));
    rb_define_const(*pmROGL, "GL_ELEMENT_ARRAY_POINTER_APPLE", UINT2NUM(0x8A0E));
    rb_define_const(*pmROGL, "GL_DRAW_PIXELS_APPLE", UINT2NUM(0x8A0A));
    rb_define_const(*pmROGL, "GL_FENCE_APPLE", UINT2NUM(0x8A0B));
    rb_define_const(*pmROGL, "GL_HALF_APPLE", UINT2NUM(0x140B));
    rb_define_const(*pmROGL, "GL_RGBA_FLOAT32_APPLE", UINT2NUM(0x8814));
    rb_define_const(*pmROGL, "GL_RGB_FLOAT32_APPLE", UINT2NUM(0x8815));
    rb_define_const(*pmROGL, "GL_ALPHA_FLOAT32_APPLE", UINT2NUM(0x8816));
    rb_define_const(*pmROGL, "GL_INTENSITY_FLOAT32_APPLE", UINT2NUM(0x8817));
    rb_define_const(*pmROGL, "GL_LUMINANCE_FLOAT32_APPLE", UINT2NUM(0x8818));
    rb_define_const(*pmROGL, "GL_LUMINANCE_ALPHA_FLOAT32_APPLE", UINT2NUM(0x8819));
    rb_define_const(*pmROGL, "GL_RGBA_FLOAT16_APPLE", UINT2NUM(0x881A));
    rb_define_const(*pmROGL, "GL_RGB_FLOAT16_APPLE", UINT2NUM(0x881B));
    rb_define_const(*pmROGL, "GL_ALPHA_FLOAT16_APPLE", UINT2NUM(0x881C));
    rb_define_const(*pmROGL, "GL_INTENSITY_FLOAT16_APPLE", UINT2NUM(0x881D));
    rb_define_const(*pmROGL, "GL_LUMINANCE_FLOAT16_APPLE", UINT2NUM(0x881E));
    rb_define_const(*pmROGL, "GL_LUMINANCE_ALPHA_FLOAT16_APPLE", UINT2NUM(0x881F));
    rb_define_const(*pmROGL, "GL_COLOR_FLOAT_APPLE", UINT2NUM(0x8A0F));
    rb_define_const(*pmROGL, "GL_BUFFER_SERIALIZED_MODIFY_APPLE", UINT2NUM(0x8A12));
    rb_define_const(*pmROGL, "GL_BUFFER_FLUSHING_UNMAP_APPLE", UINT2NUM(0x8A13));
    rb_define_const(*pmROGL, "GL_BUFFER_OBJECT_APPLE", UINT2NUM(0x85B3));
    rb_define_const(*pmROGL, "GL_RELEASED_APPLE", UINT2NUM(0x8A19));
    rb_define_const(*pmROGL, "GL_VOLATILE_APPLE", UINT2NUM(0x8A1A));
    rb_define_const(*pmROGL, "GL_RETAINED_APPLE", UINT2NUM(0x8A1B));
    rb_define_const(*pmROGL, "GL_UNDEFINED_APPLE", UINT2NUM(0x8A1C));
    rb_define_const(*pmROGL, "GL_PURGEABLE_APPLE", UINT2NUM(0x8A1D));
    rb_define_const(*pmROGL, "GL_RGB_422_APPLE", UINT2NUM(0x8A1F));
    rb_define_const(*pmROGL, "GL_RGB_RAW_422_APPLE", UINT2NUM(0x8A51));
    rb_define_const(*pmROGL, "GL_PACK_ROW_BYTES_APPLE", UINT2NUM(0x8A15));
    rb_define_const(*pmROGL, "GL_UNPACK_ROW_BYTES_APPLE", UINT2NUM(0x8A16));
    rb_define_const(*pmROGL, "GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE", UINT2NUM(0x85B0));
    rb_define_const(*pmROGL, "GL_TEXTURE_RANGE_LENGTH_APPLE", UINT2NUM(0x85B7));
    rb_define_const(*pmROGL, "GL_TEXTURE_RANGE_POINTER_APPLE", UINT2NUM(0x85B8));
    rb_define_const(*pmROGL, "GL_TEXTURE_STORAGE_HINT_APPLE", UINT2NUM(0x85BC));
    rb_define_const(*pmROGL, "GL_STORAGE_PRIVATE_APPLE", UINT2NUM(0x85BD));
    rb_define_const(*pmROGL, "GL_TRANSFORM_HINT_APPLE", UINT2NUM(0x85B1));
    rb_define_const(*pmROGL, "GL_VERTEX_ARRAY_BINDING_APPLE", UINT2NUM(0x85B5));
    rb_define_const(*pmROGL, "GL_VERTEX_ARRAY_RANGE_APPLE", UINT2NUM(0x851D));
    rb_define_const(*pmROGL, "GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE", UINT2NUM(0x851E));
    rb_define_const(*pmROGL, "GL_VERTEX_ARRAY_STORAGE_HINT_APPLE", UINT2NUM(0x851F));
    rb_define_const(*pmROGL, "GL_VERTEX_ARRAY_RANGE_POINTER_APPLE", UINT2NUM(0x8521));
    rb_define_const(*pmROGL, "GL_STORAGE_CLIENT_APPLE", UINT2NUM(0x85B4));
    rb_define_const(*pmROGL, "GL_VERTEX_ATTRIB_MAP1_APPLE", UINT2NUM(0x8A00));
    rb_define_const(*pmROGL, "GL_VERTEX_ATTRIB_MAP2_APPLE", UINT2NUM(0x8A01));
    rb_define_const(*pmROGL, "GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE", UINT2NUM(0x8A02));
    rb_define_const(*pmROGL, "GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE", UINT2NUM(0x8A03));
    rb_define_const(*pmROGL, "GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE", UINT2NUM(0x8A04));
    rb_define_const(*pmROGL, "GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE", UINT2NUM(0x8A05));
    rb_define_const(*pmROGL, "GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE", UINT2NUM(0x8A06));
    rb_define_const(*pmROGL, "GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE", UINT2NUM(0x8A07));
    rb_define_const(*pmROGL, "GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE", UINT2NUM(0x8A08));
    rb_define_const(*pmROGL, "GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE", UINT2NUM(0x8A09));
    rb_define_const(*pmROGL, "GL_YCBCR_422_APPLE", UINT2NUM(0x85B9));
    rb_define_const(*pmROGL, "GL_PRIMITIVE_BOUNDING_BOX_ARB", UINT2NUM(0x92BE));
    rb_define_const(*pmROGL, "GL_MULTISAMPLE_LINE_WIDTH_RANGE_ARB", UINT2NUM(0x9381));
    rb_define_const(*pmROGL, "GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY_ARB", UINT2NUM(0x9382));
    rb_define_const(*pmROGL, "GL_SYNC_CL_EVENT_ARB", UINT2NUM(0x8240));
    rb_define_const(*pmROGL, "GL_SYNC_CL_EVENT_COMPLETE_ARB", UINT2NUM(0x8241));
    rb_define_const(*pmROGL, "GL_RGBA_FLOAT_MODE_ARB", UINT2NUM(0x8820));
    rb_define_const(*pmROGL, "GL_CLAMP_VERTEX_COLOR_ARB", UINT2NUM(0x891A));
    rb_define_const(*pmROGL, "GL_CLAMP_FRAGMENT_COLOR_ARB", UINT2NUM(0x891B));
    rb_define_const(*pmROGL, "GL_CLAMP_READ_COLOR_ARB", UINT2NUM(0x891C));
    rb_define_const(*pmROGL, "GL_FIXED_ONLY_ARB", UINT2NUM(0x891D));
    rb_define_const(*pmROGL, "GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB", UINT2NUM(0x9344));
    rb_define_const(*pmROGL, "GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB", UINT2NUM(0x90EB));
    rb_define_const(*pmROGL, "GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB", UINT2NUM(0x9345));
    rb_define_const(*pmROGL, "GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB", UINT2NUM(0x91BF));
    rb_define_const(*pmROGL, "GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB", UINT2NUM(0x8242));
    rb_define_const(*pmROGL, "GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB", UINT2NUM(0x8243));
    rb_define_const(*pmROGL, "GL_DEBUG_CALLBACK_FUNCTION_ARB", UINT2NUM(0x8244));
    rb_define_const(*pmROGL, "GL_DEBUG_CALLBACK_USER_PARAM_ARB", UINT2NUM(0x8245));
    rb_define_const(*pmROGL, "GL_DEBUG_SOURCE_API_ARB", UINT2NUM(0x8246));
    rb_define_const(*pmROGL, "GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB", UINT2NUM(0x8247));
    rb_define_const(*pmROGL, "GL_DEBUG_SOURCE_SHADER_COMPILER_ARB", UINT2NUM(0x8248));
    rb_define_const(*pmROGL, "GL_DEBUG_SOURCE_THIRD_PARTY_ARB", UINT2NUM(0x8249));
    rb_define_const(*pmROGL, "GL_DEBUG_SOURCE_APPLICATION_ARB", UINT2NUM(0x824A));
    rb_define_const(*pmROGL, "GL_DEBUG_SOURCE_OTHER_ARB", UINT2NUM(0x824B));
    rb_define_const(*pmROGL, "GL_DEBUG_TYPE_ERROR_ARB", UINT2NUM(0x824C));
    rb_define_const(*pmROGL, "GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB", UINT2NUM(0x824D));
    rb_define_const(*pmROGL, "GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB", UINT2NUM(0x824E));
    rb_define_const(*pmROGL, "GL_DEBUG_TYPE_PORTABILITY_ARB", UINT2NUM(0x824F));
    rb_define_const(*pmROGL, "GL_DEBUG_TYPE_PERFORMANCE_ARB", UINT2NUM(0x8250));
    rb_define_const(*pmROGL, "GL_DEBUG_TYPE_OTHER_ARB", UINT2NUM(0x8251));
    rb_define_const(*pmROGL, "GL_MAX_DEBUG_MESSAGE_LENGTH_ARB", UINT2NUM(0x9143));
    rb_define_const(*pmROGL, "GL_MAX_DEBUG_LOGGED_MESSAGES_ARB", UINT2NUM(0x9144));
    rb_define_const(*pmROGL, "GL_DEBUG_LOGGED_MESSAGES_ARB", UINT2NUM(0x9145));
    rb_define_const(*pmROGL, "GL_DEBUG_SEVERITY_HIGH_ARB", UINT2NUM(0x9146));
    rb_define_const(*pmROGL, "GL_DEBUG_SEVERITY_MEDIUM_ARB", UINT2NUM(0x9147));
    rb_define_const(*pmROGL, "GL_DEBUG_SEVERITY_LOW_ARB", UINT2NUM(0x9148));
    rb_define_const(*pmROGL, "GL_DEPTH_COMPONENT16_ARB", UINT2NUM(0x81A5));
    rb_define_const(*pmROGL, "GL_DEPTH_COMPONENT24_ARB", UINT2NUM(0x81A6));
    rb_define_const(*pmROGL, "GL_DEPTH_COMPONENT32_ARB", UINT2NUM(0x81A7));
    rb_define_const(*pmROGL, "GL_TEXTURE_DEPTH_SIZE_ARB", UINT2NUM(0x884A));
    rb_define_const(*pmROGL, "GL_DEPTH_TEXTURE_MODE_ARB", UINT2NUM(0x884B));
    rb_define_const(*pmROGL, "GL_MAX_DRAW_BUFFERS_ARB", UINT2NUM(0x8824));
    rb_define_const(*pmROGL, "GL_DRAW_BUFFER0_ARB", UINT2NUM(0x8825));
    rb_define_const(*pmROGL, "GL_DRAW_BUFFER1_ARB", UINT2NUM(0x8826));
    rb_define_const(*pmROGL, "GL_DRAW_BUFFER2_ARB", UINT2NUM(0x8827));
    rb_define_const(*pmROGL, "GL_DRAW_BUFFER3_ARB", UINT2NUM(0x8828));
    rb_define_const(*pmROGL, "GL_DRAW_BUFFER4_ARB", UINT2NUM(0x8829));
    rb_define_const(*pmROGL, "GL_DRAW_BUFFER5_ARB", UINT2NUM(0x882A));
    rb_define_const(*pmROGL, "GL_DRAW_BUFFER6_ARB", UINT2NUM(0x882B));
    rb_define_const(*pmROGL, "GL_DRAW_BUFFER7_ARB", UINT2NUM(0x882C));
    rb_define_const(*pmROGL, "GL_DRAW_BUFFER8_ARB", UINT2NUM(0x882D));
    rb_define_const(*pmROGL, "GL_DRAW_BUFFER9_ARB", UINT2NUM(0x882E));
    rb_define_const(*pmROGL, "GL_DRAW_BUFFER10_ARB", UINT2NUM(0x882F));
    rb_define_const(*pmROGL, "GL_DRAW_BUFFER11_ARB", UINT2NUM(0x8830));
    rb_define_const(*pmROGL, "GL_DRAW_BUFFER12_ARB", UINT2NUM(0x8831));
    rb_define_const(*pmROGL, "GL_DRAW_BUFFER13_ARB", UINT2NUM(0x8832));
    rb_define_const(*pmROGL, "GL_DRAW_BUFFER14_ARB", UINT2NUM(0x8833));
    rb_define_const(*pmROGL, "GL_DRAW_BUFFER15_ARB", UINT2NUM(0x8834));
    rb_define_const(*pmROGL, "GL_FRAGMENT_PROGRAM_ARB", UINT2NUM(0x8804));
    rb_define_const(*pmROGL, "GL_PROGRAM_ALU_INSTRUCTIONS_ARB", UINT2NUM(0x8805));
    rb_define_const(*pmROGL, "GL_PROGRAM_TEX_INSTRUCTIONS_ARB", UINT2NUM(0x8806));
    rb_define_const(*pmROGL, "GL_PROGRAM_TEX_INDIRECTIONS_ARB", UINT2NUM(0x8807));
    rb_define_const(*pmROGL, "GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB", UINT2NUM(0x8808));
    rb_define_const(*pmROGL, "GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB", UINT2NUM(0x8809));
    rb_define_const(*pmROGL, "GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB", UINT2NUM(0x880A));
    rb_define_const(*pmROGL, "GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB", UINT2NUM(0x880B));
    rb_define_const(*pmROGL, "GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB", UINT2NUM(0x880C));
    rb_define_const(*pmROGL, "GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB", UINT2NUM(0x880D));
    rb_define_const(*pmROGL, "GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB", UINT2NUM(0x880E));
    rb_define_const(*pmROGL, "GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB", UINT2NUM(0x880F));
    rb_define_const(*pmROGL, "GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB", UINT2NUM(0x8810));
    rb_define_const(*pmROGL, "GL_FRAGMENT_SHADER_ARB", UINT2NUM(0x8B30));
    rb_define_const(*pmROGL, "GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB", UINT2NUM(0x8B49));
    rb_define_const(*pmROGL, "GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB", UINT2NUM(0x8B8B));
    rb_define_const(*pmROGL, "GL_LINES_ADJACENCY_ARB", UINT2NUM(0x000A));
    rb_define_const(*pmROGL, "GL_LINE_STRIP_ADJACENCY_ARB", UINT2NUM(0x000B));
    rb_define_const(*pmROGL, "GL_TRIANGLES_ADJACENCY_ARB", UINT2NUM(0x000C));
    rb_define_const(*pmROGL, "GL_TRIANGLE_STRIP_ADJACENCY_ARB", UINT2NUM(0x000D));
    rb_define_const(*pmROGL, "GL_PROGRAM_POINT_SIZE_ARB", UINT2NUM(0x8642));
    rb_define_const(*pmROGL, "GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB", UINT2NUM(0x8C29));
    rb_define_const(*pmROGL, "GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB", UINT2NUM(0x8DA7));
    rb_define_const(*pmROGL, "GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB", UINT2NUM(0x8DA8));
    rb_define_const(*pmROGL, "GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB", UINT2NUM(0x8DA9));
    rb_define_const(*pmROGL, "GL_GEOMETRY_SHADER_ARB", UINT2NUM(0x8DD9));
    rb_define_const(*pmROGL, "GL_GEOMETRY_VERTICES_OUT_ARB", UINT2NUM(0x8DDA));
    rb_define_const(*pmROGL, "GL_GEOMETRY_INPUT_TYPE_ARB", UINT2NUM(0x8DDB));
    rb_define_const(*pmROGL, "GL_GEOMETRY_OUTPUT_TYPE_ARB", UINT2NUM(0x8DDC));
    rb_define_const(*pmROGL, "GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB", UINT2NUM(0x8DDD));
    rb_define_const(*pmROGL, "GL_MAX_VERTEX_VARYING_COMPONENTS_ARB", UINT2NUM(0x8DDE));
    rb_define_const(*pmROGL, "GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB", UINT2NUM(0x8DDF));
    rb_define_const(*pmROGL, "GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB", UINT2NUM(0x8DE0));
    rb_define_const(*pmROGL, "GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB", UINT2NUM(0x8DE1));
    rb_define_const(*pmROGL, "GL_INT64_ARB", UINT2NUM(0x140E));
    rb_define_const(*pmROGL, "GL_INT64_VEC2_ARB", UINT2NUM(0x8FE9));
    rb_define_const(*pmROGL, "GL_INT64_VEC3_ARB", UINT2NUM(0x8FEA));
    rb_define_const(*pmROGL, "GL_INT64_VEC4_ARB", UINT2NUM(0x8FEB));
    rb_define_const(*pmROGL, "GL_UNSIGNED_INT64_VEC2_ARB", UINT2NUM(0x8FF5));
    rb_define_const(*pmROGL, "GL_UNSIGNED_INT64_VEC3_ARB", UINT2NUM(0x8FF6));
    rb_define_const(*pmROGL, "GL_UNSIGNED_INT64_VEC4_ARB", UINT2NUM(0x8FF7));
    rb_define_const(*pmROGL, "GL_HALF_FLOAT_ARB", UINT2NUM(0x140B));
    rb_define_const(*pmROGL, "GL_BLEND_COLOR", UINT2NUM(0x8005));
    rb_define_const(*pmROGL, "GL_BLEND_EQUATION", UINT2NUM(0x8009));
    rb_define_const(*pmROGL, "GL_CONVOLUTION_1D", UINT2NUM(0x8010));
    rb_define_const(*pmROGL, "GL_CONVOLUTION_2D", UINT2NUM(0x8011));
    rb_define_const(*pmROGL, "GL_SEPARABLE_2D", UINT2NUM(0x8012));
    rb_define_const(*pmROGL, "GL_CONVOLUTION_BORDER_MODE", UINT2NUM(0x8013));
    rb_define_const(*pmROGL, "GL_CONVOLUTION_FILTER_SCALE", UINT2NUM(0x8014));
    rb_define_const(*pmROGL, "GL_CONVOLUTION_FILTER_BIAS", UINT2NUM(0x8015));
    rb_define_const(*pmROGL, "GL_REDUCE", UINT2NUM(0x8016));
    rb_define_const(*pmROGL, "GL_CONVOLUTION_FORMAT", UINT2NUM(0x8017));
    rb_define_const(*pmROGL, "GL_CONVOLUTION_WIDTH", UINT2NUM(0x8018));
    rb_define_const(*pmROGL, "GL_CONVOLUTION_HEIGHT", UINT2NUM(0x8019));
    rb_define_const(*pmROGL, "GL_MAX_CONVOLUTION_WIDTH", UINT2NUM(0x801A));
    rb_define_const(*pmROGL, "GL_MAX_CONVOLUTION_HEIGHT", UINT2NUM(0x801B));
    rb_define_const(*pmROGL, "GL_POST_CONVOLUTION_RED_SCALE", UINT2NUM(0x801C));
    rb_define_const(*pmROGL, "GL_POST_CONVOLUTION_GREEN_SCALE", UINT2NUM(0x801D));
    rb_define_const(*pmROGL, "GL_POST_CONVOLUTION_BLUE_SCALE", UINT2NUM(0x801E));
    rb_define_const(*pmROGL, "GL_POST_CONVOLUTION_ALPHA_SCALE", UINT2NUM(0x801F));
    rb_define_const(*pmROGL, "GL_POST_CONVOLUTION_RED_BIAS", UINT2NUM(0x8020));
    rb_define_const(*pmROGL, "GL_POST_CONVOLUTION_GREEN_BIAS", UINT2NUM(0x8021));
    rb_define_const(*pmROGL, "GL_POST_CONVOLUTION_BLUE_BIAS", UINT2NUM(0x8022));
    rb_define_const(*pmROGL, "GL_POST_CONVOLUTION_ALPHA_BIAS", UINT2NUM(0x8023));
    rb_define_const(*pmROGL, "GL_HISTOGRAM", UINT2NUM(0x8024));
    rb_define_const(*pmROGL, "GL_PROXY_HISTOGRAM", UINT2NUM(0x8025));
    rb_define_const(*pmROGL, "GL_HISTOGRAM_WIDTH", UINT2NUM(0x8026));
    rb_define_const(*pmROGL, "GL_HISTOGRAM_FORMAT", UINT2NUM(0x8027));
    rb_define_const(*pmROGL, "GL_HISTOGRAM_RED_SIZE", UINT2NUM(0x8028));
    rb_define_const(*pmROGL, "GL_HISTOGRAM_GREEN_SIZE", UINT2NUM(0x8029));
    rb_define_const(*pmROGL, "GL_HISTOGRAM_BLUE_SIZE", UINT2NUM(0x802A));
    rb_define_const(*pmROGL, "GL_HISTOGRAM_ALPHA_SIZE", UINT2NUM(0x802B));
    rb_define_const(*pmROGL, "GL_HISTOGRAM_LUMINANCE_SIZE", UINT2NUM(0x802C));
    rb_define_const(*pmROGL, "GL_HISTOGRAM_SINK", UINT2NUM(0x802D));
    rb_define_const(*pmROGL, "GL_MINMAX", UINT2NUM(0x802E));
    rb_define_const(*pmROGL, "GL_MINMAX_FORMAT", UINT2NUM(0x802F));
    rb_define_const(*pmROGL, "GL_MINMAX_SINK", UINT2NUM(0x8030));
    rb_define_const(*pmROGL, "GL_TABLE_TOO_LARGE", UINT2NUM(0x8031));
    rb_define_const(*pmROGL, "GL_COLOR_MATRIX", UINT2NUM(0x80B1));
    rb_define_const(*pmROGL, "GL_COLOR_MATRIX_STACK_DEPTH", UINT2NUM(0x80B2));
    rb_define_const(*pmROGL, "GL_MAX_COLOR_MATRIX_STACK_DEPTH", UINT2NUM(0x80B3));
    rb_define_const(*pmROGL, "GL_POST_COLOR_MATRIX_RED_SCALE", UINT2NUM(0x80B4));
    rb_define_const(*pmROGL, "GL_POST_COLOR_MATRIX_GREEN_SCALE", UINT2NUM(0x80B5));
    rb_define_const(*pmROGL, "GL_POST_COLOR_MATRIX_BLUE_SCALE", UINT2NUM(0x80B6));
    rb_define_const(*pmROGL, "GL_POST_COLOR_MATRIX_ALPHA_SCALE", UINT2NUM(0x80B7));
    rb_define_const(*pmROGL, "GL_POST_COLOR_MATRIX_RED_BIAS", UINT2NUM(0x80B8));
    rb_define_const(*pmROGL, "GL_POST_COLOR_MATRIX_GREEN_BIAS", UINT2NUM(0x80B9));
    rb_define_const(*pmROGL, "GL_POST_COLOR_MATRIX_BLUE_BIAS", UINT2NUM(0x80BA));
    rb_define_const(*pmROGL, "GL_POST_COLOR_MATRIX_ALPHA_BIAS", UINT2NUM(0x80BB));
    rb_define_const(*pmROGL, "GL_COLOR_TABLE", UINT2NUM(0x80D0));
    rb_define_const(*pmROGL, "GL_POST_CONVOLUTION_COLOR_TABLE", UINT2NUM(0x80D1));
    rb_define_const(*pmROGL, "GL_POST_COLOR_MATRIX_COLOR_TABLE", UINT2NUM(0x80D2));
    rb_define_const(*pmROGL, "GL_PROXY_COLOR_TABLE", UINT2NUM(0x80D3));
    rb_define_const(*pmROGL, "GL_PROXY_POST_CONVOLUTION_COLOR_TABLE", UINT2NUM(0x80D4));
    rb_define_const(*pmROGL, "GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE", UINT2NUM(0x80D5));
    rb_define_const(*pmROGL, "GL_COLOR_TABLE_SCALE", UINT2NUM(0x80D6));
    rb_define_const(*pmROGL, "GL_COLOR_TABLE_BIAS", UINT2NUM(0x80D7));
    rb_define_const(*pmROGL, "GL_COLOR_TABLE_FORMAT", UINT2NUM(0x80D8));
    rb_define_const(*pmROGL, "GL_COLOR_TABLE_WIDTH", UINT2NUM(0x80D9));
    rb_define_const(*pmROGL, "GL_COLOR_TABLE_RED_SIZE", UINT2NUM(0x80DA));
    rb_define_const(*pmROGL, "GL_COLOR_TABLE_GREEN_SIZE", UINT2NUM(0x80DB));
    rb_define_const(*pmROGL, "GL_COLOR_TABLE_BLUE_SIZE", UINT2NUM(0x80DC));
    rb_define_const(*pmROGL, "GL_COLOR_TABLE_ALPHA_SIZE", UINT2NUM(0x80DD));
    rb_define_const(*pmROGL, "GL_COLOR_TABLE_LUMINANCE_SIZE", UINT2NUM(0x80DE));
    rb_define_const(*pmROGL, "GL_COLOR_TABLE_INTENSITY_SIZE", UINT2NUM(0x80DF));
    rb_define_const(*pmROGL, "GL_CONSTANT_BORDER", UINT2NUM(0x8151));
    rb_define_const(*pmROGL, "GL_REPLICATE_BORDER", UINT2NUM(0x8153));
    rb_define_const(*pmROGL, "GL_CONVOLUTION_BORDER_COLOR", UINT2NUM(0x8154));
    rb_define_const(*pmROGL, "GL_PARAMETER_BUFFER_ARB", UINT2NUM(0x80EE));
    rb_define_const(*pmROGL, "GL_PARAMETER_BUFFER_BINDING_ARB", UINT2NUM(0x80EF));
    rb_define_const(*pmROGL, "GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB", UINT2NUM(0x88FE));
    rb_define_const(*pmROGL, "GL_SRGB_DECODE_ARB", UINT2NUM(0x8299));
    rb_define_const(*pmROGL, "GL_MATRIX_PALETTE_ARB", UINT2NUM(0x8840));
    rb_define_const(*pmROGL, "GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB", UINT2NUM(0x8841));
    rb_define_const(*pmROGL, "GL_MAX_PALETTE_MATRICES_ARB", UINT2NUM(0x8842));
    rb_define_const(*pmROGL, "GL_CURRENT_PALETTE_MATRIX_ARB", UINT2NUM(0x8843));
    rb_define_const(*pmROGL, "GL_MATRIX_INDEX_ARRAY_ARB", UINT2NUM(0x8844));
    rb_define_const(*pmROGL, "GL_CURRENT_MATRIX_INDEX_ARB", UINT2NUM(0x8845));
    rb_define_const(*pmROGL, "GL_MATRIX_INDEX_ARRAY_SIZE_ARB", UINT2NUM(0x8846));
    rb_define_const(*pmROGL, "GL_MATRIX_INDEX_ARRAY_TYPE_ARB", UINT2NUM(0x8847));
    rb_define_const(*pmROGL, "GL_MATRIX_INDEX_ARRAY_STRIDE_ARB", UINT2NUM(0x8848));
    rb_define_const(*pmROGL, "GL_MATRIX_INDEX_ARRAY_POINTER_ARB", UINT2NUM(0x8849));
    rb_define_const(*pmROGL, "GL_MULTISAMPLE_ARB", UINT2NUM(0x809D));
    rb_define_const(*pmROGL, "GL_SAMPLE_ALPHA_TO_COVERAGE_ARB", UINT2NUM(0x809E));
    rb_define_const(*pmROGL, "GL_SAMPLE_ALPHA_TO_ONE_ARB", UINT2NUM(0x809F));
    rb_define_const(*pmROGL, "GL_SAMPLE_COVERAGE_ARB", UINT2NUM(0x80A0));
    rb_define_const(*pmROGL, "GL_SAMPLE_BUFFERS_ARB", UINT2NUM(0x80A8));
    rb_define_const(*pmROGL, "GL_SAMPLE_COVERAGE_VALUE_ARB", UINT2NUM(0x80AA));
    rb_define_const(*pmROGL, "GL_SAMPLE_COVERAGE_INVERT_ARB", UINT2NUM(0x80AB));
    rb_define_const(*pmROGL, "GL_MULTISAMPLE_BIT_ARB", UINT2NUM(0x20000000));
    rb_define_const(*pmROGL, "GL_TEXTURE2_ARB", UINT2NUM(0x84C2));
    rb_define_const(*pmROGL, "GL_TEXTURE3_ARB", UINT2NUM(0x84C3));
    rb_define_const(*pmROGL, "GL_TEXTURE4_ARB", UINT2NUM(0x84C4));
    rb_define_const(*pmROGL, "GL_TEXTURE5_ARB", UINT2NUM(0x84C5));
    rb_define_const(*pmROGL, "GL_TEXTURE6_ARB", UINT2NUM(0x84C6));
    rb_define_const(*pmROGL, "GL_TEXTURE7_ARB", UINT2NUM(0x84C7));
    rb_define_const(*pmROGL, "GL_TEXTURE8_ARB", UINT2NUM(0x84C8));
    rb_define_const(*pmROGL, "GL_TEXTURE9_ARB", UINT2NUM(0x84C9));
    rb_define_const(*pmROGL, "GL_TEXTURE10_ARB", UINT2NUM(0x84CA));
    rb_define_const(*pmROGL, "GL_TEXTURE11_ARB", UINT2NUM(0x84CB));
    rb_define_const(*pmROGL, "GL_TEXTURE12_ARB", UINT2NUM(0x84CC));
    rb_define_const(*pmROGL, "GL_TEXTURE13_ARB", UINT2NUM(0x84CD));
    rb_define_const(*pmROGL, "GL_TEXTURE14_ARB", UINT2NUM(0x84CE));
    rb_define_const(*pmROGL, "GL_TEXTURE15_ARB", UINT2NUM(0x84CF));
    rb_define_const(*pmROGL, "GL_TEXTURE16_ARB", UINT2NUM(0x84D0));
    rb_define_const(*pmROGL, "GL_TEXTURE17_ARB", UINT2NUM(0x84D1));
    rb_define_const(*pmROGL, "GL_TEXTURE18_ARB", UINT2NUM(0x84D2));
    rb_define_const(*pmROGL, "GL_TEXTURE19_ARB", UINT2NUM(0x84D3));
    rb_define_const(*pmROGL, "GL_TEXTURE20_ARB", UINT2NUM(0x84D4));
    rb_define_const(*pmROGL, "GL_TEXTURE21_ARB", UINT2NUM(0x84D5));
    rb_define_const(*pmROGL, "GL_TEXTURE22_ARB", UINT2NUM(0x84D6));
    rb_define_const(*pmROGL, "GL_TEXTURE23_ARB", UINT2NUM(0x84D7));
    rb_define_const(*pmROGL, "GL_TEXTURE24_ARB", UINT2NUM(0x84D8));
    rb_define_const(*pmROGL, "GL_TEXTURE25_ARB", UINT2NUM(0x84D9));
    rb_define_const(*pmROGL, "GL_TEXTURE26_ARB", UINT2NUM(0x84DA));
    rb_define_const(*pmROGL, "GL_TEXTURE27_ARB", UINT2NUM(0x84DB));
    rb_define_const(*pmROGL, "GL_TEXTURE28_ARB", UINT2NUM(0x84DC));
    rb_define_const(*pmROGL, "GL_TEXTURE29_ARB", UINT2NUM(0x84DD));
    rb_define_const(*pmROGL, "GL_TEXTURE30_ARB", UINT2NUM(0x84DE));
    rb_define_const(*pmROGL, "GL_TEXTURE31_ARB", UINT2NUM(0x84DF));
    rb_define_const(*pmROGL, "GL_ACTIVE_TEXTURE_ARB", UINT2NUM(0x84E0));
    rb_define_const(*pmROGL, "GL_CLIENT_ACTIVE_TEXTURE_ARB", UINT2NUM(0x84E1));
    rb_define_const(*pmROGL, "GL_MAX_TEXTURE_UNITS_ARB", UINT2NUM(0x84E2));
    rb_define_const(*pmROGL, "GL_QUERY_COUNTER_BITS_ARB", UINT2NUM(0x8864));
    rb_define_const(*pmROGL, "GL_CURRENT_QUERY_ARB", UINT2NUM(0x8865));
    rb_define_const(*pmROGL, "GL_QUERY_RESULT_ARB", UINT2NUM(0x8866));
    rb_define_const(*pmROGL, "GL_QUERY_RESULT_AVAILABLE_ARB", UINT2NUM(0x8867));
    rb_define_const(*pmROGL, "GL_SAMPLES_PASSED_ARB", UINT2NUM(0x8914));
    rb_define_const(*pmROGL, "GL_MAX_SHADER_COMPILER_THREADS_ARB", UINT2NUM(0x91B0));
    rb_define_const(*pmROGL, "GL_COMPLETION_STATUS_ARB", UINT2NUM(0x91B1));
    rb_define_const(*pmROGL, "GL_VERTICES_SUBMITTED_ARB", UINT2NUM(0x82EE));
    rb_define_const(*pmROGL, "GL_PRIMITIVES_SUBMITTED_ARB", UINT2NUM(0x82EF));
    rb_define_const(*pmROGL, "GL_VERTEX_SHADER_INVOCATIONS_ARB", UINT2NUM(0x82F0));
    rb_define_const(*pmROGL, "GL_TESS_CONTROL_SHADER_PATCHES_ARB", UINT2NUM(0x82F1));
    rb_define_const(*pmROGL, "GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB", UINT2NUM(0x82F2));
    rb_define_const(*pmROGL, "GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB", UINT2NUM(0x82F3));
    rb_define_const(*pmROGL, "GL_FRAGMENT_SHADER_INVOCATIONS_ARB", UINT2NUM(0x82F4));
    rb_define_const(*pmROGL, "GL_COMPUTE_SHADER_INVOCATIONS_ARB", UINT2NUM(0x82F5));
    rb_define_const(*pmROGL, "GL_CLIPPING_INPUT_PRIMITIVES_ARB", UINT2NUM(0x82F6));
    rb_define_const(*pmROGL, "GL_CLIPPING_OUTPUT_PRIMITIVES_ARB", UINT2NUM(0x82F7));
    rb_define_const(*pmROGL, "GL_PIXEL_PACK_BUFFER_ARB", UINT2NUM(0x88EB));
    rb_define_const(*pmROGL, "GL_PIXEL_UNPACK_BUFFER_ARB", UINT2NUM(0x88EC));
    rb_define_const(*pmROGL, "GL_PIXEL_PACK_BUFFER_BINDING_ARB", UINT2NUM(0x88ED));
    rb_define_const(*pmROGL, "GL_PIXEL_UNPACK_BUFFER_BINDING_ARB", UINT2NUM(0x88EF));
    rb_define_const(*pmROGL, "GL_POINT_SIZE_MIN_ARB", UINT2NUM(0x8126));
    rb_define_const(*pmROGL, "GL_POINT_SIZE_MAX_ARB", UINT2NUM(0x8127));
    rb_define_const(*pmROGL, "GL_POINT_FADE_THRESHOLD_SIZE_ARB", UINT2NUM(0x8128));
    rb_define_const(*pmROGL, "GL_POINT_DISTANCE_ATTENUATION_ARB", UINT2NUM(0x8129));
    rb_define_const(*pmROGL, "GL_POINT_SPRITE_ARB", UINT2NUM(0x8861));
    rb_define_const(*pmROGL, "GL_COORD_REPLACE_ARB", UINT2NUM(0x8862));
    rb_define_const(*pmROGL, "GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB", UINT2NUM(0x00000004));
    rb_define_const(*pmROGL, "GL_LOSE_CONTEXT_ON_RESET_ARB", UINT2NUM(0x8252));
    rb_define_const(*pmROGL, "GL_GUILTY_CONTEXT_RESET_ARB", UINT2NUM(0x8253));
    rb_define_const(*pmROGL, "GL_INNOCENT_CONTEXT_RESET_ARB", UINT2NUM(0x8254));
    rb_define_const(*pmROGL, "GL_UNKNOWN_CONTEXT_RESET_ARB", UINT2NUM(0x8255));
    rb_define_const(*pmROGL, "GL_RESET_NOTIFICATION_STRATEGY_ARB", UINT2NUM(0x8256));
    rb_define_const(*pmROGL, "GL_NO_RESET_NOTIFICATION_ARB", UINT2NUM(0x8261));
    rb_define_const(*pmROGL, "GL_SAMPLE_LOCATION_SUBPIXEL_BITS_ARB", UINT2NUM(0x933D));
    rb_define_const(*pmROGL, "GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_ARB", UINT2NUM(0x933E));
    rb_define_const(*pmROGL, "GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_ARB", UINT2NUM(0x933F));
    rb_define_const(*pmROGL, "GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_ARB", UINT2NUM(0x9340));
    rb_define_const(*pmROGL, "GL_SAMPLE_LOCATION_ARB", UINT2NUM(0x8E50));
    rb_define_const(*pmROGL, "GL_PROGRAMMABLE_SAMPLE_LOCATION_ARB", UINT2NUM(0x9341));
    rb_define_const(*pmROGL, "GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_ARB", UINT2NUM(0x9342));
    rb_define_const(*pmROGL, "GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_ARB", UINT2NUM(0x9343));
    rb_define_const(*pmROGL, "GL_SAMPLE_SHADING_ARB", UINT2NUM(0x8C36));
    rb_define_const(*pmROGL, "GL_MIN_SAMPLE_SHADING_VALUE_ARB", UINT2NUM(0x8C37));
    rb_define_const(*pmROGL, "GL_PROGRAM_OBJECT_ARB", UINT2NUM(0x8B40));
    rb_define_const(*pmROGL, "GL_SHADER_OBJECT_ARB", UINT2NUM(0x8B48));
    rb_define_const(*pmROGL, "GL_OBJECT_TYPE_ARB", UINT2NUM(0x8B4E));
    rb_define_const(*pmROGL, "GL_OBJECT_SUBTYPE_ARB", UINT2NUM(0x8B4F));
    rb_define_const(*pmROGL, "GL_INT_VEC2_ARB", UINT2NUM(0x8B53));
    rb_define_const(*pmROGL, "GL_INT_VEC3_ARB", UINT2NUM(0x8B54));
    rb_define_const(*pmROGL, "GL_INT_VEC4_ARB", UINT2NUM(0x8B55));
    rb_define_const(*pmROGL, "GL_BOOL_ARB", UINT2NUM(0x8B56));
    rb_define_const(*pmROGL, "GL_BOOL_VEC2_ARB", UINT2NUM(0x8B57));
    rb_define_const(*pmROGL, "GL_BOOL_VEC3_ARB", UINT2NUM(0x8B58));
    rb_define_const(*pmROGL, "GL_BOOL_VEC4_ARB", UINT2NUM(0x8B59));
    rb_define_const(*pmROGL, "GL_SAMPLER_1D_ARB", UINT2NUM(0x8B5D));
    rb_define_const(*pmROGL, "GL_SAMPLER_2D_ARB", UINT2NUM(0x8B5E));
    rb_define_const(*pmROGL, "GL_SAMPLER_3D_ARB", UINT2NUM(0x8B5F));
    rb_define_const(*pmROGL, "GL_SAMPLER_CUBE_ARB", UINT2NUM(0x8B60));
    rb_define_const(*pmROGL, "GL_SAMPLER_1D_SHADOW_ARB", UINT2NUM(0x8B61));
    rb_define_const(*pmROGL, "GL_SAMPLER_2D_SHADOW_ARB", UINT2NUM(0x8B62));
    rb_define_const(*pmROGL, "GL_SAMPLER_2D_RECT_ARB", UINT2NUM(0x8B63));
    rb_define_const(*pmROGL, "GL_SAMPLER_2D_RECT_SHADOW_ARB", UINT2NUM(0x8B64));
    rb_define_const(*pmROGL, "GL_OBJECT_DELETE_STATUS_ARB", UINT2NUM(0x8B80));
    rb_define_const(*pmROGL, "GL_OBJECT_COMPILE_STATUS_ARB", UINT2NUM(0x8B81));
    rb_define_const(*pmROGL, "GL_OBJECT_LINK_STATUS_ARB", UINT2NUM(0x8B82));
    rb_define_const(*pmROGL, "GL_OBJECT_VALIDATE_STATUS_ARB", UINT2NUM(0x8B83));
    rb_define_const(*pmROGL, "GL_OBJECT_INFO_LOG_LENGTH_ARB", UINT2NUM(0x8B84));
    rb_define_const(*pmROGL, "GL_OBJECT_ATTACHED_OBJECTS_ARB", UINT2NUM(0x8B85));
    rb_define_const(*pmROGL, "GL_OBJECT_ACTIVE_UNIFORMS_ARB", UINT2NUM(0x8B86));
    rb_define_const(*pmROGL, "GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB", UINT2NUM(0x8B87));
    rb_define_const(*pmROGL, "GL_OBJECT_SHADER_SOURCE_LENGTH_ARB", UINT2NUM(0x8B88));
    rb_define_const(*pmROGL, "GL_SHADING_LANGUAGE_VERSION_ARB", UINT2NUM(0x8B8C));
    rb_define_const(*pmROGL, "GL_SHADER_INCLUDE_ARB", UINT2NUM(0x8DAE));
    rb_define_const(*pmROGL, "GL_NAMED_STRING_LENGTH_ARB", UINT2NUM(0x8DE9));
    rb_define_const(*pmROGL, "GL_NAMED_STRING_TYPE_ARB", UINT2NUM(0x8DEA));
    rb_define_const(*pmROGL, "GL_TEXTURE_COMPARE_MODE_ARB", UINT2NUM(0x884C));
    rb_define_const(*pmROGL, "GL_TEXTURE_COMPARE_FUNC_ARB", UINT2NUM(0x884D));
    rb_define_const(*pmROGL, "GL_COMPARE_R_TO_TEXTURE_ARB", UINT2NUM(0x884E));
    rb_define_const(*pmROGL, "GL_TEXTURE_COMPARE_FAIL_VALUE_ARB", UINT2NUM(0x80BF));
    rb_define_const(*pmROGL, "GL_SPARSE_STORAGE_BIT_ARB", UINT2NUM(0x0400));
    rb_define_const(*pmROGL, "GL_SPARSE_BUFFER_PAGE_SIZE_ARB", UINT2NUM(0x82F8));
    rb_define_const(*pmROGL, "GL_TEXTURE_SPARSE_ARB", UINT2NUM(0x91A6));
    rb_define_const(*pmROGL, "GL_VIRTUAL_PAGE_SIZE_INDEX_ARB", UINT2NUM(0x91A7));
    rb_define_const(*pmROGL, "GL_NUM_SPARSE_LEVELS_ARB", UINT2NUM(0x91AA));
    rb_define_const(*pmROGL, "GL_NUM_VIRTUAL_PAGE_SIZES_ARB", UINT2NUM(0x91A8));
    rb_define_const(*pmROGL, "GL_VIRTUAL_PAGE_SIZE_X_ARB", UINT2NUM(0x9195));
    rb_define_const(*pmROGL, "GL_VIRTUAL_PAGE_SIZE_Y_ARB", UINT2NUM(0x9196));
    rb_define_const(*pmROGL, "GL_VIRTUAL_PAGE_SIZE_Z_ARB", UINT2NUM(0x9197));
    rb_define_const(*pmROGL, "GL_MAX_SPARSE_TEXTURE_SIZE_ARB", UINT2NUM(0x9198));
    rb_define_const(*pmROGL, "GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB", UINT2NUM(0x9199));
    rb_define_const(*pmROGL, "GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB", UINT2NUM(0x919A));
    rb_define_const(*pmROGL, "GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB", UINT2NUM(0x91A9));
    rb_define_const(*pmROGL, "GL_CLAMP_TO_BORDER_ARB", UINT2NUM(0x812D));
    rb_define_const(*pmROGL, "GL_TEXTURE_BUFFER_ARB", UINT2NUM(0x8C2A));
    rb_define_const(*pmROGL, "GL_MAX_TEXTURE_BUFFER_SIZE_ARB", UINT2NUM(0x8C2B));
    rb_define_const(*pmROGL, "GL_TEXTURE_BINDING_BUFFER_ARB", UINT2NUM(0x8C2C));
    rb_define_const(*pmROGL, "GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB", UINT2NUM(0x8C2D));
    rb_define_const(*pmROGL, "GL_TEXTURE_BUFFER_FORMAT_ARB", UINT2NUM(0x8C2E));
    rb_define_const(*pmROGL, "GL_COMPRESSED_ALPHA_ARB", UINT2NUM(0x84E9));
    rb_define_const(*pmROGL, "GL_COMPRESSED_LUMINANCE_ARB", UINT2NUM(0x84EA));
    rb_define_const(*pmROGL, "GL_COMPRESSED_LUMINANCE_ALPHA_ARB", UINT2NUM(0x84EB));
    rb_define_const(*pmROGL, "GL_COMPRESSED_INTENSITY_ARB", UINT2NUM(0x84EC));
    rb_define_const(*pmROGL, "GL_COMPRESSED_RGB_ARB", UINT2NUM(0x84ED));
    rb_define_const(*pmROGL, "GL_COMPRESSED_RGBA_ARB", UINT2NUM(0x84EE));
    rb_define_const(*pmROGL, "GL_TEXTURE_COMPRESSION_HINT_ARB", UINT2NUM(0x84EF));
    rb_define_const(*pmROGL, "GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB", UINT2NUM(0x86A0));
    rb_define_const(*pmROGL, "GL_TEXTURE_COMPRESSED_ARB", UINT2NUM(0x86A1));
    rb_define_const(*pmROGL, "GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB", UINT2NUM(0x86A2));
    rb_define_const(*pmROGL, "GL_COMPRESSED_TEXTURE_FORMATS_ARB", UINT2NUM(0x86A3));
    rb_define_const(*pmROGL, "GL_COMPRESSED_RGBA_BPTC_UNORM_ARB", UINT2NUM(0x8E8C));
    rb_define_const(*pmROGL, "GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB", UINT2NUM(0x8E8D));
    rb_define_const(*pmROGL, "GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB", UINT2NUM(0x8E8E));
    rb_define_const(*pmROGL, "GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB", UINT2NUM(0x8E8F));
    rb_define_const(*pmROGL, "GL_NORMAL_MAP_ARB", UINT2NUM(0x8511));
    rb_define_const(*pmROGL, "GL_REFLECTION_MAP_ARB", UINT2NUM(0x8512));
    rb_define_const(*pmROGL, "GL_TEXTURE_CUBE_MAP_ARB", UINT2NUM(0x8513));
    rb_define_const(*pmROGL, "GL_TEXTURE_BINDING_CUBE_MAP_ARB", UINT2NUM(0x8514));
    rb_define_const(*pmROGL, "GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB", UINT2NUM(0x8515));
    rb_define_const(*pmROGL, "GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB", UINT2NUM(0x8516));
    rb_define_const(*pmROGL, "GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB", UINT2NUM(0x8517));
    rb_define_const(*pmROGL, "GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB", UINT2NUM(0x8518));
    rb_define_const(*pmROGL, "GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB", UINT2NUM(0x8519));
    rb_define_const(*pmROGL, "GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB", UINT2NUM(0x851A));
    rb_define_const(*pmROGL, "GL_PROXY_TEXTURE_CUBE_MAP_ARB", UINT2NUM(0x851B));
    rb_define_const(*pmROGL, "GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB", UINT2NUM(0x851C));
    rb_define_const(*pmROGL, "GL_TEXTURE_CUBE_MAP_ARRAY_ARB", UINT2NUM(0x9009));
    rb_define_const(*pmROGL, "GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB", UINT2NUM(0x900A));
    rb_define_const(*pmROGL, "GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB", UINT2NUM(0x900B));
    rb_define_const(*pmROGL, "GL_SAMPLER_CUBE_MAP_ARRAY_ARB", UINT2NUM(0x900C));
    rb_define_const(*pmROGL, "GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB", UINT2NUM(0x900D));
    rb_define_const(*pmROGL, "GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB", UINT2NUM(0x900E));
    rb_define_const(*pmROGL, "GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB", UINT2NUM(0x900F));
    rb_define_const(*pmROGL, "GL_COMBINE_ARB", UINT2NUM(0x8570));
    rb_define_const(*pmROGL, "GL_COMBINE_RGB_ARB", UINT2NUM(0x8571));
    rb_define_const(*pmROGL, "GL_COMBINE_ALPHA_ARB", UINT2NUM(0x8572));
    rb_define_const(*pmROGL, "GL_SOURCE0_RGB_ARB", UINT2NUM(0x8580));
    rb_define_const(*pmROGL, "GL_SOURCE1_RGB_ARB", UINT2NUM(0x8581));
    rb_define_const(*pmROGL, "GL_SOURCE2_RGB_ARB", UINT2NUM(0x8582));
    rb_define_const(*pmROGL, "GL_SOURCE0_ALPHA_ARB", UINT2NUM(0x8588));
    rb_define_const(*pmROGL, "GL_SOURCE1_ALPHA_ARB", UINT2NUM(0x8589));
    rb_define_const(*pmROGL, "GL_SOURCE2_ALPHA_ARB", UINT2NUM(0x858A));
    rb_define_const(*pmROGL, "GL_OPERAND0_RGB_ARB", UINT2NUM(0x8590));
    rb_define_const(*pmROGL, "GL_OPERAND1_RGB_ARB", UINT2NUM(0x8591));
    rb_define_const(*pmROGL, "GL_OPERAND2_RGB_ARB", UINT2NUM(0x8592));
    rb_define_const(*pmROGL, "GL_OPERAND0_ALPHA_ARB", UINT2NUM(0x8598));
    rb_define_const(*pmROGL, "GL_OPERAND1_ALPHA_ARB", UINT2NUM(0x8599));
    rb_define_const(*pmROGL, "GL_OPERAND2_ALPHA_ARB", UINT2NUM(0x859A));
    rb_define_const(*pmROGL, "GL_RGB_SCALE_ARB", UINT2NUM(0x8573));
    rb_define_const(*pmROGL, "GL_ADD_SIGNED_ARB", UINT2NUM(0x8574));
    rb_define_const(*pmROGL, "GL_INTERPOLATE_ARB", UINT2NUM(0x8575));
    rb_define_const(*pmROGL, "GL_SUBTRACT_ARB", UINT2NUM(0x84E7));
    rb_define_const(*pmROGL, "GL_CONSTANT_ARB", UINT2NUM(0x8576));
    rb_define_const(*pmROGL, "GL_PRIMARY_COLOR_ARB", UINT2NUM(0x8577));
    rb_define_const(*pmROGL, "GL_PREVIOUS_ARB", UINT2NUM(0x8578));
    rb_define_const(*pmROGL, "GL_DOT3_RGB_ARB", UINT2NUM(0x86AE));
    rb_define_const(*pmROGL, "GL_DOT3_RGBA_ARB", UINT2NUM(0x86AF));
    rb_define_const(*pmROGL, "GL_TEXTURE_REDUCTION_MODE_ARB", UINT2NUM(0x9366));
    rb_define_const(*pmROGL, "GL_WEIGHTED_AVERAGE_ARB", UINT2NUM(0x9367));
    rb_define_const(*pmROGL, "GL_TEXTURE_RED_TYPE_ARB", UINT2NUM(0x8C10));
    rb_define_const(*pmROGL, "GL_TEXTURE_GREEN_TYPE_ARB", UINT2NUM(0x8C11));
    rb_define_const(*pmROGL, "GL_TEXTURE_BLUE_TYPE_ARB", UINT2NUM(0x8C12));
    rb_define_const(*pmROGL, "GL_TEXTURE_ALPHA_TYPE_ARB", UINT2NUM(0x8C13));
    rb_define_const(*pmROGL, "GL_TEXTURE_LUMINANCE_TYPE_ARB", UINT2NUM(0x8C14));
    rb_define_const(*pmROGL, "GL_TEXTURE_INTENSITY_TYPE_ARB", UINT2NUM(0x8C15));
    rb_define_const(*pmROGL, "GL_TEXTURE_DEPTH_TYPE_ARB", UINT2NUM(0x8C16));
    rb_define_const(*pmROGL, "GL_UNSIGNED_NORMALIZED_ARB", UINT2NUM(0x8C17));
    rb_define_const(*pmROGL, "GL_RGBA32F_ARB", UINT2NUM(0x8814));
    rb_define_const(*pmROGL, "GL_RGB32F_ARB", UINT2NUM(0x8815));
    rb_define_const(*pmROGL, "GL_ALPHA32F_ARB", UINT2NUM(0x8816));
    rb_define_const(*pmROGL, "GL_INTENSITY32F_ARB", UINT2NUM(0x8817));
    rb_define_const(*pmROGL, "GL_LUMINANCE32F_ARB", UINT2NUM(0x8818));
    rb_define_const(*pmROGL, "GL_LUMINANCE_ALPHA32F_ARB", UINT2NUM(0x8819));
    rb_define_const(*pmROGL, "GL_RGBA16F_ARB", UINT2NUM(0x881A));
    rb_define_const(*pmROGL, "GL_RGB16F_ARB", UINT2NUM(0x881B));
    rb_define_const(*pmROGL, "GL_ALPHA16F_ARB", UINT2NUM(0x881C));
    rb_define_const(*pmROGL, "GL_INTENSITY16F_ARB", UINT2NUM(0x881D));
    rb_define_const(*pmROGL, "GL_LUMINANCE16F_ARB", UINT2NUM(0x881E));
    rb_define_const(*pmROGL, "GL_LUMINANCE_ALPHA16F_ARB", UINT2NUM(0x881F));
    rb_define_const(*pmROGL, "GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB", UINT2NUM(0x8E5E));
    rb_define_const(*pmROGL, "GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB", UINT2NUM(0x8E5F));
    rb_define_const(*pmROGL, "GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB", UINT2NUM(0x8F9F));
    rb_define_const(*pmROGL, "GL_MIRRORED_REPEAT_ARB", UINT2NUM(0x8370));
    rb_define_const(*pmROGL, "GL_TEXTURE_RECTANGLE_ARB", UINT2NUM(0x84F5));
    rb_define_const(*pmROGL, "GL_TEXTURE_BINDING_RECTANGLE_ARB", UINT2NUM(0x84F6));
    rb_define_const(*pmROGL, "GL_PROXY_TEXTURE_RECTANGLE_ARB", UINT2NUM(0x84F7));
    rb_define_const(*pmROGL, "GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB", UINT2NUM(0x84F8));
    rb_define_const(*pmROGL, "GL_TRANSFORM_FEEDBACK_OVERFLOW_ARB", UINT2NUM(0x82EC));
    rb_define_const(*pmROGL, "GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB", UINT2NUM(0x82ED));
    rb_define_const(*pmROGL, "GL_TRANSPOSE_MODELVIEW_MATRIX_ARB", UINT2NUM(0x84E3));
    rb_define_const(*pmROGL, "GL_TRANSPOSE_PROJECTION_MATRIX_ARB", UINT2NUM(0x84E4));
    rb_define_const(*pmROGL, "GL_TRANSPOSE_TEXTURE_MATRIX_ARB", UINT2NUM(0x84E5));
    rb_define_const(*pmROGL, "GL_TRANSPOSE_COLOR_MATRIX_ARB", UINT2NUM(0x84E6));
    rb_define_const(*pmROGL, "GL_MAX_VERTEX_UNITS_ARB", UINT2NUM(0x86A4));
    rb_define_const(*pmROGL, "GL_ACTIVE_VERTEX_UNITS_ARB", UINT2NUM(0x86A5));
    rb_define_const(*pmROGL, "GL_WEIGHT_SUM_UNITY_ARB", UINT2NUM(0x86A6));
    rb_define_const(*pmROGL, "GL_VERTEX_BLEND_ARB", UINT2NUM(0x86A7));
    rb_define_const(*pmROGL, "GL_CURRENT_WEIGHT_ARB", UINT2NUM(0x86A8));
    rb_define_const(*pmROGL, "GL_WEIGHT_ARRAY_TYPE_ARB", UINT2NUM(0x86A9));
    rb_define_const(*pmROGL, "GL_WEIGHT_ARRAY_STRIDE_ARB", UINT2NUM(0x86AA));
    rb_define_const(*pmROGL, "GL_WEIGHT_ARRAY_SIZE_ARB", UINT2NUM(0x86AB));
    rb_define_const(*pmROGL, "GL_WEIGHT_ARRAY_POINTER_ARB", UINT2NUM(0x86AC));
    rb_define_const(*pmROGL, "GL_WEIGHT_ARRAY_ARB", UINT2NUM(0x86AD));
    rb_define_const(*pmROGL, "GL_MODELVIEW0_ARB", UINT2NUM(0x1700));
    rb_define_const(*pmROGL, "GL_MODELVIEW1_ARB", UINT2NUM(0x850A));
    rb_define_const(*pmROGL, "GL_MODELVIEW2_ARB", UINT2NUM(0x8722));
    rb_define_const(*pmROGL, "GL_MODELVIEW3_ARB", UINT2NUM(0x8723));
    rb_define_const(*pmROGL, "GL_MODELVIEW4_ARB", UINT2NUM(0x8724));
    rb_define_const(*pmROGL, "GL_MODELVIEW5_ARB", UINT2NUM(0x8725));
    rb_define_const(*pmROGL, "GL_MODELVIEW6_ARB", UINT2NUM(0x8726));
    rb_define_const(*pmROGL, "GL_MODELVIEW7_ARB", UINT2NUM(0x8727));
    rb_define_const(*pmROGL, "GL_MODELVIEW8_ARB", UINT2NUM(0x8728));
    rb_define_const(*pmROGL, "GL_MODELVIEW9_ARB", UINT2NUM(0x8729));
    rb_define_const(*pmROGL, "GL_MODELVIEW10_ARB", UINT2NUM(0x872A));
    rb_define_const(*pmROGL, "GL_MODELVIEW11_ARB", UINT2NUM(0x872B));
    rb_define_const(*pmROGL, "GL_MODELVIEW12_ARB", UINT2NUM(0x872C));
    rb_define_const(*pmROGL, "GL_MODELVIEW13_ARB", UINT2NUM(0x872D));
    rb_define_const(*pmROGL, "GL_MODELVIEW14_ARB", UINT2NUM(0x872E));
    rb_define_const(*pmROGL, "GL_MODELVIEW15_ARB", UINT2NUM(0x872F));
    rb_define_const(*pmROGL, "GL_MODELVIEW16_ARB", UINT2NUM(0x8730));
    rb_define_const(*pmROGL, "GL_MODELVIEW17_ARB", UINT2NUM(0x8731));
    rb_define_const(*pmROGL, "GL_MODELVIEW18_ARB", UINT2NUM(0x8732));
    rb_define_const(*pmROGL, "GL_MODELVIEW19_ARB", UINT2NUM(0x8733));
    rb_define_const(*pmROGL, "GL_MODELVIEW20_ARB", UINT2NUM(0x8734));
    rb_define_const(*pmROGL, "GL_MODELVIEW21_ARB", UINT2NUM(0x8735));
    rb_define_const(*pmROGL, "GL_MODELVIEW22_ARB", UINT2NUM(0x8736));
    rb_define_const(*pmROGL, "GL_MODELVIEW23_ARB", UINT2NUM(0x8737));
    rb_define_const(*pmROGL, "GL_MODELVIEW24_ARB", UINT2NUM(0x8738));
    rb_define_const(*pmROGL, "GL_MODELVIEW25_ARB", UINT2NUM(0x8739));
    rb_define_const(*pmROGL, "GL_MODELVIEW26_ARB", UINT2NUM(0x873A));
    rb_define_const(*pmROGL, "GL_MODELVIEW27_ARB", UINT2NUM(0x873B));
    rb_define_const(*pmROGL, "GL_MODELVIEW28_ARB", UINT2NUM(0x873C));
    rb_define_const(*pmROGL, "GL_MODELVIEW29_ARB", UINT2NUM(0x873D));
    rb_define_const(*pmROGL, "GL_MODELVIEW30_ARB", UINT2NUM(0x873E));
    rb_define_const(*pmROGL, "GL_MODELVIEW31_ARB", UINT2NUM(0x873F));
    rb_define_const(*pmROGL, "GL_BUFFER_SIZE_ARB", UINT2NUM(0x8764));
    rb_define_const(*pmROGL, "GL_BUFFER_USAGE_ARB", UINT2NUM(0x8765));
    rb_define_const(*pmROGL, "GL_ARRAY_BUFFER_ARB", UINT2NUM(0x8892));
    rb_define_const(*pmROGL, "GL_ELEMENT_ARRAY_BUFFER_ARB", UINT2NUM(0x8893));
    rb_define_const(*pmROGL, "GL_ARRAY_BUFFER_BINDING_ARB", UINT2NUM(0x8894));
    rb_define_const(*pmROGL, "GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB", UINT2NUM(0x8895));
    rb_define_const(*pmROGL, "GL_VERTEX_ARRAY_BUFFER_BINDING_ARB", UINT2NUM(0x8896));
    rb_define_const(*pmROGL, "GL_NORMAL_ARRAY_BUFFER_BINDING_ARB", UINT2NUM(0x8897));
    rb_define_const(*pmROGL, "GL_COLOR_ARRAY_BUFFER_BINDING_ARB", UINT2NUM(0x8898));
    rb_define_const(*pmROGL, "GL_INDEX_ARRAY_BUFFER_BINDING_ARB", UINT2NUM(0x8899));
    rb_define_const(*pmROGL, "GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB", UINT2NUM(0x889A));
    rb_define_const(*pmROGL, "GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB", UINT2NUM(0x889B));
    rb_define_const(*pmROGL, "GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB", UINT2NUM(0x889C));
    rb_define_const(*pmROGL, "GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB", UINT2NUM(0x889D));
    rb_define_const(*pmROGL, "GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB", UINT2NUM(0x889E));
    rb_define_const(*pmROGL, "GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB", UINT2NUM(0x889F));
    rb_define_const(*pmROGL, "GL_READ_ONLY_ARB", UINT2NUM(0x88B8));
    rb_define_const(*pmROGL, "GL_WRITE_ONLY_ARB", UINT2NUM(0x88B9));
    rb_define_const(*pmROGL, "GL_READ_WRITE_ARB", UINT2NUM(0x88BA));
    rb_define_const(*pmROGL, "GL_BUFFER_ACCESS_ARB", UINT2NUM(0x88BB));
    rb_define_const(*pmROGL, "GL_BUFFER_MAPPED_ARB", UINT2NUM(0x88BC));
    rb_define_const(*pmROGL, "GL_BUFFER_MAP_POINTER_ARB", UINT2NUM(0x88BD));
    rb_define_const(*pmROGL, "GL_STREAM_DRAW_ARB", UINT2NUM(0x88E0));
    rb_define_const(*pmROGL, "GL_STREAM_READ_ARB", UINT2NUM(0x88E1));
    rb_define_const(*pmROGL, "GL_STREAM_COPY_ARB", UINT2NUM(0x88E2));
    rb_define_const(*pmROGL, "GL_STATIC_DRAW_ARB", UINT2NUM(0x88E4));
    rb_define_const(*pmROGL, "GL_STATIC_READ_ARB", UINT2NUM(0x88E5));
    rb_define_const(*pmROGL, "GL_STATIC_COPY_ARB", UINT2NUM(0x88E6));
    rb_define_const(*pmROGL, "GL_DYNAMIC_DRAW_ARB", UINT2NUM(0x88E8));
    rb_define_const(*pmROGL, "GL_DYNAMIC_READ_ARB", UINT2NUM(0x88E9));
    rb_define_const(*pmROGL, "GL_DYNAMIC_COPY_ARB", UINT2NUM(0x88EA));
    rb_define_const(*pmROGL, "GL_COLOR_SUM_ARB", UINT2NUM(0x8458));
    rb_define_const(*pmROGL, "GL_VERTEX_PROGRAM_ARB", UINT2NUM(0x8620));
    rb_define_const(*pmROGL, "GL_PROGRAM_ADDRESS_REGISTERS_ARB", UINT2NUM(0x88B0));
    rb_define_const(*pmROGL, "GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB", UINT2NUM(0x88B1));
    rb_define_const(*pmROGL, "GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB", UINT2NUM(0x88B2));
    rb_define_const(*pmROGL, "GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB", UINT2NUM(0x88B3));
    rb_define_const(*pmROGL, "GL_VERTEX_SHADER_ARB", UINT2NUM(0x8B31));
    rb_define_const(*pmROGL, "GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB", UINT2NUM(0x8B4A));
    rb_define_const(*pmROGL, "GL_MAX_VARYING_FLOATS_ARB", UINT2NUM(0x8B4B));
    rb_define_const(*pmROGL, "GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB", UINT2NUM(0x8B4D));
    rb_define_const(*pmROGL, "GL_OBJECT_ACTIVE_ATTRIBUTES_ARB", UINT2NUM(0x8B89));
    rb_define_const(*pmROGL, "GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB", UINT2NUM(0x8B8A));
    rb_define_const(*pmROGL, "GL_MAX_DRAW_BUFFERS_ATI", UINT2NUM(0x8824));
    rb_define_const(*pmROGL, "GL_DRAW_BUFFER0_ATI", UINT2NUM(0x8825));
    rb_define_const(*pmROGL, "GL_DRAW_BUFFER1_ATI", UINT2NUM(0x8826));
    rb_define_const(*pmROGL, "GL_DRAW_BUFFER2_ATI", UINT2NUM(0x8827));
    rb_define_const(*pmROGL, "GL_DRAW_BUFFER3_ATI", UINT2NUM(0x8828));
    rb_define_const(*pmROGL, "GL_DRAW_BUFFER4_ATI", UINT2NUM(0x8829));
    rb_define_const(*pmROGL, "GL_DRAW_BUFFER5_ATI", UINT2NUM(0x882A));
    rb_define_const(*pmROGL, "GL_DRAW_BUFFER6_ATI", UINT2NUM(0x882B));
    rb_define_const(*pmROGL, "GL_DRAW_BUFFER7_ATI", UINT2NUM(0x882C));
    rb_define_const(*pmROGL, "GL_DRAW_BUFFER8_ATI", UINT2NUM(0x882D));
    rb_define_const(*pmROGL, "GL_DRAW_BUFFER9_ATI", UINT2NUM(0x882E));
    rb_define_const(*pmROGL, "GL_DRAW_BUFFER10_ATI", UINT2NUM(0x882F));
    rb_define_const(*pmROGL, "GL_DRAW_BUFFER11_ATI", UINT2NUM(0x8830));
    rb_define_const(*pmROGL, "GL_DRAW_BUFFER12_ATI", UINT2NUM(0x8831));
    rb_define_const(*pmROGL, "GL_DRAW_BUFFER13_ATI", UINT2NUM(0x8832));
    rb_define_const(*pmROGL, "GL_DRAW_BUFFER14_ATI", UINT2NUM(0x8833));
    rb_define_const(*pmROGL, "GL_DRAW_BUFFER15_ATI", UINT2NUM(0x8834));
    rb_define_const(*pmROGL, "GL_ELEMENT_ARRAY_ATI", UINT2NUM(0x8768));
    rb_define_const(*pmROGL, "GL_ELEMENT_ARRAY_TYPE_ATI", UINT2NUM(0x8769));
    rb_define_const(*pmROGL, "GL_ELEMENT_ARRAY_POINTER_ATI", UINT2NUM(0x876A));
    rb_define_const(*pmROGL, "GL_BUMP_ROT_MATRIX_ATI", UINT2NUM(0x8775));
    rb_define_const(*pmROGL, "GL_BUMP_ROT_MATRIX_SIZE_ATI", UINT2NUM(0x8776));
    rb_define_const(*pmROGL, "GL_BUMP_NUM_TEX_UNITS_ATI", UINT2NUM(0x8777));
    rb_define_const(*pmROGL, "GL_BUMP_TEX_UNITS_ATI", UINT2NUM(0x8778));
    rb_define_const(*pmROGL, "GL_DUDV_ATI", UINT2NUM(0x8779));
    rb_define_const(*pmROGL, "GL_DU8DV8_ATI", UINT2NUM(0x877A));
    rb_define_const(*pmROGL, "GL_BUMP_ENVMAP_ATI", UINT2NUM(0x877B));
    rb_define_const(*pmROGL, "GL_BUMP_TARGET_ATI", UINT2NUM(0x877C));
    rb_define_const(*pmROGL, "GL_FRAGMENT_SHADER_ATI", UINT2NUM(0x8920));
    rb_define_const(*pmROGL, "GL_REG_0_ATI", UINT2NUM(0x8921));
    rb_define_const(*pmROGL, "GL_REG_1_ATI", UINT2NUM(0x8922));
    rb_define_const(*pmROGL, "GL_REG_2_ATI", UINT2NUM(0x8923));
    rb_define_const(*pmROGL, "GL_REG_3_ATI", UINT2NUM(0x8924));
    rb_define_const(*pmROGL, "GL_REG_4_ATI", UINT2NUM(0x8925));
    rb_define_const(*pmROGL, "GL_REG_5_ATI", UINT2NUM(0x8926));
    rb_define_const(*pmROGL, "GL_REG_6_ATI", UINT2NUM(0x8927));
    rb_define_const(*pmROGL, "GL_REG_7_ATI", UINT2NUM(0x8928));
    rb_define_const(*pmROGL, "GL_REG_8_ATI", UINT2NUM(0x8929));
    rb_define_const(*pmROGL, "GL_REG_9_ATI", UINT2NUM(0x892A));
    rb_define_const(*pmROGL, "GL_REG_10_ATI", UINT2NUM(0x892B));
    rb_define_const(*pmROGL, "GL_REG_11_ATI", UINT2NUM(0x892C));
    rb_define_const(*pmROGL, "GL_REG_12_ATI", UINT2NUM(0x892D));
    rb_define_const(*pmROGL, "GL_REG_13_ATI", UINT2NUM(0x892E));
    rb_define_const(*pmROGL, "GL_REG_14_ATI", UINT2NUM(0x892F));
    rb_define_const(*pmROGL, "GL_REG_15_ATI", UINT2NUM(0x8930));
    rb_define_const(*pmROGL, "GL_REG_16_ATI", UINT2NUM(0x8931));
    rb_define_const(*pmROGL, "GL_REG_17_ATI", UINT2NUM(0x8932));
    rb_define_const(*pmROGL, "GL_REG_18_ATI", UINT2NUM(0x8933));
    rb_define_const(*pmROGL, "GL_REG_19_ATI", UINT2NUM(0x8934));
    rb_define_const(*pmROGL, "GL_REG_20_ATI", UINT2NUM(0x8935));
    rb_define_const(*pmROGL, "GL_REG_21_ATI", UINT2NUM(0x8936));
    rb_define_const(*pmROGL, "GL_REG_22_ATI", UINT2NUM(0x8937));
    rb_define_const(*pmROGL, "GL_REG_23_ATI", UINT2NUM(0x8938));
    rb_define_const(*pmROGL, "GL_REG_24_ATI", UINT2NUM(0x8939));
    rb_define_const(*pmROGL, "GL_REG_25_ATI", UINT2NUM(0x893A));
    rb_define_const(*pmROGL, "GL_REG_26_ATI", UINT2NUM(0x893B));
    rb_define_const(*pmROGL, "GL_REG_27_ATI", UINT2NUM(0x893C));
    rb_define_const(*pmROGL, "GL_REG_28_ATI", UINT2NUM(0x893D));
    rb_define_const(*pmROGL, "GL_REG_29_ATI", UINT2NUM(0x893E));
    rb_define_const(*pmROGL, "GL_REG_30_ATI", UINT2NUM(0x893F));
    rb_define_const(*pmROGL, "GL_REG_31_ATI", UINT2NUM(0x8940));
    rb_define_const(*pmROGL, "GL_CON_0_ATI", UINT2NUM(0x8941));
    rb_define_const(*pmROGL, "GL_CON_1_ATI", UINT2NUM(0x8942));
    rb_define_const(*pmROGL, "GL_CON_2_ATI", UINT2NUM(0x8943));
    rb_define_const(*pmROGL, "GL_CON_3_ATI", UINT2NUM(0x8944));
    rb_define_const(*pmROGL, "GL_CON_4_ATI", UINT2NUM(0x8945));
    rb_define_const(*pmROGL, "GL_CON_5_ATI", UINT2NUM(0x8946));
    rb_define_const(*pmROGL, "GL_CON_6_ATI", UINT2NUM(0x8947));
    rb_define_const(*pmROGL, "GL_CON_7_ATI", UINT2NUM(0x8948));
    rb_define_const(*pmROGL, "GL_CON_8_ATI", UINT2NUM(0x8949));
    rb_define_const(*pmROGL, "GL_CON_9_ATI", UINT2NUM(0x894A));
    rb_define_const(*pmROGL, "GL_CON_10_ATI", UINT2NUM(0x894B));
    rb_define_const(*pmROGL, "GL_CON_11_ATI", UINT2NUM(0x894C));
    rb_define_const(*pmROGL, "GL_CON_12_ATI", UINT2NUM(0x894D));
    rb_define_const(*pmROGL, "GL_CON_13_ATI", UINT2NUM(0x894E));
    rb_define_const(*pmROGL, "GL_CON_14_ATI", UINT2NUM(0x894F));
    rb_define_const(*pmROGL, "GL_CON_15_ATI", UINT2NUM(0x8950));
    rb_define_const(*pmROGL, "GL_CON_16_ATI", UINT2NUM(0x8951));
    rb_define_const(*pmROGL, "GL_CON_17_ATI", UINT2NUM(0x8952));
    rb_define_const(*pmROGL, "GL_CON_18_ATI", UINT2NUM(0x8953));
    rb_define_const(*pmROGL, "GL_CON_19_ATI", UINT2NUM(0x8954));
    rb_define_const(*pmROGL, "GL_CON_20_ATI", UINT2NUM(0x8955));
    rb_define_const(*pmROGL, "GL_CON_21_ATI", UINT2NUM(0x8956));
    rb_define_const(*pmROGL, "GL_CON_22_ATI", UINT2NUM(0x8957));
    rb_define_const(*pmROGL, "GL_CON_23_ATI", UINT2NUM(0x8958));
    rb_define_const(*pmROGL, "GL_CON_24_ATI", UINT2NUM(0x8959));
    rb_define_const(*pmROGL, "GL_CON_25_ATI", UINT2NUM(0x895A));
    rb_define_const(*pmROGL, "GL_CON_26_ATI", UINT2NUM(0x895B));
    rb_define_const(*pmROGL, "GL_CON_27_ATI", UINT2NUM(0x895C));
    rb_define_const(*pmROGL, "GL_CON_28_ATI", UINT2NUM(0x895D));
    rb_define_const(*pmROGL, "GL_CON_29_ATI", UINT2NUM(0x895E));
    rb_define_const(*pmROGL, "GL_CON_30_ATI", UINT2NUM(0x895F));
    rb_define_const(*pmROGL, "GL_CON_31_ATI", UINT2NUM(0x8960));
    rb_define_const(*pmROGL, "GL_MOV_ATI", UINT2NUM(0x8961));
    rb_define_const(*pmROGL, "GL_ADD_ATI", UINT2NUM(0x8963));
    rb_define_const(*pmROGL, "GL_MUL_ATI", UINT2NUM(0x8964));
    rb_define_const(*pmROGL, "GL_SUB_ATI", UINT2NUM(0x8965));
    rb_define_const(*pmROGL, "GL_DOT3_ATI", UINT2NUM(0x8966));
    rb_define_const(*pmROGL, "GL_DOT4_ATI", UINT2NUM(0x8967));
    rb_define_const(*pmROGL, "GL_MAD_ATI", UINT2NUM(0x8968));
    rb_define_const(*pmROGL, "GL_LERP_ATI", UINT2NUM(0x8969));
    rb_define_const(*pmROGL, "GL_CND_ATI", UINT2NUM(0x896A));
    rb_define_const(*pmROGL, "GL_CND0_ATI", UINT2NUM(0x896B));
    rb_define_const(*pmROGL, "GL_DOT2_ADD_ATI", UINT2NUM(0x896C));
    rb_define_const(*pmROGL, "GL_SECONDARY_INTERPOLATOR_ATI", UINT2NUM(0x896D));
    rb_define_const(*pmROGL, "GL_NUM_FRAGMENT_REGISTERS_ATI", UINT2NUM(0x896E));
    rb_define_const(*pmROGL, "GL_NUM_FRAGMENT_CONSTANTS_ATI", UINT2NUM(0x896F));
    rb_define_const(*pmROGL, "GL_NUM_PASSES_ATI", UINT2NUM(0x8970));
    rb_define_const(*pmROGL, "GL_NUM_INSTRUCTIONS_PER_PASS_ATI", UINT2NUM(0x8971));
    rb_define_const(*pmROGL, "GL_NUM_INSTRUCTIONS_TOTAL_ATI", UINT2NUM(0x8972));
    rb_define_const(*pmROGL, "GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI", UINT2NUM(0x8973));
    rb_define_const(*pmROGL, "GL_NUM_LOOPBACK_COMPONENTS_ATI", UINT2NUM(0x8974));
    rb_define_const(*pmROGL, "GL_COLOR_ALPHA_PAIRING_ATI", UINT2NUM(0x8975));
    rb_define_const(*pmROGL, "GL_SWIZZLE_STR_ATI", UINT2NUM(0x8976));
    rb_define_const(*pmROGL, "GL_SWIZZLE_STQ_ATI", UINT2NUM(0x8977));
    rb_define_const(*pmROGL, "GL_SWIZZLE_STR_DR_ATI", UINT2NUM(0x8978));
    rb_define_const(*pmROGL, "GL_SWIZZLE_STQ_DQ_ATI", UINT2NUM(0x8979));
    rb_define_const(*pmROGL, "GL_SWIZZLE_STRQ_ATI", UINT2NUM(0x897A));
    rb_define_const(*pmROGL, "GL_SWIZZLE_STRQ_DQ_ATI", UINT2NUM(0x897B));
    rb_define_const(*pmROGL, "GL_RED_BIT_ATI", UINT2NUM(0x00000001));
    rb_define_const(*pmROGL, "GL_GREEN_BIT_ATI", UINT2NUM(0x00000002));
    rb_define_const(*pmROGL, "GL_BLUE_BIT_ATI", UINT2NUM(0x00000004));
    rb_define_const(*pmROGL, "GL_2X_BIT_ATI", UINT2NUM(0x00000001));
    rb_define_const(*pmROGL, "GL_4X_BIT_ATI", UINT2NUM(0x00000002));
    rb_define_const(*pmROGL, "GL_8X_BIT_ATI", UINT2NUM(0x00000004));
    rb_define_const(*pmROGL, "GL_HALF_BIT_ATI", UINT2NUM(0x00000008));
    rb_define_const(*pmROGL, "GL_QUARTER_BIT_ATI", UINT2NUM(0x00000010));
    rb_define_const(*pmROGL, "GL_EIGHTH_BIT_ATI", UINT2NUM(0x00000020));
    rb_define_const(*pmROGL, "GL_SATURATE_BIT_ATI", UINT2NUM(0x00000040));
    rb_define_const(*pmROGL, "GL_COMP_BIT_ATI", UINT2NUM(0x00000002));
    rb_define_const(*pmROGL, "GL_NEGATE_BIT_ATI", UINT2NUM(0x00000004));
    rb_define_const(*pmROGL, "GL_BIAS_BIT_ATI", UINT2NUM(0x00000008));
    rb_define_const(*pmROGL, "GL_VBO_FREE_MEMORY_ATI", UINT2NUM(0x87FB));
    rb_define_const(*pmROGL, "GL_TEXTURE_FREE_MEMORY_ATI", UINT2NUM(0x87FC));
    rb_define_const(*pmROGL, "GL_RENDERBUFFER_FREE_MEMORY_ATI", UINT2NUM(0x87FD));
    rb_define_const(*pmROGL, "GL_RGBA_FLOAT_MODE_ATI", UINT2NUM(0x8820));
    rb_define_const(*pmROGL, "GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI", UINT2NUM(0x8835));
    rb_define_const(*pmROGL, "GL_PN_TRIANGLES_ATI", UINT2NUM(0x87F0));
    rb_define_const(*pmROGL, "GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI", UINT2NUM(0x87F1));
    rb_define_const(*pmROGL, "GL_PN_TRIANGLES_POINT_MODE_ATI", UINT2NUM(0x87F2));
    rb_define_const(*pmROGL, "GL_PN_TRIANGLES_NORMAL_MODE_ATI", UINT2NUM(0x87F3));
    rb_define_const(*pmROGL, "GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI", UINT2NUM(0x87F4));
    rb_define_const(*pmROGL, "GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI", UINT2NUM(0x87F5));
    rb_define_const(*pmROGL, "GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI", UINT2NUM(0x87F6));
    rb_define_const(*pmROGL, "GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI", UINT2NUM(0x87F7));
    rb_define_const(*pmROGL, "GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI", UINT2NUM(0x87F8));
    rb_define_const(*pmROGL, "GL_STENCIL_BACK_FUNC_ATI", UINT2NUM(0x8800));
    rb_define_const(*pmROGL, "GL_STENCIL_BACK_FAIL_ATI", UINT2NUM(0x8801));
    rb_define_const(*pmROGL, "GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI", UINT2NUM(0x8802));
    rb_define_const(*pmROGL, "GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI", UINT2NUM(0x8803));
    rb_define_const(*pmROGL, "GL_TEXT_FRAGMENT_SHADER_ATI", UINT2NUM(0x8200));
    rb_define_const(*pmROGL, "GL_MODULATE_ADD_ATI", UINT2NUM(0x8744));
    rb_define_const(*pmROGL, "GL_MODULATE_SIGNED_ADD_ATI", UINT2NUM(0x8745));
    rb_define_const(*pmROGL, "GL_MODULATE_SUBTRACT_ATI", UINT2NUM(0x8746));
    rb_define_const(*pmROGL, "GL_RGBA_FLOAT32_ATI", UINT2NUM(0x8814));
    rb_define_const(*pmROGL, "GL_RGB_FLOAT32_ATI", UINT2NUM(0x8815));
    rb_define_const(*pmROGL, "GL_ALPHA_FLOAT32_ATI", UINT2NUM(0x8816));
    rb_define_const(*pmROGL, "GL_INTENSITY_FLOAT32_ATI", UINT2NUM(0x8817));
    rb_define_const(*pmROGL, "GL_LUMINANCE_FLOAT32_ATI", UINT2NUM(0x8818));
    rb_define_const(*pmROGL, "GL_LUMINANCE_ALPHA_FLOAT32_ATI", UINT2NUM(0x8819));
    rb_define_const(*pmROGL, "GL_RGBA_FLOAT16_ATI", UINT2NUM(0x881A));
    rb_define_const(*pmROGL, "GL_RGB_FLOAT16_ATI", UINT2NUM(0x881B));
    rb_define_const(*pmROGL, "GL_ALPHA_FLOAT16_ATI", UINT2NUM(0x881C));
    rb_define_const(*pmROGL, "GL_INTENSITY_FLOAT16_ATI", UINT2NUM(0x881D));
    rb_define_const(*pmROGL, "GL_LUMINANCE_FLOAT16_ATI", UINT2NUM(0x881E));
    rb_define_const(*pmROGL, "GL_LUMINANCE_ALPHA_FLOAT16_ATI", UINT2NUM(0x881F));
    rb_define_const(*pmROGL, "GL_MIRROR_CLAMP_ATI", UINT2NUM(0x8742));
    rb_define_const(*pmROGL, "GL_MIRROR_CLAMP_TO_EDGE_ATI", UINT2NUM(0x8743));
    rb_define_const(*pmROGL, "GL_STATIC_ATI", UINT2NUM(0x8760));
    rb_define_const(*pmROGL, "GL_DYNAMIC_ATI", UINT2NUM(0x8761));
    rb_define_const(*pmROGL, "GL_PRESERVE_ATI", UINT2NUM(0x8762));
    rb_define_const(*pmROGL, "GL_DISCARD_ATI", UINT2NUM(0x8763));
    rb_define_const(*pmROGL, "GL_OBJECT_BUFFER_SIZE_ATI", UINT2NUM(0x8764));
    rb_define_const(*pmROGL, "GL_OBJECT_BUFFER_USAGE_ATI", UINT2NUM(0x8765));
    rb_define_const(*pmROGL, "GL_ARRAY_OBJECT_BUFFER_ATI", UINT2NUM(0x8766));
    rb_define_const(*pmROGL, "GL_ARRAY_OBJECT_OFFSET_ATI", UINT2NUM(0x8767));
    rb_define_const(*pmROGL, "GL_MAX_VERTEX_STREAMS_ATI", UINT2NUM(0x876B));
    rb_define_const(*pmROGL, "GL_VERTEX_STREAM0_ATI", UINT2NUM(0x876C));
    rb_define_const(*pmROGL, "GL_VERTEX_STREAM1_ATI", UINT2NUM(0x876D));
    rb_define_const(*pmROGL, "GL_VERTEX_STREAM2_ATI", UINT2NUM(0x876E));
    rb_define_const(*pmROGL, "GL_VERTEX_STREAM3_ATI", UINT2NUM(0x876F));
    rb_define_const(*pmROGL, "GL_VERTEX_STREAM4_ATI", UINT2NUM(0x8770));
    rb_define_const(*pmROGL, "GL_VERTEX_STREAM5_ATI", UINT2NUM(0x8771));
    rb_define_const(*pmROGL, "GL_VERTEX_STREAM6_ATI", UINT2NUM(0x8772));
    rb_define_const(*pmROGL, "GL_VERTEX_STREAM7_ATI", UINT2NUM(0x8773));
    rb_define_const(*pmROGL, "GL_VERTEX_SOURCE_ATI", UINT2NUM(0x8774));
    rb_define_const(*pmROGL, "GL_422_EXT", UINT2NUM(0x80CC));
    rb_define_const(*pmROGL, "GL_422_REV_EXT", UINT2NUM(0x80CD));
    rb_define_const(*pmROGL, "GL_422_AVERAGE_EXT", UINT2NUM(0x80CE));
    rb_define_const(*pmROGL, "GL_422_REV_AVERAGE_EXT", UINT2NUM(0x80CF));
    rb_define_const(*pmROGL, "GL_ABGR_EXT", UINT2NUM(0x8000));
    rb_define_const(*pmROGL, "GL_BGR_EXT", UINT2NUM(0x80E0));
    rb_define_const(*pmROGL, "GL_BGRA_EXT", UINT2NUM(0x80E1));
    rb_define_const(*pmROGL, "GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT", UINT2NUM(0x8DE2));
    rb_define_const(*pmROGL, "GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT", UINT2NUM(0x8DE3));
    rb_define_const(*pmROGL, "GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT", UINT2NUM(0x8DE4));
    rb_define_const(*pmROGL, "GL_MAX_BINDABLE_UNIFORM_SIZE_EXT", UINT2NUM(0x8DED));
    rb_define_const(*pmROGL, "GL_UNIFORM_BUFFER_EXT", UINT2NUM(0x8DEE));
    rb_define_const(*pmROGL, "GL_UNIFORM_BUFFER_BINDING_EXT", UINT2NUM(0x8DEF));
    rb_define_const(*pmROGL, "GL_CONSTANT_COLOR_EXT", UINT2NUM(0x8001));
    rb_define_const(*pmROGL, "GL_ONE_MINUS_CONSTANT_COLOR_EXT", UINT2NUM(0x8002));
    rb_define_const(*pmROGL, "GL_CONSTANT_ALPHA_EXT", UINT2NUM(0x8003));
    rb_define_const(*pmROGL, "GL_ONE_MINUS_CONSTANT_ALPHA_EXT", UINT2NUM(0x8004));
    rb_define_const(*pmROGL, "GL_BLEND_COLOR_EXT", UINT2NUM(0x8005));
    rb_define_const(*pmROGL, "GL_BLEND_EQUATION_RGB_EXT", UINT2NUM(0x8009));
    rb_define_const(*pmROGL, "GL_BLEND_EQUATION_ALPHA_EXT", UINT2NUM(0x883D));
    rb_define_const(*pmROGL, "GL_BLEND_DST_RGB_EXT", UINT2NUM(0x80C8));
    rb_define_const(*pmROGL, "GL_BLEND_SRC_RGB_EXT", UINT2NUM(0x80C9));
    rb_define_const(*pmROGL, "GL_BLEND_DST_ALPHA_EXT", UINT2NUM(0x80CA));
    rb_define_const(*pmROGL, "GL_BLEND_SRC_ALPHA_EXT", UINT2NUM(0x80CB));
    rb_define_const(*pmROGL, "GL_MIN_EXT", UINT2NUM(0x8007));
    rb_define_const(*pmROGL, "GL_MAX_EXT", UINT2NUM(0x8008));
    rb_define_const(*pmROGL, "GL_FUNC_ADD_EXT", UINT2NUM(0x8006));
    rb_define_const(*pmROGL, "GL_BLEND_EQUATION_EXT", UINT2NUM(0x8009));
    rb_define_const(*pmROGL, "GL_FUNC_SUBTRACT_EXT", UINT2NUM(0x800A));
    rb_define_const(*pmROGL, "GL_FUNC_REVERSE_SUBTRACT_EXT", UINT2NUM(0x800B));
    rb_define_const(*pmROGL, "GL_CLIP_VOLUME_CLIPPING_HINT_EXT", UINT2NUM(0x80F0));
    rb_define_const(*pmROGL, "GL_CMYK_EXT", UINT2NUM(0x800C));
    rb_define_const(*pmROGL, "GL_CMYKA_EXT", UINT2NUM(0x800D));
    rb_define_const(*pmROGL, "GL_PACK_CMYK_HINT_EXT", UINT2NUM(0x800E));
    rb_define_const(*pmROGL, "GL_UNPACK_CMYK_HINT_EXT", UINT2NUM(0x800F));
    rb_define_const(*pmROGL, "GL_ARRAY_ELEMENT_LOCK_FIRST_EXT", UINT2NUM(0x81A8));
    rb_define_const(*pmROGL, "GL_ARRAY_ELEMENT_LOCK_COUNT_EXT", UINT2NUM(0x81A9));
    rb_define_const(*pmROGL, "GL_CONVOLUTION_1D_EXT", UINT2NUM(0x8010));
    rb_define_const(*pmROGL, "GL_CONVOLUTION_2D_EXT", UINT2NUM(0x8011));
    rb_define_const(*pmROGL, "GL_SEPARABLE_2D_EXT", UINT2NUM(0x8012));
    rb_define_const(*pmROGL, "GL_CONVOLUTION_BORDER_MODE_EXT", UINT2NUM(0x8013));
    rb_define_const(*pmROGL, "GL_CONVOLUTION_FILTER_SCALE_EXT", UINT2NUM(0x8014));
    rb_define_const(*pmROGL, "GL_CONVOLUTION_FILTER_BIAS_EXT", UINT2NUM(0x8015));
    rb_define_const(*pmROGL, "GL_REDUCE_EXT", UINT2NUM(0x8016));
    rb_define_const(*pmROGL, "GL_CONVOLUTION_FORMAT_EXT", UINT2NUM(0x8017));
    rb_define_const(*pmROGL, "GL_CONVOLUTION_WIDTH_EXT", UINT2NUM(0x8018));
    rb_define_const(*pmROGL, "GL_CONVOLUTION_HEIGHT_EXT", UINT2NUM(0x8019));
    rb_define_const(*pmROGL, "GL_MAX_CONVOLUTION_WIDTH_EXT", UINT2NUM(0x801A));
    rb_define_const(*pmROGL, "GL_MAX_CONVOLUTION_HEIGHT_EXT", UINT2NUM(0x801B));
    rb_define_const(*pmROGL, "GL_POST_CONVOLUTION_RED_SCALE_EXT", UINT2NUM(0x801C));
    rb_define_const(*pmROGL, "GL_POST_CONVOLUTION_GREEN_SCALE_EXT", UINT2NUM(0x801D));
    rb_define_const(*pmROGL, "GL_POST_CONVOLUTION_BLUE_SCALE_EXT", UINT2NUM(0x801E));
    rb_define_const(*pmROGL, "GL_POST_CONVOLUTION_ALPHA_SCALE_EXT", UINT2NUM(0x801F));
    rb_define_const(*pmROGL, "GL_POST_CONVOLUTION_RED_BIAS_EXT", UINT2NUM(0x8020));
    rb_define_const(*pmROGL, "GL_POST_CONVOLUTION_GREEN_BIAS_EXT", UINT2NUM(0x8021));
    rb_define_const(*pmROGL, "GL_POST_CONVOLUTION_BLUE_BIAS_EXT", UINT2NUM(0x8022));
    rb_define_const(*pmROGL, "GL_POST_CONVOLUTION_ALPHA_BIAS_EXT", UINT2NUM(0x8023));
    rb_define_const(*pmROGL, "GL_TANGENT_ARRAY_EXT", UINT2NUM(0x8439));
    rb_define_const(*pmROGL, "GL_BINORMAL_ARRAY_EXT", UINT2NUM(0x843A));
    rb_define_const(*pmROGL, "GL_CURRENT_TANGENT_EXT", UINT2NUM(0x843B));
    rb_define_const(*pmROGL, "GL_CURRENT_BINORMAL_EXT", UINT2NUM(0x843C));
    rb_define_const(*pmROGL, "GL_TANGENT_ARRAY_TYPE_EXT", UINT2NUM(0x843E));
    rb_define_const(*pmROGL, "GL_TANGENT_ARRAY_STRIDE_EXT", UINT2NUM(0x843F));
    rb_define_const(*pmROGL, "GL_BINORMAL_ARRAY_TYPE_EXT", UINT2NUM(0x8440));
    rb_define_const(*pmROGL, "GL_BINORMAL_ARRAY_STRIDE_EXT", UINT2NUM(0x8441));
    rb_define_const(*pmROGL, "GL_TANGENT_ARRAY_POINTER_EXT", UINT2NUM(0x8442));
    rb_define_const(*pmROGL, "GL_BINORMAL_ARRAY_POINTER_EXT", UINT2NUM(0x8443));
    rb_define_const(*pmROGL, "GL_MAP1_TANGENT_EXT", UINT2NUM(0x8444));
    rb_define_const(*pmROGL, "GL_MAP2_TANGENT_EXT", UINT2NUM(0x8445));
    rb_define_const(*pmROGL, "GL_MAP1_BINORMAL_EXT", UINT2NUM(0x8446));
    rb_define_const(*pmROGL, "GL_MAP2_BINORMAL_EXT", UINT2NUM(0x8447));
    rb_define_const(*pmROGL, "GL_CULL_VERTEX_EXT", UINT2NUM(0x81AA));
    rb_define_const(*pmROGL, "GL_CULL_VERTEX_EYE_POSITION_EXT", UINT2NUM(0x81AB));
    rb_define_const(*pmROGL, "GL_CULL_VERTEX_OBJECT_POSITION_EXT", UINT2NUM(0x81AC));
    rb_define_const(*pmROGL, "GL_PROGRAM_PIPELINE_OBJECT_EXT", UINT2NUM(0x8A4F));
    rb_define_const(*pmROGL, "GL_PROGRAM_OBJECT_EXT", UINT2NUM(0x8B40));
    rb_define_const(*pmROGL, "GL_SHADER_OBJECT_EXT", UINT2NUM(0x8B48));
    rb_define_const(*pmROGL, "GL_BUFFER_OBJECT_EXT", UINT2NUM(0x9151));
    rb_define_const(*pmROGL, "GL_QUERY_OBJECT_EXT", UINT2NUM(0x9153));
    rb_define_const(*pmROGL, "GL_VERTEX_ARRAY_OBJECT_EXT", UINT2NUM(0x9154));
    rb_define_const(*pmROGL, "GL_DEPTH_BOUNDS_TEST_EXT", UINT2NUM(0x8890));
    rb_define_const(*pmROGL, "GL_DEPTH_BOUNDS_EXT", UINT2NUM(0x8891));
    rb_define_const(*pmROGL, "GL_PROGRAM_MATRIX_EXT", UINT2NUM(0x8E2D));
    rb_define_const(*pmROGL, "GL_TRANSPOSE_PROGRAM_MATRIX_EXT", UINT2NUM(0x8E2E));
    rb_define_const(*pmROGL, "GL_PROGRAM_MATRIX_STACK_DEPTH_EXT", UINT2NUM(0x8E2F));
    rb_define_const(*pmROGL, "GL_MAX_ELEMENTS_VERTICES_EXT", UINT2NUM(0x80E8));
    rb_define_const(*pmROGL, "GL_MAX_ELEMENTS_INDICES_EXT", UINT2NUM(0x80E9));
    rb_define_const(*pmROGL, "GL_FOG_COORDINATE_SOURCE_EXT", UINT2NUM(0x8450));
    rb_define_const(*pmROGL, "GL_FOG_COORDINATE_EXT", UINT2NUM(0x8451));
    rb_define_const(*pmROGL, "GL_CURRENT_FOG_COORDINATE_EXT", UINT2NUM(0x8453));
    rb_define_const(*pmROGL, "GL_FOG_COORDINATE_ARRAY_TYPE_EXT", UINT2NUM(0x8454));
    rb_define_const(*pmROGL, "GL_FOG_COORDINATE_ARRAY_STRIDE_EXT", UINT2NUM(0x8455));
    rb_define_const(*pmROGL, "GL_FOG_COORDINATE_ARRAY_POINTER_EXT", UINT2NUM(0x8456));
    rb_define_const(*pmROGL, "GL_FOG_COORDINATE_ARRAY_EXT", UINT2NUM(0x8457));
    rb_define_const(*pmROGL, "GL_READ_FRAMEBUFFER_EXT", UINT2NUM(0x8CA8));
    rb_define_const(*pmROGL, "GL_DRAW_FRAMEBUFFER_EXT", UINT2NUM(0x8CA9));
    rb_define_const(*pmROGL, "GL_DRAW_FRAMEBUFFER_BINDING_EXT", UINT2NUM(0x8CA6));
    rb_define_const(*pmROGL, "GL_READ_FRAMEBUFFER_BINDING_EXT", UINT2NUM(0x8CAA));
    rb_define_const(*pmROGL, "GL_RENDERBUFFER_SAMPLES_EXT", UINT2NUM(0x8CAB));
    rb_define_const(*pmROGL, "GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT", UINT2NUM(0x8D56));
    rb_define_const(*pmROGL, "GL_MAX_SAMPLES_EXT", UINT2NUM(0x8D57));
    rb_define_const(*pmROGL, "GL_SCALED_RESOLVE_FASTEST_EXT", UINT2NUM(0x90BA));
    rb_define_const(*pmROGL, "GL_SCALED_RESOLVE_NICEST_EXT", UINT2NUM(0x90BB));
    rb_define_const(*pmROGL, "GL_INVALID_FRAMEBUFFER_OPERATION_EXT", UINT2NUM(0x0506));
    rb_define_const(*pmROGL, "GL_MAX_RENDERBUFFER_SIZE_EXT", UINT2NUM(0x84E8));
    rb_define_const(*pmROGL, "GL_FRAMEBUFFER_BINDING_EXT", UINT2NUM(0x8CA6));
    rb_define_const(*pmROGL, "GL_RENDERBUFFER_BINDING_EXT", UINT2NUM(0x8CA7));
    rb_define_const(*pmROGL, "GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT", UINT2NUM(0x8CD0));
    rb_define_const(*pmROGL, "GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT", UINT2NUM(0x8CD1));
    rb_define_const(*pmROGL, "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT", UINT2NUM(0x8CD2));
    rb_define_const(*pmROGL, "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT", UINT2NUM(0x8CD3));
    rb_define_const(*pmROGL, "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT", UINT2NUM(0x8CD4));
    rb_define_const(*pmROGL, "GL_FRAMEBUFFER_COMPLETE_EXT", UINT2NUM(0x8CD5));
    rb_define_const(*pmROGL, "GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT", UINT2NUM(0x8CD6));
    rb_define_const(*pmROGL, "GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT", UINT2NUM(0x8CD7));
    rb_define_const(*pmROGL, "GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT", UINT2NUM(0x8CD9));
    rb_define_const(*pmROGL, "GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT", UINT2NUM(0x8CDA));
    rb_define_const(*pmROGL, "GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT", UINT2NUM(0x8CDB));
    rb_define_const(*pmROGL, "GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT", UINT2NUM(0x8CDC));
    rb_define_const(*pmROGL, "GL_FRAMEBUFFER_UNSUPPORTED_EXT", UINT2NUM(0x8CDD));
    rb_define_const(*pmROGL, "GL_MAX_COLOR_ATTACHMENTS_EXT", UINT2NUM(0x8CDF));
    rb_define_const(*pmROGL, "GL_COLOR_ATTACHMENT0_EXT", UINT2NUM(0x8CE0));
    rb_define_const(*pmROGL, "GL_COLOR_ATTACHMENT1_EXT", UINT2NUM(0x8CE1));
    rb_define_const(*pmROGL, "GL_COLOR_ATTACHMENT2_EXT", UINT2NUM(0x8CE2));
    rb_define_const(*pmROGL, "GL_COLOR_ATTACHMENT3_EXT", UINT2NUM(0x8CE3));
    rb_define_const(*pmROGL, "GL_COLOR_ATTACHMENT4_EXT", UINT2NUM(0x8CE4));
    rb_define_const(*pmROGL, "GL_COLOR_ATTACHMENT5_EXT", UINT2NUM(0x8CE5));
    rb_define_const(*pmROGL, "GL_COLOR_ATTACHMENT6_EXT", UINT2NUM(0x8CE6));
    rb_define_const(*pmROGL, "GL_COLOR_ATTACHMENT7_EXT", UINT2NUM(0x8CE7));
    rb_define_const(*pmROGL, "GL_COLOR_ATTACHMENT8_EXT", UINT2NUM(0x8CE8));
    rb_define_const(*pmROGL, "GL_COLOR_ATTACHMENT9_EXT", UINT2NUM(0x8CE9));
    rb_define_const(*pmROGL, "GL_COLOR_ATTACHMENT10_EXT", UINT2NUM(0x8CEA));
    rb_define_const(*pmROGL, "GL_COLOR_ATTACHMENT11_EXT", UINT2NUM(0x8CEB));
    rb_define_const(*pmROGL, "GL_COLOR_ATTACHMENT12_EXT", UINT2NUM(0x8CEC));
    rb_define_const(*pmROGL, "GL_COLOR_ATTACHMENT13_EXT", UINT2NUM(0x8CED));
    rb_define_const(*pmROGL, "GL_COLOR_ATTACHMENT14_EXT", UINT2NUM(0x8CEE));
    rb_define_const(*pmROGL, "GL_COLOR_ATTACHMENT15_EXT", UINT2NUM(0x8CEF));
    rb_define_const(*pmROGL, "GL_DEPTH_ATTACHMENT_EXT", UINT2NUM(0x8D00));
    rb_define_const(*pmROGL, "GL_STENCIL_ATTACHMENT_EXT", UINT2NUM(0x8D20));
    rb_define_const(*pmROGL, "GL_FRAMEBUFFER_EXT", UINT2NUM(0x8D40));
    rb_define_const(*pmROGL, "GL_RENDERBUFFER_EXT", UINT2NUM(0x8D41));
    rb_define_const(*pmROGL, "GL_RENDERBUFFER_WIDTH_EXT", UINT2NUM(0x8D42));
    rb_define_const(*pmROGL, "GL_RENDERBUFFER_HEIGHT_EXT", UINT2NUM(0x8D43));
    rb_define_const(*pmROGL, "GL_RENDERBUFFER_INTERNAL_FORMAT_EXT", UINT2NUM(0x8D44));
    rb_define_const(*pmROGL, "GL_STENCIL_INDEX1_EXT", UINT2NUM(0x8D46));
    rb_define_const(*pmROGL, "GL_STENCIL_INDEX4_EXT", UINT2NUM(0x8D47));
    rb_define_const(*pmROGL, "GL_STENCIL_INDEX8_EXT", UINT2NUM(0x8D48));
    rb_define_const(*pmROGL, "GL_STENCIL_INDEX16_EXT", UINT2NUM(0x8D49));
    rb_define_const(*pmROGL, "GL_RENDERBUFFER_RED_SIZE_EXT", UINT2NUM(0x8D50));
    rb_define_const(*pmROGL, "GL_RENDERBUFFER_GREEN_SIZE_EXT", UINT2NUM(0x8D51));
    rb_define_const(*pmROGL, "GL_RENDERBUFFER_BLUE_SIZE_EXT", UINT2NUM(0x8D52));
    rb_define_const(*pmROGL, "GL_RENDERBUFFER_ALPHA_SIZE_EXT", UINT2NUM(0x8D53));
    rb_define_const(*pmROGL, "GL_RENDERBUFFER_DEPTH_SIZE_EXT", UINT2NUM(0x8D54));
    rb_define_const(*pmROGL, "GL_RENDERBUFFER_STENCIL_SIZE_EXT", UINT2NUM(0x8D55));
    rb_define_const(*pmROGL, "GL_FRAMEBUFFER_SRGB_EXT", UINT2NUM(0x8DB9));
    rb_define_const(*pmROGL, "GL_FRAMEBUFFER_SRGB_CAPABLE_EXT", UINT2NUM(0x8DBA));
    rb_define_const(*pmROGL, "GL_GEOMETRY_SHADER_EXT", UINT2NUM(0x8DD9));
    rb_define_const(*pmROGL, "GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT", UINT2NUM(0x8DDD));
    rb_define_const(*pmROGL, "GL_MAX_VERTEX_VARYING_COMPONENTS_EXT", UINT2NUM(0x8DDE));
    rb_define_const(*pmROGL, "GL_MAX_VARYING_COMPONENTS_EXT", UINT2NUM(0x8B4B));
    rb_define_const(*pmROGL, "GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT", UINT2NUM(0x8DDF));
    rb_define_const(*pmROGL, "GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT", UINT2NUM(0x8DE0));
    rb_define_const(*pmROGL, "GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT", UINT2NUM(0x8DE1));
    rb_define_const(*pmROGL, "GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT", UINT2NUM(0x88FD));
    rb_define_const(*pmROGL, "GL_SAMPLER_1D_ARRAY_EXT", UINT2NUM(0x8DC0));
    rb_define_const(*pmROGL, "GL_SAMPLER_2D_ARRAY_EXT", UINT2NUM(0x8DC1));
    rb_define_const(*pmROGL, "GL_SAMPLER_BUFFER_EXT", UINT2NUM(0x8DC2));
    rb_define_const(*pmROGL, "GL_SAMPLER_1D_ARRAY_SHADOW_EXT", UINT2NUM(0x8DC3));
    rb_define_const(*pmROGL, "GL_SAMPLER_2D_ARRAY_SHADOW_EXT", UINT2NUM(0x8DC4));
    rb_define_const(*pmROGL, "GL_SAMPLER_CUBE_SHADOW_EXT", UINT2NUM(0x8DC5));
    rb_define_const(*pmROGL, "GL_UNSIGNED_INT_VEC2_EXT", UINT2NUM(0x8DC6));
    rb_define_const(*pmROGL, "GL_UNSIGNED_INT_VEC3_EXT", UINT2NUM(0x8DC7));
    rb_define_const(*pmROGL, "GL_UNSIGNED_INT_VEC4_EXT", UINT2NUM(0x8DC8));
    rb_define_const(*pmROGL, "GL_INT_SAMPLER_1D_EXT", UINT2NUM(0x8DC9));
    rb_define_const(*pmROGL, "GL_INT_SAMPLER_2D_EXT", UINT2NUM(0x8DCA));
    rb_define_const(*pmROGL, "GL_INT_SAMPLER_3D_EXT", UINT2NUM(0x8DCB));
    rb_define_const(*pmROGL, "GL_INT_SAMPLER_CUBE_EXT", UINT2NUM(0x8DCC));
    rb_define_const(*pmROGL, "GL_INT_SAMPLER_2D_RECT_EXT", UINT2NUM(0x8DCD));
    rb_define_const(*pmROGL, "GL_INT_SAMPLER_1D_ARRAY_EXT", UINT2NUM(0x8DCE));
    rb_define_const(*pmROGL, "GL_INT_SAMPLER_2D_ARRAY_EXT", UINT2NUM(0x8DCF));
    rb_define_const(*pmROGL, "GL_INT_SAMPLER_BUFFER_EXT", UINT2NUM(0x8DD0));
    rb_define_const(*pmROGL, "GL_UNSIGNED_INT_SAMPLER_1D_EXT", UINT2NUM(0x8DD1));
    rb_define_const(*pmROGL, "GL_UNSIGNED_INT_SAMPLER_2D_EXT", UINT2NUM(0x8DD2));
    rb_define_const(*pmROGL, "GL_UNSIGNED_INT_SAMPLER_3D_EXT", UINT2NUM(0x8DD3));
    rb_define_const(*pmROGL, "GL_UNSIGNED_INT_SAMPLER_CUBE_EXT", UINT2NUM(0x8DD4));
    rb_define_const(*pmROGL, "GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT", UINT2NUM(0x8DD5));
    rb_define_const(*pmROGL, "GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT", UINT2NUM(0x8DD6));
    rb_define_const(*pmROGL, "GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT", UINT2NUM(0x8DD7));
    rb_define_const(*pmROGL, "GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT", UINT2NUM(0x8DD8));
    rb_define_const(*pmROGL, "GL_MIN_PROGRAM_TEXEL_OFFSET_EXT", UINT2NUM(0x8904));
    rb_define_const(*pmROGL, "GL_MAX_PROGRAM_TEXEL_OFFSET_EXT", UINT2NUM(0x8905));
    rb_define_const(*pmROGL, "GL_HISTOGRAM_EXT", UINT2NUM(0x8024));
    rb_define_const(*pmROGL, "GL_PROXY_HISTOGRAM_EXT", UINT2NUM(0x8025));
    rb_define_const(*pmROGL, "GL_HISTOGRAM_WIDTH_EXT", UINT2NUM(0x8026));
    rb_define_const(*pmROGL, "GL_HISTOGRAM_FORMAT_EXT", UINT2NUM(0x8027));
    rb_define_const(*pmROGL, "GL_HISTOGRAM_RED_SIZE_EXT", UINT2NUM(0x8028));
    rb_define_const(*pmROGL, "GL_HISTOGRAM_GREEN_SIZE_EXT", UINT2NUM(0x8029));
    rb_define_const(*pmROGL, "GL_HISTOGRAM_BLUE_SIZE_EXT", UINT2NUM(0x802A));
    rb_define_const(*pmROGL, "GL_HISTOGRAM_ALPHA_SIZE_EXT", UINT2NUM(0x802B));
    rb_define_const(*pmROGL, "GL_HISTOGRAM_LUMINANCE_SIZE_EXT", UINT2NUM(0x802C));
    rb_define_const(*pmROGL, "GL_HISTOGRAM_SINK_EXT", UINT2NUM(0x802D));
    rb_define_const(*pmROGL, "GL_MINMAX_EXT", UINT2NUM(0x802E));
    rb_define_const(*pmROGL, "GL_MINMAX_FORMAT_EXT", UINT2NUM(0x802F));
    rb_define_const(*pmROGL, "GL_MINMAX_SINK_EXT", UINT2NUM(0x8030));
    rb_define_const(*pmROGL, "GL_TABLE_TOO_LARGE_EXT", UINT2NUM(0x8031));
    rb_define_const(*pmROGL, "GL_IUI_V2F_EXT", UINT2NUM(0x81AD));
    rb_define_const(*pmROGL, "GL_IUI_V3F_EXT", UINT2NUM(0x81AE));
    rb_define_const(*pmROGL, "GL_IUI_N3F_V2F_EXT", UINT2NUM(0x81AF));
    rb_define_const(*pmROGL, "GL_IUI_N3F_V3F_EXT", UINT2NUM(0x81B0));
    rb_define_const(*pmROGL, "GL_T2F_IUI_V2F_EXT", UINT2NUM(0x81B1));
    rb_define_const(*pmROGL, "GL_T2F_IUI_V3F_EXT", UINT2NUM(0x81B2));
    rb_define_const(*pmROGL, "GL_T2F_IUI_N3F_V2F_EXT", UINT2NUM(0x81B3));
    rb_define_const(*pmROGL, "GL_T2F_IUI_N3F_V3F_EXT", UINT2NUM(0x81B4));
    rb_define_const(*pmROGL, "GL_INDEX_TEST_EXT", UINT2NUM(0x81B5));
    rb_define_const(*pmROGL, "GL_INDEX_TEST_FUNC_EXT", UINT2NUM(0x81B6));
    rb_define_const(*pmROGL, "GL_INDEX_TEST_REF_EXT", UINT2NUM(0x81B7));
    rb_define_const(*pmROGL, "GL_INDEX_MATERIAL_EXT", UINT2NUM(0x81B8));
    rb_define_const(*pmROGL, "GL_INDEX_MATERIAL_PARAMETER_EXT", UINT2NUM(0x81B9));
    rb_define_const(*pmROGL, "GL_INDEX_MATERIAL_FACE_EXT", UINT2NUM(0x81BA));
    rb_define_const(*pmROGL, "GL_FRAGMENT_MATERIAL_EXT", UINT2NUM(0x8349));
    rb_define_const(*pmROGL, "GL_FRAGMENT_NORMAL_EXT", UINT2NUM(0x834A));
    rb_define_const(*pmROGL, "GL_FRAGMENT_COLOR_EXT", UINT2NUM(0x834C));
    rb_define_const(*pmROGL, "GL_ATTENUATION_EXT", UINT2NUM(0x834D));
    rb_define_const(*pmROGL, "GL_SHADOW_ATTENUATION_EXT", UINT2NUM(0x834E));
    rb_define_const(*pmROGL, "GL_TEXTURE_APPLICATION_MODE_EXT", UINT2NUM(0x834F));
    rb_define_const(*pmROGL, "GL_TEXTURE_LIGHT_EXT", UINT2NUM(0x8350));
    rb_define_const(*pmROGL, "GL_TEXTURE_MATERIAL_FACE_EXT", UINT2NUM(0x8351));
    rb_define_const(*pmROGL, "GL_TEXTURE_MATERIAL_PARAMETER_EXT", UINT2NUM(0x8352));
    rb_define_const(*pmROGL, "GL_MULTISAMPLE_EXT", UINT2NUM(0x809D));
    rb_define_const(*pmROGL, "GL_SAMPLE_ALPHA_TO_MASK_EXT", UINT2NUM(0x809E));
    rb_define_const(*pmROGL, "GL_SAMPLE_ALPHA_TO_ONE_EXT", UINT2NUM(0x809F));
    rb_define_const(*pmROGL, "GL_SAMPLE_MASK_EXT", UINT2NUM(0x80A0));
    rb_define_const(*pmROGL, "GL_1PASS_EXT", UINT2NUM(0x80A1));
    rb_define_const(*pmROGL, "GL_2PASS_0_EXT", UINT2NUM(0x80A2));
    rb_define_const(*pmROGL, "GL_2PASS_1_EXT", UINT2NUM(0x80A3));
    rb_define_const(*pmROGL, "GL_4PASS_0_EXT", UINT2NUM(0x80A4));
    rb_define_const(*pmROGL, "GL_4PASS_1_EXT", UINT2NUM(0x80A5));
    rb_define_const(*pmROGL, "GL_4PASS_2_EXT", UINT2NUM(0x80A6));
    rb_define_const(*pmROGL, "GL_4PASS_3_EXT", UINT2NUM(0x80A7));
    rb_define_const(*pmROGL, "GL_SAMPLE_BUFFERS_EXT", UINT2NUM(0x80A8));
    rb_define_const(*pmROGL, "GL_SAMPLES_EXT", UINT2NUM(0x80A9));
    rb_define_const(*pmROGL, "GL_SAMPLE_MASK_VALUE_EXT", UINT2NUM(0x80AA));
    rb_define_const(*pmROGL, "GL_SAMPLE_MASK_INVERT_EXT", UINT2NUM(0x80AB));
    rb_define_const(*pmROGL, "GL_SAMPLE_PATTERN_EXT", UINT2NUM(0x80AC));
    rb_define_const(*pmROGL, "GL_MULTISAMPLE_BIT_EXT", UINT2NUM(0x20000000));
    rb_define_const(*pmROGL, "GL_DEPTH_STENCIL_EXT", UINT2NUM(0x84F9));
    rb_define_const(*pmROGL, "GL_UNSIGNED_INT_24_8_EXT", UINT2NUM(0x84FA));
    rb_define_const(*pmROGL, "GL_DEPTH24_STENCIL8_EXT", UINT2NUM(0x88F0));
    rb_define_const(*pmROGL, "GL_TEXTURE_STENCIL_SIZE_EXT", UINT2NUM(0x88F1));
    rb_define_const(*pmROGL, "GL_R11F_G11F_B10F_EXT", UINT2NUM(0x8C3A));
    rb_define_const(*pmROGL, "GL_UNSIGNED_INT_10F_11F_11F_REV_EXT", UINT2NUM(0x8C3B));
    rb_define_const(*pmROGL, "GL_RGBA_SIGNED_COMPONENTS_EXT", UINT2NUM(0x8C3C));
    rb_define_const(*pmROGL, "GL_UNSIGNED_BYTE_3_3_2_EXT", UINT2NUM(0x8032));
    rb_define_const(*pmROGL, "GL_UNSIGNED_SHORT_4_4_4_4_EXT", UINT2NUM(0x8033));
    rb_define_const(*pmROGL, "GL_UNSIGNED_SHORT_5_5_5_1_EXT", UINT2NUM(0x8034));
    rb_define_const(*pmROGL, "GL_UNSIGNED_INT_8_8_8_8_EXT", UINT2NUM(0x8035));
    rb_define_const(*pmROGL, "GL_UNSIGNED_INT_10_10_10_2_EXT", UINT2NUM(0x8036));
    rb_define_const(*pmROGL, "GL_COLOR_INDEX1_EXT", UINT2NUM(0x80E2));
    rb_define_const(*pmROGL, "GL_COLOR_INDEX2_EXT", UINT2NUM(0x80E3));
    rb_define_const(*pmROGL, "GL_COLOR_INDEX4_EXT", UINT2NUM(0x80E4));
    rb_define_const(*pmROGL, "GL_COLOR_INDEX8_EXT", UINT2NUM(0x80E5));
    rb_define_const(*pmROGL, "GL_COLOR_INDEX12_EXT", UINT2NUM(0x80E6));
    rb_define_const(*pmROGL, "GL_COLOR_INDEX16_EXT", UINT2NUM(0x80E7));
    rb_define_const(*pmROGL, "GL_TEXTURE_INDEX_SIZE_EXT", UINT2NUM(0x80ED));
    rb_define_const(*pmROGL, "GL_PIXEL_PACK_BUFFER_EXT", UINT2NUM(0x88EB));
    rb_define_const(*pmROGL, "GL_PIXEL_UNPACK_BUFFER_EXT", UINT2NUM(0x88EC));
    rb_define_const(*pmROGL, "GL_PIXEL_PACK_BUFFER_BINDING_EXT", UINT2NUM(0x88ED));
    rb_define_const(*pmROGL, "GL_PIXEL_UNPACK_BUFFER_BINDING_EXT", UINT2NUM(0x88EF));
    rb_define_const(*pmROGL, "GL_PIXEL_TRANSFORM_2D_EXT", UINT2NUM(0x8330));
    rb_define_const(*pmROGL, "GL_PIXEL_MAG_FILTER_EXT", UINT2NUM(0x8331));
    rb_define_const(*pmROGL, "GL_PIXEL_MIN_FILTER_EXT", UINT2NUM(0x8332));
    rb_define_const(*pmROGL, "GL_PIXEL_CUBIC_WEIGHT_EXT", UINT2NUM(0x8333));
    rb_define_const(*pmROGL, "GL_CUBIC_EXT", UINT2NUM(0x8334));
    rb_define_const(*pmROGL, "GL_AVERAGE_EXT", UINT2NUM(0x8335));
    rb_define_const(*pmROGL, "GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT", UINT2NUM(0x8336));
    rb_define_const(*pmROGL, "GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT", UINT2NUM(0x8337));
    rb_define_const(*pmROGL, "GL_PIXEL_TRANSFORM_2D_MATRIX_EXT", UINT2NUM(0x8338));
    rb_define_const(*pmROGL, "GL_POINT_SIZE_MIN_EXT", UINT2NUM(0x8126));
    rb_define_const(*pmROGL, "GL_POINT_SIZE_MAX_EXT", UINT2NUM(0x8127));
    rb_define_const(*pmROGL, "GL_POINT_FADE_THRESHOLD_SIZE_EXT", UINT2NUM(0x8128));
    rb_define_const(*pmROGL, "GL_DISTANCE_ATTENUATION_EXT", UINT2NUM(0x8129));
    rb_define_const(*pmROGL, "GL_POLYGON_OFFSET_EXT", UINT2NUM(0x8037));
    rb_define_const(*pmROGL, "GL_POLYGON_OFFSET_FACTOR_EXT", UINT2NUM(0x8038));
    rb_define_const(*pmROGL, "GL_POLYGON_OFFSET_BIAS_EXT", UINT2NUM(0x8039));
    rb_define_const(*pmROGL, "GL_POLYGON_OFFSET_CLAMP_EXT", UINT2NUM(0x8E1B));
    rb_define_const(*pmROGL, "GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT", UINT2NUM(0x8E4C));
    rb_define_const(*pmROGL, "GL_FIRST_VERTEX_CONVENTION_EXT", UINT2NUM(0x8E4D));
    rb_define_const(*pmROGL, "GL_LAST_VERTEX_CONVENTION_EXT", UINT2NUM(0x8E4E));
    rb_define_const(*pmROGL, "GL_PROVOKING_VERTEX_EXT", UINT2NUM(0x8E4F));
    rb_define_const(*pmROGL, "GL_RESCALE_NORMAL_EXT", UINT2NUM(0x803A));
    rb_define_const(*pmROGL, "GL_COLOR_SUM_EXT", UINT2NUM(0x8458));
    rb_define_const(*pmROGL, "GL_CURRENT_SECONDARY_COLOR_EXT", UINT2NUM(0x8459));
    rb_define_const(*pmROGL, "GL_SECONDARY_COLOR_ARRAY_SIZE_EXT", UINT2NUM(0x845A));
    rb_define_const(*pmROGL, "GL_SECONDARY_COLOR_ARRAY_TYPE_EXT", UINT2NUM(0x845B));
    rb_define_const(*pmROGL, "GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT", UINT2NUM(0x845C));
    rb_define_const(*pmROGL, "GL_SECONDARY_COLOR_ARRAY_POINTER_EXT", UINT2NUM(0x845D));
    rb_define_const(*pmROGL, "GL_SECONDARY_COLOR_ARRAY_EXT", UINT2NUM(0x845E));
    rb_define_const(*pmROGL, "GL_VERTEX_SHADER_BIT_EXT", UINT2NUM(0x00000001));
    rb_define_const(*pmROGL, "GL_FRAGMENT_SHADER_BIT_EXT", UINT2NUM(0x00000002));
    rb_define_const(*pmROGL, "GL_ALL_SHADER_BITS_EXT", UINT2NUM(0xFFFFFFFF));
    rb_define_const(*pmROGL, "GL_PROGRAM_SEPARABLE_EXT", UINT2NUM(0x8258));
    rb_define_const(*pmROGL, "GL_PROGRAM_PIPELINE_BINDING_EXT", UINT2NUM(0x825A));
    rb_define_const(*pmROGL, "GL_LIGHT_MODEL_COLOR_CONTROL_EXT", UINT2NUM(0x81F8));
    rb_define_const(*pmROGL, "GL_SINGLE_COLOR_EXT", UINT2NUM(0x81F9));
    rb_define_const(*pmROGL, "GL_SEPARATE_SPECULAR_COLOR_EXT", UINT2NUM(0x81FA));
    rb_define_const(*pmROGL, "GL_MAX_IMAGE_UNITS_EXT", UINT2NUM(0x8F38));
    rb_define_const(*pmROGL, "GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT", UINT2NUM(0x8F39));
    rb_define_const(*pmROGL, "GL_IMAGE_BINDING_NAME_EXT", UINT2NUM(0x8F3A));
    rb_define_const(*pmROGL, "GL_IMAGE_BINDING_LEVEL_EXT", UINT2NUM(0x8F3B));
    rb_define_const(*pmROGL, "GL_IMAGE_BINDING_LAYERED_EXT", UINT2NUM(0x8F3C));
    rb_define_const(*pmROGL, "GL_IMAGE_BINDING_LAYER_EXT", UINT2NUM(0x8F3D));
    rb_define_const(*pmROGL, "GL_IMAGE_BINDING_ACCESS_EXT", UINT2NUM(0x8F3E));
    rb_define_const(*pmROGL, "GL_IMAGE_1D_EXT", UINT2NUM(0x904C));
    rb_define_const(*pmROGL, "GL_IMAGE_2D_EXT", UINT2NUM(0x904D));
    rb_define_const(*pmROGL, "GL_IMAGE_3D_EXT", UINT2NUM(0x904E));
    rb_define_const(*pmROGL, "GL_IMAGE_2D_RECT_EXT", UINT2NUM(0x904F));
    rb_define_const(*pmROGL, "GL_IMAGE_CUBE_EXT", UINT2NUM(0x9050));
    rb_define_const(*pmROGL, "GL_IMAGE_BUFFER_EXT", UINT2NUM(0x9051));
    rb_define_const(*pmROGL, "GL_IMAGE_1D_ARRAY_EXT", UINT2NUM(0x9052));
    rb_define_const(*pmROGL, "GL_IMAGE_2D_ARRAY_EXT", UINT2NUM(0x9053));
    rb_define_const(*pmROGL, "GL_IMAGE_CUBE_MAP_ARRAY_EXT", UINT2NUM(0x9054));
    rb_define_const(*pmROGL, "GL_IMAGE_2D_MULTISAMPLE_EXT", UINT2NUM(0x9055));
    rb_define_const(*pmROGL, "GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT", UINT2NUM(0x9056));
    rb_define_const(*pmROGL, "GL_INT_IMAGE_1D_EXT", UINT2NUM(0x9057));
    rb_define_const(*pmROGL, "GL_INT_IMAGE_2D_EXT", UINT2NUM(0x9058));
    rb_define_const(*pmROGL, "GL_INT_IMAGE_3D_EXT", UINT2NUM(0x9059));
    rb_define_const(*pmROGL, "GL_INT_IMAGE_2D_RECT_EXT", UINT2NUM(0x905A));
    rb_define_const(*pmROGL, "GL_INT_IMAGE_CUBE_EXT", UINT2NUM(0x905B));
    rb_define_const(*pmROGL, "GL_INT_IMAGE_BUFFER_EXT", UINT2NUM(0x905C));
    rb_define_const(*pmROGL, "GL_INT_IMAGE_1D_ARRAY_EXT", UINT2NUM(0x905D));
    rb_define_const(*pmROGL, "GL_INT_IMAGE_2D_ARRAY_EXT", UINT2NUM(0x905E));
    rb_define_const(*pmROGL, "GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT", UINT2NUM(0x905F));
    rb_define_const(*pmROGL, "GL_INT_IMAGE_2D_MULTISAMPLE_EXT", UINT2NUM(0x9060));
    rb_define_const(*pmROGL, "GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT", UINT2NUM(0x9061));
    rb_define_const(*pmROGL, "GL_UNSIGNED_INT_IMAGE_1D_EXT", UINT2NUM(0x9062));
    rb_define_const(*pmROGL, "GL_UNSIGNED_INT_IMAGE_2D_EXT", UINT2NUM(0x9063));
    rb_define_const(*pmROGL, "GL_UNSIGNED_INT_IMAGE_3D_EXT", UINT2NUM(0x9064));
    rb_define_const(*pmROGL, "GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT", UINT2NUM(0x9065));
    rb_define_const(*pmROGL, "GL_UNSIGNED_INT_IMAGE_CUBE_EXT", UINT2NUM(0x9066));
    rb_define_const(*pmROGL, "GL_UNSIGNED_INT_IMAGE_BUFFER_EXT", UINT2NUM(0x9067));
    rb_define_const(*pmROGL, "GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT", UINT2NUM(0x9068));
    rb_define_const(*pmROGL, "GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT", UINT2NUM(0x9069));
    rb_define_const(*pmROGL, "GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT", UINT2NUM(0x906A));
    rb_define_const(*pmROGL, "GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT", UINT2NUM(0x906B));
    rb_define_const(*pmROGL, "GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT", UINT2NUM(0x906C));
    rb_define_const(*pmROGL, "GL_MAX_IMAGE_SAMPLES_EXT", UINT2NUM(0x906D));
    rb_define_const(*pmROGL, "GL_IMAGE_BINDING_FORMAT_EXT", UINT2NUM(0x906E));
    rb_define_const(*pmROGL, "GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT", UINT2NUM(0x00000001));
    rb_define_const(*pmROGL, "GL_ELEMENT_ARRAY_BARRIER_BIT_EXT", UINT2NUM(0x00000002));
    rb_define_const(*pmROGL, "GL_UNIFORM_BARRIER_BIT_EXT", UINT2NUM(0x00000004));
    rb_define_const(*pmROGL, "GL_TEXTURE_FETCH_BARRIER_BIT_EXT", UINT2NUM(0x00000008));
    rb_define_const(*pmROGL, "GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT", UINT2NUM(0x00000020));
    rb_define_const(*pmROGL, "GL_COMMAND_BARRIER_BIT_EXT", UINT2NUM(0x00000040));
    rb_define_const(*pmROGL, "GL_PIXEL_BUFFER_BARRIER_BIT_EXT", UINT2NUM(0x00000080));
    rb_define_const(*pmROGL, "GL_TEXTURE_UPDATE_BARRIER_BIT_EXT", UINT2NUM(0x00000100));
    rb_define_const(*pmROGL, "GL_BUFFER_UPDATE_BARRIER_BIT_EXT", UINT2NUM(0x00000200));
    rb_define_const(*pmROGL, "GL_FRAMEBUFFER_BARRIER_BIT_EXT", UINT2NUM(0x00000400));
    rb_define_const(*pmROGL, "GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT", UINT2NUM(0x00000800));
    rb_define_const(*pmROGL, "GL_ATOMIC_COUNTER_BARRIER_BIT_EXT", UINT2NUM(0x00001000));
    rb_define_const(*pmROGL, "GL_ALL_BARRIER_BITS_EXT", UINT2NUM(0xFFFFFFFF));
    rb_define_const(*pmROGL, "GL_SHARED_TEXTURE_PALETTE_EXT", UINT2NUM(0x81FB));
    rb_define_const(*pmROGL, "GL_STENCIL_TAG_BITS_EXT", UINT2NUM(0x88F2));
    rb_define_const(*pmROGL, "GL_STENCIL_CLEAR_TAG_VALUE_EXT", UINT2NUM(0x88F3));
    rb_define_const(*pmROGL, "GL_STENCIL_TEST_TWO_SIDE_EXT", UINT2NUM(0x8910));
    rb_define_const(*pmROGL, "GL_ACTIVE_STENCIL_FACE_EXT", UINT2NUM(0x8911));
    rb_define_const(*pmROGL, "GL_INCR_WRAP_EXT", UINT2NUM(0x8507));
    rb_define_const(*pmROGL, "GL_DECR_WRAP_EXT", UINT2NUM(0x8508));
    rb_define_const(*pmROGL, "GL_ALPHA4_EXT", UINT2NUM(0x803B));
    rb_define_const(*pmROGL, "GL_ALPHA8_EXT", UINT2NUM(0x803C));
    rb_define_const(*pmROGL, "GL_ALPHA12_EXT", UINT2NUM(0x803D));
    rb_define_const(*pmROGL, "GL_ALPHA16_EXT", UINT2NUM(0x803E));
    rb_define_const(*pmROGL, "GL_LUMINANCE4_EXT", UINT2NUM(0x803F));
    rb_define_const(*pmROGL, "GL_LUMINANCE8_EXT", UINT2NUM(0x8040));
    rb_define_const(*pmROGL, "GL_LUMINANCE12_EXT", UINT2NUM(0x8041));
    rb_define_const(*pmROGL, "GL_LUMINANCE16_EXT", UINT2NUM(0x8042));
    rb_define_const(*pmROGL, "GL_LUMINANCE4_ALPHA4_EXT", UINT2NUM(0x8043));
    rb_define_const(*pmROGL, "GL_LUMINANCE6_ALPHA2_EXT", UINT2NUM(0x8044));
    rb_define_const(*pmROGL, "GL_LUMINANCE8_ALPHA8_EXT", UINT2NUM(0x8045));
    rb_define_const(*pmROGL, "GL_LUMINANCE12_ALPHA4_EXT", UINT2NUM(0x8046));
    rb_define_const(*pmROGL, "GL_LUMINANCE12_ALPHA12_EXT", UINT2NUM(0x8047));
    rb_define_const(*pmROGL, "GL_LUMINANCE16_ALPHA16_EXT", UINT2NUM(0x8048));
    rb_define_const(*pmROGL, "GL_INTENSITY_EXT", UINT2NUM(0x8049));
    rb_define_const(*pmROGL, "GL_INTENSITY4_EXT", UINT2NUM(0x804A));
    rb_define_const(*pmROGL, "GL_INTENSITY8_EXT", UINT2NUM(0x804B));
    rb_define_const(*pmROGL, "GL_INTENSITY12_EXT", UINT2NUM(0x804C));
    rb_define_const(*pmROGL, "GL_INTENSITY16_EXT", UINT2NUM(0x804D));
    rb_define_const(*pmROGL, "GL_RGB2_EXT", UINT2NUM(0x804E));
    rb_define_const(*pmROGL, "GL_RGB4_EXT", UINT2NUM(0x804F));
    rb_define_const(*pmROGL, "GL_RGB5_EXT", UINT2NUM(0x8050));
    rb_define_const(*pmROGL, "GL_RGB8_EXT", UINT2NUM(0x8051));
    rb_define_const(*pmROGL, "GL_RGB10_EXT", UINT2NUM(0x8052));
    rb_define_const(*pmROGL, "GL_RGB12_EXT", UINT2NUM(0x8053));
    rb_define_const(*pmROGL, "GL_RGB16_EXT", UINT2NUM(0x8054));
    rb_define_const(*pmROGL, "GL_RGBA2_EXT", UINT2NUM(0x8055));
    rb_define_const(*pmROGL, "GL_RGBA4_EXT", UINT2NUM(0x8056));
    rb_define_const(*pmROGL, "GL_RGB5_A1_EXT", UINT2NUM(0x8057));
    rb_define_const(*pmROGL, "GL_RGBA8_EXT", UINT2NUM(0x8058));
    rb_define_const(*pmROGL, "GL_RGB10_A2_EXT", UINT2NUM(0x8059));
    rb_define_const(*pmROGL, "GL_RGBA12_EXT", UINT2NUM(0x805A));
    rb_define_const(*pmROGL, "GL_RGBA16_EXT", UINT2NUM(0x805B));
    rb_define_const(*pmROGL, "GL_TEXTURE_RED_SIZE_EXT", UINT2NUM(0x805C));
    rb_define_const(*pmROGL, "GL_TEXTURE_GREEN_SIZE_EXT", UINT2NUM(0x805D));
    rb_define_const(*pmROGL, "GL_TEXTURE_BLUE_SIZE_EXT", UINT2NUM(0x805E));
    rb_define_const(*pmROGL, "GL_TEXTURE_ALPHA_SIZE_EXT", UINT2NUM(0x805F));
    rb_define_const(*pmROGL, "GL_TEXTURE_LUMINANCE_SIZE_EXT", UINT2NUM(0x8060));
    rb_define_const(*pmROGL, "GL_TEXTURE_INTENSITY_SIZE_EXT", UINT2NUM(0x8061));
    rb_define_const(*pmROGL, "GL_REPLACE_EXT", UINT2NUM(0x8062));
    rb_define_const(*pmROGL, "GL_PROXY_TEXTURE_1D_EXT", UINT2NUM(0x8063));
    rb_define_const(*pmROGL, "GL_PROXY_TEXTURE_2D_EXT", UINT2NUM(0x8064));
    rb_define_const(*pmROGL, "GL_TEXTURE_TOO_LARGE_EXT", UINT2NUM(0x8065));
    rb_define_const(*pmROGL, "GL_PACK_SKIP_IMAGES_EXT", UINT2NUM(0x806B));
    rb_define_const(*pmROGL, "GL_PACK_IMAGE_HEIGHT_EXT", UINT2NUM(0x806C));
    rb_define_const(*pmROGL, "GL_UNPACK_SKIP_IMAGES_EXT", UINT2NUM(0x806D));
    rb_define_const(*pmROGL, "GL_UNPACK_IMAGE_HEIGHT_EXT", UINT2NUM(0x806E));
    rb_define_const(*pmROGL, "GL_TEXTURE_3D_EXT", UINT2NUM(0x806F));
    rb_define_const(*pmROGL, "GL_PROXY_TEXTURE_3D_EXT", UINT2NUM(0x8070));
    rb_define_const(*pmROGL, "GL_TEXTURE_DEPTH_EXT", UINT2NUM(0x8071));
    rb_define_const(*pmROGL, "GL_TEXTURE_WRAP_R_EXT", UINT2NUM(0x8072));
    rb_define_const(*pmROGL, "GL_MAX_3D_TEXTURE_SIZE_EXT", UINT2NUM(0x8073));
    rb_define_const(*pmROGL, "GL_TEXTURE_1D_ARRAY_EXT", UINT2NUM(0x8C18));
    rb_define_const(*pmROGL, "GL_PROXY_TEXTURE_1D_ARRAY_EXT", UINT2NUM(0x8C19));
    rb_define_const(*pmROGL, "GL_TEXTURE_2D_ARRAY_EXT", UINT2NUM(0x8C1A));
    rb_define_const(*pmROGL, "GL_PROXY_TEXTURE_2D_ARRAY_EXT", UINT2NUM(0x8C1B));
    rb_define_const(*pmROGL, "GL_TEXTURE_BINDING_1D_ARRAY_EXT", UINT2NUM(0x8C1C));
    rb_define_const(*pmROGL, "GL_TEXTURE_BINDING_2D_ARRAY_EXT", UINT2NUM(0x8C1D));
    rb_define_const(*pmROGL, "GL_MAX_ARRAY_TEXTURE_LAYERS_EXT", UINT2NUM(0x88FF));
    rb_define_const(*pmROGL, "GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT", UINT2NUM(0x884E));
    rb_define_const(*pmROGL, "GL_TEXTURE_BUFFER_EXT", UINT2NUM(0x8C2A));
    rb_define_const(*pmROGL, "GL_MAX_TEXTURE_BUFFER_SIZE_EXT", UINT2NUM(0x8C2B));
    rb_define_const(*pmROGL, "GL_TEXTURE_BINDING_BUFFER_EXT", UINT2NUM(0x8C2C));
    rb_define_const(*pmROGL, "GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT", UINT2NUM(0x8C2D));
    rb_define_const(*pmROGL, "GL_TEXTURE_BUFFER_FORMAT_EXT", UINT2NUM(0x8C2E));
    rb_define_const(*pmROGL, "GL_COMPRESSED_LUMINANCE_LATC1_EXT", UINT2NUM(0x8C70));
    rb_define_const(*pmROGL, "GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT", UINT2NUM(0x8C71));
    rb_define_const(*pmROGL, "GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT", UINT2NUM(0x8C72));
    rb_define_const(*pmROGL, "GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT", UINT2NUM(0x8C73));
    rb_define_const(*pmROGL, "GL_COMPRESSED_RED_RGTC1_EXT", UINT2NUM(0x8DBB));
    rb_define_const(*pmROGL, "GL_COMPRESSED_SIGNED_RED_RGTC1_EXT", UINT2NUM(0x8DBC));
    rb_define_const(*pmROGL, "GL_COMPRESSED_RED_GREEN_RGTC2_EXT", UINT2NUM(0x8DBD));
    rb_define_const(*pmROGL, "GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT", UINT2NUM(0x8DBE));
    rb_define_const(*pmROGL, "GL_COMPRESSED_RGB_S3TC_DXT1_EXT", UINT2NUM(0x83F0));
    rb_define_const(*pmROGL, "GL_COMPRESSED_RGBA_S3TC_DXT1_EXT", UINT2NUM(0x83F1));
    rb_define_const(*pmROGL, "GL_COMPRESSED_RGBA_S3TC_DXT3_EXT", UINT2NUM(0x83F2));
    rb_define_const(*pmROGL, "GL_COMPRESSED_RGBA_S3TC_DXT5_EXT", UINT2NUM(0x83F3));
    rb_define_const(*pmROGL, "GL_NORMAL_MAP_EXT", UINT2NUM(0x8511));
    rb_define_const(*pmROGL, "GL_REFLECTION_MAP_EXT", UINT2NUM(0x8512));
    rb_define_const(*pmROGL, "GL_TEXTURE_CUBE_MAP_EXT", UINT2NUM(0x8513));
    rb_define_const(*pmROGL, "GL_TEXTURE_BINDING_CUBE_MAP_EXT", UINT2NUM(0x8514));
    rb_define_const(*pmROGL, "GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT", UINT2NUM(0x8515));
    rb_define_const(*pmROGL, "GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT", UINT2NUM(0x8516));
    rb_define_const(*pmROGL, "GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT", UINT2NUM(0x8517));
    rb_define_const(*pmROGL, "GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT", UINT2NUM(0x8518));
    rb_define_const(*pmROGL, "GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT", UINT2NUM(0x8519));
    rb_define_const(*pmROGL, "GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT", UINT2NUM(0x851A));
    rb_define_const(*pmROGL, "GL_PROXY_TEXTURE_CUBE_MAP_EXT", UINT2NUM(0x851B));
    rb_define_const(*pmROGL, "GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT", UINT2NUM(0x851C));
    rb_define_const(*pmROGL, "GL_COMBINE_EXT", UINT2NUM(0x8570));
    rb_define_const(*pmROGL, "GL_COMBINE_RGB_EXT", UINT2NUM(0x8571));
    rb_define_const(*pmROGL, "GL_COMBINE_ALPHA_EXT", UINT2NUM(0x8572));
    rb_define_const(*pmROGL, "GL_RGB_SCALE_EXT", UINT2NUM(0x8573));
    rb_define_const(*pmROGL, "GL_ADD_SIGNED_EXT", UINT2NUM(0x8574));
    rb_define_const(*pmROGL, "GL_INTERPOLATE_EXT", UINT2NUM(0x8575));
    rb_define_const(*pmROGL, "GL_CONSTANT_EXT", UINT2NUM(0x8576));
    rb_define_const(*pmROGL, "GL_PRIMARY_COLOR_EXT", UINT2NUM(0x8577));
    rb_define_const(*pmROGL, "GL_PREVIOUS_EXT", UINT2NUM(0x8578));
    rb_define_const(*pmROGL, "GL_SOURCE0_RGB_EXT", UINT2NUM(0x8580));
    rb_define_const(*pmROGL, "GL_SOURCE1_RGB_EXT", UINT2NUM(0x8581));
    rb_define_const(*pmROGL, "GL_SOURCE2_RGB_EXT", UINT2NUM(0x8582));
    rb_define_const(*pmROGL, "GL_SOURCE0_ALPHA_EXT", UINT2NUM(0x8588));
    rb_define_const(*pmROGL, "GL_SOURCE1_ALPHA_EXT", UINT2NUM(0x8589));
    rb_define_const(*pmROGL, "GL_SOURCE2_ALPHA_EXT", UINT2NUM(0x858A));
    rb_define_const(*pmROGL, "GL_OPERAND0_RGB_EXT", UINT2NUM(0x8590));
    rb_define_const(*pmROGL, "GL_OPERAND1_RGB_EXT", UINT2NUM(0x8591));
    rb_define_const(*pmROGL, "GL_OPERAND2_RGB_EXT", UINT2NUM(0x8592));
    rb_define_const(*pmROGL, "GL_OPERAND0_ALPHA_EXT", UINT2NUM(0x8598));
    rb_define_const(*pmROGL, "GL_OPERAND1_ALPHA_EXT", UINT2NUM(0x8599));
    rb_define_const(*pmROGL, "GL_OPERAND2_ALPHA_EXT", UINT2NUM(0x859A));
    rb_define_const(*pmROGL, "GL_DOT3_RGB_EXT", UINT2NUM(0x8740));
    rb_define_const(*pmROGL, "GL_DOT3_RGBA_EXT", UINT2NUM(0x8741));
    rb_define_const(*pmROGL, "GL_TEXTURE_MAX_ANISOTROPY_EXT", UINT2NUM(0x84FE));
    rb_define_const(*pmROGL, "GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT", UINT2NUM(0x84FF));
    rb_define_const(*pmROGL, "GL_RGBA32UI_EXT", UINT2NUM(0x8D70));
    rb_define_const(*pmROGL, "GL_RGB32UI_EXT", UINT2NUM(0x8D71));
    rb_define_const(*pmROGL, "GL_ALPHA32UI_EXT", UINT2NUM(0x8D72));
    rb_define_const(*pmROGL, "GL_INTENSITY32UI_EXT", UINT2NUM(0x8D73));
    rb_define_const(*pmROGL, "GL_LUMINANCE32UI_EXT", UINT2NUM(0x8D74));
    rb_define_const(*pmROGL, "GL_LUMINANCE_ALPHA32UI_EXT", UINT2NUM(0x8D75));
    rb_define_const(*pmROGL, "GL_RGBA16UI_EXT", UINT2NUM(0x8D76));
    rb_define_const(*pmROGL, "GL_RGB16UI_EXT", UINT2NUM(0x8D77));
    rb_define_const(*pmROGL, "GL_ALPHA16UI_EXT", UINT2NUM(0x8D78));
    rb_define_const(*pmROGL, "GL_INTENSITY16UI_EXT", UINT2NUM(0x8D79));
    rb_define_const(*pmROGL, "GL_LUMINANCE16UI_EXT", UINT2NUM(0x8D7A));
    rb_define_const(*pmROGL, "GL_LUMINANCE_ALPHA16UI_EXT", UINT2NUM(0x8D7B));
    rb_define_const(*pmROGL, "GL_RGBA8UI_EXT", UINT2NUM(0x8D7C));
    rb_define_const(*pmROGL, "GL_RGB8UI_EXT", UINT2NUM(0x8D7D));
    rb_define_const(*pmROGL, "GL_ALPHA8UI_EXT", UINT2NUM(0x8D7E));
    rb_define_const(*pmROGL, "GL_INTENSITY8UI_EXT", UINT2NUM(0x8D7F));
    rb_define_const(*pmROGL, "GL_LUMINANCE8UI_EXT", UINT2NUM(0x8D80));
    rb_define_const(*pmROGL, "GL_LUMINANCE_ALPHA8UI_EXT", UINT2NUM(0x8D81));
    rb_define_const(*pmROGL, "GL_RGBA32I_EXT", UINT2NUM(0x8D82));
    rb_define_const(*pmROGL, "GL_RGB32I_EXT", UINT2NUM(0x8D83));
    rb_define_const(*pmROGL, "GL_ALPHA32I_EXT", UINT2NUM(0x8D84));
    rb_define_const(*pmROGL, "GL_INTENSITY32I_EXT", UINT2NUM(0x8D85));
    rb_define_const(*pmROGL, "GL_LUMINANCE32I_EXT", UINT2NUM(0x8D86));
    rb_define_const(*pmROGL, "GL_LUMINANCE_ALPHA32I_EXT", UINT2NUM(0x8D87));
    rb_define_const(*pmROGL, "GL_RGBA16I_EXT", UINT2NUM(0x8D88));
    rb_define_const(*pmROGL, "GL_RGB16I_EXT", UINT2NUM(0x8D89));
    rb_define_const(*pmROGL, "GL_ALPHA16I_EXT", UINT2NUM(0x8D8A));
    rb_define_const(*pmROGL, "GL_INTENSITY16I_EXT", UINT2NUM(0x8D8B));
    rb_define_const(*pmROGL, "GL_LUMINANCE16I_EXT", UINT2NUM(0x8D8C));
    rb_define_const(*pmROGL, "GL_LUMINANCE_ALPHA16I_EXT", UINT2NUM(0x8D8D));
    rb_define_const(*pmROGL, "GL_RGBA8I_EXT", UINT2NUM(0x8D8E));
    rb_define_const(*pmROGL, "GL_RGB8I_EXT", UINT2NUM(0x8D8F));
    rb_define_const(*pmROGL, "GL_ALPHA8I_EXT", UINT2NUM(0x8D90));
    rb_define_const(*pmROGL, "GL_INTENSITY8I_EXT", UINT2NUM(0x8D91));
    rb_define_const(*pmROGL, "GL_LUMINANCE8I_EXT", UINT2NUM(0x8D92));
    rb_define_const(*pmROGL, "GL_LUMINANCE_ALPHA8I_EXT", UINT2NUM(0x8D93));
    rb_define_const(*pmROGL, "GL_RED_INTEGER_EXT", UINT2NUM(0x8D94));
    rb_define_const(*pmROGL, "GL_GREEN_INTEGER_EXT", UINT2NUM(0x8D95));
    rb_define_const(*pmROGL, "GL_BLUE_INTEGER_EXT", UINT2NUM(0x8D96));
    rb_define_const(*pmROGL, "GL_ALPHA_INTEGER_EXT", UINT2NUM(0x8D97));
    rb_define_const(*pmROGL, "GL_RGB_INTEGER_EXT", UINT2NUM(0x8D98));
    rb_define_const(*pmROGL, "GL_RGBA_INTEGER_EXT", UINT2NUM(0x8D99));
    rb_define_const(*pmROGL, "GL_BGR_INTEGER_EXT", UINT2NUM(0x8D9A));
    rb_define_const(*pmROGL, "GL_BGRA_INTEGER_EXT", UINT2NUM(0x8D9B));
    rb_define_const(*pmROGL, "GL_LUMINANCE_INTEGER_EXT", UINT2NUM(0x8D9C));
    rb_define_const(*pmROGL, "GL_LUMINANCE_ALPHA_INTEGER_EXT", UINT2NUM(0x8D9D));
    rb_define_const(*pmROGL, "GL_RGBA_INTEGER_MODE_EXT", UINT2NUM(0x8D9E));
    rb_define_const(*pmROGL, "GL_MAX_TEXTURE_LOD_BIAS_EXT", UINT2NUM(0x84FD));
    rb_define_const(*pmROGL, "GL_TEXTURE_FILTER_CONTROL_EXT", UINT2NUM(0x8500));
    rb_define_const(*pmROGL, "GL_TEXTURE_LOD_BIAS_EXT", UINT2NUM(0x8501));
    rb_define_const(*pmROGL, "GL_MIRROR_CLAMP_EXT", UINT2NUM(0x8742));
    rb_define_const(*pmROGL, "GL_MIRROR_CLAMP_TO_EDGE_EXT", UINT2NUM(0x8743));
    rb_define_const(*pmROGL, "GL_MIRROR_CLAMP_TO_BORDER_EXT", UINT2NUM(0x8912));
    rb_define_const(*pmROGL, "GL_TEXTURE_PRIORITY_EXT", UINT2NUM(0x8066));
    rb_define_const(*pmROGL, "GL_TEXTURE_RESIDENT_EXT", UINT2NUM(0x8067));
    rb_define_const(*pmROGL, "GL_TEXTURE_1D_BINDING_EXT", UINT2NUM(0x8068));
    rb_define_const(*pmROGL, "GL_TEXTURE_2D_BINDING_EXT", UINT2NUM(0x8069));
    rb_define_const(*pmROGL, "GL_TEXTURE_3D_BINDING_EXT", UINT2NUM(0x806A));
    rb_define_const(*pmROGL, "GL_PERTURB_EXT", UINT2NUM(0x85AE));
    rb_define_const(*pmROGL, "GL_TEXTURE_NORMAL_EXT", UINT2NUM(0x85AF));
    rb_define_const(*pmROGL, "GL_SRGB_EXT", UINT2NUM(0x8C40));
    rb_define_const(*pmROGL, "GL_SRGB8_EXT", UINT2NUM(0x8C41));
    rb_define_const(*pmROGL, "GL_SRGB_ALPHA_EXT", UINT2NUM(0x8C42));
    rb_define_const(*pmROGL, "GL_SRGB8_ALPHA8_EXT", UINT2NUM(0x8C43));
    rb_define_const(*pmROGL, "GL_SLUMINANCE_ALPHA_EXT", UINT2NUM(0x8C44));
    rb_define_const(*pmROGL, "GL_SLUMINANCE8_ALPHA8_EXT", UINT2NUM(0x8C45));
    rb_define_const(*pmROGL, "GL_SLUMINANCE_EXT", UINT2NUM(0x8C46));
    rb_define_const(*pmROGL, "GL_SLUMINANCE8_EXT", UINT2NUM(0x8C47));
    rb_define_const(*pmROGL, "GL_COMPRESSED_SRGB_EXT", UINT2NUM(0x8C48));
    rb_define_const(*pmROGL, "GL_COMPRESSED_SRGB_ALPHA_EXT", UINT2NUM(0x8C49));
    rb_define_const(*pmROGL, "GL_COMPRESSED_SLUMINANCE_EXT", UINT2NUM(0x8C4A));
    rb_define_const(*pmROGL, "GL_COMPRESSED_SLUMINANCE_ALPHA_EXT", UINT2NUM(0x8C4B));
    rb_define_const(*pmROGL, "GL_COMPRESSED_SRGB_S3TC_DXT1_EXT", UINT2NUM(0x8C4C));
    rb_define_const(*pmROGL, "GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT", UINT2NUM(0x8C4D));
    rb_define_const(*pmROGL, "GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT", UINT2NUM(0x8C4E));
    rb_define_const(*pmROGL, "GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT", UINT2NUM(0x8C4F));
    rb_define_const(*pmROGL, "GL_TEXTURE_SRGB_DECODE_EXT", UINT2NUM(0x8A48));
    rb_define_const(*pmROGL, "GL_DECODE_EXT", UINT2NUM(0x8A49));
    rb_define_const(*pmROGL, "GL_SKIP_DECODE_EXT", UINT2NUM(0x8A4A));
    rb_define_const(*pmROGL, "GL_RGB9_E5_EXT", UINT2NUM(0x8C3D));
    rb_define_const(*pmROGL, "GL_UNSIGNED_INT_5_9_9_9_REV_EXT", UINT2NUM(0x8C3E));
    rb_define_const(*pmROGL, "GL_TEXTURE_SHARED_SIZE_EXT", UINT2NUM(0x8C3F));
    rb_define_const(*pmROGL, "GL_ALPHA_SNORM", UINT2NUM(0x9010));
    rb_define_const(*pmROGL, "GL_LUMINANCE_SNORM", UINT2NUM(0x9011));
    rb_define_const(*pmROGL, "GL_LUMINANCE_ALPHA_SNORM", UINT2NUM(0x9012));
    rb_define_const(*pmROGL, "GL_INTENSITY_SNORM", UINT2NUM(0x9013));
    rb_define_const(*pmROGL, "GL_ALPHA8_SNORM", UINT2NUM(0x9014));
    rb_define_const(*pmROGL, "GL_LUMINANCE8_SNORM", UINT2NUM(0x9015));
    rb_define_const(*pmROGL, "GL_LUMINANCE8_ALPHA8_SNORM", UINT2NUM(0x9016));
    rb_define_const(*pmROGL, "GL_INTENSITY8_SNORM", UINT2NUM(0x9017));
    rb_define_const(*pmROGL, "GL_ALPHA16_SNORM", UINT2NUM(0x9018));
    rb_define_const(*pmROGL, "GL_LUMINANCE16_SNORM", UINT2NUM(0x9019));
    rb_define_const(*pmROGL, "GL_LUMINANCE16_ALPHA16_SNORM", UINT2NUM(0x901A));
    rb_define_const(*pmROGL, "GL_INTENSITY16_SNORM", UINT2NUM(0x901B));
    rb_define_const(*pmROGL, "GL_RED_SNORM", UINT2NUM(0x8F90));
    rb_define_const(*pmROGL, "GL_RG_SNORM", UINT2NUM(0x8F91));
    rb_define_const(*pmROGL, "GL_RGB_SNORM", UINT2NUM(0x8F92));
    rb_define_const(*pmROGL, "GL_RGBA_SNORM", UINT2NUM(0x8F93));
    rb_define_const(*pmROGL, "GL_TEXTURE_SWIZZLE_R_EXT", UINT2NUM(0x8E42));
    rb_define_const(*pmROGL, "GL_TEXTURE_SWIZZLE_G_EXT", UINT2NUM(0x8E43));
    rb_define_const(*pmROGL, "GL_TEXTURE_SWIZZLE_B_EXT", UINT2NUM(0x8E44));
    rb_define_const(*pmROGL, "GL_TEXTURE_SWIZZLE_A_EXT", UINT2NUM(0x8E45));
    rb_define_const(*pmROGL, "GL_TEXTURE_SWIZZLE_RGBA_EXT", UINT2NUM(0x8E46));
    rb_define_const(*pmROGL, "GL_TIME_ELAPSED_EXT", UINT2NUM(0x88BF));
    rb_define_const(*pmROGL, "GL_TRANSFORM_FEEDBACK_BUFFER_EXT", UINT2NUM(0x8C8E));
    rb_define_const(*pmROGL, "GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT", UINT2NUM(0x8C84));
    rb_define_const(*pmROGL, "GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT", UINT2NUM(0x8C85));
    rb_define_const(*pmROGL, "GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT", UINT2NUM(0x8C8F));
    rb_define_const(*pmROGL, "GL_INTERLEAVED_ATTRIBS_EXT", UINT2NUM(0x8C8C));
    rb_define_const(*pmROGL, "GL_SEPARATE_ATTRIBS_EXT", UINT2NUM(0x8C8D));
    rb_define_const(*pmROGL, "GL_PRIMITIVES_GENERATED_EXT", UINT2NUM(0x8C87));
    rb_define_const(*pmROGL, "GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT", UINT2NUM(0x8C88));
    rb_define_const(*pmROGL, "GL_RASTERIZER_DISCARD_EXT", UINT2NUM(0x8C89));
    rb_define_const(*pmROGL, "GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT", UINT2NUM(0x8C8A));
    rb_define_const(*pmROGL, "GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT", UINT2NUM(0x8C8B));
    rb_define_const(*pmROGL, "GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT", UINT2NUM(0x8C80));
    rb_define_const(*pmROGL, "GL_TRANSFORM_FEEDBACK_VARYINGS_EXT", UINT2NUM(0x8C83));
    rb_define_const(*pmROGL, "GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT", UINT2NUM(0x8C7F));
    rb_define_const(*pmROGL, "GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT", UINT2NUM(0x8C76));
    rb_define_const(*pmROGL, "GL_VERTEX_ARRAY_EXT", UINT2NUM(0x8074));
    rb_define_const(*pmROGL, "GL_NORMAL_ARRAY_EXT", UINT2NUM(0x8075));
    rb_define_const(*pmROGL, "GL_COLOR_ARRAY_EXT", UINT2NUM(0x8076));
    rb_define_const(*pmROGL, "GL_INDEX_ARRAY_EXT", UINT2NUM(0x8077));
    rb_define_const(*pmROGL, "GL_TEXTURE_COORD_ARRAY_EXT", UINT2NUM(0x8078));
    rb_define_const(*pmROGL, "GL_EDGE_FLAG_ARRAY_EXT", UINT2NUM(0x8079));
    rb_define_const(*pmROGL, "GL_VERTEX_ARRAY_SIZE_EXT", UINT2NUM(0x807A));
    rb_define_const(*pmROGL, "GL_VERTEX_ARRAY_TYPE_EXT", UINT2NUM(0x807B));
    rb_define_const(*pmROGL, "GL_VERTEX_ARRAY_STRIDE_EXT", UINT2NUM(0x807C));
    rb_define_const(*pmROGL, "GL_VERTEX_ARRAY_COUNT_EXT", UINT2NUM(0x807D));
    rb_define_const(*pmROGL, "GL_NORMAL_ARRAY_TYPE_EXT", UINT2NUM(0x807E));
    rb_define_const(*pmROGL, "GL_NORMAL_ARRAY_STRIDE_EXT", UINT2NUM(0x807F));
    rb_define_const(*pmROGL, "GL_NORMAL_ARRAY_COUNT_EXT", UINT2NUM(0x8080));
    rb_define_const(*pmROGL, "GL_COLOR_ARRAY_SIZE_EXT", UINT2NUM(0x8081));
    rb_define_const(*pmROGL, "GL_COLOR_ARRAY_TYPE_EXT", UINT2NUM(0x8082));
    rb_define_const(*pmROGL, "GL_COLOR_ARRAY_STRIDE_EXT", UINT2NUM(0x8083));
    rb_define_const(*pmROGL, "GL_COLOR_ARRAY_COUNT_EXT", UINT2NUM(0x8084));
    rb_define_const(*pmROGL, "GL_INDEX_ARRAY_TYPE_EXT", UINT2NUM(0x8085));
    rb_define_const(*pmROGL, "GL_INDEX_ARRAY_STRIDE_EXT", UINT2NUM(0x8086));
    rb_define_const(*pmROGL, "GL_INDEX_ARRAY_COUNT_EXT", UINT2NUM(0x8087));
    rb_define_const(*pmROGL, "GL_TEXTURE_COORD_ARRAY_SIZE_EXT", UINT2NUM(0x8088));
    rb_define_const(*pmROGL, "GL_TEXTURE_COORD_ARRAY_TYPE_EXT", UINT2NUM(0x8089));
    rb_define_const(*pmROGL, "GL_TEXTURE_COORD_ARRAY_STRIDE_EXT", UINT2NUM(0x808A));
    rb_define_const(*pmROGL, "GL_TEXTURE_COORD_ARRAY_COUNT_EXT", UINT2NUM(0x808B));
    rb_define_const(*pmROGL, "GL_EDGE_FLAG_ARRAY_STRIDE_EXT", UINT2NUM(0x808C));
    rb_define_const(*pmROGL, "GL_EDGE_FLAG_ARRAY_COUNT_EXT", UINT2NUM(0x808D));
    rb_define_const(*pmROGL, "GL_VERTEX_ARRAY_POINTER_EXT", UINT2NUM(0x808E));
    rb_define_const(*pmROGL, "GL_NORMAL_ARRAY_POINTER_EXT", UINT2NUM(0x808F));
    rb_define_const(*pmROGL, "GL_COLOR_ARRAY_POINTER_EXT", UINT2NUM(0x8090));
    rb_define_const(*pmROGL, "GL_INDEX_ARRAY_POINTER_EXT", UINT2NUM(0x8091));
    rb_define_const(*pmROGL, "GL_TEXTURE_COORD_ARRAY_POINTER_EXT", UINT2NUM(0x8092));
    rb_define_const(*pmROGL, "GL_EDGE_FLAG_ARRAY_POINTER_EXT", UINT2NUM(0x8093));
    rb_define_const(*pmROGL, "GL_DOUBLE_VEC2_EXT", UINT2NUM(0x8FFC));
    rb_define_const(*pmROGL, "GL_DOUBLE_VEC3_EXT", UINT2NUM(0x8FFD));
    rb_define_const(*pmROGL, "GL_DOUBLE_VEC4_EXT", UINT2NUM(0x8FFE));
    rb_define_const(*pmROGL, "GL_DOUBLE_MAT2_EXT", UINT2NUM(0x8F46));
    rb_define_const(*pmROGL, "GL_DOUBLE_MAT3_EXT", UINT2NUM(0x8F47));
    rb_define_const(*pmROGL, "GL_DOUBLE_MAT4_EXT", UINT2NUM(0x8F48));
    rb_define_const(*pmROGL, "GL_DOUBLE_MAT2x3_EXT", UINT2NUM(0x8F49));
    rb_define_const(*pmROGL, "GL_DOUBLE_MAT2x4_EXT", UINT2NUM(0x8F4A));
    rb_define_const(*pmROGL, "GL_DOUBLE_MAT3x2_EXT", UINT2NUM(0x8F4B));
    rb_define_const(*pmROGL, "GL_DOUBLE_MAT3x4_EXT", UINT2NUM(0x8F4C));
    rb_define_const(*pmROGL, "GL_DOUBLE_MAT4x2_EXT", UINT2NUM(0x8F4D));
    rb_define_const(*pmROGL, "GL_DOUBLE_MAT4x3_EXT", UINT2NUM(0x8F4E));
    rb_define_const(*pmROGL, "GL_VERTEX_SHADER_EXT", UINT2NUM(0x8780));
    rb_define_const(*pmROGL, "GL_VERTEX_SHADER_BINDING_EXT", UINT2NUM(0x8781));
    rb_define_const(*pmROGL, "GL_OP_INDEX_EXT", UINT2NUM(0x8782));
    rb_define_const(*pmROGL, "GL_OP_NEGATE_EXT", UINT2NUM(0x8783));
    rb_define_const(*pmROGL, "GL_OP_DOT3_EXT", UINT2NUM(0x8784));
    rb_define_const(*pmROGL, "GL_OP_DOT4_EXT", UINT2NUM(0x8785));
    rb_define_const(*pmROGL, "GL_OP_MUL_EXT", UINT2NUM(0x8786));
    rb_define_const(*pmROGL, "GL_OP_ADD_EXT", UINT2NUM(0x8787));
    rb_define_const(*pmROGL, "GL_OP_MADD_EXT", UINT2NUM(0x8788));
    rb_define_const(*pmROGL, "GL_OP_FRAC_EXT", UINT2NUM(0x8789));
    rb_define_const(*pmROGL, "GL_OP_MAX_EXT", UINT2NUM(0x878A));
    rb_define_const(*pmROGL, "GL_OP_MIN_EXT", UINT2NUM(0x878B));
    rb_define_const(*pmROGL, "GL_OP_SET_GE_EXT", UINT2NUM(0x878C));
    rb_define_const(*pmROGL, "GL_OP_SET_LT_EXT", UINT2NUM(0x878D));
    rb_define_const(*pmROGL, "GL_OP_CLAMP_EXT", UINT2NUM(0x878E));
    rb_define_const(*pmROGL, "GL_OP_FLOOR_EXT", UINT2NUM(0x878F));
    rb_define_const(*pmROGL, "GL_OP_ROUND_EXT", UINT2NUM(0x8790));
    rb_define_const(*pmROGL, "GL_OP_EXP_BASE_2_EXT", UINT2NUM(0x8791));
    rb_define_const(*pmROGL, "GL_OP_LOG_BASE_2_EXT", UINT2NUM(0x8792));
    rb_define_const(*pmROGL, "GL_OP_POWER_EXT", UINT2NUM(0x8793));
    rb_define_const(*pmROGL, "GL_OP_RECIP_EXT", UINT2NUM(0x8794));
    rb_define_const(*pmROGL, "GL_OP_RECIP_SQRT_EXT", UINT2NUM(0x8795));
    rb_define_const(*pmROGL, "GL_OP_SUB_EXT", UINT2NUM(0x8796));
    rb_define_const(*pmROGL, "GL_OP_CROSS_PRODUCT_EXT", UINT2NUM(0x8797));
    rb_define_const(*pmROGL, "GL_OP_MULTIPLY_MATRIX_EXT", UINT2NUM(0x8798));
    rb_define_const(*pmROGL, "GL_OP_MOV_EXT", UINT2NUM(0x8799));
    rb_define_const(*pmROGL, "GL_OUTPUT_VERTEX_EXT", UINT2NUM(0x879A));
    rb_define_const(*pmROGL, "GL_OUTPUT_COLOR0_EXT", UINT2NUM(0x879B));
    rb_define_const(*pmROGL, "GL_OUTPUT_COLOR1_EXT", UINT2NUM(0x879C));
    rb_define_const(*pmROGL, "GL_OUTPUT_TEXTURE_COORD0_EXT", UINT2NUM(0x879D));
    rb_define_const(*pmROGL, "GL_OUTPUT_TEXTURE_COORD1_EXT", UINT2NUM(0x879E));
    rb_define_const(*pmROGL, "GL_OUTPUT_TEXTURE_COORD2_EXT", UINT2NUM(0x879F));
    rb_define_const(*pmROGL, "GL_OUTPUT_TEXTURE_COORD3_EXT", UINT2NUM(0x87A0));
    rb_define_const(*pmROGL, "GL_OUTPUT_TEXTURE_COORD4_EXT", UINT2NUM(0x87A1));
    rb_define_const(*pmROGL, "GL_OUTPUT_TEXTURE_COORD5_EXT", UINT2NUM(0x87A2));
    rb_define_const(*pmROGL, "GL_OUTPUT_TEXTURE_COORD6_EXT", UINT2NUM(0x87A3));
    rb_define_const(*pmROGL, "GL_OUTPUT_TEXTURE_COORD7_EXT", UINT2NUM(0x87A4));
    rb_define_const(*pmROGL, "GL_OUTPUT_TEXTURE_COORD8_EXT", UINT2NUM(0x87A5));
    rb_define_const(*pmROGL, "GL_OUTPUT_TEXTURE_COORD9_EXT", UINT2NUM(0x87A6));
    rb_define_const(*pmROGL, "GL_OUTPUT_TEXTURE_COORD10_EXT", UINT2NUM(0x87A7));
    rb_define_const(*pmROGL, "GL_OUTPUT_TEXTURE_COORD11_EXT", UINT2NUM(0x87A8));
    rb_define_const(*pmROGL, "GL_OUTPUT_TEXTURE_COORD12_EXT", UINT2NUM(0x87A9));
    rb_define_const(*pmROGL, "GL_OUTPUT_TEXTURE_COORD13_EXT", UINT2NUM(0x87AA));
    rb_define_const(*pmROGL, "GL_OUTPUT_TEXTURE_COORD14_EXT", UINT2NUM(0x87AB));
    rb_define_const(*pmROGL, "GL_OUTPUT_TEXTURE_COORD15_EXT", UINT2NUM(0x87AC));
    rb_define_const(*pmROGL, "GL_OUTPUT_TEXTURE_COORD16_EXT", UINT2NUM(0x87AD));
    rb_define_const(*pmROGL, "GL_OUTPUT_TEXTURE_COORD17_EXT", UINT2NUM(0x87AE));
    rb_define_const(*pmROGL, "GL_OUTPUT_TEXTURE_COORD18_EXT", UINT2NUM(0x87AF));
    rb_define_const(*pmROGL, "GL_OUTPUT_TEXTURE_COORD19_EXT", UINT2NUM(0x87B0));
    rb_define_const(*pmROGL, "GL_OUTPUT_TEXTURE_COORD20_EXT", UINT2NUM(0x87B1));
    rb_define_const(*pmROGL, "GL_OUTPUT_TEXTURE_COORD21_EXT", UINT2NUM(0x87B2));
    rb_define_const(*pmROGL, "GL_OUTPUT_TEXTURE_COORD22_EXT", UINT2NUM(0x87B3));
    rb_define_const(*pmROGL, "GL_OUTPUT_TEXTURE_COORD23_EXT", UINT2NUM(0x87B4));
    rb_define_const(*pmROGL, "GL_OUTPUT_TEXTURE_COORD24_EXT", UINT2NUM(0x87B5));
    rb_define_const(*pmROGL, "GL_OUTPUT_TEXTURE_COORD25_EXT", UINT2NUM(0x87B6));
    rb_define_const(*pmROGL, "GL_OUTPUT_TEXTURE_COORD26_EXT", UINT2NUM(0x87B7));
    rb_define_const(*pmROGL, "GL_OUTPUT_TEXTURE_COORD27_EXT", UINT2NUM(0x87B8));
    rb_define_const(*pmROGL, "GL_OUTPUT_TEXTURE_COORD28_EXT", UINT2NUM(0x87B9));
    rb_define_const(*pmROGL, "GL_OUTPUT_TEXTURE_COORD29_EXT", UINT2NUM(0x87BA));
    rb_define_const(*pmROGL, "GL_OUTPUT_TEXTURE_COORD30_EXT", UINT2NUM(0x87BB));
    rb_define_const(*pmROGL, "GL_OUTPUT_TEXTURE_COORD31_EXT", UINT2NUM(0x87BC));
    rb_define_const(*pmROGL, "GL_OUTPUT_FOG_EXT", UINT2NUM(0x87BD));
    rb_define_const(*pmROGL, "GL_SCALAR_EXT", UINT2NUM(0x87BE));
    rb_define_const(*pmROGL, "GL_VECTOR_EXT", UINT2NUM(0x87BF));
    rb_define_const(*pmROGL, "GL_MATRIX_EXT", UINT2NUM(0x87C0));
    rb_define_const(*pmROGL, "GL_VARIANT_EXT", UINT2NUM(0x87C1));
    rb_define_const(*pmROGL, "GL_INVARIANT_EXT", UINT2NUM(0x87C2));
    rb_define_const(*pmROGL, "GL_LOCAL_CONSTANT_EXT", UINT2NUM(0x87C3));
    rb_define_const(*pmROGL, "GL_LOCAL_EXT", UINT2NUM(0x87C4));
    rb_define_const(*pmROGL, "GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT", UINT2NUM(0x87C5));
    rb_define_const(*pmROGL, "GL_MAX_VERTEX_SHADER_VARIANTS_EXT", UINT2NUM(0x87C6));
    rb_define_const(*pmROGL, "GL_MAX_VERTEX_SHADER_INVARIANTS_EXT", UINT2NUM(0x87C7));
    rb_define_const(*pmROGL, "GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT", UINT2NUM(0x87C8));
    rb_define_const(*pmROGL, "GL_MAX_VERTEX_SHADER_LOCALS_EXT", UINT2NUM(0x87C9));
    rb_define_const(*pmROGL, "GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT", UINT2NUM(0x87CA));
    rb_define_const(*pmROGL, "GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT", UINT2NUM(0x87CB));
    rb_define_const(*pmROGL, "GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT", UINT2NUM(0x87CC));
    rb_define_const(*pmROGL, "GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT", UINT2NUM(0x87CD));
    rb_define_const(*pmROGL, "GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT", UINT2NUM(0x87CE));
    rb_define_const(*pmROGL, "GL_VERTEX_SHADER_INSTRUCTIONS_EXT", UINT2NUM(0x87CF));
    rb_define_const(*pmROGL, "GL_VERTEX_SHADER_VARIANTS_EXT", UINT2NUM(0x87D0));
    rb_define_const(*pmROGL, "GL_VERTEX_SHADER_INVARIANTS_EXT", UINT2NUM(0x87D1));
    rb_define_const(*pmROGL, "GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT", UINT2NUM(0x87D2));
    rb_define_const(*pmROGL, "GL_VERTEX_SHADER_LOCALS_EXT", UINT2NUM(0x87D3));
    rb_define_const(*pmROGL, "GL_VERTEX_SHADER_OPTIMIZED_EXT", UINT2NUM(0x87D4));
    rb_define_const(*pmROGL, "GL_X_EXT", UINT2NUM(0x87D5));
    rb_define_const(*pmROGL, "GL_Y_EXT", UINT2NUM(0x87D6));
    rb_define_const(*pmROGL, "GL_Z_EXT", UINT2NUM(0x87D7));
    rb_define_const(*pmROGL, "GL_W_EXT", UINT2NUM(0x87D8));
    rb_define_const(*pmROGL, "GL_NEGATIVE_X_EXT", UINT2NUM(0x87D9));
    rb_define_const(*pmROGL, "GL_NEGATIVE_Y_EXT", UINT2NUM(0x87DA));
    rb_define_const(*pmROGL, "GL_NEGATIVE_Z_EXT", UINT2NUM(0x87DB));
    rb_define_const(*pmROGL, "GL_NEGATIVE_W_EXT", UINT2NUM(0x87DC));
    rb_define_const(*pmROGL, "GL_ZERO_EXT", UINT2NUM(0x87DD));
    rb_define_const(*pmROGL, "GL_ONE_EXT", UINT2NUM(0x87DE));
    rb_define_const(*pmROGL, "GL_NEGATIVE_ONE_EXT", UINT2NUM(0x87DF));
    rb_define_const(*pmROGL, "GL_NORMALIZED_RANGE_EXT", UINT2NUM(0x87E0));
    rb_define_const(*pmROGL, "GL_FULL_RANGE_EXT", UINT2NUM(0x87E1));
    rb_define_const(*pmROGL, "GL_CURRENT_VERTEX_EXT", UINT2NUM(0x87E2));
    rb_define_const(*pmROGL, "GL_MVP_MATRIX_EXT", UINT2NUM(0x87E3));
    rb_define_const(*pmROGL, "GL_VARIANT_VALUE_EXT", UINT2NUM(0x87E4));
    rb_define_const(*pmROGL, "GL_VARIANT_DATATYPE_EXT", UINT2NUM(0x87E5));
    rb_define_const(*pmROGL, "GL_VARIANT_ARRAY_STRIDE_EXT", UINT2NUM(0x87E6));
    rb_define_const(*pmROGL, "GL_VARIANT_ARRAY_TYPE_EXT", UINT2NUM(0x87E7));
    rb_define_const(*pmROGL, "GL_VARIANT_ARRAY_EXT", UINT2NUM(0x87E8));
    rb_define_const(*pmROGL, "GL_VARIANT_ARRAY_POINTER_EXT", UINT2NUM(0x87E9));
    rb_define_const(*pmROGL, "GL_INVARIANT_VALUE_EXT", UINT2NUM(0x87EA));
    rb_define_const(*pmROGL, "GL_INVARIANT_DATATYPE_EXT", UINT2NUM(0x87EB));
    rb_define_const(*pmROGL, "GL_LOCAL_CONSTANT_VALUE_EXT", UINT2NUM(0x87EC));
    rb_define_const(*pmROGL, "GL_LOCAL_CONSTANT_DATATYPE_EXT", UINT2NUM(0x87ED));
    rb_define_const(*pmROGL, "GL_MODELVIEW0_STACK_DEPTH_EXT", UINT2NUM(0x0BA3));
    rb_define_const(*pmROGL, "GL_MODELVIEW1_STACK_DEPTH_EXT", UINT2NUM(0x8502));
    rb_define_const(*pmROGL, "GL_MODELVIEW0_MATRIX_EXT", UINT2NUM(0x0BA6));
    rb_define_const(*pmROGL, "GL_MODELVIEW1_MATRIX_EXT", UINT2NUM(0x8506));
    rb_define_const(*pmROGL, "GL_VERTEX_WEIGHTING_EXT", UINT2NUM(0x8509));
    rb_define_const(*pmROGL, "GL_MODELVIEW0_EXT", UINT2NUM(0x1700));
    rb_define_const(*pmROGL, "GL_MODELVIEW1_EXT", UINT2NUM(0x850A));
    rb_define_const(*pmROGL, "GL_CURRENT_VERTEX_WEIGHT_EXT", UINT2NUM(0x850B));
    rb_define_const(*pmROGL, "GL_VERTEX_WEIGHT_ARRAY_EXT", UINT2NUM(0x850C));
    rb_define_const(*pmROGL, "GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT", UINT2NUM(0x850D));
    rb_define_const(*pmROGL, "GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT", UINT2NUM(0x850E));
    rb_define_const(*pmROGL, "GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT", UINT2NUM(0x850F));
    rb_define_const(*pmROGL, "GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT", UINT2NUM(0x8510));
    rb_define_const(*pmROGL, "GL_SYNC_X11_FENCE_EXT", UINT2NUM(0x90E1));
    rb_define_const(*pmROGL, "GL_IGNORE_BORDER_HP", UINT2NUM(0x8150));
    rb_define_const(*pmROGL, "GL_CONSTANT_BORDER_HP", UINT2NUM(0x8151));
    rb_define_const(*pmROGL, "GL_REPLICATE_BORDER_HP", UINT2NUM(0x8153));
    rb_define_const(*pmROGL, "GL_CONVOLUTION_BORDER_COLOR_HP", UINT2NUM(0x8154));
    rb_define_const(*pmROGL, "GL_IMAGE_SCALE_X_HP", UINT2NUM(0x8155));
    rb_define_const(*pmROGL, "GL_IMAGE_SCALE_Y_HP", UINT2NUM(0x8156));
    rb_define_const(*pmROGL, "GL_IMAGE_TRANSLATE_X_HP", UINT2NUM(0x8157));
    rb_define_const(*pmROGL, "GL_IMAGE_TRANSLATE_Y_HP", UINT2NUM(0x8158));
    rb_define_const(*pmROGL, "GL_IMAGE_ROTATE_ANGLE_HP", UINT2NUM(0x8159));
    rb_define_const(*pmROGL, "GL_IMAGE_ROTATE_ORIGIN_X_HP", UINT2NUM(0x815A));
    rb_define_const(*pmROGL, "GL_IMAGE_ROTATE_ORIGIN_Y_HP", UINT2NUM(0x815B));
    rb_define_const(*pmROGL, "GL_IMAGE_MAG_FILTER_HP", UINT2NUM(0x815C));
    rb_define_const(*pmROGL, "GL_IMAGE_MIN_FILTER_HP", UINT2NUM(0x815D));
    rb_define_const(*pmROGL, "GL_IMAGE_CUBIC_WEIGHT_HP", UINT2NUM(0x815E));
    rb_define_const(*pmROGL, "GL_CUBIC_HP", UINT2NUM(0x815F));
    rb_define_const(*pmROGL, "GL_AVERAGE_HP", UINT2NUM(0x8160));
    rb_define_const(*pmROGL, "GL_IMAGE_TRANSFORM_2D_HP", UINT2NUM(0x8161));
    rb_define_const(*pmROGL, "GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP", UINT2NUM(0x8162));
    rb_define_const(*pmROGL, "GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP", UINT2NUM(0x8163));
    rb_define_const(*pmROGL, "GL_OCCLUSION_TEST_HP", UINT2NUM(0x8165));
    rb_define_const(*pmROGL, "GL_OCCLUSION_TEST_RESULT_HP", UINT2NUM(0x8166));
    rb_define_const(*pmROGL, "GL_TEXTURE_LIGHTING_MODE_HP", UINT2NUM(0x8167));
    rb_define_const(*pmROGL, "GL_TEXTURE_POST_SPECULAR_HP", UINT2NUM(0x8168));
    rb_define_const(*pmROGL, "GL_TEXTURE_PRE_SPECULAR_HP", UINT2NUM(0x8169));
    rb_define_const(*pmROGL, "GL_CULL_VERTEX_IBM", UINT2NUM(103050));
    rb_define_const(*pmROGL, "GL_RASTER_POSITION_UNCLIPPED_IBM", UINT2NUM(0x19262));
    rb_define_const(*pmROGL, "GL_ALL_STATIC_DATA_IBM", UINT2NUM(103060));
    rb_define_const(*pmROGL, "GL_STATIC_VERTEX_ARRAY_IBM", UINT2NUM(103061));
    rb_define_const(*pmROGL, "GL_MIRRORED_REPEAT_IBM", UINT2NUM(0x8370));
    rb_define_const(*pmROGL, "GL_VERTEX_ARRAY_LIST_IBM", UINT2NUM(103070));
    rb_define_const(*pmROGL, "GL_NORMAL_ARRAY_LIST_IBM", UINT2NUM(103071));
    rb_define_const(*pmROGL, "GL_COLOR_ARRAY_LIST_IBM", UINT2NUM(103072));
    rb_define_const(*pmROGL, "GL_INDEX_ARRAY_LIST_IBM", UINT2NUM(103073));
    rb_define_const(*pmROGL, "GL_TEXTURE_COORD_ARRAY_LIST_IBM", UINT2NUM(103074));
    rb_define_const(*pmROGL, "GL_EDGE_FLAG_ARRAY_LIST_IBM", UINT2NUM(103075));
    rb_define_const(*pmROGL, "GL_FOG_COORDINATE_ARRAY_LIST_IBM", UINT2NUM(103076));
    rb_define_const(*pmROGL, "GL_SECONDARY_COLOR_ARRAY_LIST_IBM", UINT2NUM(103077));
    rb_define_const(*pmROGL, "GL_VERTEX_ARRAY_LIST_STRIDE_IBM", UINT2NUM(103080));
    rb_define_const(*pmROGL, "GL_NORMAL_ARRAY_LIST_STRIDE_IBM", UINT2NUM(103081));
    rb_define_const(*pmROGL, "GL_COLOR_ARRAY_LIST_STRIDE_IBM", UINT2NUM(103082));
    rb_define_const(*pmROGL, "GL_INDEX_ARRAY_LIST_STRIDE_IBM", UINT2NUM(103083));
    rb_define_const(*pmROGL, "GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM", UINT2NUM(103084));
    rb_define_const(*pmROGL, "GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM", UINT2NUM(103085));
    rb_define_const(*pmROGL, "GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM", UINT2NUM(103086));
    rb_define_const(*pmROGL, "GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM", UINT2NUM(103087));
    rb_define_const(*pmROGL, "GL_RED_MIN_CLAMP_INGR", UINT2NUM(0x8560));
    rb_define_const(*pmROGL, "GL_GREEN_MIN_CLAMP_INGR", UINT2NUM(0x8561));
    rb_define_const(*pmROGL, "GL_BLUE_MIN_CLAMP_INGR", UINT2NUM(0x8562));
    rb_define_const(*pmROGL, "GL_ALPHA_MIN_CLAMP_INGR", UINT2NUM(0x8563));
    rb_define_const(*pmROGL, "GL_RED_MAX_CLAMP_INGR", UINT2NUM(0x8564));
    rb_define_const(*pmROGL, "GL_GREEN_MAX_CLAMP_INGR", UINT2NUM(0x8565));
    rb_define_const(*pmROGL, "GL_BLUE_MAX_CLAMP_INGR", UINT2NUM(0x8566));
    rb_define_const(*pmROGL, "GL_ALPHA_MAX_CLAMP_INGR", UINT2NUM(0x8567));
    rb_define_const(*pmROGL, "GL_INTERLACE_READ_INGR", UINT2NUM(0x8568));
    rb_define_const(*pmROGL, "GL_TEXTURE_MEMORY_LAYOUT_INTEL", UINT2NUM(0x83FF));
    rb_define_const(*pmROGL, "GL_LAYOUT_DEFAULT_INTEL", UINT2NUM(0));
    rb_define_const(*pmROGL, "GL_LAYOUT_LINEAR_INTEL", UINT2NUM(1));
    rb_define_const(*pmROGL, "GL_LAYOUT_LINEAR_CPU_CACHED_INTEL", UINT2NUM(2));
    rb_define_const(*pmROGL, "GL_PARALLEL_ARRAYS_INTEL", UINT2NUM(0x83F4));
    rb_define_const(*pmROGL, "GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL", UINT2NUM(0x83F5));
    rb_define_const(*pmROGL, "GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL", UINT2NUM(0x83F6));
    rb_define_const(*pmROGL, "GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL", UINT2NUM(0x83F7));
    rb_define_const(*pmROGL, "GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL", UINT2NUM(0x83F8));
    rb_define_const(*pmROGL, "GL_PERFQUERY_SINGLE_CONTEXT_INTEL", UINT2NUM(0x00000000));
    rb_define_const(*pmROGL, "GL_PERFQUERY_GLOBAL_CONTEXT_INTEL", UINT2NUM(0x00000001));
    rb_define_const(*pmROGL, "GL_PERFQUERY_WAIT_INTEL", UINT2NUM(0x83FB));
    rb_define_const(*pmROGL, "GL_PERFQUERY_FLUSH_INTEL", UINT2NUM(0x83FA));
    rb_define_const(*pmROGL, "GL_PERFQUERY_DONOT_FLUSH_INTEL", UINT2NUM(0x83F9));
    rb_define_const(*pmROGL, "GL_PERFQUERY_COUNTER_EVENT_INTEL", UINT2NUM(0x94F0));
    rb_define_const(*pmROGL, "GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL", UINT2NUM(0x94F1));
    rb_define_const(*pmROGL, "GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL", UINT2NUM(0x94F2));
    rb_define_const(*pmROGL, "GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL", UINT2NUM(0x94F3));
    rb_define_const(*pmROGL, "GL_PERFQUERY_COUNTER_RAW_INTEL", UINT2NUM(0x94F4));
    rb_define_const(*pmROGL, "GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL", UINT2NUM(0x94F5));
    rb_define_const(*pmROGL, "GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL", UINT2NUM(0x94F8));
    rb_define_const(*pmROGL, "GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL", UINT2NUM(0x94F9));
    rb_define_const(*pmROGL, "GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL", UINT2NUM(0x94FA));
    rb_define_const(*pmROGL, "GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL", UINT2NUM(0x94FB));
    rb_define_const(*pmROGL, "GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL", UINT2NUM(0x94FC));
    rb_define_const(*pmROGL, "GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL", UINT2NUM(0x94FD));
    rb_define_const(*pmROGL, "GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL", UINT2NUM(0x94FE));
    rb_define_const(*pmROGL, "GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL", UINT2NUM(0x94FF));
    rb_define_const(*pmROGL, "GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL", UINT2NUM(0x9500));
    rb_define_const(*pmROGL, "GL_MULTIPLY_KHR", UINT2NUM(0x9294));
    rb_define_const(*pmROGL, "GL_SCREEN_KHR", UINT2NUM(0x9295));
    rb_define_const(*pmROGL, "GL_OVERLAY_KHR", UINT2NUM(0x9296));
    rb_define_const(*pmROGL, "GL_DARKEN_KHR", UINT2NUM(0x9297));
    rb_define_const(*pmROGL, "GL_LIGHTEN_KHR", UINT2NUM(0x9298));
    rb_define_const(*pmROGL, "GL_COLORDODGE_KHR", UINT2NUM(0x9299));
    rb_define_const(*pmROGL, "GL_COLORBURN_KHR", UINT2NUM(0x929A));
    rb_define_const(*pmROGL, "GL_HARDLIGHT_KHR", UINT2NUM(0x929B));
    rb_define_const(*pmROGL, "GL_SOFTLIGHT_KHR", UINT2NUM(0x929C));
    rb_define_const(*pmROGL, "GL_DIFFERENCE_KHR", UINT2NUM(0x929E));
    rb_define_const(*pmROGL, "GL_EXCLUSION_KHR", UINT2NUM(0x92A0));
    rb_define_const(*pmROGL, "GL_HSL_HUE_KHR", UINT2NUM(0x92AD));
    rb_define_const(*pmROGL, "GL_HSL_SATURATION_KHR", UINT2NUM(0x92AE));
    rb_define_const(*pmROGL, "GL_HSL_COLOR_KHR", UINT2NUM(0x92AF));
    rb_define_const(*pmROGL, "GL_HSL_LUMINOSITY_KHR", UINT2NUM(0x92B0));
    rb_define_const(*pmROGL, "GL_BLEND_ADVANCED_COHERENT_KHR", UINT2NUM(0x9285));
    rb_define_const(*pmROGL, "GL_CONTEXT_RELEASE_BEHAVIOR_KHR", UINT2NUM(0x82FB));
    rb_define_const(*pmROGL, "GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH_KHR", UINT2NUM(0x82FC));
    rb_define_const(*pmROGL, "GL_DEBUG_OUTPUT_SYNCHRONOUS_KHR", UINT2NUM(0x8242));
    rb_define_const(*pmROGL, "GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHR", UINT2NUM(0x8243));
    rb_define_const(*pmROGL, "GL_DEBUG_CALLBACK_FUNCTION_KHR", UINT2NUM(0x8244));
    rb_define_const(*pmROGL, "GL_DEBUG_CALLBACK_USER_PARAM_KHR", UINT2NUM(0x8245));
    rb_define_const(*pmROGL, "GL_DEBUG_SOURCE_API_KHR", UINT2NUM(0x8246));
    rb_define_const(*pmROGL, "GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHR", UINT2NUM(0x8247));
    rb_define_const(*pmROGL, "GL_DEBUG_SOURCE_SHADER_COMPILER_KHR", UINT2NUM(0x8248));
    rb_define_const(*pmROGL, "GL_DEBUG_SOURCE_THIRD_PARTY_KHR", UINT2NUM(0x8249));
    rb_define_const(*pmROGL, "GL_DEBUG_SOURCE_APPLICATION_KHR", UINT2NUM(0x824A));
    rb_define_const(*pmROGL, "GL_DEBUG_SOURCE_OTHER_KHR", UINT2NUM(0x824B));
    rb_define_const(*pmROGL, "GL_DEBUG_TYPE_ERROR_KHR", UINT2NUM(0x824C));
    rb_define_const(*pmROGL, "GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR", UINT2NUM(0x824D));
    rb_define_const(*pmROGL, "GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR", UINT2NUM(0x824E));
    rb_define_const(*pmROGL, "GL_DEBUG_TYPE_PORTABILITY_KHR", UINT2NUM(0x824F));
    rb_define_const(*pmROGL, "GL_DEBUG_TYPE_PERFORMANCE_KHR", UINT2NUM(0x8250));
    rb_define_const(*pmROGL, "GL_DEBUG_TYPE_OTHER_KHR", UINT2NUM(0x8251));
    rb_define_const(*pmROGL, "GL_DEBUG_TYPE_MARKER_KHR", UINT2NUM(0x8268));
    rb_define_const(*pmROGL, "GL_DEBUG_TYPE_PUSH_GROUP_KHR", UINT2NUM(0x8269));
    rb_define_const(*pmROGL, "GL_DEBUG_TYPE_POP_GROUP_KHR", UINT2NUM(0x826A));
    rb_define_const(*pmROGL, "GL_DEBUG_SEVERITY_NOTIFICATION_KHR", UINT2NUM(0x826B));
    rb_define_const(*pmROGL, "GL_MAX_DEBUG_GROUP_STACK_DEPTH_KHR", UINT2NUM(0x826C));
    rb_define_const(*pmROGL, "GL_DEBUG_GROUP_STACK_DEPTH_KHR", UINT2NUM(0x826D));
    rb_define_const(*pmROGL, "GL_BUFFER_KHR", UINT2NUM(0x82E0));
    rb_define_const(*pmROGL, "GL_SHADER_KHR", UINT2NUM(0x82E1));
    rb_define_const(*pmROGL, "GL_PROGRAM_KHR", UINT2NUM(0x82E2));
    rb_define_const(*pmROGL, "GL_VERTEX_ARRAY_KHR", UINT2NUM(0x8074));
    rb_define_const(*pmROGL, "GL_QUERY_KHR", UINT2NUM(0x82E3));
    rb_define_const(*pmROGL, "GL_PROGRAM_PIPELINE_KHR", UINT2NUM(0x82E4));
    rb_define_const(*pmROGL, "GL_SAMPLER_KHR", UINT2NUM(0x82E6));
    rb_define_const(*pmROGL, "GL_MAX_LABEL_LENGTH_KHR", UINT2NUM(0x82E8));
    rb_define_const(*pmROGL, "GL_MAX_DEBUG_MESSAGE_LENGTH_KHR", UINT2NUM(0x9143));
    rb_define_const(*pmROGL, "GL_MAX_DEBUG_LOGGED_MESSAGES_KHR", UINT2NUM(0x9144));
    rb_define_const(*pmROGL, "GL_DEBUG_LOGGED_MESSAGES_KHR", UINT2NUM(0x9145));
    rb_define_const(*pmROGL, "GL_DEBUG_SEVERITY_HIGH_KHR", UINT2NUM(0x9146));
    rb_define_const(*pmROGL, "GL_DEBUG_SEVERITY_MEDIUM_KHR", UINT2NUM(0x9147));
    rb_define_const(*pmROGL, "GL_DEBUG_SEVERITY_LOW_KHR", UINT2NUM(0x9148));
    rb_define_const(*pmROGL, "GL_DEBUG_OUTPUT_KHR", UINT2NUM(0x92E0));
    rb_define_const(*pmROGL, "GL_CONTEXT_FLAG_DEBUG_BIT_KHR", UINT2NUM(0x00000002));
    rb_define_const(*pmROGL, "GL_STACK_OVERFLOW_KHR", UINT2NUM(0x0503));
    rb_define_const(*pmROGL, "GL_STACK_UNDERFLOW_KHR", UINT2NUM(0x0504));
    rb_define_const(*pmROGL, "GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR", UINT2NUM(0x00000008));
    rb_define_const(*pmROGL, "GL_CONTEXT_ROBUST_ACCESS", UINT2NUM(0x90F3));
    rb_define_const(*pmROGL, "GL_CONTEXT_ROBUST_ACCESS_KHR", UINT2NUM(0x90F3));
    rb_define_const(*pmROGL, "GL_LOSE_CONTEXT_ON_RESET_KHR", UINT2NUM(0x8252));
    rb_define_const(*pmROGL, "GL_GUILTY_CONTEXT_RESET_KHR", UINT2NUM(0x8253));
    rb_define_const(*pmROGL, "GL_INNOCENT_CONTEXT_RESET_KHR", UINT2NUM(0x8254));
    rb_define_const(*pmROGL, "GL_UNKNOWN_CONTEXT_RESET_KHR", UINT2NUM(0x8255));
    rb_define_const(*pmROGL, "GL_RESET_NOTIFICATION_STRATEGY_KHR", UINT2NUM(0x8256));
    rb_define_const(*pmROGL, "GL_NO_RESET_NOTIFICATION_KHR", UINT2NUM(0x8261));
    rb_define_const(*pmROGL, "GL_CONTEXT_LOST_KHR", UINT2NUM(0x0507));
    rb_define_const(*pmROGL, "GL_TEXTURE_1D_STACK_MESAX", UINT2NUM(0x8759));
    rb_define_const(*pmROGL, "GL_TEXTURE_2D_STACK_MESAX", UINT2NUM(0x875A));
    rb_define_const(*pmROGL, "GL_PROXY_TEXTURE_1D_STACK_MESAX", UINT2NUM(0x875B));
    rb_define_const(*pmROGL, "GL_PROXY_TEXTURE_2D_STACK_MESAX", UINT2NUM(0x875C));
    rb_define_const(*pmROGL, "GL_TEXTURE_1D_STACK_BINDING_MESAX", UINT2NUM(0x875D));
    rb_define_const(*pmROGL, "GL_TEXTURE_2D_STACK_BINDING_MESAX", UINT2NUM(0x875E));
    rb_define_const(*pmROGL, "GL_PACK_INVERT_MESA", UINT2NUM(0x8758));
    rb_define_const(*pmROGL, "GL_UNSIGNED_SHORT_8_8_MESA", UINT2NUM(0x85BA));
    rb_define_const(*pmROGL, "GL_UNSIGNED_SHORT_8_8_REV_MESA", UINT2NUM(0x85BB));
    rb_define_const(*pmROGL, "GL_YCBCR_MESA", UINT2NUM(0x8757));
    rb_define_const(*pmROGL, "GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX", UINT2NUM(0x9047));
    rb_define_const(*pmROGL, "GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX", UINT2NUM(0x9048));
    rb_define_const(*pmROGL, "GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX", UINT2NUM(0x9049));
    rb_define_const(*pmROGL, "GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX", UINT2NUM(0x904A));
    rb_define_const(*pmROGL, "GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX", UINT2NUM(0x904B));
    rb_define_const(*pmROGL, "GL_BLEND_OVERLAP_NV", UINT2NUM(0x9281));
    rb_define_const(*pmROGL, "GL_BLEND_PREMULTIPLIED_SRC_NV", UINT2NUM(0x9280));
    rb_define_const(*pmROGL, "GL_BLUE_NV", UINT2NUM(0x1905));
    rb_define_const(*pmROGL, "GL_COLORBURN_NV", UINT2NUM(0x929A));
    rb_define_const(*pmROGL, "GL_COLORDODGE_NV", UINT2NUM(0x9299));
    rb_define_const(*pmROGL, "GL_CONJOINT_NV", UINT2NUM(0x9284));
    rb_define_const(*pmROGL, "GL_CONTRAST_NV", UINT2NUM(0x92A1));
    rb_define_const(*pmROGL, "GL_DARKEN_NV", UINT2NUM(0x9297));
    rb_define_const(*pmROGL, "GL_DIFFERENCE_NV", UINT2NUM(0x929E));
    rb_define_const(*pmROGL, "GL_DISJOINT_NV", UINT2NUM(0x9283));
    rb_define_const(*pmROGL, "GL_DST_ATOP_NV", UINT2NUM(0x928F));
    rb_define_const(*pmROGL, "GL_DST_IN_NV", UINT2NUM(0x928B));
    rb_define_const(*pmROGL, "GL_DST_NV", UINT2NUM(0x9287));
    rb_define_const(*pmROGL, "GL_DST_OUT_NV", UINT2NUM(0x928D));
    rb_define_const(*pmROGL, "GL_DST_OVER_NV", UINT2NUM(0x9289));
    rb_define_const(*pmROGL, "GL_EXCLUSION_NV", UINT2NUM(0x92A0));
    rb_define_const(*pmROGL, "GL_GREEN_NV", UINT2NUM(0x1904));
    rb_define_const(*pmROGL, "GL_HARDLIGHT_NV", UINT2NUM(0x929B));
    rb_define_const(*pmROGL, "GL_HARDMIX_NV", UINT2NUM(0x92A9));
    rb_define_const(*pmROGL, "GL_HSL_COLOR_NV", UINT2NUM(0x92AF));
    rb_define_const(*pmROGL, "GL_HSL_HUE_NV", UINT2NUM(0x92AD));
    rb_define_const(*pmROGL, "GL_HSL_LUMINOSITY_NV", UINT2NUM(0x92B0));
    rb_define_const(*pmROGL, "GL_HSL_SATURATION_NV", UINT2NUM(0x92AE));
    rb_define_const(*pmROGL, "GL_INVERT_OVG_NV", UINT2NUM(0x92B4));
    rb_define_const(*pmROGL, "GL_INVERT_RGB_NV", UINT2NUM(0x92A3));
    rb_define_const(*pmROGL, "GL_LIGHTEN_NV", UINT2NUM(0x9298));
    rb_define_const(*pmROGL, "GL_LINEARBURN_NV", UINT2NUM(0x92A5));
    rb_define_const(*pmROGL, "GL_LINEARDODGE_NV", UINT2NUM(0x92A4));
    rb_define_const(*pmROGL, "GL_LINEARLIGHT_NV", UINT2NUM(0x92A7));
    rb_define_const(*pmROGL, "GL_MINUS_CLAMPED_NV", UINT2NUM(0x92B3));
    rb_define_const(*pmROGL, "GL_MINUS_NV", UINT2NUM(0x929F));
    rb_define_const(*pmROGL, "GL_MULTIPLY_NV", UINT2NUM(0x9294));
    rb_define_const(*pmROGL, "GL_OVERLAY_NV", UINT2NUM(0x9296));
    rb_define_const(*pmROGL, "GL_PINLIGHT_NV", UINT2NUM(0x92A8));
    rb_define_const(*pmROGL, "GL_PLUS_CLAMPED_ALPHA_NV", UINT2NUM(0x92B2));
    rb_define_const(*pmROGL, "GL_PLUS_CLAMPED_NV", UINT2NUM(0x92B1));
    rb_define_const(*pmROGL, "GL_PLUS_DARKER_NV", UINT2NUM(0x9292));
    rb_define_const(*pmROGL, "GL_PLUS_NV", UINT2NUM(0x9291));
    rb_define_const(*pmROGL, "GL_RED_NV", UINT2NUM(0x1903));
    rb_define_const(*pmROGL, "GL_SCREEN_NV", UINT2NUM(0x9295));
    rb_define_const(*pmROGL, "GL_SOFTLIGHT_NV", UINT2NUM(0x929C));
    rb_define_const(*pmROGL, "GL_SRC_ATOP_NV", UINT2NUM(0x928E));
    rb_define_const(*pmROGL, "GL_SRC_IN_NV", UINT2NUM(0x928A));
    rb_define_const(*pmROGL, "GL_SRC_NV", UINT2NUM(0x9286));
    rb_define_const(*pmROGL, "GL_SRC_OUT_NV", UINT2NUM(0x928C));
    rb_define_const(*pmROGL, "GL_SRC_OVER_NV", UINT2NUM(0x9288));
    rb_define_const(*pmROGL, "GL_UNCORRELATED_NV", UINT2NUM(0x9282));
    rb_define_const(*pmROGL, "GL_VIVIDLIGHT_NV", UINT2NUM(0x92A6));
    rb_define_const(*pmROGL, "GL_XOR_NV", UINT2NUM(0x1506));
    rb_define_const(*pmROGL, "GL_BLEND_ADVANCED_COHERENT_NV", UINT2NUM(0x9285));
    rb_define_const(*pmROGL, "GL_TERMINATE_SEQUENCE_COMMAND_NV", UINT2NUM(0x0000));
    rb_define_const(*pmROGL, "GL_NOP_COMMAND_NV", UINT2NUM(0x0001));
    rb_define_const(*pmROGL, "GL_DRAW_ELEMENTS_COMMAND_NV", UINT2NUM(0x0002));
    rb_define_const(*pmROGL, "GL_DRAW_ARRAYS_COMMAND_NV", UINT2NUM(0x0003));
    rb_define_const(*pmROGL, "GL_DRAW_ELEMENTS_STRIP_COMMAND_NV", UINT2NUM(0x0004));
    rb_define_const(*pmROGL, "GL_DRAW_ARRAYS_STRIP_COMMAND_NV", UINT2NUM(0x0005));
    rb_define_const(*pmROGL, "GL_DRAW_ELEMENTS_INSTANCED_COMMAND_NV", UINT2NUM(0x0006));
    rb_define_const(*pmROGL, "GL_DRAW_ARRAYS_INSTANCED_COMMAND_NV", UINT2NUM(0x0007));
    rb_define_const(*pmROGL, "GL_ELEMENT_ADDRESS_COMMAND_NV", UINT2NUM(0x0008));
    rb_define_const(*pmROGL, "GL_ATTRIBUTE_ADDRESS_COMMAND_NV", UINT2NUM(0x0009));
    rb_define_const(*pmROGL, "GL_UNIFORM_ADDRESS_COMMAND_NV", UINT2NUM(0x000A));
    rb_define_const(*pmROGL, "GL_BLEND_COLOR_COMMAND_NV", UINT2NUM(0x000B));
    rb_define_const(*pmROGL, "GL_STENCIL_REF_COMMAND_NV", UINT2NUM(0x000C));
    rb_define_const(*pmROGL, "GL_LINE_WIDTH_COMMAND_NV", UINT2NUM(0x000D));
    rb_define_const(*pmROGL, "GL_POLYGON_OFFSET_COMMAND_NV", UINT2NUM(0x000E));
    rb_define_const(*pmROGL, "GL_ALPHA_REF_COMMAND_NV", UINT2NUM(0x000F));
    rb_define_const(*pmROGL, "GL_VIEWPORT_COMMAND_NV", UINT2NUM(0x0010));
    rb_define_const(*pmROGL, "GL_SCISSOR_COMMAND_NV", UINT2NUM(0x0011));
    rb_define_const(*pmROGL, "GL_FRONT_FACE_COMMAND_NV", UINT2NUM(0x0012));
    rb_define_const(*pmROGL, "GL_COMPUTE_PROGRAM_NV", UINT2NUM(0x90FB));
    rb_define_const(*pmROGL, "GL_COMPUTE_PROGRAM_PARAMETER_BUFFER_NV", UINT2NUM(0x90FC));
    rb_define_const(*pmROGL, "GL_QUERY_WAIT_NV", UINT2NUM(0x8E13));
    rb_define_const(*pmROGL, "GL_QUERY_NO_WAIT_NV", UINT2NUM(0x8E14));
    rb_define_const(*pmROGL, "GL_QUERY_BY_REGION_WAIT_NV", UINT2NUM(0x8E15));
    rb_define_const(*pmROGL, "GL_QUERY_BY_REGION_NO_WAIT_NV", UINT2NUM(0x8E16));
    rb_define_const(*pmROGL, "GL_CONSERVATIVE_RASTERIZATION_NV", UINT2NUM(0x9346));
    rb_define_const(*pmROGL, "GL_SUBPIXEL_PRECISION_BIAS_X_BITS_NV", UINT2NUM(0x9347));
    rb_define_const(*pmROGL, "GL_SUBPIXEL_PRECISION_BIAS_Y_BITS_NV", UINT2NUM(0x9348));
    rb_define_const(*pmROGL, "GL_MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV", UINT2NUM(0x9349));
    rb_define_const(*pmROGL, "GL_CONSERVATIVE_RASTER_DILATE_NV", UINT2NUM(0x9379));
    rb_define_const(*pmROGL, "GL_CONSERVATIVE_RASTER_DILATE_RANGE_NV", UINT2NUM(0x937A));
    rb_define_const(*pmROGL, "GL_CONSERVATIVE_RASTER_DILATE_GRANULARITY_NV", UINT2NUM(0x937B));
    rb_define_const(*pmROGL, "GL_DEPTH_STENCIL_TO_RGBA_NV", UINT2NUM(0x886E));
    rb_define_const(*pmROGL, "GL_DEPTH_STENCIL_TO_BGRA_NV", UINT2NUM(0x886F));
    rb_define_const(*pmROGL, "GL_MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV", UINT2NUM(0x90D0));
    rb_define_const(*pmROGL, "GL_MAX_DEEP_3D_TEXTURE_DEPTH_NV", UINT2NUM(0x90D1));
    rb_define_const(*pmROGL, "GL_DEPTH_COMPONENT32F_NV", UINT2NUM(0x8DAB));
    rb_define_const(*pmROGL, "GL_DEPTH32F_STENCIL8_NV", UINT2NUM(0x8DAC));
    rb_define_const(*pmROGL, "GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV", UINT2NUM(0x8DAD));
    rb_define_const(*pmROGL, "GL_DEPTH_BUFFER_FLOAT_MODE_NV", UINT2NUM(0x8DAF));
    rb_define_const(*pmROGL, "GL_DEPTH_CLAMP_NV", UINT2NUM(0x864F));
    rb_define_const(*pmROGL, "GL_EVAL_2D_NV", UINT2NUM(0x86C0));
    rb_define_const(*pmROGL, "GL_EVAL_TRIANGULAR_2D_NV", UINT2NUM(0x86C1));
    rb_define_const(*pmROGL, "GL_MAP_TESSELLATION_NV", UINT2NUM(0x86C2));
    rb_define_const(*pmROGL, "GL_MAP_ATTRIB_U_ORDER_NV", UINT2NUM(0x86C3));
    rb_define_const(*pmROGL, "GL_MAP_ATTRIB_V_ORDER_NV", UINT2NUM(0x86C4));
    rb_define_const(*pmROGL, "GL_EVAL_FRACTIONAL_TESSELLATION_NV", UINT2NUM(0x86C5));
    rb_define_const(*pmROGL, "GL_EVAL_VERTEX_ATTRIB0_NV", UINT2NUM(0x86C6));
    rb_define_const(*pmROGL, "GL_EVAL_VERTEX_ATTRIB1_NV", UINT2NUM(0x86C7));
    rb_define_const(*pmROGL, "GL_EVAL_VERTEX_ATTRIB2_NV", UINT2NUM(0x86C8));
    rb_define_const(*pmROGL, "GL_EVAL_VERTEX_ATTRIB3_NV", UINT2NUM(0x86C9));
    rb_define_const(*pmROGL, "GL_EVAL_VERTEX_ATTRIB4_NV", UINT2NUM(0x86CA));
    rb_define_const(*pmROGL, "GL_EVAL_VERTEX_ATTRIB5_NV", UINT2NUM(0x86CB));
    rb_define_const(*pmROGL, "GL_EVAL_VERTEX_ATTRIB6_NV", UINT2NUM(0x86CC));
    rb_define_const(*pmROGL, "GL_EVAL_VERTEX_ATTRIB7_NV", UINT2NUM(0x86CD));
    rb_define_const(*pmROGL, "GL_EVAL_VERTEX_ATTRIB8_NV", UINT2NUM(0x86CE));
    rb_define_const(*pmROGL, "GL_EVAL_VERTEX_ATTRIB9_NV", UINT2NUM(0x86CF));
    rb_define_const(*pmROGL, "GL_EVAL_VERTEX_ATTRIB10_NV", UINT2NUM(0x86D0));
    rb_define_const(*pmROGL, "GL_EVAL_VERTEX_ATTRIB11_NV", UINT2NUM(0x86D1));
    rb_define_const(*pmROGL, "GL_EVAL_VERTEX_ATTRIB12_NV", UINT2NUM(0x86D2));
    rb_define_const(*pmROGL, "GL_EVAL_VERTEX_ATTRIB13_NV", UINT2NUM(0x86D3));
    rb_define_const(*pmROGL, "GL_EVAL_VERTEX_ATTRIB14_NV", UINT2NUM(0x86D4));
    rb_define_const(*pmROGL, "GL_EVAL_VERTEX_ATTRIB15_NV", UINT2NUM(0x86D5));
    rb_define_const(*pmROGL, "GL_MAX_MAP_TESSELLATION_NV", UINT2NUM(0x86D6));
    rb_define_const(*pmROGL, "GL_MAX_RATIONAL_EVAL_ORDER_NV", UINT2NUM(0x86D7));
    rb_define_const(*pmROGL, "GL_SAMPLE_POSITION_NV", UINT2NUM(0x8E50));
    rb_define_const(*pmROGL, "GL_SAMPLE_MASK_NV", UINT2NUM(0x8E51));
    rb_define_const(*pmROGL, "GL_SAMPLE_MASK_VALUE_NV", UINT2NUM(0x8E52));
    rb_define_const(*pmROGL, "GL_TEXTURE_BINDING_RENDERBUFFER_NV", UINT2NUM(0x8E53));
    rb_define_const(*pmROGL, "GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV", UINT2NUM(0x8E54));
    rb_define_const(*pmROGL, "GL_TEXTURE_RENDERBUFFER_NV", UINT2NUM(0x8E55));
    rb_define_const(*pmROGL, "GL_SAMPLER_RENDERBUFFER_NV", UINT2NUM(0x8E56));
    rb_define_const(*pmROGL, "GL_INT_SAMPLER_RENDERBUFFER_NV", UINT2NUM(0x8E57));
    rb_define_const(*pmROGL, "GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV", UINT2NUM(0x8E58));
    rb_define_const(*pmROGL, "GL_MAX_SAMPLE_MASK_WORDS_NV", UINT2NUM(0x8E59));
    rb_define_const(*pmROGL, "GL_ALL_COMPLETED_NV", UINT2NUM(0x84F2));
    rb_define_const(*pmROGL, "GL_FENCE_STATUS_NV", UINT2NUM(0x84F3));
    rb_define_const(*pmROGL, "GL_FENCE_CONDITION_NV", UINT2NUM(0x84F4));
    rb_define_const(*pmROGL, "GL_FILL_RECTANGLE_NV", UINT2NUM(0x933C));
    rb_define_const(*pmROGL, "GL_FLOAT_R_NV", UINT2NUM(0x8880));
    rb_define_const(*pmROGL, "GL_FLOAT_RG_NV", UINT2NUM(0x8881));
    rb_define_const(*pmROGL, "GL_FLOAT_RGB_NV", UINT2NUM(0x8882));
    rb_define_const(*pmROGL, "GL_FLOAT_RGBA_NV", UINT2NUM(0x8883));
    rb_define_const(*pmROGL, "GL_FLOAT_R16_NV", UINT2NUM(0x8884));
    rb_define_const(*pmROGL, "GL_FLOAT_R32_NV", UINT2NUM(0x8885));
    rb_define_const(*pmROGL, "GL_FLOAT_RG16_NV", UINT2NUM(0x8886));
    rb_define_const(*pmROGL, "GL_FLOAT_RG32_NV", UINT2NUM(0x8887));
    rb_define_const(*pmROGL, "GL_FLOAT_RGB16_NV", UINT2NUM(0x8888));
    rb_define_const(*pmROGL, "GL_FLOAT_RGB32_NV", UINT2NUM(0x8889));
    rb_define_const(*pmROGL, "GL_FLOAT_RGBA16_NV", UINT2NUM(0x888A));
    rb_define_const(*pmROGL, "GL_FLOAT_RGBA32_NV", UINT2NUM(0x888B));
    rb_define_const(*pmROGL, "GL_TEXTURE_FLOAT_COMPONENTS_NV", UINT2NUM(0x888C));
    rb_define_const(*pmROGL, "GL_FLOAT_CLEAR_COLOR_VALUE_NV", UINT2NUM(0x888D));
    rb_define_const(*pmROGL, "GL_FLOAT_RGBA_MODE_NV", UINT2NUM(0x888E));
    rb_define_const(*pmROGL, "GL_FOG_DISTANCE_MODE_NV", UINT2NUM(0x855A));
    rb_define_const(*pmROGL, "GL_EYE_RADIAL_NV", UINT2NUM(0x855B));
    rb_define_const(*pmROGL, "GL_EYE_PLANE_ABSOLUTE_NV", UINT2NUM(0x855C));
    rb_define_const(*pmROGL, "GL_FRAGMENT_COVERAGE_TO_COLOR_NV", UINT2NUM(0x92DD));
    rb_define_const(*pmROGL, "GL_FRAGMENT_COVERAGE_COLOR_NV", UINT2NUM(0x92DE));
    rb_define_const(*pmROGL, "GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV", UINT2NUM(0x8868));
    rb_define_const(*pmROGL, "GL_FRAGMENT_PROGRAM_NV", UINT2NUM(0x8870));
    rb_define_const(*pmROGL, "GL_MAX_TEXTURE_COORDS_NV", UINT2NUM(0x8871));
    rb_define_const(*pmROGL, "GL_MAX_TEXTURE_IMAGE_UNITS_NV", UINT2NUM(0x8872));
    rb_define_const(*pmROGL, "GL_FRAGMENT_PROGRAM_BINDING_NV", UINT2NUM(0x8873));
    rb_define_const(*pmROGL, "GL_PROGRAM_ERROR_STRING_NV", UINT2NUM(0x8874));
    rb_define_const(*pmROGL, "GL_MAX_PROGRAM_IF_DEPTH_NV", UINT2NUM(0x88F6));
    rb_define_const(*pmROGL, "GL_MAX_PROGRAM_LOOP_DEPTH_NV", UINT2NUM(0x88F7));
    rb_define_const(*pmROGL, "GL_MAX_PROGRAM_LOOP_COUNT_NV", UINT2NUM(0x88F8));
    rb_define_const(*pmROGL, "GL_COVERAGE_MODULATION_TABLE_NV", UINT2NUM(0x9331));
    rb_define_const(*pmROGL, "GL_DEPTH_SAMPLES_NV", UINT2NUM(0x932D));
    rb_define_const(*pmROGL, "GL_STENCIL_SAMPLES_NV", UINT2NUM(0x932E));
    rb_define_const(*pmROGL, "GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV", UINT2NUM(0x932F));
    rb_define_const(*pmROGL, "GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV", UINT2NUM(0x9330));
    rb_define_const(*pmROGL, "GL_COVERAGE_MODULATION_NV", UINT2NUM(0x9332));
    rb_define_const(*pmROGL, "GL_COVERAGE_MODULATION_TABLE_SIZE_NV", UINT2NUM(0x9333));
    rb_define_const(*pmROGL, "GL_RENDERBUFFER_COVERAGE_SAMPLES_NV", UINT2NUM(0x8CAB));
    rb_define_const(*pmROGL, "GL_RENDERBUFFER_COLOR_SAMPLES_NV", UINT2NUM(0x8E10));
    rb_define_const(*pmROGL, "GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV", UINT2NUM(0x8E11));
    rb_define_const(*pmROGL, "GL_MULTISAMPLE_COVERAGE_MODES_NV", UINT2NUM(0x8E12));
    rb_define_const(*pmROGL, "GL_GEOMETRY_PROGRAM_NV", UINT2NUM(0x8C26));
    rb_define_const(*pmROGL, "GL_MAX_PROGRAM_OUTPUT_VERTICES_NV", UINT2NUM(0x8C27));
    rb_define_const(*pmROGL, "GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV", UINT2NUM(0x8C28));
    rb_define_const(*pmROGL, "GL_MIN_PROGRAM_TEXEL_OFFSET_NV", UINT2NUM(0x8904));
    rb_define_const(*pmROGL, "GL_MAX_PROGRAM_TEXEL_OFFSET_NV", UINT2NUM(0x8905));
    rb_define_const(*pmROGL, "GL_PROGRAM_ATTRIB_COMPONENTS_NV", UINT2NUM(0x8906));
    rb_define_const(*pmROGL, "GL_PROGRAM_RESULT_COMPONENTS_NV", UINT2NUM(0x8907));
    rb_define_const(*pmROGL, "GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV", UINT2NUM(0x8908));
    rb_define_const(*pmROGL, "GL_MAX_PROGRAM_RESULT_COMPONENTS_NV", UINT2NUM(0x8909));
    rb_define_const(*pmROGL, "GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV", UINT2NUM(0x8DA5));
    rb_define_const(*pmROGL, "GL_MAX_PROGRAM_GENERIC_RESULTS_NV", UINT2NUM(0x8DA6));
    rb_define_const(*pmROGL, "GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV", UINT2NUM(0x8E5A));
    rb_define_const(*pmROGL, "GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV", UINT2NUM(0x8E5B));
    rb_define_const(*pmROGL, "GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV", UINT2NUM(0x8E5C));
    rb_define_const(*pmROGL, "GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV", UINT2NUM(0x8E5D));
    rb_define_const(*pmROGL, "GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV", UINT2NUM(0x8E5E));
    rb_define_const(*pmROGL, "GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV", UINT2NUM(0x8E5F));
    rb_define_const(*pmROGL, "GL_MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV", UINT2NUM(0x8F44));
    rb_define_const(*pmROGL, "GL_MAX_PROGRAM_SUBROUTINE_NUM_NV", UINT2NUM(0x8F45));
    rb_define_const(*pmROGL, "GL_HALF_FLOAT_NV", UINT2NUM(0x140B));
    rb_define_const(*pmROGL, "GL_MULTISAMPLES_NV", UINT2NUM(0x9371));
    rb_define_const(*pmROGL, "GL_SUPERSAMPLE_SCALE_X_NV", UINT2NUM(0x9372));
    rb_define_const(*pmROGL, "GL_SUPERSAMPLE_SCALE_Y_NV", UINT2NUM(0x9373));
    rb_define_const(*pmROGL, "GL_CONFORMANT_NV", UINT2NUM(0x9374));
    rb_define_const(*pmROGL, "GL_MAX_SHININESS_NV", UINT2NUM(0x8504));
    rb_define_const(*pmROGL, "GL_MAX_SPOT_EXPONENT_NV", UINT2NUM(0x8505));
    rb_define_const(*pmROGL, "GL_MULTISAMPLE_FILTER_HINT_NV", UINT2NUM(0x8534));
    rb_define_const(*pmROGL, "GL_PIXEL_COUNTER_BITS_NV", UINT2NUM(0x8864));
    rb_define_const(*pmROGL, "GL_CURRENT_OCCLUSION_QUERY_ID_NV", UINT2NUM(0x8865));
    rb_define_const(*pmROGL, "GL_PIXEL_COUNT_NV", UINT2NUM(0x8866));
    rb_define_const(*pmROGL, "GL_PIXEL_COUNT_AVAILABLE_NV", UINT2NUM(0x8867));
    rb_define_const(*pmROGL, "GL_DEPTH_STENCIL_NV", UINT2NUM(0x84F9));
    rb_define_const(*pmROGL, "GL_UNSIGNED_INT_24_8_NV", UINT2NUM(0x84FA));
    rb_define_const(*pmROGL, "GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV", UINT2NUM(0x8DA0));
    rb_define_const(*pmROGL, "GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV", UINT2NUM(0x8DA1));
    rb_define_const(*pmROGL, "GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV", UINT2NUM(0x8DA2));
    rb_define_const(*pmROGL, "GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV", UINT2NUM(0x8DA3));
    rb_define_const(*pmROGL, "GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV", UINT2NUM(0x8DA4));
    rb_define_const(*pmROGL, "GL_PATH_FORMAT_SVG_NV", UINT2NUM(0x9070));
    rb_define_const(*pmROGL, "GL_PATH_FORMAT_PS_NV", UINT2NUM(0x9071));
    rb_define_const(*pmROGL, "GL_STANDARD_FONT_NAME_NV", UINT2NUM(0x9072));
    rb_define_const(*pmROGL, "GL_SYSTEM_FONT_NAME_NV", UINT2NUM(0x9073));
    rb_define_const(*pmROGL, "GL_FILE_NAME_NV", UINT2NUM(0x9074));
    rb_define_const(*pmROGL, "GL_PATH_STROKE_WIDTH_NV", UINT2NUM(0x9075));
    rb_define_const(*pmROGL, "GL_PATH_END_CAPS_NV", UINT2NUM(0x9076));
    rb_define_const(*pmROGL, "GL_PATH_INITIAL_END_CAP_NV", UINT2NUM(0x9077));
    rb_define_const(*pmROGL, "GL_PATH_TERMINAL_END_CAP_NV", UINT2NUM(0x9078));
    rb_define_const(*pmROGL, "GL_PATH_JOIN_STYLE_NV", UINT2NUM(0x9079));
    rb_define_const(*pmROGL, "GL_PATH_MITER_LIMIT_NV", UINT2NUM(0x907A));
    rb_define_const(*pmROGL, "GL_PATH_DASH_CAPS_NV", UINT2NUM(0x907B));
    rb_define_const(*pmROGL, "GL_PATH_INITIAL_DASH_CAP_NV", UINT2NUM(0x907C));
    rb_define_const(*pmROGL, "GL_PATH_TERMINAL_DASH_CAP_NV", UINT2NUM(0x907D));
    rb_define_const(*pmROGL, "GL_PATH_DASH_OFFSET_NV", UINT2NUM(0x907E));
    rb_define_const(*pmROGL, "GL_PATH_CLIENT_LENGTH_NV", UINT2NUM(0x907F));
    rb_define_const(*pmROGL, "GL_PATH_FILL_MODE_NV", UINT2NUM(0x9080));
    rb_define_const(*pmROGL, "GL_PATH_FILL_MASK_NV", UINT2NUM(0x9081));
    rb_define_const(*pmROGL, "GL_PATH_FILL_COVER_MODE_NV", UINT2NUM(0x9082));
    rb_define_const(*pmROGL, "GL_PATH_STROKE_COVER_MODE_NV", UINT2NUM(0x9083));
    rb_define_const(*pmROGL, "GL_PATH_STROKE_MASK_NV", UINT2NUM(0x9084));
    rb_define_const(*pmROGL, "GL_COUNT_UP_NV", UINT2NUM(0x9088));
    rb_define_const(*pmROGL, "GL_COUNT_DOWN_NV", UINT2NUM(0x9089));
    rb_define_const(*pmROGL, "GL_PATH_OBJECT_BOUNDING_BOX_NV", UINT2NUM(0x908A));
    rb_define_const(*pmROGL, "GL_CONVEX_HULL_NV", UINT2NUM(0x908B));
    rb_define_const(*pmROGL, "GL_BOUNDING_BOX_NV", UINT2NUM(0x908D));
    rb_define_const(*pmROGL, "GL_TRANSLATE_X_NV", UINT2NUM(0x908E));
    rb_define_const(*pmROGL, "GL_TRANSLATE_Y_NV", UINT2NUM(0x908F));
    rb_define_const(*pmROGL, "GL_TRANSLATE_2D_NV", UINT2NUM(0x9090));
    rb_define_const(*pmROGL, "GL_TRANSLATE_3D_NV", UINT2NUM(0x9091));
    rb_define_const(*pmROGL, "GL_AFFINE_2D_NV", UINT2NUM(0x9092));
    rb_define_const(*pmROGL, "GL_AFFINE_3D_NV", UINT2NUM(0x9094));
    rb_define_const(*pmROGL, "GL_TRANSPOSE_AFFINE_2D_NV", UINT2NUM(0x9096));
    rb_define_const(*pmROGL, "GL_TRANSPOSE_AFFINE_3D_NV", UINT2NUM(0x9098));
    rb_define_const(*pmROGL, "GL_UTF8_NV", UINT2NUM(0x909A));
    rb_define_const(*pmROGL, "GL_UTF16_NV", UINT2NUM(0x909B));
    rb_define_const(*pmROGL, "GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV", UINT2NUM(0x909C));
    rb_define_const(*pmROGL, "GL_PATH_COMMAND_COUNT_NV", UINT2NUM(0x909D));
    rb_define_const(*pmROGL, "GL_PATH_COORD_COUNT_NV", UINT2NUM(0x909E));
    rb_define_const(*pmROGL, "GL_PATH_DASH_ARRAY_COUNT_NV", UINT2NUM(0x909F));
    rb_define_const(*pmROGL, "GL_PATH_COMPUTED_LENGTH_NV", UINT2NUM(0x90A0));
    rb_define_const(*pmROGL, "GL_PATH_FILL_BOUNDING_BOX_NV", UINT2NUM(0x90A1));
    rb_define_const(*pmROGL, "GL_PATH_STROKE_BOUNDING_BOX_NV", UINT2NUM(0x90A2));
    rb_define_const(*pmROGL, "GL_SQUARE_NV", UINT2NUM(0x90A3));
    rb_define_const(*pmROGL, "GL_ROUND_NV", UINT2NUM(0x90A4));
    rb_define_const(*pmROGL, "GL_TRIANGULAR_NV", UINT2NUM(0x90A5));
    rb_define_const(*pmROGL, "GL_BEVEL_NV", UINT2NUM(0x90A6));
    rb_define_const(*pmROGL, "GL_MITER_REVERT_NV", UINT2NUM(0x90A7));
    rb_define_const(*pmROGL, "GL_MITER_TRUNCATE_NV", UINT2NUM(0x90A8));
    rb_define_const(*pmROGL, "GL_SKIP_MISSING_GLYPH_NV", UINT2NUM(0x90A9));
    rb_define_const(*pmROGL, "GL_USE_MISSING_GLYPH_NV", UINT2NUM(0x90AA));
    rb_define_const(*pmROGL, "GL_PATH_ERROR_POSITION_NV", UINT2NUM(0x90AB));
    rb_define_const(*pmROGL, "GL_ACCUM_ADJACENT_PAIRS_NV", UINT2NUM(0x90AD));
    rb_define_const(*pmROGL, "GL_ADJACENT_PAIRS_NV", UINT2NUM(0x90AE));
    rb_define_const(*pmROGL, "GL_FIRST_TO_REST_NV", UINT2NUM(0x90AF));
    rb_define_const(*pmROGL, "GL_PATH_GEN_MODE_NV", UINT2NUM(0x90B0));
    rb_define_const(*pmROGL, "GL_PATH_GEN_COEFF_NV", UINT2NUM(0x90B1));
    rb_define_const(*pmROGL, "GL_PATH_GEN_COMPONENTS_NV", UINT2NUM(0x90B3));
    rb_define_const(*pmROGL, "GL_PATH_STENCIL_FUNC_NV", UINT2NUM(0x90B7));
    rb_define_const(*pmROGL, "GL_PATH_STENCIL_REF_NV", UINT2NUM(0x90B8));
    rb_define_const(*pmROGL, "GL_PATH_STENCIL_VALUE_MASK_NV", UINT2NUM(0x90B9));
    rb_define_const(*pmROGL, "GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV", UINT2NUM(0x90BD));
    rb_define_const(*pmROGL, "GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV", UINT2NUM(0x90BE));
    rb_define_const(*pmROGL, "GL_PATH_COVER_DEPTH_FUNC_NV", UINT2NUM(0x90BF));
    rb_define_const(*pmROGL, "GL_PATH_DASH_OFFSET_RESET_NV", UINT2NUM(0x90B4));
    rb_define_const(*pmROGL, "GL_MOVE_TO_RESETS_NV", UINT2NUM(0x90B5));
    rb_define_const(*pmROGL, "GL_MOVE_TO_CONTINUES_NV", UINT2NUM(0x90B6));
    rb_define_const(*pmROGL, "GL_CLOSE_PATH_NV", UINT2NUM(0x00));
    rb_define_const(*pmROGL, "GL_MOVE_TO_NV", UINT2NUM(0x02));
    rb_define_const(*pmROGL, "GL_RELATIVE_MOVE_TO_NV", UINT2NUM(0x03));
    rb_define_const(*pmROGL, "GL_LINE_TO_NV", UINT2NUM(0x04));
    rb_define_const(*pmROGL, "GL_RELATIVE_LINE_TO_NV", UINT2NUM(0x05));
    rb_define_const(*pmROGL, "GL_HORIZONTAL_LINE_TO_NV", UINT2NUM(0x06));
    rb_define_const(*pmROGL, "GL_RELATIVE_HORIZONTAL_LINE_TO_NV", UINT2NUM(0x07));
    rb_define_const(*pmROGL, "GL_VERTICAL_LINE_TO_NV", UINT2NUM(0x08));
    rb_define_const(*pmROGL, "GL_RELATIVE_VERTICAL_LINE_TO_NV", UINT2NUM(0x09));
    rb_define_const(*pmROGL, "GL_QUADRATIC_CURVE_TO_NV", UINT2NUM(0x0A));
    rb_define_const(*pmROGL, "GL_RELATIVE_QUADRATIC_CURVE_TO_NV", UINT2NUM(0x0B));
    rb_define_const(*pmROGL, "GL_CUBIC_CURVE_TO_NV", UINT2NUM(0x0C));
    rb_define_const(*pmROGL, "GL_RELATIVE_CUBIC_CURVE_TO_NV", UINT2NUM(0x0D));
    rb_define_const(*pmROGL, "GL_SMOOTH_QUADRATIC_CURVE_TO_NV", UINT2NUM(0x0E));
    rb_define_const(*pmROGL, "GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV", UINT2NUM(0x0F));
    rb_define_const(*pmROGL, "GL_SMOOTH_CUBIC_CURVE_TO_NV", UINT2NUM(0x10));
    rb_define_const(*pmROGL, "GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV", UINT2NUM(0x11));
    rb_define_const(*pmROGL, "GL_SMALL_CCW_ARC_TO_NV", UINT2NUM(0x12));
    rb_define_const(*pmROGL, "GL_RELATIVE_SMALL_CCW_ARC_TO_NV", UINT2NUM(0x13));
    rb_define_const(*pmROGL, "GL_SMALL_CW_ARC_TO_NV", UINT2NUM(0x14));
    rb_define_const(*pmROGL, "GL_RELATIVE_SMALL_CW_ARC_TO_NV", UINT2NUM(0x15));
    rb_define_const(*pmROGL, "GL_LARGE_CCW_ARC_TO_NV", UINT2NUM(0x16));
    rb_define_const(*pmROGL, "GL_RELATIVE_LARGE_CCW_ARC_TO_NV", UINT2NUM(0x17));
    rb_define_const(*pmROGL, "GL_LARGE_CW_ARC_TO_NV", UINT2NUM(0x18));
    rb_define_const(*pmROGL, "GL_RELATIVE_LARGE_CW_ARC_TO_NV", UINT2NUM(0x19));
    rb_define_const(*pmROGL, "GL_RESTART_PATH_NV", UINT2NUM(0xF0));
    rb_define_const(*pmROGL, "GL_DUP_FIRST_CUBIC_CURVE_TO_NV", UINT2NUM(0xF2));
    rb_define_const(*pmROGL, "GL_DUP_LAST_CUBIC_CURVE_TO_NV", UINT2NUM(0xF4));
    rb_define_const(*pmROGL, "GL_RECT_NV", UINT2NUM(0xF6));
    rb_define_const(*pmROGL, "GL_CIRCULAR_CCW_ARC_TO_NV", UINT2NUM(0xF8));
    rb_define_const(*pmROGL, "GL_CIRCULAR_CW_ARC_TO_NV", UINT2NUM(0xFA));
    rb_define_const(*pmROGL, "GL_CIRCULAR_TANGENT_ARC_TO_NV", UINT2NUM(0xFC));
    rb_define_const(*pmROGL, "GL_ARC_TO_NV", UINT2NUM(0xFE));
    rb_define_const(*pmROGL, "GL_RELATIVE_ARC_TO_NV", UINT2NUM(0xFF));
    rb_define_const(*pmROGL, "GL_BOLD_BIT_NV", UINT2NUM(0x01));
    rb_define_const(*pmROGL, "GL_ITALIC_BIT_NV", UINT2NUM(0x02));
    rb_define_const(*pmROGL, "GL_GLYPH_WIDTH_BIT_NV", UINT2NUM(0x01));
    rb_define_const(*pmROGL, "GL_GLYPH_HEIGHT_BIT_NV", UINT2NUM(0x02));
    rb_define_const(*pmROGL, "GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV", UINT2NUM(0x04));
    rb_define_const(*pmROGL, "GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV", UINT2NUM(0x08));
    rb_define_const(*pmROGL, "GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV", UINT2NUM(0x10));
    rb_define_const(*pmROGL, "GL_GLYPH_VERTICAL_BEARING_X_BIT_NV", UINT2NUM(0x20));
    rb_define_const(*pmROGL, "GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV", UINT2NUM(0x40));
    rb_define_const(*pmROGL, "GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV", UINT2NUM(0x80));
    rb_define_const(*pmROGL, "GL_GLYPH_HAS_KERNING_BIT_NV", UINT2NUM(0x100));
    rb_define_const(*pmROGL, "GL_FONT_X_MIN_BOUNDS_BIT_NV", UINT2NUM(0x00010000));
    rb_define_const(*pmROGL, "GL_FONT_Y_MIN_BOUNDS_BIT_NV", UINT2NUM(0x00020000));
    rb_define_const(*pmROGL, "GL_FONT_X_MAX_BOUNDS_BIT_NV", UINT2NUM(0x00040000));
    rb_define_const(*pmROGL, "GL_FONT_Y_MAX_BOUNDS_BIT_NV", UINT2NUM(0x00080000));
    rb_define_const(*pmROGL, "GL_FONT_UNITS_PER_EM_BIT_NV", UINT2NUM(0x00100000));
    rb_define_const(*pmROGL, "GL_FONT_ASCENDER_BIT_NV", UINT2NUM(0x00200000));
    rb_define_const(*pmROGL, "GL_FONT_DESCENDER_BIT_NV", UINT2NUM(0x00400000));
    rb_define_const(*pmROGL, "GL_FONT_HEIGHT_BIT_NV", UINT2NUM(0x00800000));
    rb_define_const(*pmROGL, "GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV", UINT2NUM(0x01000000));
    rb_define_const(*pmROGL, "GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV", UINT2NUM(0x02000000));
    rb_define_const(*pmROGL, "GL_FONT_UNDERLINE_POSITION_BIT_NV", UINT2NUM(0x04000000));
    rb_define_const(*pmROGL, "GL_FONT_UNDERLINE_THICKNESS_BIT_NV", UINT2NUM(0x08000000));
    rb_define_const(*pmROGL, "GL_FONT_HAS_KERNING_BIT_NV", UINT2NUM(0x10000000));
    rb_define_const(*pmROGL, "GL_ROUNDED_RECT_NV", UINT2NUM(0xE8));
    rb_define_const(*pmROGL, "GL_RELATIVE_ROUNDED_RECT_NV", UINT2NUM(0xE9));
    rb_define_const(*pmROGL, "GL_ROUNDED_RECT2_NV", UINT2NUM(0xEA));
    rb_define_const(*pmROGL, "GL_RELATIVE_ROUNDED_RECT2_NV", UINT2NUM(0xEB));
    rb_define_const(*pmROGL, "GL_ROUNDED_RECT4_NV", UINT2NUM(0xEC));
    rb_define_const(*pmROGL, "GL_RELATIVE_ROUNDED_RECT4_NV", UINT2NUM(0xED));
    rb_define_const(*pmROGL, "GL_ROUNDED_RECT8_NV", UINT2NUM(0xEE));
    rb_define_const(*pmROGL, "GL_RELATIVE_ROUNDED_RECT8_NV", UINT2NUM(0xEF));
    rb_define_const(*pmROGL, "GL_RELATIVE_RECT_NV", UINT2NUM(0xF7));
    rb_define_const(*pmROGL, "GL_FONT_GLYPHS_AVAILABLE_NV", UINT2NUM(0x9368));
    rb_define_const(*pmROGL, "GL_FONT_TARGET_UNAVAILABLE_NV", UINT2NUM(0x9369));
    rb_define_const(*pmROGL, "GL_FONT_UNAVAILABLE_NV", UINT2NUM(0x936A));
    rb_define_const(*pmROGL, "GL_FONT_UNINTELLIGIBLE_NV", UINT2NUM(0x936B));
    rb_define_const(*pmROGL, "GL_CONIC_CURVE_TO_NV", UINT2NUM(0x1A));
    rb_define_const(*pmROGL, "GL_RELATIVE_CONIC_CURVE_TO_NV", UINT2NUM(0x1B));
    rb_define_const(*pmROGL, "GL_FONT_NUM_GLYPH_INDICES_BIT_NV", UINT2NUM(0x20000000));
    rb_define_const(*pmROGL, "GL_STANDARD_FONT_FORMAT_NV", UINT2NUM(0x936C));
    rb_define_const(*pmROGL, "GL_2_BYTES_NV", UINT2NUM(0x1407));
    rb_define_const(*pmROGL, "GL_3_BYTES_NV", UINT2NUM(0x1408));
    rb_define_const(*pmROGL, "GL_4_BYTES_NV", UINT2NUM(0x1409));
    rb_define_const(*pmROGL, "GL_EYE_LINEAR_NV", UINT2NUM(0x2400));
    rb_define_const(*pmROGL, "GL_OBJECT_LINEAR_NV", UINT2NUM(0x2401));
    rb_define_const(*pmROGL, "GL_CONSTANT_NV", UINT2NUM(0x8576));
    rb_define_const(*pmROGL, "GL_PATH_FOG_GEN_MODE_NV", UINT2NUM(0x90AC));
    rb_define_const(*pmROGL, "GL_PATH_GEN_COLOR_FORMAT_NV", UINT2NUM(0x90B2));
    rb_define_const(*pmROGL, "GL_PATH_PROJECTION_NV", UINT2NUM(0x1701));
    rb_define_const(*pmROGL, "GL_PATH_MODELVIEW_NV", UINT2NUM(0x1700));
    rb_define_const(*pmROGL, "GL_PATH_MODELVIEW_STACK_DEPTH_NV", UINT2NUM(0x0BA3));
    rb_define_const(*pmROGL, "GL_PATH_MODELVIEW_MATRIX_NV", UINT2NUM(0x0BA6));
    rb_define_const(*pmROGL, "GL_PATH_MAX_MODELVIEW_STACK_DEPTH_NV", UINT2NUM(0x0D36));
    rb_define_const(*pmROGL, "GL_PATH_TRANSPOSE_MODELVIEW_MATRIX_NV", UINT2NUM(0x84E3));
    rb_define_const(*pmROGL, "GL_PATH_PROJECTION_STACK_DEPTH_NV", UINT2NUM(0x0BA4));
    rb_define_const(*pmROGL, "GL_PATH_PROJECTION_MATRIX_NV", UINT2NUM(0x0BA7));
    rb_define_const(*pmROGL, "GL_PATH_MAX_PROJECTION_STACK_DEPTH_NV", UINT2NUM(0x0D38));
    rb_define_const(*pmROGL, "GL_PATH_TRANSPOSE_PROJECTION_MATRIX_NV", UINT2NUM(0x84E4));
    rb_define_const(*pmROGL, "GL_FRAGMENT_INPUT_NV", UINT2NUM(0x936D));
    rb_define_const(*pmROGL, "GL_SHARED_EDGE_NV", UINT2NUM(0xC0));
    rb_define_const(*pmROGL, "GL_WRITE_PIXEL_DATA_RANGE_NV", UINT2NUM(0x8878));
    rb_define_const(*pmROGL, "GL_READ_PIXEL_DATA_RANGE_NV", UINT2NUM(0x8879));
    rb_define_const(*pmROGL, "GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV", UINT2NUM(0x887A));
    rb_define_const(*pmROGL, "GL_READ_PIXEL_DATA_RANGE_LENGTH_NV", UINT2NUM(0x887B));
    rb_define_const(*pmROGL, "GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV", UINT2NUM(0x887C));
    rb_define_const(*pmROGL, "GL_READ_PIXEL_DATA_RANGE_POINTER_NV", UINT2NUM(0x887D));
    rb_define_const(*pmROGL, "GL_POINT_SPRITE_NV", UINT2NUM(0x8861));
    rb_define_const(*pmROGL, "GL_COORD_REPLACE_NV", UINT2NUM(0x8862));
    rb_define_const(*pmROGL, "GL_POINT_SPRITE_R_MODE_NV", UINT2NUM(0x8863));
    rb_define_const(*pmROGL, "GL_FRAME_NV", UINT2NUM(0x8E26));
    rb_define_const(*pmROGL, "GL_FIELDS_NV", UINT2NUM(0x8E27));
    rb_define_const(*pmROGL, "GL_CURRENT_TIME_NV", UINT2NUM(0x8E28));
    rb_define_const(*pmROGL, "GL_NUM_FILL_STREAMS_NV", UINT2NUM(0x8E29));
    rb_define_const(*pmROGL, "GL_PRESENT_TIME_NV", UINT2NUM(0x8E2A));
    rb_define_const(*pmROGL, "GL_PRESENT_DURATION_NV", UINT2NUM(0x8E2B));
    rb_define_const(*pmROGL, "GL_PRIMITIVE_RESTART_NV", UINT2NUM(0x8558));
    rb_define_const(*pmROGL, "GL_PRIMITIVE_RESTART_INDEX_NV", UINT2NUM(0x8559));
    rb_define_const(*pmROGL, "GL_REGISTER_COMBINERS_NV", UINT2NUM(0x8522));
    rb_define_const(*pmROGL, "GL_VARIABLE_A_NV", UINT2NUM(0x8523));
    rb_define_const(*pmROGL, "GL_VARIABLE_B_NV", UINT2NUM(0x8524));
    rb_define_const(*pmROGL, "GL_VARIABLE_C_NV", UINT2NUM(0x8525));
    rb_define_const(*pmROGL, "GL_VARIABLE_D_NV", UINT2NUM(0x8526));
    rb_define_const(*pmROGL, "GL_VARIABLE_E_NV", UINT2NUM(0x8527));
    rb_define_const(*pmROGL, "GL_VARIABLE_F_NV", UINT2NUM(0x8528));
    rb_define_const(*pmROGL, "GL_VARIABLE_G_NV", UINT2NUM(0x8529));
    rb_define_const(*pmROGL, "GL_CONSTANT_COLOR0_NV", UINT2NUM(0x852A));
    rb_define_const(*pmROGL, "GL_CONSTANT_COLOR1_NV", UINT2NUM(0x852B));
    rb_define_const(*pmROGL, "GL_SPARE0_NV", UINT2NUM(0x852E));
    rb_define_const(*pmROGL, "GL_SPARE1_NV", UINT2NUM(0x852F));
    rb_define_const(*pmROGL, "GL_DISCARD_NV", UINT2NUM(0x8530));
    rb_define_const(*pmROGL, "GL_E_TIMES_F_NV", UINT2NUM(0x8531));
    rb_define_const(*pmROGL, "GL_SPARE0_PLUS_SECONDARY_COLOR_NV", UINT2NUM(0x8532));
    rb_define_const(*pmROGL, "GL_UNSIGNED_IDENTITY_NV", UINT2NUM(0x8536));
    rb_define_const(*pmROGL, "GL_UNSIGNED_INVERT_NV", UINT2NUM(0x8537));
    rb_define_const(*pmROGL, "GL_EXPAND_NORMAL_NV", UINT2NUM(0x8538));
    rb_define_const(*pmROGL, "GL_EXPAND_NEGATE_NV", UINT2NUM(0x8539));
    rb_define_const(*pmROGL, "GL_HALF_BIAS_NORMAL_NV", UINT2NUM(0x853A));
    rb_define_const(*pmROGL, "GL_HALF_BIAS_NEGATE_NV", UINT2NUM(0x853B));
    rb_define_const(*pmROGL, "GL_SIGNED_IDENTITY_NV", UINT2NUM(0x853C));
    rb_define_const(*pmROGL, "GL_SIGNED_NEGATE_NV", UINT2NUM(0x853D));
    rb_define_const(*pmROGL, "GL_SCALE_BY_TWO_NV", UINT2NUM(0x853E));
    rb_define_const(*pmROGL, "GL_SCALE_BY_FOUR_NV", UINT2NUM(0x853F));
    rb_define_const(*pmROGL, "GL_SCALE_BY_ONE_HALF_NV", UINT2NUM(0x8540));
    rb_define_const(*pmROGL, "GL_BIAS_BY_NEGATIVE_ONE_HALF_NV", UINT2NUM(0x8541));
    rb_define_const(*pmROGL, "GL_COMBINER_INPUT_NV", UINT2NUM(0x8542));
    rb_define_const(*pmROGL, "GL_COMBINER_MAPPING_NV", UINT2NUM(0x8543));
    rb_define_const(*pmROGL, "GL_COMBINER_COMPONENT_USAGE_NV", UINT2NUM(0x8544));
    rb_define_const(*pmROGL, "GL_COMBINER_AB_DOT_PRODUCT_NV", UINT2NUM(0x8545));
    rb_define_const(*pmROGL, "GL_COMBINER_CD_DOT_PRODUCT_NV", UINT2NUM(0x8546));
    rb_define_const(*pmROGL, "GL_COMBINER_MUX_SUM_NV", UINT2NUM(0x8547));
    rb_define_const(*pmROGL, "GL_COMBINER_SCALE_NV", UINT2NUM(0x8548));
    rb_define_const(*pmROGL, "GL_COMBINER_BIAS_NV", UINT2NUM(0x8549));
    rb_define_const(*pmROGL, "GL_COMBINER_AB_OUTPUT_NV", UINT2NUM(0x854A));
    rb_define_const(*pmROGL, "GL_COMBINER_CD_OUTPUT_NV", UINT2NUM(0x854B));
    rb_define_const(*pmROGL, "GL_COMBINER_SUM_OUTPUT_NV", UINT2NUM(0x854C));
    rb_define_const(*pmROGL, "GL_MAX_GENERAL_COMBINERS_NV", UINT2NUM(0x854D));
    rb_define_const(*pmROGL, "GL_NUM_GENERAL_COMBINERS_NV", UINT2NUM(0x854E));
    rb_define_const(*pmROGL, "GL_COLOR_SUM_CLAMP_NV", UINT2NUM(0x854F));
    rb_define_const(*pmROGL, "GL_COMBINER0_NV", UINT2NUM(0x8550));
    rb_define_const(*pmROGL, "GL_COMBINER1_NV", UINT2NUM(0x8551));
    rb_define_const(*pmROGL, "GL_COMBINER2_NV", UINT2NUM(0x8552));
    rb_define_const(*pmROGL, "GL_COMBINER3_NV", UINT2NUM(0x8553));
    rb_define_const(*pmROGL, "GL_COMBINER4_NV", UINT2NUM(0x8554));
    rb_define_const(*pmROGL, "GL_COMBINER5_NV", UINT2NUM(0x8555));
    rb_define_const(*pmROGL, "GL_COMBINER6_NV", UINT2NUM(0x8556));
    rb_define_const(*pmROGL, "GL_COMBINER7_NV", UINT2NUM(0x8557));
    rb_define_const(*pmROGL, "GL_PER_STAGE_CONSTANTS_NV", UINT2NUM(0x8535));
    rb_define_const(*pmROGL, "GL_SAMPLE_LOCATION_SUBPIXEL_BITS_NV", UINT2NUM(0x933D));
    rb_define_const(*pmROGL, "GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV", UINT2NUM(0x933E));
    rb_define_const(*pmROGL, "GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV", UINT2NUM(0x933F));
    rb_define_const(*pmROGL, "GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV", UINT2NUM(0x9340));
    rb_define_const(*pmROGL, "GL_SAMPLE_LOCATION_NV", UINT2NUM(0x8E50));
    rb_define_const(*pmROGL, "GL_PROGRAMMABLE_SAMPLE_LOCATION_NV", UINT2NUM(0x9341));
    rb_define_const(*pmROGL, "GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV", UINT2NUM(0x9342));
    rb_define_const(*pmROGL, "GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV", UINT2NUM(0x9343));
    rb_define_const(*pmROGL, "GL_BUFFER_GPU_ADDRESS_NV", UINT2NUM(0x8F1D));
    rb_define_const(*pmROGL, "GL_GPU_ADDRESS_NV", UINT2NUM(0x8F34));
    rb_define_const(*pmROGL, "GL_MAX_SHADER_BUFFER_ADDRESS_NV", UINT2NUM(0x8F35));
    rb_define_const(*pmROGL, "GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV", UINT2NUM(0x00000010));
    rb_define_const(*pmROGL, "GL_WARP_SIZE_NV", UINT2NUM(0x9339));
    rb_define_const(*pmROGL, "GL_WARPS_PER_SM_NV", UINT2NUM(0x933A));
    rb_define_const(*pmROGL, "GL_SM_COUNT_NV", UINT2NUM(0x933B));
    rb_define_const(*pmROGL, "GL_MAX_PROGRAM_PATCH_ATTRIBS_NV", UINT2NUM(0x86D8));
    rb_define_const(*pmROGL, "GL_TESS_CONTROL_PROGRAM_NV", UINT2NUM(0x891E));
    rb_define_const(*pmROGL, "GL_TESS_EVALUATION_PROGRAM_NV", UINT2NUM(0x891F));
    rb_define_const(*pmROGL, "GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV", UINT2NUM(0x8C74));
    rb_define_const(*pmROGL, "GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV", UINT2NUM(0x8C75));
    rb_define_const(*pmROGL, "GL_EMBOSS_LIGHT_NV", UINT2NUM(0x855D));
    rb_define_const(*pmROGL, "GL_EMBOSS_CONSTANT_NV", UINT2NUM(0x855E));
    rb_define_const(*pmROGL, "GL_EMBOSS_MAP_NV", UINT2NUM(0x855F));
    rb_define_const(*pmROGL, "GL_NORMAL_MAP_NV", UINT2NUM(0x8511));
    rb_define_const(*pmROGL, "GL_REFLECTION_MAP_NV", UINT2NUM(0x8512));
    rb_define_const(*pmROGL, "GL_COMBINE4_NV", UINT2NUM(0x8503));
    rb_define_const(*pmROGL, "GL_SOURCE3_RGB_NV", UINT2NUM(0x8583));
    rb_define_const(*pmROGL, "GL_SOURCE3_ALPHA_NV", UINT2NUM(0x858B));
    rb_define_const(*pmROGL, "GL_OPERAND3_RGB_NV", UINT2NUM(0x8593));
    rb_define_const(*pmROGL, "GL_OPERAND3_ALPHA_NV", UINT2NUM(0x859B));
    rb_define_const(*pmROGL, "GL_TEXTURE_UNSIGNED_REMAP_MODE_NV", UINT2NUM(0x888F));
    rb_define_const(*pmROGL, "GL_TEXTURE_COVERAGE_SAMPLES_NV", UINT2NUM(0x9045));
    rb_define_const(*pmROGL, "GL_TEXTURE_COLOR_SAMPLES_NV", UINT2NUM(0x9046));
    rb_define_const(*pmROGL, "GL_TEXTURE_RECTANGLE_NV", UINT2NUM(0x84F5));
    rb_define_const(*pmROGL, "GL_TEXTURE_BINDING_RECTANGLE_NV", UINT2NUM(0x84F6));
    rb_define_const(*pmROGL, "GL_PROXY_TEXTURE_RECTANGLE_NV", UINT2NUM(0x84F7));
    rb_define_const(*pmROGL, "GL_MAX_RECTANGLE_TEXTURE_SIZE_NV", UINT2NUM(0x84F8));
    rb_define_const(*pmROGL, "GL_OFFSET_TEXTURE_RECTANGLE_NV", UINT2NUM(0x864C));
    rb_define_const(*pmROGL, "GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV", UINT2NUM(0x864D));
    rb_define_const(*pmROGL, "GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV", UINT2NUM(0x864E));
    rb_define_const(*pmROGL, "GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV", UINT2NUM(0x86D9));
    rb_define_const(*pmROGL, "GL_UNSIGNED_INT_S8_S8_8_8_NV", UINT2NUM(0x86DA));
    rb_define_const(*pmROGL, "GL_UNSIGNED_INT_8_8_S8_S8_REV_NV", UINT2NUM(0x86DB));
    rb_define_const(*pmROGL, "GL_DSDT_MAG_INTENSITY_NV", UINT2NUM(0x86DC));
    rb_define_const(*pmROGL, "GL_SHADER_CONSISTENT_NV", UINT2NUM(0x86DD));
    rb_define_const(*pmROGL, "GL_TEXTURE_SHADER_NV", UINT2NUM(0x86DE));
    rb_define_const(*pmROGL, "GL_SHADER_OPERATION_NV", UINT2NUM(0x86DF));
    rb_define_const(*pmROGL, "GL_CULL_MODES_NV", UINT2NUM(0x86E0));
    rb_define_const(*pmROGL, "GL_OFFSET_TEXTURE_MATRIX_NV", UINT2NUM(0x86E1));
    rb_define_const(*pmROGL, "GL_OFFSET_TEXTURE_SCALE_NV", UINT2NUM(0x86E2));
    rb_define_const(*pmROGL, "GL_OFFSET_TEXTURE_BIAS_NV", UINT2NUM(0x86E3));
    rb_define_const(*pmROGL, "GL_OFFSET_TEXTURE_2D_MATRIX_NV", UINT2NUM(0x86E1));
    rb_define_const(*pmROGL, "GL_OFFSET_TEXTURE_2D_SCALE_NV", UINT2NUM(0x86E2));
    rb_define_const(*pmROGL, "GL_OFFSET_TEXTURE_2D_BIAS_NV", UINT2NUM(0x86E3));
    rb_define_const(*pmROGL, "GL_PREVIOUS_TEXTURE_INPUT_NV", UINT2NUM(0x86E4));
    rb_define_const(*pmROGL, "GL_CONST_EYE_NV", UINT2NUM(0x86E5));
    rb_define_const(*pmROGL, "GL_PASS_THROUGH_NV", UINT2NUM(0x86E6));
    rb_define_const(*pmROGL, "GL_CULL_FRAGMENT_NV", UINT2NUM(0x86E7));
    rb_define_const(*pmROGL, "GL_OFFSET_TEXTURE_2D_NV", UINT2NUM(0x86E8));
    rb_define_const(*pmROGL, "GL_DEPENDENT_AR_TEXTURE_2D_NV", UINT2NUM(0x86E9));
    rb_define_const(*pmROGL, "GL_DEPENDENT_GB_TEXTURE_2D_NV", UINT2NUM(0x86EA));
    rb_define_const(*pmROGL, "GL_DOT_PRODUCT_NV", UINT2NUM(0x86EC));
    rb_define_const(*pmROGL, "GL_DOT_PRODUCT_DEPTH_REPLACE_NV", UINT2NUM(0x86ED));
    rb_define_const(*pmROGL, "GL_DOT_PRODUCT_TEXTURE_2D_NV", UINT2NUM(0x86EE));
    rb_define_const(*pmROGL, "GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV", UINT2NUM(0x86F0));
    rb_define_const(*pmROGL, "GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV", UINT2NUM(0x86F1));
    rb_define_const(*pmROGL, "GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV", UINT2NUM(0x86F2));
    rb_define_const(*pmROGL, "GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV", UINT2NUM(0x86F3));
    rb_define_const(*pmROGL, "GL_HILO_NV", UINT2NUM(0x86F4));
    rb_define_const(*pmROGL, "GL_DSDT_NV", UINT2NUM(0x86F5));
    rb_define_const(*pmROGL, "GL_DSDT_MAG_NV", UINT2NUM(0x86F6));
    rb_define_const(*pmROGL, "GL_DSDT_MAG_VIB_NV", UINT2NUM(0x86F7));
    rb_define_const(*pmROGL, "GL_HILO16_NV", UINT2NUM(0x86F8));
    rb_define_const(*pmROGL, "GL_SIGNED_HILO_NV", UINT2NUM(0x86F9));
    rb_define_const(*pmROGL, "GL_SIGNED_HILO16_NV", UINT2NUM(0x86FA));
    rb_define_const(*pmROGL, "GL_SIGNED_RGBA_NV", UINT2NUM(0x86FB));
    rb_define_const(*pmROGL, "GL_SIGNED_RGBA8_NV", UINT2NUM(0x86FC));
    rb_define_const(*pmROGL, "GL_SIGNED_RGB_NV", UINT2NUM(0x86FE));
    rb_define_const(*pmROGL, "GL_SIGNED_RGB8_NV", UINT2NUM(0x86FF));
    rb_define_const(*pmROGL, "GL_SIGNED_LUMINANCE_NV", UINT2NUM(0x8701));
    rb_define_const(*pmROGL, "GL_SIGNED_LUMINANCE8_NV", UINT2NUM(0x8702));
    rb_define_const(*pmROGL, "GL_SIGNED_LUMINANCE_ALPHA_NV", UINT2NUM(0x8703));
    rb_define_const(*pmROGL, "GL_SIGNED_LUMINANCE8_ALPHA8_NV", UINT2NUM(0x8704));
    rb_define_const(*pmROGL, "GL_SIGNED_ALPHA_NV", UINT2NUM(0x8705));
    rb_define_const(*pmROGL, "GL_SIGNED_ALPHA8_NV", UINT2NUM(0x8706));
    rb_define_const(*pmROGL, "GL_SIGNED_INTENSITY_NV", UINT2NUM(0x8707));
    rb_define_const(*pmROGL, "GL_SIGNED_INTENSITY8_NV", UINT2NUM(0x8708));
    rb_define_const(*pmROGL, "GL_DSDT8_NV", UINT2NUM(0x8709));
    rb_define_const(*pmROGL, "GL_DSDT8_MAG8_NV", UINT2NUM(0x870A));
    rb_define_const(*pmROGL, "GL_DSDT8_MAG8_INTENSITY8_NV", UINT2NUM(0x870B));
    rb_define_const(*pmROGL, "GL_SIGNED_RGB_UNSIGNED_ALPHA_NV", UINT2NUM(0x870C));
    rb_define_const(*pmROGL, "GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV", UINT2NUM(0x870D));
    rb_define_const(*pmROGL, "GL_HI_SCALE_NV", UINT2NUM(0x870E));
    rb_define_const(*pmROGL, "GL_LO_SCALE_NV", UINT2NUM(0x870F));
    rb_define_const(*pmROGL, "GL_DS_SCALE_NV", UINT2NUM(0x8710));
    rb_define_const(*pmROGL, "GL_DT_SCALE_NV", UINT2NUM(0x8711));
    rb_define_const(*pmROGL, "GL_MAGNITUDE_SCALE_NV", UINT2NUM(0x8712));
    rb_define_const(*pmROGL, "GL_VIBRANCE_SCALE_NV", UINT2NUM(0x8713));
    rb_define_const(*pmROGL, "GL_HI_BIAS_NV", UINT2NUM(0x8714));
    rb_define_const(*pmROGL, "GL_LO_BIAS_NV", UINT2NUM(0x8715));
    rb_define_const(*pmROGL, "GL_DS_BIAS_NV", UINT2NUM(0x8716));
    rb_define_const(*pmROGL, "GL_DT_BIAS_NV", UINT2NUM(0x8717));
    rb_define_const(*pmROGL, "GL_MAGNITUDE_BIAS_NV", UINT2NUM(0x8718));
    rb_define_const(*pmROGL, "GL_VIBRANCE_BIAS_NV", UINT2NUM(0x8719));
    rb_define_const(*pmROGL, "GL_TEXTURE_BORDER_VALUES_NV", UINT2NUM(0x871A));
    rb_define_const(*pmROGL, "GL_TEXTURE_HI_SIZE_NV", UINT2NUM(0x871B));
    rb_define_const(*pmROGL, "GL_TEXTURE_LO_SIZE_NV", UINT2NUM(0x871C));
    rb_define_const(*pmROGL, "GL_TEXTURE_DS_SIZE_NV", UINT2NUM(0x871D));
    rb_define_const(*pmROGL, "GL_TEXTURE_DT_SIZE_NV", UINT2NUM(0x871E));
    rb_define_const(*pmROGL, "GL_TEXTURE_MAG_SIZE_NV", UINT2NUM(0x871F));
    rb_define_const(*pmROGL, "GL_DOT_PRODUCT_TEXTURE_3D_NV", UINT2NUM(0x86EF));
    rb_define_const(*pmROGL, "GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV", UINT2NUM(0x8850));
    rb_define_const(*pmROGL, "GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV", UINT2NUM(0x8851));
    rb_define_const(*pmROGL, "GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV", UINT2NUM(0x8852));
    rb_define_const(*pmROGL, "GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV", UINT2NUM(0x8853));
    rb_define_const(*pmROGL, "GL_OFFSET_HILO_TEXTURE_2D_NV", UINT2NUM(0x8854));
    rb_define_const(*pmROGL, "GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV", UINT2NUM(0x8855));
    rb_define_const(*pmROGL, "GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV", UINT2NUM(0x8856));
    rb_define_const(*pmROGL, "GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV", UINT2NUM(0x8857));
    rb_define_const(*pmROGL, "GL_DEPENDENT_HILO_TEXTURE_2D_NV", UINT2NUM(0x8858));
    rb_define_const(*pmROGL, "GL_DEPENDENT_RGB_TEXTURE_3D_NV", UINT2NUM(0x8859));
    rb_define_const(*pmROGL, "GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV", UINT2NUM(0x885A));
    rb_define_const(*pmROGL, "GL_DOT_PRODUCT_PASS_THROUGH_NV", UINT2NUM(0x885B));
    rb_define_const(*pmROGL, "GL_DOT_PRODUCT_TEXTURE_1D_NV", UINT2NUM(0x885C));
    rb_define_const(*pmROGL, "GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV", UINT2NUM(0x885D));
    rb_define_const(*pmROGL, "GL_HILO8_NV", UINT2NUM(0x885E));
    rb_define_const(*pmROGL, "GL_SIGNED_HILO8_NV", UINT2NUM(0x885F));
    rb_define_const(*pmROGL, "GL_FORCE_BLUE_TO_ONE_NV", UINT2NUM(0x8860));
    rb_define_const(*pmROGL, "GL_BACK_PRIMARY_COLOR_NV", UINT2NUM(0x8C77));
    rb_define_const(*pmROGL, "GL_BACK_SECONDARY_COLOR_NV", UINT2NUM(0x8C78));
    rb_define_const(*pmROGL, "GL_TEXTURE_COORD_NV", UINT2NUM(0x8C79));
    rb_define_const(*pmROGL, "GL_CLIP_DISTANCE_NV", UINT2NUM(0x8C7A));
    rb_define_const(*pmROGL, "GL_VERTEX_ID_NV", UINT2NUM(0x8C7B));
    rb_define_const(*pmROGL, "GL_PRIMITIVE_ID_NV", UINT2NUM(0x8C7C));
    rb_define_const(*pmROGL, "GL_GENERIC_ATTRIB_NV", UINT2NUM(0x8C7D));
    rb_define_const(*pmROGL, "GL_TRANSFORM_FEEDBACK_ATTRIBS_NV", UINT2NUM(0x8C7E));
    rb_define_const(*pmROGL, "GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV", UINT2NUM(0x8C7F));
    rb_define_const(*pmROGL, "GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV", UINT2NUM(0x8C80));
    rb_define_const(*pmROGL, "GL_ACTIVE_VARYINGS_NV", UINT2NUM(0x8C81));
    rb_define_const(*pmROGL, "GL_ACTIVE_VARYING_MAX_LENGTH_NV", UINT2NUM(0x8C82));
    rb_define_const(*pmROGL, "GL_TRANSFORM_FEEDBACK_VARYINGS_NV", UINT2NUM(0x8C83));
    rb_define_const(*pmROGL, "GL_TRANSFORM_FEEDBACK_BUFFER_START_NV", UINT2NUM(0x8C84));
    rb_define_const(*pmROGL, "GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV", UINT2NUM(0x8C85));
    rb_define_const(*pmROGL, "GL_TRANSFORM_FEEDBACK_RECORD_NV", UINT2NUM(0x8C86));
    rb_define_const(*pmROGL, "GL_PRIMITIVES_GENERATED_NV", UINT2NUM(0x8C87));
    rb_define_const(*pmROGL, "GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV", UINT2NUM(0x8C88));
    rb_define_const(*pmROGL, "GL_RASTERIZER_DISCARD_NV", UINT2NUM(0x8C89));
    rb_define_const(*pmROGL, "GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV", UINT2NUM(0x8C8A));
    rb_define_const(*pmROGL, "GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV", UINT2NUM(0x8C8B));
    rb_define_const(*pmROGL, "GL_INTERLEAVED_ATTRIBS_NV", UINT2NUM(0x8C8C));
    rb_define_const(*pmROGL, "GL_SEPARATE_ATTRIBS_NV", UINT2NUM(0x8C8D));
    rb_define_const(*pmROGL, "GL_TRANSFORM_FEEDBACK_BUFFER_NV", UINT2NUM(0x8C8E));
    rb_define_const(*pmROGL, "GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV", UINT2NUM(0x8C8F));
    rb_define_const(*pmROGL, "GL_LAYER_NV", UINT2NUM(0x8DAA));
    rb_define_const(*pmROGL, "GL_NEXT_BUFFER_NV", UINT2NUM(-2));
    rb_define_const(*pmROGL, "GL_SKIP_COMPONENTS4_NV", UINT2NUM(-3));
    rb_define_const(*pmROGL, "GL_SKIP_COMPONENTS3_NV", UINT2NUM(-4));
    rb_define_const(*pmROGL, "GL_SKIP_COMPONENTS2_NV", UINT2NUM(-5));
    rb_define_const(*pmROGL, "GL_SKIP_COMPONENTS1_NV", UINT2NUM(-6));
    rb_define_const(*pmROGL, "GL_TRANSFORM_FEEDBACK_NV", UINT2NUM(0x8E22));
    rb_define_const(*pmROGL, "GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV", UINT2NUM(0x8E23));
    rb_define_const(*pmROGL, "GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV", UINT2NUM(0x8E24));
    rb_define_const(*pmROGL, "GL_TRANSFORM_FEEDBACK_BINDING_NV", UINT2NUM(0x8E25));
    rb_define_const(*pmROGL, "GL_UNIFORM_BUFFER_UNIFIED_NV", UINT2NUM(0x936E));
    rb_define_const(*pmROGL, "GL_UNIFORM_BUFFER_ADDRESS_NV", UINT2NUM(0x936F));
    rb_define_const(*pmROGL, "GL_UNIFORM_BUFFER_LENGTH_NV", UINT2NUM(0x9370));
    rb_define_const(*pmROGL, "GL_SURFACE_STATE_NV", UINT2NUM(0x86EB));
    rb_define_const(*pmROGL, "GL_SURFACE_REGISTERED_NV", UINT2NUM(0x86FD));
    rb_define_const(*pmROGL, "GL_SURFACE_MAPPED_NV", UINT2NUM(0x8700));
    rb_define_const(*pmROGL, "GL_WRITE_DISCARD_NV", UINT2NUM(0x88BE));
    rb_define_const(*pmROGL, "GL_VERTEX_ARRAY_RANGE_NV", UINT2NUM(0x851D));
    rb_define_const(*pmROGL, "GL_VERTEX_ARRAY_RANGE_LENGTH_NV", UINT2NUM(0x851E));
    rb_define_const(*pmROGL, "GL_VERTEX_ARRAY_RANGE_VALID_NV", UINT2NUM(0x851F));
    rb_define_const(*pmROGL, "GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV", UINT2NUM(0x8520));
    rb_define_const(*pmROGL, "GL_VERTEX_ARRAY_RANGE_POINTER_NV", UINT2NUM(0x8521));
    rb_define_const(*pmROGL, "GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV", UINT2NUM(0x8533));
    rb_define_const(*pmROGL, "GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV", UINT2NUM(0x8F1E));
    rb_define_const(*pmROGL, "GL_ELEMENT_ARRAY_UNIFIED_NV", UINT2NUM(0x8F1F));
    rb_define_const(*pmROGL, "GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV", UINT2NUM(0x8F20));
    rb_define_const(*pmROGL, "GL_VERTEX_ARRAY_ADDRESS_NV", UINT2NUM(0x8F21));
    rb_define_const(*pmROGL, "GL_NORMAL_ARRAY_ADDRESS_NV", UINT2NUM(0x8F22));
    rb_define_const(*pmROGL, "GL_COLOR_ARRAY_ADDRESS_NV", UINT2NUM(0x8F23));
    rb_define_const(*pmROGL, "GL_INDEX_ARRAY_ADDRESS_NV", UINT2NUM(0x8F24));
    rb_define_const(*pmROGL, "GL_TEXTURE_COORD_ARRAY_ADDRESS_NV", UINT2NUM(0x8F25));
    rb_define_const(*pmROGL, "GL_EDGE_FLAG_ARRAY_ADDRESS_NV", UINT2NUM(0x8F26));
    rb_define_const(*pmROGL, "GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV", UINT2NUM(0x8F27));
    rb_define_const(*pmROGL, "GL_FOG_COORD_ARRAY_ADDRESS_NV", UINT2NUM(0x8F28));
    rb_define_const(*pmROGL, "GL_ELEMENT_ARRAY_ADDRESS_NV", UINT2NUM(0x8F29));
    rb_define_const(*pmROGL, "GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV", UINT2NUM(0x8F2A));
    rb_define_const(*pmROGL, "GL_VERTEX_ARRAY_LENGTH_NV", UINT2NUM(0x8F2B));
    rb_define_const(*pmROGL, "GL_NORMAL_ARRAY_LENGTH_NV", UINT2NUM(0x8F2C));
    rb_define_const(*pmROGL, "GL_COLOR_ARRAY_LENGTH_NV", UINT2NUM(0x8F2D));
    rb_define_const(*pmROGL, "GL_INDEX_ARRAY_LENGTH_NV", UINT2NUM(0x8F2E));
    rb_define_const(*pmROGL, "GL_TEXTURE_COORD_ARRAY_LENGTH_NV", UINT2NUM(0x8F2F));
    rb_define_const(*pmROGL, "GL_EDGE_FLAG_ARRAY_LENGTH_NV", UINT2NUM(0x8F30));
    rb_define_const(*pmROGL, "GL_SECONDARY_COLOR_ARRAY_LENGTH_NV", UINT2NUM(0x8F31));
    rb_define_const(*pmROGL, "GL_FOG_COORD_ARRAY_LENGTH_NV", UINT2NUM(0x8F32));
    rb_define_const(*pmROGL, "GL_ELEMENT_ARRAY_LENGTH_NV", UINT2NUM(0x8F33));
    rb_define_const(*pmROGL, "GL_DRAW_INDIRECT_UNIFIED_NV", UINT2NUM(0x8F40));
    rb_define_const(*pmROGL, "GL_DRAW_INDIRECT_ADDRESS_NV", UINT2NUM(0x8F41));
    rb_define_const(*pmROGL, "GL_DRAW_INDIRECT_LENGTH_NV", UINT2NUM(0x8F42));
    rb_define_const(*pmROGL, "GL_VERTEX_PROGRAM_NV", UINT2NUM(0x8620));
    rb_define_const(*pmROGL, "GL_VERTEX_STATE_PROGRAM_NV", UINT2NUM(0x8621));
    rb_define_const(*pmROGL, "GL_ATTRIB_ARRAY_SIZE_NV", UINT2NUM(0x8623));
    rb_define_const(*pmROGL, "GL_ATTRIB_ARRAY_STRIDE_NV", UINT2NUM(0x8624));
    rb_define_const(*pmROGL, "GL_ATTRIB_ARRAY_TYPE_NV", UINT2NUM(0x8625));
    rb_define_const(*pmROGL, "GL_CURRENT_ATTRIB_NV", UINT2NUM(0x8626));
    rb_define_const(*pmROGL, "GL_PROGRAM_LENGTH_NV", UINT2NUM(0x8627));
    rb_define_const(*pmROGL, "GL_PROGRAM_STRING_NV", UINT2NUM(0x8628));
    rb_define_const(*pmROGL, "GL_MODELVIEW_PROJECTION_NV", UINT2NUM(0x8629));
    rb_define_const(*pmROGL, "GL_IDENTITY_NV", UINT2NUM(0x862A));
    rb_define_const(*pmROGL, "GL_INVERSE_NV", UINT2NUM(0x862B));
    rb_define_const(*pmROGL, "GL_TRANSPOSE_NV", UINT2NUM(0x862C));
    rb_define_const(*pmROGL, "GL_INVERSE_TRANSPOSE_NV", UINT2NUM(0x862D));
    rb_define_const(*pmROGL, "GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV", UINT2NUM(0x862E));
    rb_define_const(*pmROGL, "GL_MAX_TRACK_MATRICES_NV", UINT2NUM(0x862F));
    rb_define_const(*pmROGL, "GL_MATRIX0_NV", UINT2NUM(0x8630));
    rb_define_const(*pmROGL, "GL_MATRIX1_NV", UINT2NUM(0x8631));
    rb_define_const(*pmROGL, "GL_MATRIX2_NV", UINT2NUM(0x8632));
    rb_define_const(*pmROGL, "GL_MATRIX3_NV", UINT2NUM(0x8633));
    rb_define_const(*pmROGL, "GL_MATRIX4_NV", UINT2NUM(0x8634));
    rb_define_const(*pmROGL, "GL_MATRIX5_NV", UINT2NUM(0x8635));
    rb_define_const(*pmROGL, "GL_MATRIX6_NV", UINT2NUM(0x8636));
    rb_define_const(*pmROGL, "GL_MATRIX7_NV", UINT2NUM(0x8637));
    rb_define_const(*pmROGL, "GL_CURRENT_MATRIX_STACK_DEPTH_NV", UINT2NUM(0x8640));
    rb_define_const(*pmROGL, "GL_CURRENT_MATRIX_NV", UINT2NUM(0x8641));
    rb_define_const(*pmROGL, "GL_VERTEX_PROGRAM_POINT_SIZE_NV", UINT2NUM(0x8642));
    rb_define_const(*pmROGL, "GL_VERTEX_PROGRAM_TWO_SIDE_NV", UINT2NUM(0x8643));
    rb_define_const(*pmROGL, "GL_PROGRAM_PARAMETER_NV", UINT2NUM(0x8644));
    rb_define_const(*pmROGL, "GL_ATTRIB_ARRAY_POINTER_NV", UINT2NUM(0x8645));
    rb_define_const(*pmROGL, "GL_PROGRAM_TARGET_NV", UINT2NUM(0x8646));
    rb_define_const(*pmROGL, "GL_PROGRAM_RESIDENT_NV", UINT2NUM(0x8647));
    rb_define_const(*pmROGL, "GL_TRACK_MATRIX_NV", UINT2NUM(0x8648));
    rb_define_const(*pmROGL, "GL_TRACK_MATRIX_TRANSFORM_NV", UINT2NUM(0x8649));
    rb_define_const(*pmROGL, "GL_VERTEX_PROGRAM_BINDING_NV", UINT2NUM(0x864A));
    rb_define_const(*pmROGL, "GL_PROGRAM_ERROR_POSITION_NV", UINT2NUM(0x864B));
    rb_define_const(*pmROGL, "GL_VERTEX_ATTRIB_ARRAY0_NV", UINT2NUM(0x8650));
    rb_define_const(*pmROGL, "GL_VERTEX_ATTRIB_ARRAY1_NV", UINT2NUM(0x8651));
    rb_define_const(*pmROGL, "GL_VERTEX_ATTRIB_ARRAY2_NV", UINT2NUM(0x8652));
    rb_define_const(*pmROGL, "GL_VERTEX_ATTRIB_ARRAY3_NV", UINT2NUM(0x8653));
    rb_define_const(*pmROGL, "GL_VERTEX_ATTRIB_ARRAY4_NV", UINT2NUM(0x8654));
    rb_define_const(*pmROGL, "GL_VERTEX_ATTRIB_ARRAY5_NV", UINT2NUM(0x8655));
    rb_define_const(*pmROGL, "GL_VERTEX_ATTRIB_ARRAY6_NV", UINT2NUM(0x8656));
    rb_define_const(*pmROGL, "GL_VERTEX_ATTRIB_ARRAY7_NV", UINT2NUM(0x8657));
    rb_define_const(*pmROGL, "GL_VERTEX_ATTRIB_ARRAY8_NV", UINT2NUM(0x8658));
    rb_define_const(*pmROGL, "GL_VERTEX_ATTRIB_ARRAY9_NV", UINT2NUM(0x8659));
    rb_define_const(*pmROGL, "GL_VERTEX_ATTRIB_ARRAY10_NV", UINT2NUM(0x865A));
    rb_define_const(*pmROGL, "GL_VERTEX_ATTRIB_ARRAY11_NV", UINT2NUM(0x865B));
    rb_define_const(*pmROGL, "GL_VERTEX_ATTRIB_ARRAY12_NV", UINT2NUM(0x865C));
    rb_define_const(*pmROGL, "GL_VERTEX_ATTRIB_ARRAY13_NV", UINT2NUM(0x865D));
    rb_define_const(*pmROGL, "GL_VERTEX_ATTRIB_ARRAY14_NV", UINT2NUM(0x865E));
    rb_define_const(*pmROGL, "GL_VERTEX_ATTRIB_ARRAY15_NV", UINT2NUM(0x865F));
    rb_define_const(*pmROGL, "GL_MAP1_VERTEX_ATTRIB0_4_NV", UINT2NUM(0x8660));
    rb_define_const(*pmROGL, "GL_MAP1_VERTEX_ATTRIB1_4_NV", UINT2NUM(0x8661));
    rb_define_const(*pmROGL, "GL_MAP1_VERTEX_ATTRIB2_4_NV", UINT2NUM(0x8662));
    rb_define_const(*pmROGL, "GL_MAP1_VERTEX_ATTRIB3_4_NV", UINT2NUM(0x8663));
    rb_define_const(*pmROGL, "GL_MAP1_VERTEX_ATTRIB4_4_NV", UINT2NUM(0x8664));
    rb_define_const(*pmROGL, "GL_MAP1_VERTEX_ATTRIB5_4_NV", UINT2NUM(0x8665));
    rb_define_const(*pmROGL, "GL_MAP1_VERTEX_ATTRIB6_4_NV", UINT2NUM(0x8666));
    rb_define_const(*pmROGL, "GL_MAP1_VERTEX_ATTRIB7_4_NV", UINT2NUM(0x8667));
    rb_define_const(*pmROGL, "GL_MAP1_VERTEX_ATTRIB8_4_NV", UINT2NUM(0x8668));
    rb_define_const(*pmROGL, "GL_MAP1_VERTEX_ATTRIB9_4_NV", UINT2NUM(0x8669));
    rb_define_const(*pmROGL, "GL_MAP1_VERTEX_ATTRIB10_4_NV", UINT2NUM(0x866A));
    rb_define_const(*pmROGL, "GL_MAP1_VERTEX_ATTRIB11_4_NV", UINT2NUM(0x866B));
    rb_define_const(*pmROGL, "GL_MAP1_VERTEX_ATTRIB12_4_NV", UINT2NUM(0x866C));
    rb_define_const(*pmROGL, "GL_MAP1_VERTEX_ATTRIB13_4_NV", UINT2NUM(0x866D));
    rb_define_const(*pmROGL, "GL_MAP1_VERTEX_ATTRIB14_4_NV", UINT2NUM(0x866E));
    rb_define_const(*pmROGL, "GL_MAP1_VERTEX_ATTRIB15_4_NV", UINT2NUM(0x866F));
    rb_define_const(*pmROGL, "GL_MAP2_VERTEX_ATTRIB0_4_NV", UINT2NUM(0x8670));
    rb_define_const(*pmROGL, "GL_MAP2_VERTEX_ATTRIB1_4_NV", UINT2NUM(0x8671));
    rb_define_const(*pmROGL, "GL_MAP2_VERTEX_ATTRIB2_4_NV", UINT2NUM(0x8672));
    rb_define_const(*pmROGL, "GL_MAP2_VERTEX_ATTRIB3_4_NV", UINT2NUM(0x8673));
    rb_define_const(*pmROGL, "GL_MAP2_VERTEX_ATTRIB4_4_NV", UINT2NUM(0x8674));
    rb_define_const(*pmROGL, "GL_MAP2_VERTEX_ATTRIB5_4_NV", UINT2NUM(0x8675));
    rb_define_const(*pmROGL, "GL_MAP2_VERTEX_ATTRIB6_4_NV", UINT2NUM(0x8676));
    rb_define_const(*pmROGL, "GL_MAP2_VERTEX_ATTRIB7_4_NV", UINT2NUM(0x8677));
    rb_define_const(*pmROGL, "GL_MAP2_VERTEX_ATTRIB8_4_NV", UINT2NUM(0x8678));
    rb_define_const(*pmROGL, "GL_MAP2_VERTEX_ATTRIB9_4_NV", UINT2NUM(0x8679));
    rb_define_const(*pmROGL, "GL_MAP2_VERTEX_ATTRIB10_4_NV", UINT2NUM(0x867A));
    rb_define_const(*pmROGL, "GL_MAP2_VERTEX_ATTRIB11_4_NV", UINT2NUM(0x867B));
    rb_define_const(*pmROGL, "GL_MAP2_VERTEX_ATTRIB12_4_NV", UINT2NUM(0x867C));
    rb_define_const(*pmROGL, "GL_MAP2_VERTEX_ATTRIB13_4_NV", UINT2NUM(0x867D));
    rb_define_const(*pmROGL, "GL_MAP2_VERTEX_ATTRIB14_4_NV", UINT2NUM(0x867E));
    rb_define_const(*pmROGL, "GL_MAP2_VERTEX_ATTRIB15_4_NV", UINT2NUM(0x867F));
    rb_define_const(*pmROGL, "GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV", UINT2NUM(0x88FD));
    rb_define_const(*pmROGL, "GL_VIDEO_BUFFER_NV", UINT2NUM(0x9020));
    rb_define_const(*pmROGL, "GL_VIDEO_BUFFER_BINDING_NV", UINT2NUM(0x9021));
    rb_define_const(*pmROGL, "GL_FIELD_UPPER_NV", UINT2NUM(0x9022));
    rb_define_const(*pmROGL, "GL_FIELD_LOWER_NV", UINT2NUM(0x9023));
    rb_define_const(*pmROGL, "GL_NUM_VIDEO_CAPTURE_STREAMS_NV", UINT2NUM(0x9024));
    rb_define_const(*pmROGL, "GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV", UINT2NUM(0x9025));
    rb_define_const(*pmROGL, "GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV", UINT2NUM(0x9026));
    rb_define_const(*pmROGL, "GL_LAST_VIDEO_CAPTURE_STATUS_NV", UINT2NUM(0x9027));
    rb_define_const(*pmROGL, "GL_VIDEO_BUFFER_PITCH_NV", UINT2NUM(0x9028));
    rb_define_const(*pmROGL, "GL_VIDEO_COLOR_CONVERSION_MATRIX_NV", UINT2NUM(0x9029));
    rb_define_const(*pmROGL, "GL_VIDEO_COLOR_CONVERSION_MAX_NV", UINT2NUM(0x902A));
    rb_define_const(*pmROGL, "GL_VIDEO_COLOR_CONVERSION_MIN_NV", UINT2NUM(0x902B));
    rb_define_const(*pmROGL, "GL_VIDEO_COLOR_CONVERSION_OFFSET_NV", UINT2NUM(0x902C));
    rb_define_const(*pmROGL, "GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV", UINT2NUM(0x902D));
    rb_define_const(*pmROGL, "GL_PARTIAL_SUCCESS_NV", UINT2NUM(0x902E));
    rb_define_const(*pmROGL, "GL_SUCCESS_NV", UINT2NUM(0x902F));
    rb_define_const(*pmROGL, "GL_FAILURE_NV", UINT2NUM(0x9030));
    rb_define_const(*pmROGL, "GL_YCBYCR8_422_NV", UINT2NUM(0x9031));
    rb_define_const(*pmROGL, "GL_YCBAYCR8A_4224_NV", UINT2NUM(0x9032));
    rb_define_const(*pmROGL, "GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV", UINT2NUM(0x9033));
    rb_define_const(*pmROGL, "GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV", UINT2NUM(0x9034));
    rb_define_const(*pmROGL, "GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV", UINT2NUM(0x9035));
    rb_define_const(*pmROGL, "GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV", UINT2NUM(0x9036));
    rb_define_const(*pmROGL, "GL_Z4Y12Z4CB12Z4CR12_444_NV", UINT2NUM(0x9037));
    rb_define_const(*pmROGL, "GL_VIDEO_CAPTURE_FRAME_WIDTH_NV", UINT2NUM(0x9038));
    rb_define_const(*pmROGL, "GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV", UINT2NUM(0x9039));
    rb_define_const(*pmROGL, "GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV", UINT2NUM(0x903A));
    rb_define_const(*pmROGL, "GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV", UINT2NUM(0x903B));
    rb_define_const(*pmROGL, "GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV", UINT2NUM(0x903C));
    rb_define_const(*pmROGL, "GL_PALETTE4_RGB8_OES", UINT2NUM(0x8B90));
    rb_define_const(*pmROGL, "GL_PALETTE4_RGBA8_OES", UINT2NUM(0x8B91));
    rb_define_const(*pmROGL, "GL_PALETTE4_R5_G6_B5_OES", UINT2NUM(0x8B92));
    rb_define_const(*pmROGL, "GL_PALETTE4_RGBA4_OES", UINT2NUM(0x8B93));
    rb_define_const(*pmROGL, "GL_PALETTE4_RGB5_A1_OES", UINT2NUM(0x8B94));
    rb_define_const(*pmROGL, "GL_PALETTE8_RGB8_OES", UINT2NUM(0x8B95));
    rb_define_const(*pmROGL, "GL_PALETTE8_RGBA8_OES", UINT2NUM(0x8B96));
    rb_define_const(*pmROGL, "GL_PALETTE8_R5_G6_B5_OES", UINT2NUM(0x8B97));
    rb_define_const(*pmROGL, "GL_PALETTE8_RGBA4_OES", UINT2NUM(0x8B98));
    rb_define_const(*pmROGL, "GL_PALETTE8_RGB5_A1_OES", UINT2NUM(0x8B99));
    rb_define_const(*pmROGL, "GL_FIXED_OES", UINT2NUM(0x140C));
    rb_define_const(*pmROGL, "GL_IMPLEMENTATION_COLOR_READ_TYPE_OES", UINT2NUM(0x8B9A));
    rb_define_const(*pmROGL, "GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES", UINT2NUM(0x8B9B));
    rb_define_const(*pmROGL, "GL_INTERLACE_OML", UINT2NUM(0x8980));
    rb_define_const(*pmROGL, "GL_INTERLACE_READ_OML", UINT2NUM(0x8981));
    rb_define_const(*pmROGL, "GL_PACK_RESAMPLE_OML", UINT2NUM(0x8984));
    rb_define_const(*pmROGL, "GL_UNPACK_RESAMPLE_OML", UINT2NUM(0x8985));
    rb_define_const(*pmROGL, "GL_RESAMPLE_REPLICATE_OML", UINT2NUM(0x8986));
    rb_define_const(*pmROGL, "GL_RESAMPLE_ZERO_FILL_OML", UINT2NUM(0x8987));
    rb_define_const(*pmROGL, "GL_RESAMPLE_AVERAGE_OML", UINT2NUM(0x8988));
    rb_define_const(*pmROGL, "GL_RESAMPLE_DECIMATE_OML", UINT2NUM(0x8989));
    rb_define_const(*pmROGL, "GL_FORMAT_SUBSAMPLE_24_24_OML", UINT2NUM(0x8982));
    rb_define_const(*pmROGL, "GL_FORMAT_SUBSAMPLE_244_244_OML", UINT2NUM(0x8983));
    rb_define_const(*pmROGL, "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR", UINT2NUM(0x9630));
    rb_define_const(*pmROGL, "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR", UINT2NUM(0x9632));
    rb_define_const(*pmROGL, "GL_MAX_VIEWS_OVR", UINT2NUM(0x9631));
    rb_define_const(*pmROGL, "GL_PREFER_DOUBLEBUFFER_HINT_PGI", UINT2NUM(0x1A1F8));
    rb_define_const(*pmROGL, "GL_CONSERVE_MEMORY_HINT_PGI", UINT2NUM(0x1A1FD));
    rb_define_const(*pmROGL, "GL_RECLAIM_MEMORY_HINT_PGI", UINT2NUM(0x1A1FE));
    rb_define_const(*pmROGL, "GL_NATIVE_GRAPHICS_HANDLE_PGI", UINT2NUM(0x1A202));
    rb_define_const(*pmROGL, "GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI", UINT2NUM(0x1A203));
    rb_define_const(*pmROGL, "GL_NATIVE_GRAPHICS_END_HINT_PGI", UINT2NUM(0x1A204));
    rb_define_const(*pmROGL, "GL_ALWAYS_FAST_HINT_PGI", UINT2NUM(0x1A20C));
    rb_define_const(*pmROGL, "GL_ALWAYS_SOFT_HINT_PGI", UINT2NUM(0x1A20D));
    rb_define_const(*pmROGL, "GL_ALLOW_DRAW_OBJ_HINT_PGI", UINT2NUM(0x1A20E));
    rb_define_const(*pmROGL, "GL_ALLOW_DRAW_WIN_HINT_PGI", UINT2NUM(0x1A20F));
    rb_define_const(*pmROGL, "GL_ALLOW_DRAW_FRG_HINT_PGI", UINT2NUM(0x1A210));
    rb_define_const(*pmROGL, "GL_ALLOW_DRAW_MEM_HINT_PGI", UINT2NUM(0x1A211));
    rb_define_const(*pmROGL, "GL_STRICT_DEPTHFUNC_HINT_PGI", UINT2NUM(0x1A216));
    rb_define_const(*pmROGL, "GL_STRICT_LIGHTING_HINT_PGI", UINT2NUM(0x1A217));
    rb_define_const(*pmROGL, "GL_STRICT_SCISSOR_HINT_PGI", UINT2NUM(0x1A218));
    rb_define_const(*pmROGL, "GL_FULL_STIPPLE_HINT_PGI", UINT2NUM(0x1A219));
    rb_define_const(*pmROGL, "GL_CLIP_NEAR_HINT_PGI", UINT2NUM(0x1A220));
    rb_define_const(*pmROGL, "GL_CLIP_FAR_HINT_PGI", UINT2NUM(0x1A221));
    rb_define_const(*pmROGL, "GL_WIDE_LINE_HINT_PGI", UINT2NUM(0x1A222));
    rb_define_const(*pmROGL, "GL_BACK_NORMALS_HINT_PGI", UINT2NUM(0x1A223));
    rb_define_const(*pmROGL, "GL_VERTEX_DATA_HINT_PGI", UINT2NUM(0x1A22A));
    rb_define_const(*pmROGL, "GL_VERTEX_CONSISTENT_HINT_PGI", UINT2NUM(0x1A22B));
    rb_define_const(*pmROGL, "GL_MATERIAL_SIDE_HINT_PGI", UINT2NUM(0x1A22C));
    rb_define_const(*pmROGL, "GL_MAX_VERTEX_HINT_PGI", UINT2NUM(0x1A22D));
    rb_define_const(*pmROGL, "GL_COLOR3_BIT_PGI", UINT2NUM(0x00010000));
    rb_define_const(*pmROGL, "GL_COLOR4_BIT_PGI", UINT2NUM(0x00020000));
    rb_define_const(*pmROGL, "GL_EDGEFLAG_BIT_PGI", UINT2NUM(0x00040000));
    rb_define_const(*pmROGL, "GL_INDEX_BIT_PGI", UINT2NUM(0x00080000));
    rb_define_const(*pmROGL, "GL_MAT_AMBIENT_BIT_PGI", UINT2NUM(0x00100000));
    rb_define_const(*pmROGL, "GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI", UINT2NUM(0x00200000));
    rb_define_const(*pmROGL, "GL_MAT_DIFFUSE_BIT_PGI", UINT2NUM(0x00400000));
    rb_define_const(*pmROGL, "GL_MAT_EMISSION_BIT_PGI", UINT2NUM(0x00800000));
    rb_define_const(*pmROGL, "GL_MAT_COLOR_INDEXES_BIT_PGI", UINT2NUM(0x01000000));
    rb_define_const(*pmROGL, "GL_MAT_SHININESS_BIT_PGI", UINT2NUM(0x02000000));
    rb_define_const(*pmROGL, "GL_MAT_SPECULAR_BIT_PGI", UINT2NUM(0x04000000));
    rb_define_const(*pmROGL, "GL_NORMAL_BIT_PGI", UINT2NUM(0x08000000));
    rb_define_const(*pmROGL, "GL_TEXCOORD1_BIT_PGI", UINT2NUM(0x10000000));
    rb_define_const(*pmROGL, "GL_TEXCOORD2_BIT_PGI", UINT2NUM(0x20000000));
    rb_define_const(*pmROGL, "GL_TEXCOORD3_BIT_PGI", UINT2NUM(0x40000000));
    rb_define_const(*pmROGL, "GL_TEXCOORD4_BIT_PGI", UINT2NUM(0x80000000));
    rb_define_const(*pmROGL, "GL_VERTEX23_BIT_PGI", UINT2NUM(0x00000004));
    rb_define_const(*pmROGL, "GL_VERTEX4_BIT_PGI", UINT2NUM(0x00000008));
    rb_define_const(*pmROGL, "GL_SCREEN_COORDINATES_REND", UINT2NUM(0x8490));
    rb_define_const(*pmROGL, "GL_INVERTED_SCREEN_W_REND", UINT2NUM(0x8491));
    rb_define_const(*pmROGL, "GL_RGB_S3TC", UINT2NUM(0x83A0));
    rb_define_const(*pmROGL, "GL_RGB4_S3TC", UINT2NUM(0x83A1));
    rb_define_const(*pmROGL, "GL_RGBA_S3TC", UINT2NUM(0x83A2));
    rb_define_const(*pmROGL, "GL_RGBA4_S3TC", UINT2NUM(0x83A3));
    rb_define_const(*pmROGL, "GL_RGBA_DXT5_S3TC", UINT2NUM(0x83A4));
    rb_define_const(*pmROGL, "GL_RGBA4_DXT5_S3TC", UINT2NUM(0x83A5));
    rb_define_const(*pmROGL, "GL_DETAIL_TEXTURE_2D_SGIS", UINT2NUM(0x8095));
    rb_define_const(*pmROGL, "GL_DETAIL_TEXTURE_2D_BINDING_SGIS", UINT2NUM(0x8096));
    rb_define_const(*pmROGL, "GL_LINEAR_DETAIL_SGIS", UINT2NUM(0x8097));
    rb_define_const(*pmROGL, "GL_LINEAR_DETAIL_ALPHA_SGIS", UINT2NUM(0x8098));
    rb_define_const(*pmROGL, "GL_LINEAR_DETAIL_COLOR_SGIS", UINT2NUM(0x8099));
    rb_define_const(*pmROGL, "GL_DETAIL_TEXTURE_LEVEL_SGIS", UINT2NUM(0x809A));
    rb_define_const(*pmROGL, "GL_DETAIL_TEXTURE_MODE_SGIS", UINT2NUM(0x809B));
    rb_define_const(*pmROGL, "GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS", UINT2NUM(0x809C));
    rb_define_const(*pmROGL, "GL_FOG_FUNC_SGIS", UINT2NUM(0x812A));
    rb_define_const(*pmROGL, "GL_FOG_FUNC_POINTS_SGIS", UINT2NUM(0x812B));
    rb_define_const(*pmROGL, "GL_MAX_FOG_FUNC_POINTS_SGIS", UINT2NUM(0x812C));
    rb_define_const(*pmROGL, "GL_GENERATE_MIPMAP_SGIS", UINT2NUM(0x8191));
    rb_define_const(*pmROGL, "GL_GENERATE_MIPMAP_HINT_SGIS", UINT2NUM(0x8192));
    rb_define_const(*pmROGL, "GL_MULTISAMPLE_SGIS", UINT2NUM(0x809D));
    rb_define_const(*pmROGL, "GL_SAMPLE_ALPHA_TO_MASK_SGIS", UINT2NUM(0x809E));
    rb_define_const(*pmROGL, "GL_SAMPLE_ALPHA_TO_ONE_SGIS", UINT2NUM(0x809F));
    rb_define_const(*pmROGL, "GL_SAMPLE_MASK_SGIS", UINT2NUM(0x80A0));
    rb_define_const(*pmROGL, "GL_1PASS_SGIS", UINT2NUM(0x80A1));
    rb_define_const(*pmROGL, "GL_2PASS_0_SGIS", UINT2NUM(0x80A2));
    rb_define_const(*pmROGL, "GL_2PASS_1_SGIS", UINT2NUM(0x80A3));
    rb_define_const(*pmROGL, "GL_4PASS_0_SGIS", UINT2NUM(0x80A4));
    rb_define_const(*pmROGL, "GL_4PASS_1_SGIS", UINT2NUM(0x80A5));
    rb_define_const(*pmROGL, "GL_4PASS_2_SGIS", UINT2NUM(0x80A6));
    rb_define_const(*pmROGL, "GL_4PASS_3_SGIS", UINT2NUM(0x80A7));
    rb_define_const(*pmROGL, "GL_SAMPLE_BUFFERS_SGIS", UINT2NUM(0x80A8));
    rb_define_const(*pmROGL, "GL_SAMPLES_SGIS", UINT2NUM(0x80A9));
    rb_define_const(*pmROGL, "GL_SAMPLE_MASK_VALUE_SGIS", UINT2NUM(0x80AA));
    rb_define_const(*pmROGL, "GL_SAMPLE_MASK_INVERT_SGIS", UINT2NUM(0x80AB));
    rb_define_const(*pmROGL, "GL_SAMPLE_PATTERN_SGIS", UINT2NUM(0x80AC));
    rb_define_const(*pmROGL, "GL_PIXEL_TEXTURE_SGIS", UINT2NUM(0x8353));
    rb_define_const(*pmROGL, "GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS", UINT2NUM(0x8354));
    rb_define_const(*pmROGL, "GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS", UINT2NUM(0x8355));
    rb_define_const(*pmROGL, "GL_PIXEL_GROUP_COLOR_SGIS", UINT2NUM(0x8356));
    rb_define_const(*pmROGL, "GL_EYE_DISTANCE_TO_POINT_SGIS", UINT2NUM(0x81F0));
    rb_define_const(*pmROGL, "GL_OBJECT_DISTANCE_TO_POINT_SGIS", UINT2NUM(0x81F1));
    rb_define_const(*pmROGL, "GL_EYE_DISTANCE_TO_LINE_SGIS", UINT2NUM(0x81F2));
    rb_define_const(*pmROGL, "GL_OBJECT_DISTANCE_TO_LINE_SGIS", UINT2NUM(0x81F3));
    rb_define_const(*pmROGL, "GL_EYE_POINT_SGIS", UINT2NUM(0x81F4));
    rb_define_const(*pmROGL, "GL_OBJECT_POINT_SGIS", UINT2NUM(0x81F5));
    rb_define_const(*pmROGL, "GL_EYE_LINE_SGIS", UINT2NUM(0x81F6));
    rb_define_const(*pmROGL, "GL_OBJECT_LINE_SGIS", UINT2NUM(0x81F7));
    rb_define_const(*pmROGL, "GL_POINT_SIZE_MIN_SGIS", UINT2NUM(0x8126));
    rb_define_const(*pmROGL, "GL_POINT_SIZE_MAX_SGIS", UINT2NUM(0x8127));
    rb_define_const(*pmROGL, "GL_POINT_FADE_THRESHOLD_SIZE_SGIS", UINT2NUM(0x8128));
    rb_define_const(*pmROGL, "GL_DISTANCE_ATTENUATION_SGIS", UINT2NUM(0x8129));
    rb_define_const(*pmROGL, "GL_LINEAR_SHARPEN_SGIS", UINT2NUM(0x80AD));
    rb_define_const(*pmROGL, "GL_LINEAR_SHARPEN_ALPHA_SGIS", UINT2NUM(0x80AE));
    rb_define_const(*pmROGL, "GL_LINEAR_SHARPEN_COLOR_SGIS", UINT2NUM(0x80AF));
    rb_define_const(*pmROGL, "GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS", UINT2NUM(0x80B0));
    rb_define_const(*pmROGL, "GL_PACK_SKIP_VOLUMES_SGIS", UINT2NUM(0x8130));
    rb_define_const(*pmROGL, "GL_PACK_IMAGE_DEPTH_SGIS", UINT2NUM(0x8131));
    rb_define_const(*pmROGL, "GL_UNPACK_SKIP_VOLUMES_SGIS", UINT2NUM(0x8132));
    rb_define_const(*pmROGL, "GL_UNPACK_IMAGE_DEPTH_SGIS", UINT2NUM(0x8133));
    rb_define_const(*pmROGL, "GL_TEXTURE_4D_SGIS", UINT2NUM(0x8134));
    rb_define_const(*pmROGL, "GL_PROXY_TEXTURE_4D_SGIS", UINT2NUM(0x8135));
    rb_define_const(*pmROGL, "GL_TEXTURE_4DSIZE_SGIS", UINT2NUM(0x8136));
    rb_define_const(*pmROGL, "GL_TEXTURE_WRAP_Q_SGIS", UINT2NUM(0x8137));
    rb_define_const(*pmROGL, "GL_MAX_4D_TEXTURE_SIZE_SGIS", UINT2NUM(0x8138));
    rb_define_const(*pmROGL, "GL_TEXTURE_4D_BINDING_SGIS", UINT2NUM(0x814F));
    rb_define_const(*pmROGL, "GL_CLAMP_TO_BORDER_SGIS", UINT2NUM(0x812D));
    rb_define_const(*pmROGL, "GL_TEXTURE_COLOR_WRITEMASK_SGIS", UINT2NUM(0x81EF));
    rb_define_const(*pmROGL, "GL_CLAMP_TO_EDGE_SGIS", UINT2NUM(0x812F));
    rb_define_const(*pmROGL, "GL_FILTER4_SGIS", UINT2NUM(0x8146));
    rb_define_const(*pmROGL, "GL_TEXTURE_FILTER4_SIZE_SGIS", UINT2NUM(0x8147));
    rb_define_const(*pmROGL, "GL_TEXTURE_MIN_LOD_SGIS", UINT2NUM(0x813A));
    rb_define_const(*pmROGL, "GL_TEXTURE_MAX_LOD_SGIS", UINT2NUM(0x813B));
    rb_define_const(*pmROGL, "GL_TEXTURE_BASE_LEVEL_SGIS", UINT2NUM(0x813C));
    rb_define_const(*pmROGL, "GL_TEXTURE_MAX_LEVEL_SGIS", UINT2NUM(0x813D));
    rb_define_const(*pmROGL, "GL_DUAL_ALPHA4_SGIS", UINT2NUM(0x8110));
    rb_define_const(*pmROGL, "GL_DUAL_ALPHA8_SGIS", UINT2NUM(0x8111));
    rb_define_const(*pmROGL, "GL_DUAL_ALPHA12_SGIS", UINT2NUM(0x8112));
    rb_define_const(*pmROGL, "GL_DUAL_ALPHA16_SGIS", UINT2NUM(0x8113));
    rb_define_const(*pmROGL, "GL_DUAL_LUMINANCE4_SGIS", UINT2NUM(0x8114));
    rb_define_const(*pmROGL, "GL_DUAL_LUMINANCE8_SGIS", UINT2NUM(0x8115));
    rb_define_const(*pmROGL, "GL_DUAL_LUMINANCE12_SGIS", UINT2NUM(0x8116));
    rb_define_const(*pmROGL, "GL_DUAL_LUMINANCE16_SGIS", UINT2NUM(0x8117));
    rb_define_const(*pmROGL, "GL_DUAL_INTENSITY4_SGIS", UINT2NUM(0x8118));
    rb_define_const(*pmROGL, "GL_DUAL_INTENSITY8_SGIS", UINT2NUM(0x8119));
    rb_define_const(*pmROGL, "GL_DUAL_INTENSITY12_SGIS", UINT2NUM(0x811A));
    rb_define_const(*pmROGL, "GL_DUAL_INTENSITY16_SGIS", UINT2NUM(0x811B));
    rb_define_const(*pmROGL, "GL_DUAL_LUMINANCE_ALPHA4_SGIS", UINT2NUM(0x811C));
    rb_define_const(*pmROGL, "GL_DUAL_LUMINANCE_ALPHA8_SGIS", UINT2NUM(0x811D));
    rb_define_const(*pmROGL, "GL_QUAD_ALPHA4_SGIS", UINT2NUM(0x811E));
    rb_define_const(*pmROGL, "GL_QUAD_ALPHA8_SGIS", UINT2NUM(0x811F));
    rb_define_const(*pmROGL, "GL_QUAD_LUMINANCE4_SGIS", UINT2NUM(0x8120));
    rb_define_const(*pmROGL, "GL_QUAD_LUMINANCE8_SGIS", UINT2NUM(0x8121));
    rb_define_const(*pmROGL, "GL_QUAD_INTENSITY4_SGIS", UINT2NUM(0x8122));
    rb_define_const(*pmROGL, "GL_QUAD_INTENSITY8_SGIS", UINT2NUM(0x8123));
    rb_define_const(*pmROGL, "GL_DUAL_TEXTURE_SELECT_SGIS", UINT2NUM(0x8124));
    rb_define_const(*pmROGL, "GL_QUAD_TEXTURE_SELECT_SGIS", UINT2NUM(0x8125));
    rb_define_const(*pmROGL, "GL_ASYNC_MARKER_SGIX", UINT2NUM(0x8329));
    rb_define_const(*pmROGL, "GL_ASYNC_HISTOGRAM_SGIX", UINT2NUM(0x832C));
    rb_define_const(*pmROGL, "GL_MAX_ASYNC_HISTOGRAM_SGIX", UINT2NUM(0x832D));
    rb_define_const(*pmROGL, "GL_ASYNC_TEX_IMAGE_SGIX", UINT2NUM(0x835C));
    rb_define_const(*pmROGL, "GL_ASYNC_DRAW_PIXELS_SGIX", UINT2NUM(0x835D));
    rb_define_const(*pmROGL, "GL_ASYNC_READ_PIXELS_SGIX", UINT2NUM(0x835E));
    rb_define_const(*pmROGL, "GL_MAX_ASYNC_TEX_IMAGE_SGIX", UINT2NUM(0x835F));
    rb_define_const(*pmROGL, "GL_MAX_ASYNC_DRAW_PIXELS_SGIX", UINT2NUM(0x8360));
    rb_define_const(*pmROGL, "GL_MAX_ASYNC_READ_PIXELS_SGIX", UINT2NUM(0x8361));
    rb_define_const(*pmROGL, "GL_ALPHA_MIN_SGIX", UINT2NUM(0x8320));
    rb_define_const(*pmROGL, "GL_ALPHA_MAX_SGIX", UINT2NUM(0x8321));
    rb_define_const(*pmROGL, "GL_CALLIGRAPHIC_FRAGMENT_SGIX", UINT2NUM(0x8183));
    rb_define_const(*pmROGL, "GL_LINEAR_CLIPMAP_LINEAR_SGIX", UINT2NUM(0x8170));
    rb_define_const(*pmROGL, "GL_TEXTURE_CLIPMAP_CENTER_SGIX", UINT2NUM(0x8171));
    rb_define_const(*pmROGL, "GL_TEXTURE_CLIPMAP_FRAME_SGIX", UINT2NUM(0x8172));
    rb_define_const(*pmROGL, "GL_TEXTURE_CLIPMAP_OFFSET_SGIX", UINT2NUM(0x8173));
    rb_define_const(*pmROGL, "GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX", UINT2NUM(0x8174));
    rb_define_const(*pmROGL, "GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX", UINT2NUM(0x8175));
    rb_define_const(*pmROGL, "GL_TEXTURE_CLIPMAP_DEPTH_SGIX", UINT2NUM(0x8176));
    rb_define_const(*pmROGL, "GL_MAX_CLIPMAP_DEPTH_SGIX", UINT2NUM(0x8177));
    rb_define_const(*pmROGL, "GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX", UINT2NUM(0x8178));
    rb_define_const(*pmROGL, "GL_NEAREST_CLIPMAP_NEAREST_SGIX", UINT2NUM(0x844D));
    rb_define_const(*pmROGL, "GL_NEAREST_CLIPMAP_LINEAR_SGIX", UINT2NUM(0x844E));
    rb_define_const(*pmROGL, "GL_LINEAR_CLIPMAP_NEAREST_SGIX", UINT2NUM(0x844F));
    rb_define_const(*pmROGL, "GL_CONVOLUTION_HINT_SGIX", UINT2NUM(0x8316));
    rb_define_const(*pmROGL, "GL_DEPTH_COMPONENT16_SGIX", UINT2NUM(0x81A5));
    rb_define_const(*pmROGL, "GL_DEPTH_COMPONENT24_SGIX", UINT2NUM(0x81A6));
    rb_define_const(*pmROGL, "GL_DEPTH_COMPONENT32_SGIX", UINT2NUM(0x81A7));
    rb_define_const(*pmROGL, "GL_FOG_OFFSET_SGIX", UINT2NUM(0x8198));
    rb_define_const(*pmROGL, "GL_FOG_OFFSET_VALUE_SGIX", UINT2NUM(0x8199));
    rb_define_const(*pmROGL, "GL_FRAGMENT_LIGHTING_SGIX", UINT2NUM(0x8400));
    rb_define_const(*pmROGL, "GL_FRAGMENT_COLOR_MATERIAL_SGIX", UINT2NUM(0x8401));
    rb_define_const(*pmROGL, "GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX", UINT2NUM(0x8402));
    rb_define_const(*pmROGL, "GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX", UINT2NUM(0x8403));
    rb_define_const(*pmROGL, "GL_MAX_FRAGMENT_LIGHTS_SGIX", UINT2NUM(0x8404));
    rb_define_const(*pmROGL, "GL_MAX_ACTIVE_LIGHTS_SGIX", UINT2NUM(0x8405));
    rb_define_const(*pmROGL, "GL_CURRENT_RASTER_NORMAL_SGIX", UINT2NUM(0x8406));
    rb_define_const(*pmROGL, "GL_LIGHT_ENV_MODE_SGIX", UINT2NUM(0x8407));
    rb_define_const(*pmROGL, "GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX", UINT2NUM(0x8408));
    rb_define_const(*pmROGL, "GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX", UINT2NUM(0x8409));
    rb_define_const(*pmROGL, "GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX", UINT2NUM(0x840A));
    rb_define_const(*pmROGL, "GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX", UINT2NUM(0x840B));
    rb_define_const(*pmROGL, "GL_FRAGMENT_LIGHT0_SGIX", UINT2NUM(0x840C));
    rb_define_const(*pmROGL, "GL_FRAGMENT_LIGHT1_SGIX", UINT2NUM(0x840D));
    rb_define_const(*pmROGL, "GL_FRAGMENT_LIGHT2_SGIX", UINT2NUM(0x840E));
    rb_define_const(*pmROGL, "GL_FRAGMENT_LIGHT3_SGIX", UINT2NUM(0x840F));
    rb_define_const(*pmROGL, "GL_FRAGMENT_LIGHT4_SGIX", UINT2NUM(0x8410));
    rb_define_const(*pmROGL, "GL_FRAGMENT_LIGHT5_SGIX", UINT2NUM(0x8411));
    rb_define_const(*pmROGL, "GL_FRAGMENT_LIGHT6_SGIX", UINT2NUM(0x8412));
    rb_define_const(*pmROGL, "GL_FRAGMENT_LIGHT7_SGIX", UINT2NUM(0x8413));
    rb_define_const(*pmROGL, "GL_FRAMEZOOM_SGIX", UINT2NUM(0x818B));
    rb_define_const(*pmROGL, "GL_FRAMEZOOM_FACTOR_SGIX", UINT2NUM(0x818C));
    rb_define_const(*pmROGL, "GL_MAX_FRAMEZOOM_FACTOR_SGIX", UINT2NUM(0x818D));
    rb_define_const(*pmROGL, "GL_INSTRUMENT_BUFFER_POINTER_SGIX", UINT2NUM(0x8180));
    rb_define_const(*pmROGL, "GL_INSTRUMENT_MEASUREMENTS_SGIX", UINT2NUM(0x8181));
    rb_define_const(*pmROGL, "GL_INTERLACE_SGIX", UINT2NUM(0x8094));
    rb_define_const(*pmROGL, "GL_IR_INSTRUMENT1_SGIX", UINT2NUM(0x817F));
    rb_define_const(*pmROGL, "GL_LIST_PRIORITY_SGIX", UINT2NUM(0x8182));
    rb_define_const(*pmROGL, "GL_PIXEL_TEX_GEN_SGIX", UINT2NUM(0x8139));
    rb_define_const(*pmROGL, "GL_PIXEL_TEX_GEN_MODE_SGIX", UINT2NUM(0x832B));
    rb_define_const(*pmROGL, "GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX", UINT2NUM(0x813E));
    rb_define_const(*pmROGL, "GL_PIXEL_TILE_CACHE_INCREMENT_SGIX", UINT2NUM(0x813F));
    rb_define_const(*pmROGL, "GL_PIXEL_TILE_WIDTH_SGIX", UINT2NUM(0x8140));
    rb_define_const(*pmROGL, "GL_PIXEL_TILE_HEIGHT_SGIX", UINT2NUM(0x8141));
    rb_define_const(*pmROGL, "GL_PIXEL_TILE_GRID_WIDTH_SGIX", UINT2NUM(0x8142));
    rb_define_const(*pmROGL, "GL_PIXEL_TILE_GRID_HEIGHT_SGIX", UINT2NUM(0x8143));
    rb_define_const(*pmROGL, "GL_PIXEL_TILE_GRID_DEPTH_SGIX", UINT2NUM(0x8144));
    rb_define_const(*pmROGL, "GL_PIXEL_TILE_CACHE_SIZE_SGIX", UINT2NUM(0x8145));
    rb_define_const(*pmROGL, "GL_TEXTURE_DEFORMATION_BIT_SGIX", UINT2NUM(0x00000001));
    rb_define_const(*pmROGL, "GL_GEOMETRY_DEFORMATION_BIT_SGIX", UINT2NUM(0x00000002));
    rb_define_const(*pmROGL, "GL_GEOMETRY_DEFORMATION_SGIX", UINT2NUM(0x8194));
    rb_define_const(*pmROGL, "GL_TEXTURE_DEFORMATION_SGIX", UINT2NUM(0x8195));
    rb_define_const(*pmROGL, "GL_DEFORMATIONS_MASK_SGIX", UINT2NUM(0x8196));
    rb_define_const(*pmROGL, "GL_MAX_DEFORMATION_ORDER_SGIX", UINT2NUM(0x8197));
    rb_define_const(*pmROGL, "GL_REFERENCE_PLANE_SGIX", UINT2NUM(0x817D));
    rb_define_const(*pmROGL, "GL_REFERENCE_PLANE_EQUATION_SGIX", UINT2NUM(0x817E));
    rb_define_const(*pmROGL, "GL_PACK_RESAMPLE_SGIX", UINT2NUM(0x842E));
    rb_define_const(*pmROGL, "GL_UNPACK_RESAMPLE_SGIX", UINT2NUM(0x842F));
    rb_define_const(*pmROGL, "GL_RESAMPLE_REPLICATE_SGIX", UINT2NUM(0x8433));
    rb_define_const(*pmROGL, "GL_RESAMPLE_ZERO_FILL_SGIX", UINT2NUM(0x8434));
    rb_define_const(*pmROGL, "GL_RESAMPLE_DECIMATE_SGIX", UINT2NUM(0x8430));
    rb_define_const(*pmROGL, "GL_SCALEBIAS_HINT_SGIX", UINT2NUM(0x8322));
    rb_define_const(*pmROGL, "GL_TEXTURE_COMPARE_SGIX", UINT2NUM(0x819A));
    rb_define_const(*pmROGL, "GL_TEXTURE_COMPARE_OPERATOR_SGIX", UINT2NUM(0x819B));
    rb_define_const(*pmROGL, "GL_TEXTURE_LEQUAL_R_SGIX", UINT2NUM(0x819C));
    rb_define_const(*pmROGL, "GL_TEXTURE_GEQUAL_R_SGIX", UINT2NUM(0x819D));
    rb_define_const(*pmROGL, "GL_SHADOW_AMBIENT_SGIX", UINT2NUM(0x80BF));
    rb_define_const(*pmROGL, "GL_SPRITE_SGIX", UINT2NUM(0x8148));
    rb_define_const(*pmROGL, "GL_SPRITE_MODE_SGIX", UINT2NUM(0x8149));
    rb_define_const(*pmROGL, "GL_SPRITE_AXIS_SGIX", UINT2NUM(0x814A));
    rb_define_const(*pmROGL, "GL_SPRITE_TRANSLATION_SGIX", UINT2NUM(0x814B));
    rb_define_const(*pmROGL, "GL_SPRITE_AXIAL_SGIX", UINT2NUM(0x814C));
    rb_define_const(*pmROGL, "GL_SPRITE_OBJECT_ALIGNED_SGIX", UINT2NUM(0x814D));
    rb_define_const(*pmROGL, "GL_SPRITE_EYE_ALIGNED_SGIX", UINT2NUM(0x814E));
    rb_define_const(*pmROGL, "GL_PACK_SUBSAMPLE_RATE_SGIX", UINT2NUM(0x85A0));
    rb_define_const(*pmROGL, "GL_UNPACK_SUBSAMPLE_RATE_SGIX", UINT2NUM(0x85A1));
    rb_define_const(*pmROGL, "GL_PIXEL_SUBSAMPLE_4444_SGIX", UINT2NUM(0x85A2));
    rb_define_const(*pmROGL, "GL_PIXEL_SUBSAMPLE_2424_SGIX", UINT2NUM(0x85A3));
    rb_define_const(*pmROGL, "GL_PIXEL_SUBSAMPLE_4242_SGIX", UINT2NUM(0x85A4));
    rb_define_const(*pmROGL, "GL_TEXTURE_ENV_BIAS_SGIX", UINT2NUM(0x80BE));
    rb_define_const(*pmROGL, "GL_TEXTURE_MAX_CLAMP_S_SGIX", UINT2NUM(0x8369));
    rb_define_const(*pmROGL, "GL_TEXTURE_MAX_CLAMP_T_SGIX", UINT2NUM(0x836A));
    rb_define_const(*pmROGL, "GL_TEXTURE_MAX_CLAMP_R_SGIX", UINT2NUM(0x836B));
    rb_define_const(*pmROGL, "GL_TEXTURE_LOD_BIAS_S_SGIX", UINT2NUM(0x818E));
    rb_define_const(*pmROGL, "GL_TEXTURE_LOD_BIAS_T_SGIX", UINT2NUM(0x818F));
    rb_define_const(*pmROGL, "GL_TEXTURE_LOD_BIAS_R_SGIX", UINT2NUM(0x8190));
    rb_define_const(*pmROGL, "GL_TEXTURE_MULTI_BUFFER_HINT_SGIX", UINT2NUM(0x812E));
    rb_define_const(*pmROGL, "GL_POST_TEXTURE_FILTER_BIAS_SGIX", UINT2NUM(0x8179));
    rb_define_const(*pmROGL, "GL_POST_TEXTURE_FILTER_SCALE_SGIX", UINT2NUM(0x817A));
    rb_define_const(*pmROGL, "GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX", UINT2NUM(0x817B));
    rb_define_const(*pmROGL, "GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX", UINT2NUM(0x817C));
    rb_define_const(*pmROGL, "GL_VERTEX_PRECLIP_SGIX", UINT2NUM(0x83EE));
    rb_define_const(*pmROGL, "GL_VERTEX_PRECLIP_HINT_SGIX", UINT2NUM(0x83EF));
    rb_define_const(*pmROGL, "GL_YCRCB_422_SGIX", UINT2NUM(0x81BB));
    rb_define_const(*pmROGL, "GL_YCRCB_444_SGIX", UINT2NUM(0x81BC));
    rb_define_const(*pmROGL, "GL_YCRCB_SGIX", UINT2NUM(0x8318));
    rb_define_const(*pmROGL, "GL_YCRCBA_SGIX", UINT2NUM(0x8319));
    rb_define_const(*pmROGL, "GL_COLOR_MATRIX_SGI", UINT2NUM(0x80B1));
    rb_define_const(*pmROGL, "GL_COLOR_MATRIX_STACK_DEPTH_SGI", UINT2NUM(0x80B2));
    rb_define_const(*pmROGL, "GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI", UINT2NUM(0x80B3));
    rb_define_const(*pmROGL, "GL_POST_COLOR_MATRIX_RED_SCALE_SGI", UINT2NUM(0x80B4));
    rb_define_const(*pmROGL, "GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI", UINT2NUM(0x80B5));
    rb_define_const(*pmROGL, "GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI", UINT2NUM(0x80B6));
    rb_define_const(*pmROGL, "GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI", UINT2NUM(0x80B7));
    rb_define_const(*pmROGL, "GL_POST_COLOR_MATRIX_RED_BIAS_SGI", UINT2NUM(0x80B8));
    rb_define_const(*pmROGL, "GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI", UINT2NUM(0x80B9));
    rb_define_const(*pmROGL, "GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI", UINT2NUM(0x80BA));
    rb_define_const(*pmROGL, "GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI", UINT2NUM(0x80BB));
    rb_define_const(*pmROGL, "GL_COLOR_TABLE_SGI", UINT2NUM(0x80D0));
    rb_define_const(*pmROGL, "GL_POST_CONVOLUTION_COLOR_TABLE_SGI", UINT2NUM(0x80D1));
    rb_define_const(*pmROGL, "GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI", UINT2NUM(0x80D2));
    rb_define_const(*pmROGL, "GL_PROXY_COLOR_TABLE_SGI", UINT2NUM(0x80D3));
    rb_define_const(*pmROGL, "GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI", UINT2NUM(0x80D4));
    rb_define_const(*pmROGL, "GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI", UINT2NUM(0x80D5));
    rb_define_const(*pmROGL, "GL_COLOR_TABLE_SCALE_SGI", UINT2NUM(0x80D6));
    rb_define_const(*pmROGL, "GL_COLOR_TABLE_BIAS_SGI", UINT2NUM(0x80D7));
    rb_define_const(*pmROGL, "GL_COLOR_TABLE_FORMAT_SGI", UINT2NUM(0x80D8));
    rb_define_const(*pmROGL, "GL_COLOR_TABLE_WIDTH_SGI", UINT2NUM(0x80D9));
    rb_define_const(*pmROGL, "GL_COLOR_TABLE_RED_SIZE_SGI", UINT2NUM(0x80DA));
    rb_define_const(*pmROGL, "GL_COLOR_TABLE_GREEN_SIZE_SGI", UINT2NUM(0x80DB));
    rb_define_const(*pmROGL, "GL_COLOR_TABLE_BLUE_SIZE_SGI", UINT2NUM(0x80DC));
    rb_define_const(*pmROGL, "GL_COLOR_TABLE_ALPHA_SIZE_SGI", UINT2NUM(0x80DD));
    rb_define_const(*pmROGL, "GL_COLOR_TABLE_LUMINANCE_SIZE_SGI", UINT2NUM(0x80DE));
    rb_define_const(*pmROGL, "GL_COLOR_TABLE_INTENSITY_SIZE_SGI", UINT2NUM(0x80DF));
    rb_define_const(*pmROGL, "GL_TEXTURE_COLOR_TABLE_SGI", UINT2NUM(0x80BC));
    rb_define_const(*pmROGL, "GL_PROXY_TEXTURE_COLOR_TABLE_SGI", UINT2NUM(0x80BD));
    rb_define_const(*pmROGL, "GL_UNPACK_CONSTANT_DATA_SUNX", UINT2NUM(0x81D5));
    rb_define_const(*pmROGL, "GL_TEXTURE_CONSTANT_DATA_SUNX", UINT2NUM(0x81D6));
    rb_define_const(*pmROGL, "GL_WRAP_BORDER_SUN", UINT2NUM(0x81D4));
    rb_define_const(*pmROGL, "GL_GLOBAL_ALPHA_SUN", UINT2NUM(0x81D9));
    rb_define_const(*pmROGL, "GL_GLOBAL_ALPHA_FACTOR_SUN", UINT2NUM(0x81DA));
    rb_define_const(*pmROGL, "GL_QUAD_MESH_SUN", UINT2NUM(0x8614));
    rb_define_const(*pmROGL, "GL_TRIANGLE_MESH_SUN", UINT2NUM(0x8615));
    rb_define_const(*pmROGL, "GL_SLICE_ACCUM_SUN", UINT2NUM(0x85CC));
    rb_define_const(*pmROGL, "GL_RESTART_SUN", UINT2NUM(0x0001));
    rb_define_const(*pmROGL, "GL_REPLACE_MIDDLE_SUN", UINT2NUM(0x0002));
    rb_define_const(*pmROGL, "GL_REPLACE_OLDEST_SUN", UINT2NUM(0x0003));
    rb_define_const(*pmROGL, "GL_TRIANGLE_LIST_SUN", UINT2NUM(0x81D7));
    rb_define_const(*pmROGL, "GL_REPLACEMENT_CODE_SUN", UINT2NUM(0x81D8));
    rb_define_const(*pmROGL, "GL_REPLACEMENT_CODE_ARRAY_SUN", UINT2NUM(0x85C0));
    rb_define_const(*pmROGL, "GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN", UINT2NUM(0x85C1));
    rb_define_const(*pmROGL, "GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN", UINT2NUM(0x85C2));
    rb_define_const(*pmROGL, "GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN", UINT2NUM(0x85C3));
    rb_define_const(*pmROGL, "GL_R1UI_V3F_SUN", UINT2NUM(0x85C4));
    rb_define_const(*pmROGL, "GL_R1UI_C4UB_V3F_SUN", UINT2NUM(0x85C5));
    rb_define_const(*pmROGL, "GL_R1UI_C3F_V3F_SUN", UINT2NUM(0x85C6));
    rb_define_const(*pmROGL, "GL_R1UI_N3F_V3F_SUN", UINT2NUM(0x85C7));
    rb_define_const(*pmROGL, "GL_R1UI_C4F_N3F_V3F_SUN", UINT2NUM(0x85C8));
    rb_define_const(*pmROGL, "GL_R1UI_T2F_V3F_SUN", UINT2NUM(0x85C9));
    rb_define_const(*pmROGL, "GL_R1UI_T2F_N3F_V3F_SUN", UINT2NUM(0x85CA));
    rb_define_const(*pmROGL, "GL_R1UI_T2F_C4F_N3F_V3F_SUN", UINT2NUM(0x85CB));
    rb_define_const(*pmROGL, "GL_PHONG_WIN", UINT2NUM(0x80EA));
    rb_define_const(*pmROGL, "GL_PHONG_HINT_WIN", UINT2NUM(0x80EB));
    rb_define_const(*pmROGL, "GL_FOG_SPECULAR_TEXTURE_WIN", UINT2NUM(0x80EC));
}

static void rogl_SetupExtFeature( int load_core )
{
    rogl_pfn_glTbufferMask3DFX = rogl_GetProcAddress("glTbufferMask3DFX");
    rogl_pfn_glDebugMessageEnableAMD = rogl_GetProcAddress("glDebugMessageEnableAMD");
    rogl_pfn_glDebugMessageInsertAMD = rogl_GetProcAddress("glDebugMessageInsertAMD");
    rogl_pfn_glDebugMessageCallbackAMD = rogl_GetProcAddress("glDebugMessageCallbackAMD");
    rogl_pfn_glGetDebugMessageLogAMD = rogl_GetProcAddress("glGetDebugMessageLogAMD");
    rogl_pfn_glBlendFuncIndexedAMD = rogl_GetProcAddress("glBlendFuncIndexedAMD");
    rogl_pfn_glBlendFuncSeparateIndexedAMD = rogl_GetProcAddress("glBlendFuncSeparateIndexedAMD");
    rogl_pfn_glBlendEquationIndexedAMD = rogl_GetProcAddress("glBlendEquationIndexedAMD");
    rogl_pfn_glBlendEquationSeparateIndexedAMD = rogl_GetProcAddress("glBlendEquationSeparateIndexedAMD");
    rogl_pfn_glVertexAttribParameteriAMD = rogl_GetProcAddress("glVertexAttribParameteriAMD");
    rogl_pfn_glMultiDrawArraysIndirectAMD = rogl_GetProcAddress("glMultiDrawArraysIndirectAMD");
    rogl_pfn_glMultiDrawElementsIndirectAMD = rogl_GetProcAddress("glMultiDrawElementsIndirectAMD");
    rogl_pfn_glGenNamesAMD = rogl_GetProcAddress("glGenNamesAMD");
    rogl_pfn_glDeleteNamesAMD = rogl_GetProcAddress("glDeleteNamesAMD");
    rogl_pfn_glIsNameAMD = rogl_GetProcAddress("glIsNameAMD");
    rogl_pfn_glQueryObjectParameteruiAMD = rogl_GetProcAddress("glQueryObjectParameteruiAMD");
    rogl_pfn_glGetPerfMonitorGroupsAMD = rogl_GetProcAddress("glGetPerfMonitorGroupsAMD");
    rogl_pfn_glGetPerfMonitorCountersAMD = rogl_GetProcAddress("glGetPerfMonitorCountersAMD");
    rogl_pfn_glGetPerfMonitorGroupStringAMD = rogl_GetProcAddress("glGetPerfMonitorGroupStringAMD");
    rogl_pfn_glGetPerfMonitorCounterStringAMD = rogl_GetProcAddress("glGetPerfMonitorCounterStringAMD");
    rogl_pfn_glGetPerfMonitorCounterInfoAMD = rogl_GetProcAddress("glGetPerfMonitorCounterInfoAMD");
    rogl_pfn_glGenPerfMonitorsAMD = rogl_GetProcAddress("glGenPerfMonitorsAMD");
    rogl_pfn_glDeletePerfMonitorsAMD = rogl_GetProcAddress("glDeletePerfMonitorsAMD");
    rogl_pfn_glSelectPerfMonitorCountersAMD = rogl_GetProcAddress("glSelectPerfMonitorCountersAMD");
    rogl_pfn_glBeginPerfMonitorAMD = rogl_GetProcAddress("glBeginPerfMonitorAMD");
    rogl_pfn_glEndPerfMonitorAMD = rogl_GetProcAddress("glEndPerfMonitorAMD");
    rogl_pfn_glGetPerfMonitorCounterDataAMD = rogl_GetProcAddress("glGetPerfMonitorCounterDataAMD");
    rogl_pfn_glSetMultisamplefvAMD = rogl_GetProcAddress("glSetMultisamplefvAMD");
    rogl_pfn_glTexStorageSparseAMD = rogl_GetProcAddress("glTexStorageSparseAMD");
    rogl_pfn_glTextureStorageSparseAMD = rogl_GetProcAddress("glTextureStorageSparseAMD");
    rogl_pfn_glStencilOpValueAMD = rogl_GetProcAddress("glStencilOpValueAMD");
    rogl_pfn_glTessellationFactorAMD = rogl_GetProcAddress("glTessellationFactorAMD");
    rogl_pfn_glTessellationModeAMD = rogl_GetProcAddress("glTessellationModeAMD");
    rogl_pfn_glElementPointerAPPLE = rogl_GetProcAddress("glElementPointerAPPLE");
    rogl_pfn_glDrawElementArrayAPPLE = rogl_GetProcAddress("glDrawElementArrayAPPLE");
    rogl_pfn_glDrawRangeElementArrayAPPLE = rogl_GetProcAddress("glDrawRangeElementArrayAPPLE");
    rogl_pfn_glMultiDrawElementArrayAPPLE = rogl_GetProcAddress("glMultiDrawElementArrayAPPLE");
    rogl_pfn_glMultiDrawRangeElementArrayAPPLE = rogl_GetProcAddress("glMultiDrawRangeElementArrayAPPLE");
    rogl_pfn_glGenFencesAPPLE = rogl_GetProcAddress("glGenFencesAPPLE");
    rogl_pfn_glDeleteFencesAPPLE = rogl_GetProcAddress("glDeleteFencesAPPLE");
    rogl_pfn_glSetFenceAPPLE = rogl_GetProcAddress("glSetFenceAPPLE");
    rogl_pfn_glIsFenceAPPLE = rogl_GetProcAddress("glIsFenceAPPLE");
    rogl_pfn_glTestFenceAPPLE = rogl_GetProcAddress("glTestFenceAPPLE");
    rogl_pfn_glFinishFenceAPPLE = rogl_GetProcAddress("glFinishFenceAPPLE");
    rogl_pfn_glTestObjectAPPLE = rogl_GetProcAddress("glTestObjectAPPLE");
    rogl_pfn_glFinishObjectAPPLE = rogl_GetProcAddress("glFinishObjectAPPLE");
    rogl_pfn_glBufferParameteriAPPLE = rogl_GetProcAddress("glBufferParameteriAPPLE");
    rogl_pfn_glFlushMappedBufferRangeAPPLE = rogl_GetProcAddress("glFlushMappedBufferRangeAPPLE");
    rogl_pfn_glObjectPurgeableAPPLE = rogl_GetProcAddress("glObjectPurgeableAPPLE");
    rogl_pfn_glObjectUnpurgeableAPPLE = rogl_GetProcAddress("glObjectUnpurgeableAPPLE");
    rogl_pfn_glGetObjectParameterivAPPLE = rogl_GetProcAddress("glGetObjectParameterivAPPLE");
    rogl_pfn_glTextureRangeAPPLE = rogl_GetProcAddress("glTextureRangeAPPLE");
    rogl_pfn_glGetTexParameterPointervAPPLE = rogl_GetProcAddress("glGetTexParameterPointervAPPLE");
    rogl_pfn_glBindVertexArrayAPPLE = rogl_GetProcAddress("glBindVertexArrayAPPLE");
    rogl_pfn_glDeleteVertexArraysAPPLE = rogl_GetProcAddress("glDeleteVertexArraysAPPLE");
    rogl_pfn_glGenVertexArraysAPPLE = rogl_GetProcAddress("glGenVertexArraysAPPLE");
    rogl_pfn_glIsVertexArrayAPPLE = rogl_GetProcAddress("glIsVertexArrayAPPLE");
    rogl_pfn_glVertexArrayRangeAPPLE = rogl_GetProcAddress("glVertexArrayRangeAPPLE");
    rogl_pfn_glFlushVertexArrayRangeAPPLE = rogl_GetProcAddress("glFlushVertexArrayRangeAPPLE");
    rogl_pfn_glVertexArrayParameteriAPPLE = rogl_GetProcAddress("glVertexArrayParameteriAPPLE");
    rogl_pfn_glEnableVertexAttribAPPLE = rogl_GetProcAddress("glEnableVertexAttribAPPLE");
    rogl_pfn_glDisableVertexAttribAPPLE = rogl_GetProcAddress("glDisableVertexAttribAPPLE");
    rogl_pfn_glIsVertexAttribEnabledAPPLE = rogl_GetProcAddress("glIsVertexAttribEnabledAPPLE");
    rogl_pfn_glMapVertexAttrib1dAPPLE = rogl_GetProcAddress("glMapVertexAttrib1dAPPLE");
    rogl_pfn_glMapVertexAttrib1fAPPLE = rogl_GetProcAddress("glMapVertexAttrib1fAPPLE");
    rogl_pfn_glMapVertexAttrib2dAPPLE = rogl_GetProcAddress("glMapVertexAttrib2dAPPLE");
    rogl_pfn_glMapVertexAttrib2fAPPLE = rogl_GetProcAddress("glMapVertexAttrib2fAPPLE");
    rogl_pfn_glPrimitiveBoundingBoxARB = rogl_GetProcAddress("glPrimitiveBoundingBoxARB");
    rogl_pfn_glGetTextureHandleARB = rogl_GetProcAddress("glGetTextureHandleARB");
    rogl_pfn_glGetTextureSamplerHandleARB = rogl_GetProcAddress("glGetTextureSamplerHandleARB");
    rogl_pfn_glMakeTextureHandleResidentARB = rogl_GetProcAddress("glMakeTextureHandleResidentARB");
    rogl_pfn_glMakeTextureHandleNonResidentARB = rogl_GetProcAddress("glMakeTextureHandleNonResidentARB");
    rogl_pfn_glGetImageHandleARB = rogl_GetProcAddress("glGetImageHandleARB");
    rogl_pfn_glMakeImageHandleResidentARB = rogl_GetProcAddress("glMakeImageHandleResidentARB");
    rogl_pfn_glMakeImageHandleNonResidentARB = rogl_GetProcAddress("glMakeImageHandleNonResidentARB");
    rogl_pfn_glUniformHandleui64ARB = rogl_GetProcAddress("glUniformHandleui64ARB");
    rogl_pfn_glUniformHandleui64vARB = rogl_GetProcAddress("glUniformHandleui64vARB");
    rogl_pfn_glProgramUniformHandleui64ARB = rogl_GetProcAddress("glProgramUniformHandleui64ARB");
    rogl_pfn_glProgramUniformHandleui64vARB = rogl_GetProcAddress("glProgramUniformHandleui64vARB");
    rogl_pfn_glIsTextureHandleResidentARB = rogl_GetProcAddress("glIsTextureHandleResidentARB");
    rogl_pfn_glIsImageHandleResidentARB = rogl_GetProcAddress("glIsImageHandleResidentARB");
    rogl_pfn_glVertexAttribL1ui64ARB = rogl_GetProcAddress("glVertexAttribL1ui64ARB");
    rogl_pfn_glVertexAttribL1ui64vARB = rogl_GetProcAddress("glVertexAttribL1ui64vARB");
    rogl_pfn_glGetVertexAttribLui64vARB = rogl_GetProcAddress("glGetVertexAttribLui64vARB");
    rogl_pfn_glCreateSyncFromCLeventARB = rogl_GetProcAddress("glCreateSyncFromCLeventARB");
    rogl_pfn_glClampColorARB = rogl_GetProcAddress("glClampColorARB");
    rogl_pfn_glDispatchComputeGroupSizeARB = rogl_GetProcAddress("glDispatchComputeGroupSizeARB");
    rogl_pfn_glDebugMessageControlARB = rogl_GetProcAddress("glDebugMessageControlARB");
    rogl_pfn_glDebugMessageInsertARB = rogl_GetProcAddress("glDebugMessageInsertARB");
    rogl_pfn_glDebugMessageCallbackARB = rogl_GetProcAddress("glDebugMessageCallbackARB");
    rogl_pfn_glGetDebugMessageLogARB = rogl_GetProcAddress("glGetDebugMessageLogARB");
    rogl_pfn_glDrawBuffersARB = rogl_GetProcAddress("glDrawBuffersARB");
    rogl_pfn_glBlendEquationiARB = rogl_GetProcAddress("glBlendEquationiARB");
    rogl_pfn_glBlendEquationSeparateiARB = rogl_GetProcAddress("glBlendEquationSeparateiARB");
    rogl_pfn_glBlendFunciARB = rogl_GetProcAddress("glBlendFunciARB");
    rogl_pfn_glBlendFuncSeparateiARB = rogl_GetProcAddress("glBlendFuncSeparateiARB");
    rogl_pfn_glDrawArraysInstancedARB = rogl_GetProcAddress("glDrawArraysInstancedARB");
    rogl_pfn_glDrawElementsInstancedARB = rogl_GetProcAddress("glDrawElementsInstancedARB");
    rogl_pfn_glProgramParameteriARB = rogl_GetProcAddress("glProgramParameteriARB");
    rogl_pfn_glFramebufferTextureARB = rogl_GetProcAddress("glFramebufferTextureARB");
    rogl_pfn_glFramebufferTextureLayerARB = rogl_GetProcAddress("glFramebufferTextureLayerARB");
    rogl_pfn_glFramebufferTextureFaceARB = rogl_GetProcAddress("glFramebufferTextureFaceARB");
    rogl_pfn_glUniform1i64ARB = rogl_GetProcAddress("glUniform1i64ARB");
    rogl_pfn_glUniform2i64ARB = rogl_GetProcAddress("glUniform2i64ARB");
    rogl_pfn_glUniform3i64ARB = rogl_GetProcAddress("glUniform3i64ARB");
    rogl_pfn_glUniform4i64ARB = rogl_GetProcAddress("glUniform4i64ARB");
    rogl_pfn_glUniform1i64vARB = rogl_GetProcAddress("glUniform1i64vARB");
    rogl_pfn_glUniform2i64vARB = rogl_GetProcAddress("glUniform2i64vARB");
    rogl_pfn_glUniform3i64vARB = rogl_GetProcAddress("glUniform3i64vARB");
    rogl_pfn_glUniform4i64vARB = rogl_GetProcAddress("glUniform4i64vARB");
    rogl_pfn_glUniform1ui64ARB = rogl_GetProcAddress("glUniform1ui64ARB");
    rogl_pfn_glUniform2ui64ARB = rogl_GetProcAddress("glUniform2ui64ARB");
    rogl_pfn_glUniform3ui64ARB = rogl_GetProcAddress("glUniform3ui64ARB");
    rogl_pfn_glUniform4ui64ARB = rogl_GetProcAddress("glUniform4ui64ARB");
    rogl_pfn_glUniform1ui64vARB = rogl_GetProcAddress("glUniform1ui64vARB");
    rogl_pfn_glUniform2ui64vARB = rogl_GetProcAddress("glUniform2ui64vARB");
    rogl_pfn_glUniform3ui64vARB = rogl_GetProcAddress("glUniform3ui64vARB");
    rogl_pfn_glUniform4ui64vARB = rogl_GetProcAddress("glUniform4ui64vARB");
    rogl_pfn_glGetUniformi64vARB = rogl_GetProcAddress("glGetUniformi64vARB");
    rogl_pfn_glGetUniformui64vARB = rogl_GetProcAddress("glGetUniformui64vARB");
    rogl_pfn_glGetnUniformi64vARB = rogl_GetProcAddress("glGetnUniformi64vARB");
    rogl_pfn_glGetnUniformui64vARB = rogl_GetProcAddress("glGetnUniformui64vARB");
    rogl_pfn_glProgramUniform1i64ARB = rogl_GetProcAddress("glProgramUniform1i64ARB");
    rogl_pfn_glProgramUniform2i64ARB = rogl_GetProcAddress("glProgramUniform2i64ARB");
    rogl_pfn_glProgramUniform3i64ARB = rogl_GetProcAddress("glProgramUniform3i64ARB");
    rogl_pfn_glProgramUniform4i64ARB = rogl_GetProcAddress("glProgramUniform4i64ARB");
    rogl_pfn_glProgramUniform1i64vARB = rogl_GetProcAddress("glProgramUniform1i64vARB");
    rogl_pfn_glProgramUniform2i64vARB = rogl_GetProcAddress("glProgramUniform2i64vARB");
    rogl_pfn_glProgramUniform3i64vARB = rogl_GetProcAddress("glProgramUniform3i64vARB");
    rogl_pfn_glProgramUniform4i64vARB = rogl_GetProcAddress("glProgramUniform4i64vARB");
    rogl_pfn_glProgramUniform1ui64ARB = rogl_GetProcAddress("glProgramUniform1ui64ARB");
    rogl_pfn_glProgramUniform2ui64ARB = rogl_GetProcAddress("glProgramUniform2ui64ARB");
    rogl_pfn_glProgramUniform3ui64ARB = rogl_GetProcAddress("glProgramUniform3ui64ARB");
    rogl_pfn_glProgramUniform4ui64ARB = rogl_GetProcAddress("glProgramUniform4ui64ARB");
    rogl_pfn_glProgramUniform1ui64vARB = rogl_GetProcAddress("glProgramUniform1ui64vARB");
    rogl_pfn_glProgramUniform2ui64vARB = rogl_GetProcAddress("glProgramUniform2ui64vARB");
    rogl_pfn_glProgramUniform3ui64vARB = rogl_GetProcAddress("glProgramUniform3ui64vARB");
    rogl_pfn_glProgramUniform4ui64vARB = rogl_GetProcAddress("glProgramUniform4ui64vARB");
    rogl_pfn_glColorTable = rogl_GetProcAddress("glColorTable");
    rogl_pfn_glColorTableParameterfv = rogl_GetProcAddress("glColorTableParameterfv");
    rogl_pfn_glColorTableParameteriv = rogl_GetProcAddress("glColorTableParameteriv");
    rogl_pfn_glCopyColorTable = rogl_GetProcAddress("glCopyColorTable");
    rogl_pfn_glGetColorTable = rogl_GetProcAddress("glGetColorTable");
    rogl_pfn_glGetColorTableParameterfv = rogl_GetProcAddress("glGetColorTableParameterfv");
    rogl_pfn_glGetColorTableParameteriv = rogl_GetProcAddress("glGetColorTableParameteriv");
    rogl_pfn_glColorSubTable = rogl_GetProcAddress("glColorSubTable");
    rogl_pfn_glCopyColorSubTable = rogl_GetProcAddress("glCopyColorSubTable");
    rogl_pfn_glConvolutionFilter1D = rogl_GetProcAddress("glConvolutionFilter1D");
    rogl_pfn_glConvolutionFilter2D = rogl_GetProcAddress("glConvolutionFilter2D");
    rogl_pfn_glConvolutionParameterf = rogl_GetProcAddress("glConvolutionParameterf");
    rogl_pfn_glConvolutionParameterfv = rogl_GetProcAddress("glConvolutionParameterfv");
    rogl_pfn_glConvolutionParameteri = rogl_GetProcAddress("glConvolutionParameteri");
    rogl_pfn_glConvolutionParameteriv = rogl_GetProcAddress("glConvolutionParameteriv");
    rogl_pfn_glCopyConvolutionFilter1D = rogl_GetProcAddress("glCopyConvolutionFilter1D");
    rogl_pfn_glCopyConvolutionFilter2D = rogl_GetProcAddress("glCopyConvolutionFilter2D");
    rogl_pfn_glGetConvolutionFilter = rogl_GetProcAddress("glGetConvolutionFilter");
    rogl_pfn_glGetConvolutionParameterfv = rogl_GetProcAddress("glGetConvolutionParameterfv");
    rogl_pfn_glGetConvolutionParameteriv = rogl_GetProcAddress("glGetConvolutionParameteriv");
    rogl_pfn_glGetSeparableFilter = rogl_GetProcAddress("glGetSeparableFilter");
    rogl_pfn_glSeparableFilter2D = rogl_GetProcAddress("glSeparableFilter2D");
    rogl_pfn_glGetHistogram = rogl_GetProcAddress("glGetHistogram");
    rogl_pfn_glGetHistogramParameterfv = rogl_GetProcAddress("glGetHistogramParameterfv");
    rogl_pfn_glGetHistogramParameteriv = rogl_GetProcAddress("glGetHistogramParameteriv");
    rogl_pfn_glGetMinmax = rogl_GetProcAddress("glGetMinmax");
    rogl_pfn_glGetMinmaxParameterfv = rogl_GetProcAddress("glGetMinmaxParameterfv");
    rogl_pfn_glGetMinmaxParameteriv = rogl_GetProcAddress("glGetMinmaxParameteriv");
    rogl_pfn_glHistogram = rogl_GetProcAddress("glHistogram");
    rogl_pfn_glMinmax = rogl_GetProcAddress("glMinmax");
    rogl_pfn_glResetHistogram = rogl_GetProcAddress("glResetHistogram");
    rogl_pfn_glResetMinmax = rogl_GetProcAddress("glResetMinmax");
    rogl_pfn_glMultiDrawArraysIndirectCountARB = rogl_GetProcAddress("glMultiDrawArraysIndirectCountARB");
    rogl_pfn_glMultiDrawElementsIndirectCountARB = rogl_GetProcAddress("glMultiDrawElementsIndirectCountARB");
    rogl_pfn_glVertexAttribDivisorARB = rogl_GetProcAddress("glVertexAttribDivisorARB");
    rogl_pfn_glCurrentPaletteMatrixARB = rogl_GetProcAddress("glCurrentPaletteMatrixARB");
    rogl_pfn_glMatrixIndexubvARB = rogl_GetProcAddress("glMatrixIndexubvARB");
    rogl_pfn_glMatrixIndexusvARB = rogl_GetProcAddress("glMatrixIndexusvARB");
    rogl_pfn_glMatrixIndexuivARB = rogl_GetProcAddress("glMatrixIndexuivARB");
    rogl_pfn_glMatrixIndexPointerARB = rogl_GetProcAddress("glMatrixIndexPointerARB");
    rogl_pfn_glSampleCoverageARB = rogl_GetProcAddress("glSampleCoverageARB");
    rogl_pfn_glActiveTextureARB = rogl_GetProcAddress("glActiveTextureARB");
    rogl_pfn_glClientActiveTextureARB = rogl_GetProcAddress("glClientActiveTextureARB");
    rogl_pfn_glMultiTexCoord1dARB = rogl_GetProcAddress("glMultiTexCoord1dARB");
    rogl_pfn_glMultiTexCoord1dvARB = rogl_GetProcAddress("glMultiTexCoord1dvARB");
    rogl_pfn_glMultiTexCoord1fARB = rogl_GetProcAddress("glMultiTexCoord1fARB");
    rogl_pfn_glMultiTexCoord1fvARB = rogl_GetProcAddress("glMultiTexCoord1fvARB");
    rogl_pfn_glMultiTexCoord1iARB = rogl_GetProcAddress("glMultiTexCoord1iARB");
    rogl_pfn_glMultiTexCoord1ivARB = rogl_GetProcAddress("glMultiTexCoord1ivARB");
    rogl_pfn_glMultiTexCoord1sARB = rogl_GetProcAddress("glMultiTexCoord1sARB");
    rogl_pfn_glMultiTexCoord1svARB = rogl_GetProcAddress("glMultiTexCoord1svARB");
    rogl_pfn_glMultiTexCoord2dARB = rogl_GetProcAddress("glMultiTexCoord2dARB");
    rogl_pfn_glMultiTexCoord2dvARB = rogl_GetProcAddress("glMultiTexCoord2dvARB");
    rogl_pfn_glMultiTexCoord2fARB = rogl_GetProcAddress("glMultiTexCoord2fARB");
    rogl_pfn_glMultiTexCoord2fvARB = rogl_GetProcAddress("glMultiTexCoord2fvARB");
    rogl_pfn_glMultiTexCoord2iARB = rogl_GetProcAddress("glMultiTexCoord2iARB");
    rogl_pfn_glMultiTexCoord2ivARB = rogl_GetProcAddress("glMultiTexCoord2ivARB");
    rogl_pfn_glMultiTexCoord2sARB = rogl_GetProcAddress("glMultiTexCoord2sARB");
    rogl_pfn_glMultiTexCoord2svARB = rogl_GetProcAddress("glMultiTexCoord2svARB");
    rogl_pfn_glMultiTexCoord3dARB = rogl_GetProcAddress("glMultiTexCoord3dARB");
    rogl_pfn_glMultiTexCoord3dvARB = rogl_GetProcAddress("glMultiTexCoord3dvARB");
    rogl_pfn_glMultiTexCoord3fARB = rogl_GetProcAddress("glMultiTexCoord3fARB");
    rogl_pfn_glMultiTexCoord3fvARB = rogl_GetProcAddress("glMultiTexCoord3fvARB");
    rogl_pfn_glMultiTexCoord3iARB = rogl_GetProcAddress("glMultiTexCoord3iARB");
    rogl_pfn_glMultiTexCoord3ivARB = rogl_GetProcAddress("glMultiTexCoord3ivARB");
    rogl_pfn_glMultiTexCoord3sARB = rogl_GetProcAddress("glMultiTexCoord3sARB");
    rogl_pfn_glMultiTexCoord3svARB = rogl_GetProcAddress("glMultiTexCoord3svARB");
    rogl_pfn_glMultiTexCoord4dARB = rogl_GetProcAddress("glMultiTexCoord4dARB");
    rogl_pfn_glMultiTexCoord4dvARB = rogl_GetProcAddress("glMultiTexCoord4dvARB");
    rogl_pfn_glMultiTexCoord4fARB = rogl_GetProcAddress("glMultiTexCoord4fARB");
    rogl_pfn_glMultiTexCoord4fvARB = rogl_GetProcAddress("glMultiTexCoord4fvARB");
    rogl_pfn_glMultiTexCoord4iARB = rogl_GetProcAddress("glMultiTexCoord4iARB");
    rogl_pfn_glMultiTexCoord4ivARB = rogl_GetProcAddress("glMultiTexCoord4ivARB");
    rogl_pfn_glMultiTexCoord4sARB = rogl_GetProcAddress("glMultiTexCoord4sARB");
    rogl_pfn_glMultiTexCoord4svARB = rogl_GetProcAddress("glMultiTexCoord4svARB");
    rogl_pfn_glGenQueriesARB = rogl_GetProcAddress("glGenQueriesARB");
    rogl_pfn_glDeleteQueriesARB = rogl_GetProcAddress("glDeleteQueriesARB");
    rogl_pfn_glIsQueryARB = rogl_GetProcAddress("glIsQueryARB");
    rogl_pfn_glBeginQueryARB = rogl_GetProcAddress("glBeginQueryARB");
    rogl_pfn_glEndQueryARB = rogl_GetProcAddress("glEndQueryARB");
    rogl_pfn_glGetQueryivARB = rogl_GetProcAddress("glGetQueryivARB");
    rogl_pfn_glGetQueryObjectivARB = rogl_GetProcAddress("glGetQueryObjectivARB");
    rogl_pfn_glGetQueryObjectuivARB = rogl_GetProcAddress("glGetQueryObjectuivARB");
    rogl_pfn_glMaxShaderCompilerThreadsARB = rogl_GetProcAddress("glMaxShaderCompilerThreadsARB");
    rogl_pfn_glPointParameterfARB = rogl_GetProcAddress("glPointParameterfARB");
    rogl_pfn_glPointParameterfvARB = rogl_GetProcAddress("glPointParameterfvARB");
    rogl_pfn_glGetGraphicsResetStatusARB = rogl_GetProcAddress("glGetGraphicsResetStatusARB");
    rogl_pfn_glGetnTexImageARB = rogl_GetProcAddress("glGetnTexImageARB");
    rogl_pfn_glReadnPixelsARB = rogl_GetProcAddress("glReadnPixelsARB");
    rogl_pfn_glGetnCompressedTexImageARB = rogl_GetProcAddress("glGetnCompressedTexImageARB");
    rogl_pfn_glGetnUniformfvARB = rogl_GetProcAddress("glGetnUniformfvARB");
    rogl_pfn_glGetnUniformivARB = rogl_GetProcAddress("glGetnUniformivARB");
    rogl_pfn_glGetnUniformuivARB = rogl_GetProcAddress("glGetnUniformuivARB");
    rogl_pfn_glGetnUniformdvARB = rogl_GetProcAddress("glGetnUniformdvARB");
    rogl_pfn_glGetnMapdvARB = rogl_GetProcAddress("glGetnMapdvARB");
    rogl_pfn_glGetnMapfvARB = rogl_GetProcAddress("glGetnMapfvARB");
    rogl_pfn_glGetnMapivARB = rogl_GetProcAddress("glGetnMapivARB");
    rogl_pfn_glGetnPixelMapfvARB = rogl_GetProcAddress("glGetnPixelMapfvARB");
    rogl_pfn_glGetnPixelMapuivARB = rogl_GetProcAddress("glGetnPixelMapuivARB");
    rogl_pfn_glGetnPixelMapusvARB = rogl_GetProcAddress("glGetnPixelMapusvARB");
    rogl_pfn_glGetnPolygonStippleARB = rogl_GetProcAddress("glGetnPolygonStippleARB");
    rogl_pfn_glGetnColorTableARB = rogl_GetProcAddress("glGetnColorTableARB");
    rogl_pfn_glGetnConvolutionFilterARB = rogl_GetProcAddress("glGetnConvolutionFilterARB");
    rogl_pfn_glGetnSeparableFilterARB = rogl_GetProcAddress("glGetnSeparableFilterARB");
    rogl_pfn_glGetnHistogramARB = rogl_GetProcAddress("glGetnHistogramARB");
    rogl_pfn_glGetnMinmaxARB = rogl_GetProcAddress("glGetnMinmaxARB");
    rogl_pfn_glFramebufferSampleLocationsfvARB = rogl_GetProcAddress("glFramebufferSampleLocationsfvARB");
    rogl_pfn_glNamedFramebufferSampleLocationsfvARB = rogl_GetProcAddress("glNamedFramebufferSampleLocationsfvARB");
    rogl_pfn_glEvaluateDepthValuesARB = rogl_GetProcAddress("glEvaluateDepthValuesARB");
    rogl_pfn_glMinSampleShadingARB = rogl_GetProcAddress("glMinSampleShadingARB");
    rogl_pfn_glDeleteObjectARB = rogl_GetProcAddress("glDeleteObjectARB");
    rogl_pfn_glGetHandleARB = rogl_GetProcAddress("glGetHandleARB");
    rogl_pfn_glDetachObjectARB = rogl_GetProcAddress("glDetachObjectARB");
    rogl_pfn_glCreateShaderObjectARB = rogl_GetProcAddress("glCreateShaderObjectARB");
    rogl_pfn_glShaderSourceARB = rogl_GetProcAddress("glShaderSourceARB");
    rogl_pfn_glCompileShaderARB = rogl_GetProcAddress("glCompileShaderARB");
    rogl_pfn_glCreateProgramObjectARB = rogl_GetProcAddress("glCreateProgramObjectARB");
    rogl_pfn_glAttachObjectARB = rogl_GetProcAddress("glAttachObjectARB");
    rogl_pfn_glLinkProgramARB = rogl_GetProcAddress("glLinkProgramARB");
    rogl_pfn_glUseProgramObjectARB = rogl_GetProcAddress("glUseProgramObjectARB");
    rogl_pfn_glValidateProgramARB = rogl_GetProcAddress("glValidateProgramARB");
    rogl_pfn_glUniform1fARB = rogl_GetProcAddress("glUniform1fARB");
    rogl_pfn_glUniform2fARB = rogl_GetProcAddress("glUniform2fARB");
    rogl_pfn_glUniform3fARB = rogl_GetProcAddress("glUniform3fARB");
    rogl_pfn_glUniform4fARB = rogl_GetProcAddress("glUniform4fARB");
    rogl_pfn_glUniform1iARB = rogl_GetProcAddress("glUniform1iARB");
    rogl_pfn_glUniform2iARB = rogl_GetProcAddress("glUniform2iARB");
    rogl_pfn_glUniform3iARB = rogl_GetProcAddress("glUniform3iARB");
    rogl_pfn_glUniform4iARB = rogl_GetProcAddress("glUniform4iARB");
    rogl_pfn_glUniform1fvARB = rogl_GetProcAddress("glUniform1fvARB");
    rogl_pfn_glUniform2fvARB = rogl_GetProcAddress("glUniform2fvARB");
    rogl_pfn_glUniform3fvARB = rogl_GetProcAddress("glUniform3fvARB");
    rogl_pfn_glUniform4fvARB = rogl_GetProcAddress("glUniform4fvARB");
    rogl_pfn_glUniform1ivARB = rogl_GetProcAddress("glUniform1ivARB");
    rogl_pfn_glUniform2ivARB = rogl_GetProcAddress("glUniform2ivARB");
    rogl_pfn_glUniform3ivARB = rogl_GetProcAddress("glUniform3ivARB");
    rogl_pfn_glUniform4ivARB = rogl_GetProcAddress("glUniform4ivARB");
    rogl_pfn_glUniformMatrix2fvARB = rogl_GetProcAddress("glUniformMatrix2fvARB");
    rogl_pfn_glUniformMatrix3fvARB = rogl_GetProcAddress("glUniformMatrix3fvARB");
    rogl_pfn_glUniformMatrix4fvARB = rogl_GetProcAddress("glUniformMatrix4fvARB");
    rogl_pfn_glGetObjectParameterfvARB = rogl_GetProcAddress("glGetObjectParameterfvARB");
    rogl_pfn_glGetObjectParameterivARB = rogl_GetProcAddress("glGetObjectParameterivARB");
    rogl_pfn_glGetInfoLogARB = rogl_GetProcAddress("glGetInfoLogARB");
    rogl_pfn_glGetAttachedObjectsARB = rogl_GetProcAddress("glGetAttachedObjectsARB");
    rogl_pfn_glGetUniformLocationARB = rogl_GetProcAddress("glGetUniformLocationARB");
    rogl_pfn_glGetActiveUniformARB = rogl_GetProcAddress("glGetActiveUniformARB");
    rogl_pfn_glGetUniformfvARB = rogl_GetProcAddress("glGetUniformfvARB");
    rogl_pfn_glGetUniformivARB = rogl_GetProcAddress("glGetUniformivARB");
    rogl_pfn_glGetShaderSourceARB = rogl_GetProcAddress("glGetShaderSourceARB");
    rogl_pfn_glNamedStringARB = rogl_GetProcAddress("glNamedStringARB");
    rogl_pfn_glDeleteNamedStringARB = rogl_GetProcAddress("glDeleteNamedStringARB");
    rogl_pfn_glCompileShaderIncludeARB = rogl_GetProcAddress("glCompileShaderIncludeARB");
    rogl_pfn_glIsNamedStringARB = rogl_GetProcAddress("glIsNamedStringARB");
    rogl_pfn_glGetNamedStringARB = rogl_GetProcAddress("glGetNamedStringARB");
    rogl_pfn_glGetNamedStringivARB = rogl_GetProcAddress("glGetNamedStringivARB");
    rogl_pfn_glBufferPageCommitmentARB = rogl_GetProcAddress("glBufferPageCommitmentARB");
    rogl_pfn_glNamedBufferPageCommitmentEXT = rogl_GetProcAddress("glNamedBufferPageCommitmentEXT");
    rogl_pfn_glNamedBufferPageCommitmentARB = rogl_GetProcAddress("glNamedBufferPageCommitmentARB");
    rogl_pfn_glTexPageCommitmentARB = rogl_GetProcAddress("glTexPageCommitmentARB");
    rogl_pfn_glTexBufferARB = rogl_GetProcAddress("glTexBufferARB");
    rogl_pfn_glCompressedTexImage3DARB = rogl_GetProcAddress("glCompressedTexImage3DARB");
    rogl_pfn_glCompressedTexImage2DARB = rogl_GetProcAddress("glCompressedTexImage2DARB");
    rogl_pfn_glCompressedTexImage1DARB = rogl_GetProcAddress("glCompressedTexImage1DARB");
    rogl_pfn_glCompressedTexSubImage3DARB = rogl_GetProcAddress("glCompressedTexSubImage3DARB");
    rogl_pfn_glCompressedTexSubImage2DARB = rogl_GetProcAddress("glCompressedTexSubImage2DARB");
    rogl_pfn_glCompressedTexSubImage1DARB = rogl_GetProcAddress("glCompressedTexSubImage1DARB");
    rogl_pfn_glGetCompressedTexImageARB = rogl_GetProcAddress("glGetCompressedTexImageARB");
    rogl_pfn_glLoadTransposeMatrixfARB = rogl_GetProcAddress("glLoadTransposeMatrixfARB");
    rogl_pfn_glLoadTransposeMatrixdARB = rogl_GetProcAddress("glLoadTransposeMatrixdARB");
    rogl_pfn_glMultTransposeMatrixfARB = rogl_GetProcAddress("glMultTransposeMatrixfARB");
    rogl_pfn_glMultTransposeMatrixdARB = rogl_GetProcAddress("glMultTransposeMatrixdARB");
    rogl_pfn_glWeightbvARB = rogl_GetProcAddress("glWeightbvARB");
    rogl_pfn_glWeightsvARB = rogl_GetProcAddress("glWeightsvARB");
    rogl_pfn_glWeightivARB = rogl_GetProcAddress("glWeightivARB");
    rogl_pfn_glWeightfvARB = rogl_GetProcAddress("glWeightfvARB");
    rogl_pfn_glWeightdvARB = rogl_GetProcAddress("glWeightdvARB");
    rogl_pfn_glWeightubvARB = rogl_GetProcAddress("glWeightubvARB");
    rogl_pfn_glWeightusvARB = rogl_GetProcAddress("glWeightusvARB");
    rogl_pfn_glWeightuivARB = rogl_GetProcAddress("glWeightuivARB");
    rogl_pfn_glWeightPointerARB = rogl_GetProcAddress("glWeightPointerARB");
    rogl_pfn_glVertexBlendARB = rogl_GetProcAddress("glVertexBlendARB");
    rogl_pfn_glBindBufferARB = rogl_GetProcAddress("glBindBufferARB");
    rogl_pfn_glDeleteBuffersARB = rogl_GetProcAddress("glDeleteBuffersARB");
    rogl_pfn_glGenBuffersARB = rogl_GetProcAddress("glGenBuffersARB");
    rogl_pfn_glIsBufferARB = rogl_GetProcAddress("glIsBufferARB");
    rogl_pfn_glBufferDataARB = rogl_GetProcAddress("glBufferDataARB");
    rogl_pfn_glBufferSubDataARB = rogl_GetProcAddress("glBufferSubDataARB");
    rogl_pfn_glGetBufferSubDataARB = rogl_GetProcAddress("glGetBufferSubDataARB");
    rogl_pfn_glMapBufferARB = rogl_GetProcAddress("glMapBufferARB");
    rogl_pfn_glUnmapBufferARB = rogl_GetProcAddress("glUnmapBufferARB");
    rogl_pfn_glGetBufferParameterivARB = rogl_GetProcAddress("glGetBufferParameterivARB");
    rogl_pfn_glGetBufferPointervARB = rogl_GetProcAddress("glGetBufferPointervARB");
    rogl_pfn_glBindAttribLocationARB = rogl_GetProcAddress("glBindAttribLocationARB");
    rogl_pfn_glGetActiveAttribARB = rogl_GetProcAddress("glGetActiveAttribARB");
    rogl_pfn_glGetAttribLocationARB = rogl_GetProcAddress("glGetAttribLocationARB");
    rogl_pfn_glWindowPos2dARB = rogl_GetProcAddress("glWindowPos2dARB");
    rogl_pfn_glWindowPos2dvARB = rogl_GetProcAddress("glWindowPos2dvARB");
    rogl_pfn_glWindowPos2fARB = rogl_GetProcAddress("glWindowPos2fARB");
    rogl_pfn_glWindowPos2fvARB = rogl_GetProcAddress("glWindowPos2fvARB");
    rogl_pfn_glWindowPos2iARB = rogl_GetProcAddress("glWindowPos2iARB");
    rogl_pfn_glWindowPos2ivARB = rogl_GetProcAddress("glWindowPos2ivARB");
    rogl_pfn_glWindowPos2sARB = rogl_GetProcAddress("glWindowPos2sARB");
    rogl_pfn_glWindowPos2svARB = rogl_GetProcAddress("glWindowPos2svARB");
    rogl_pfn_glWindowPos3dARB = rogl_GetProcAddress("glWindowPos3dARB");
    rogl_pfn_glWindowPos3dvARB = rogl_GetProcAddress("glWindowPos3dvARB");
    rogl_pfn_glWindowPos3fARB = rogl_GetProcAddress("glWindowPos3fARB");
    rogl_pfn_glWindowPos3fvARB = rogl_GetProcAddress("glWindowPos3fvARB");
    rogl_pfn_glWindowPos3iARB = rogl_GetProcAddress("glWindowPos3iARB");
    rogl_pfn_glWindowPos3ivARB = rogl_GetProcAddress("glWindowPos3ivARB");
    rogl_pfn_glWindowPos3sARB = rogl_GetProcAddress("glWindowPos3sARB");
    rogl_pfn_glWindowPos3svARB = rogl_GetProcAddress("glWindowPos3svARB");
    rogl_pfn_glDrawBuffersATI = rogl_GetProcAddress("glDrawBuffersATI");
    rogl_pfn_glElementPointerATI = rogl_GetProcAddress("glElementPointerATI");
    rogl_pfn_glDrawElementArrayATI = rogl_GetProcAddress("glDrawElementArrayATI");
    rogl_pfn_glDrawRangeElementArrayATI = rogl_GetProcAddress("glDrawRangeElementArrayATI");
    rogl_pfn_glTexBumpParameterivATI = rogl_GetProcAddress("glTexBumpParameterivATI");
    rogl_pfn_glTexBumpParameterfvATI = rogl_GetProcAddress("glTexBumpParameterfvATI");
    rogl_pfn_glGetTexBumpParameterivATI = rogl_GetProcAddress("glGetTexBumpParameterivATI");
    rogl_pfn_glGetTexBumpParameterfvATI = rogl_GetProcAddress("glGetTexBumpParameterfvATI");
    rogl_pfn_glGenFragmentShadersATI = rogl_GetProcAddress("glGenFragmentShadersATI");
    rogl_pfn_glBindFragmentShaderATI = rogl_GetProcAddress("glBindFragmentShaderATI");
    rogl_pfn_glDeleteFragmentShaderATI = rogl_GetProcAddress("glDeleteFragmentShaderATI");
    rogl_pfn_glBeginFragmentShaderATI = rogl_GetProcAddress("glBeginFragmentShaderATI");
    rogl_pfn_glEndFragmentShaderATI = rogl_GetProcAddress("glEndFragmentShaderATI");
    rogl_pfn_glPassTexCoordATI = rogl_GetProcAddress("glPassTexCoordATI");
    rogl_pfn_glSampleMapATI = rogl_GetProcAddress("glSampleMapATI");
    rogl_pfn_glColorFragmentOp1ATI = rogl_GetProcAddress("glColorFragmentOp1ATI");
    rogl_pfn_glColorFragmentOp2ATI = rogl_GetProcAddress("glColorFragmentOp2ATI");
    rogl_pfn_glColorFragmentOp3ATI = rogl_GetProcAddress("glColorFragmentOp3ATI");
    rogl_pfn_glAlphaFragmentOp1ATI = rogl_GetProcAddress("glAlphaFragmentOp1ATI");
    rogl_pfn_glAlphaFragmentOp2ATI = rogl_GetProcAddress("glAlphaFragmentOp2ATI");
    rogl_pfn_glAlphaFragmentOp3ATI = rogl_GetProcAddress("glAlphaFragmentOp3ATI");
    rogl_pfn_glSetFragmentShaderConstantATI = rogl_GetProcAddress("glSetFragmentShaderConstantATI");
    rogl_pfn_glMapObjectBufferATI = rogl_GetProcAddress("glMapObjectBufferATI");
    rogl_pfn_glUnmapObjectBufferATI = rogl_GetProcAddress("glUnmapObjectBufferATI");
    rogl_pfn_glPNTrianglesiATI = rogl_GetProcAddress("glPNTrianglesiATI");
    rogl_pfn_glPNTrianglesfATI = rogl_GetProcAddress("glPNTrianglesfATI");
    rogl_pfn_glStencilOpSeparateATI = rogl_GetProcAddress("glStencilOpSeparateATI");
    rogl_pfn_glStencilFuncSeparateATI = rogl_GetProcAddress("glStencilFuncSeparateATI");
    rogl_pfn_glNewObjectBufferATI = rogl_GetProcAddress("glNewObjectBufferATI");
    rogl_pfn_glIsObjectBufferATI = rogl_GetProcAddress("glIsObjectBufferATI");
    rogl_pfn_glUpdateObjectBufferATI = rogl_GetProcAddress("glUpdateObjectBufferATI");
    rogl_pfn_glGetObjectBufferfvATI = rogl_GetProcAddress("glGetObjectBufferfvATI");
    rogl_pfn_glGetObjectBufferivATI = rogl_GetProcAddress("glGetObjectBufferivATI");
    rogl_pfn_glFreeObjectBufferATI = rogl_GetProcAddress("glFreeObjectBufferATI");
    rogl_pfn_glArrayObjectATI = rogl_GetProcAddress("glArrayObjectATI");
    rogl_pfn_glGetArrayObjectfvATI = rogl_GetProcAddress("glGetArrayObjectfvATI");
    rogl_pfn_glGetArrayObjectivATI = rogl_GetProcAddress("glGetArrayObjectivATI");
    rogl_pfn_glVariantArrayObjectATI = rogl_GetProcAddress("glVariantArrayObjectATI");
    rogl_pfn_glGetVariantArrayObjectfvATI = rogl_GetProcAddress("glGetVariantArrayObjectfvATI");
    rogl_pfn_glGetVariantArrayObjectivATI = rogl_GetProcAddress("glGetVariantArrayObjectivATI");
    rogl_pfn_glVertexAttribArrayObjectATI = rogl_GetProcAddress("glVertexAttribArrayObjectATI");
    rogl_pfn_glGetVertexAttribArrayObjectfvATI = rogl_GetProcAddress("glGetVertexAttribArrayObjectfvATI");
    rogl_pfn_glGetVertexAttribArrayObjectivATI = rogl_GetProcAddress("glGetVertexAttribArrayObjectivATI");
    rogl_pfn_glVertexStream1sATI = rogl_GetProcAddress("glVertexStream1sATI");
    rogl_pfn_glVertexStream1svATI = rogl_GetProcAddress("glVertexStream1svATI");
    rogl_pfn_glVertexStream1iATI = rogl_GetProcAddress("glVertexStream1iATI");
    rogl_pfn_glVertexStream1ivATI = rogl_GetProcAddress("glVertexStream1ivATI");
    rogl_pfn_glVertexStream1fATI = rogl_GetProcAddress("glVertexStream1fATI");
    rogl_pfn_glVertexStream1fvATI = rogl_GetProcAddress("glVertexStream1fvATI");
    rogl_pfn_glVertexStream1dATI = rogl_GetProcAddress("glVertexStream1dATI");
    rogl_pfn_glVertexStream1dvATI = rogl_GetProcAddress("glVertexStream1dvATI");
    rogl_pfn_glVertexStream2sATI = rogl_GetProcAddress("glVertexStream2sATI");
    rogl_pfn_glVertexStream2svATI = rogl_GetProcAddress("glVertexStream2svATI");
    rogl_pfn_glVertexStream2iATI = rogl_GetProcAddress("glVertexStream2iATI");
    rogl_pfn_glVertexStream2ivATI = rogl_GetProcAddress("glVertexStream2ivATI");
    rogl_pfn_glVertexStream2fATI = rogl_GetProcAddress("glVertexStream2fATI");
    rogl_pfn_glVertexStream2fvATI = rogl_GetProcAddress("glVertexStream2fvATI");
    rogl_pfn_glVertexStream2dATI = rogl_GetProcAddress("glVertexStream2dATI");
    rogl_pfn_glVertexStream2dvATI = rogl_GetProcAddress("glVertexStream2dvATI");
    rogl_pfn_glVertexStream3sATI = rogl_GetProcAddress("glVertexStream3sATI");
    rogl_pfn_glVertexStream3svATI = rogl_GetProcAddress("glVertexStream3svATI");
    rogl_pfn_glVertexStream3iATI = rogl_GetProcAddress("glVertexStream3iATI");
    rogl_pfn_glVertexStream3ivATI = rogl_GetProcAddress("glVertexStream3ivATI");
    rogl_pfn_glVertexStream3fATI = rogl_GetProcAddress("glVertexStream3fATI");
    rogl_pfn_glVertexStream3fvATI = rogl_GetProcAddress("glVertexStream3fvATI");
    rogl_pfn_glVertexStream3dATI = rogl_GetProcAddress("glVertexStream3dATI");
    rogl_pfn_glVertexStream3dvATI = rogl_GetProcAddress("glVertexStream3dvATI");
    rogl_pfn_glVertexStream4sATI = rogl_GetProcAddress("glVertexStream4sATI");
    rogl_pfn_glVertexStream4svATI = rogl_GetProcAddress("glVertexStream4svATI");
    rogl_pfn_glVertexStream4iATI = rogl_GetProcAddress("glVertexStream4iATI");
    rogl_pfn_glVertexStream4ivATI = rogl_GetProcAddress("glVertexStream4ivATI");
    rogl_pfn_glVertexStream4fATI = rogl_GetProcAddress("glVertexStream4fATI");
    rogl_pfn_glVertexStream4fvATI = rogl_GetProcAddress("glVertexStream4fvATI");
    rogl_pfn_glVertexStream4dATI = rogl_GetProcAddress("glVertexStream4dATI");
    rogl_pfn_glVertexStream4dvATI = rogl_GetProcAddress("glVertexStream4dvATI");
    rogl_pfn_glNormalStream3bATI = rogl_GetProcAddress("glNormalStream3bATI");
    rogl_pfn_glNormalStream3bvATI = rogl_GetProcAddress("glNormalStream3bvATI");
    rogl_pfn_glNormalStream3sATI = rogl_GetProcAddress("glNormalStream3sATI");
    rogl_pfn_glNormalStream3svATI = rogl_GetProcAddress("glNormalStream3svATI");
    rogl_pfn_glNormalStream3iATI = rogl_GetProcAddress("glNormalStream3iATI");
    rogl_pfn_glNormalStream3ivATI = rogl_GetProcAddress("glNormalStream3ivATI");
    rogl_pfn_glNormalStream3fATI = rogl_GetProcAddress("glNormalStream3fATI");
    rogl_pfn_glNormalStream3fvATI = rogl_GetProcAddress("glNormalStream3fvATI");
    rogl_pfn_glNormalStream3dATI = rogl_GetProcAddress("glNormalStream3dATI");
    rogl_pfn_glNormalStream3dvATI = rogl_GetProcAddress("glNormalStream3dvATI");
    rogl_pfn_glClientActiveVertexStreamATI = rogl_GetProcAddress("glClientActiveVertexStreamATI");
    rogl_pfn_glVertexBlendEnviATI = rogl_GetProcAddress("glVertexBlendEnviATI");
    rogl_pfn_glVertexBlendEnvfATI = rogl_GetProcAddress("glVertexBlendEnvfATI");
    rogl_pfn_glUniformBufferEXT = rogl_GetProcAddress("glUniformBufferEXT");
    rogl_pfn_glGetUniformBufferSizeEXT = rogl_GetProcAddress("glGetUniformBufferSizeEXT");
    rogl_pfn_glGetUniformOffsetEXT = rogl_GetProcAddress("glGetUniformOffsetEXT");
    rogl_pfn_glBlendColorEXT = rogl_GetProcAddress("glBlendColorEXT");
    rogl_pfn_glBlendEquationSeparateEXT = rogl_GetProcAddress("glBlendEquationSeparateEXT");
    rogl_pfn_glBlendFuncSeparateEXT = rogl_GetProcAddress("glBlendFuncSeparateEXT");
    rogl_pfn_glBlendEquationEXT = rogl_GetProcAddress("glBlendEquationEXT");
    rogl_pfn_glColorSubTableEXT = rogl_GetProcAddress("glColorSubTableEXT");
    rogl_pfn_glCopyColorSubTableEXT = rogl_GetProcAddress("glCopyColorSubTableEXT");
    rogl_pfn_glLockArraysEXT = rogl_GetProcAddress("glLockArraysEXT");
    rogl_pfn_glUnlockArraysEXT = rogl_GetProcAddress("glUnlockArraysEXT");
    rogl_pfn_glConvolutionFilter1DEXT = rogl_GetProcAddress("glConvolutionFilter1DEXT");
    rogl_pfn_glConvolutionFilter2DEXT = rogl_GetProcAddress("glConvolutionFilter2DEXT");
    rogl_pfn_glConvolutionParameterfEXT = rogl_GetProcAddress("glConvolutionParameterfEXT");
    rogl_pfn_glConvolutionParameterfvEXT = rogl_GetProcAddress("glConvolutionParameterfvEXT");
    rogl_pfn_glConvolutionParameteriEXT = rogl_GetProcAddress("glConvolutionParameteriEXT");
    rogl_pfn_glConvolutionParameterivEXT = rogl_GetProcAddress("glConvolutionParameterivEXT");
    rogl_pfn_glCopyConvolutionFilter1DEXT = rogl_GetProcAddress("glCopyConvolutionFilter1DEXT");
    rogl_pfn_glCopyConvolutionFilter2DEXT = rogl_GetProcAddress("glCopyConvolutionFilter2DEXT");
    rogl_pfn_glGetConvolutionFilterEXT = rogl_GetProcAddress("glGetConvolutionFilterEXT");
    rogl_pfn_glGetConvolutionParameterfvEXT = rogl_GetProcAddress("glGetConvolutionParameterfvEXT");
    rogl_pfn_glGetConvolutionParameterivEXT = rogl_GetProcAddress("glGetConvolutionParameterivEXT");
    rogl_pfn_glGetSeparableFilterEXT = rogl_GetProcAddress("glGetSeparableFilterEXT");
    rogl_pfn_glSeparableFilter2DEXT = rogl_GetProcAddress("glSeparableFilter2DEXT");
    rogl_pfn_glTangent3bEXT = rogl_GetProcAddress("glTangent3bEXT");
    rogl_pfn_glTangent3bvEXT = rogl_GetProcAddress("glTangent3bvEXT");
    rogl_pfn_glTangent3dEXT = rogl_GetProcAddress("glTangent3dEXT");
    rogl_pfn_glTangent3dvEXT = rogl_GetProcAddress("glTangent3dvEXT");
    rogl_pfn_glTangent3fEXT = rogl_GetProcAddress("glTangent3fEXT");
    rogl_pfn_glTangent3fvEXT = rogl_GetProcAddress("glTangent3fvEXT");
    rogl_pfn_glTangent3iEXT = rogl_GetProcAddress("glTangent3iEXT");
    rogl_pfn_glTangent3ivEXT = rogl_GetProcAddress("glTangent3ivEXT");
    rogl_pfn_glTangent3sEXT = rogl_GetProcAddress("glTangent3sEXT");
    rogl_pfn_glTangent3svEXT = rogl_GetProcAddress("glTangent3svEXT");
    rogl_pfn_glBinormal3bEXT = rogl_GetProcAddress("glBinormal3bEXT");
    rogl_pfn_glBinormal3bvEXT = rogl_GetProcAddress("glBinormal3bvEXT");
    rogl_pfn_glBinormal3dEXT = rogl_GetProcAddress("glBinormal3dEXT");
    rogl_pfn_glBinormal3dvEXT = rogl_GetProcAddress("glBinormal3dvEXT");
    rogl_pfn_glBinormal3fEXT = rogl_GetProcAddress("glBinormal3fEXT");
    rogl_pfn_glBinormal3fvEXT = rogl_GetProcAddress("glBinormal3fvEXT");
    rogl_pfn_glBinormal3iEXT = rogl_GetProcAddress("glBinormal3iEXT");
    rogl_pfn_glBinormal3ivEXT = rogl_GetProcAddress("glBinormal3ivEXT");
    rogl_pfn_glBinormal3sEXT = rogl_GetProcAddress("glBinormal3sEXT");
    rogl_pfn_glBinormal3svEXT = rogl_GetProcAddress("glBinormal3svEXT");
    rogl_pfn_glTangentPointerEXT = rogl_GetProcAddress("glTangentPointerEXT");
    rogl_pfn_glBinormalPointerEXT = rogl_GetProcAddress("glBinormalPointerEXT");
    rogl_pfn_glCopyTexImage1DEXT = rogl_GetProcAddress("glCopyTexImage1DEXT");
    rogl_pfn_glCopyTexImage2DEXT = rogl_GetProcAddress("glCopyTexImage2DEXT");
    rogl_pfn_glCopyTexSubImage1DEXT = rogl_GetProcAddress("glCopyTexSubImage1DEXT");
    rogl_pfn_glCopyTexSubImage2DEXT = rogl_GetProcAddress("glCopyTexSubImage2DEXT");
    rogl_pfn_glCopyTexSubImage3DEXT = rogl_GetProcAddress("glCopyTexSubImage3DEXT");
    rogl_pfn_glCullParameterdvEXT = rogl_GetProcAddress("glCullParameterdvEXT");
    rogl_pfn_glCullParameterfvEXT = rogl_GetProcAddress("glCullParameterfvEXT");
    rogl_pfn_glLabelObjectEXT = rogl_GetProcAddress("glLabelObjectEXT");
    rogl_pfn_glGetObjectLabelEXT = rogl_GetProcAddress("glGetObjectLabelEXT");
    rogl_pfn_glInsertEventMarkerEXT = rogl_GetProcAddress("glInsertEventMarkerEXT");
    rogl_pfn_glPushGroupMarkerEXT = rogl_GetProcAddress("glPushGroupMarkerEXT");
    rogl_pfn_glPopGroupMarkerEXT = rogl_GetProcAddress("glPopGroupMarkerEXT");
    rogl_pfn_glDepthBoundsEXT = rogl_GetProcAddress("glDepthBoundsEXT");
    rogl_pfn_glMatrixLoadfEXT = rogl_GetProcAddress("glMatrixLoadfEXT");
    rogl_pfn_glMatrixLoaddEXT = rogl_GetProcAddress("glMatrixLoaddEXT");
    rogl_pfn_glMatrixMultfEXT = rogl_GetProcAddress("glMatrixMultfEXT");
    rogl_pfn_glMatrixMultdEXT = rogl_GetProcAddress("glMatrixMultdEXT");
    rogl_pfn_glMatrixLoadIdentityEXT = rogl_GetProcAddress("glMatrixLoadIdentityEXT");
    rogl_pfn_glMatrixRotatefEXT = rogl_GetProcAddress("glMatrixRotatefEXT");
    rogl_pfn_glMatrixRotatedEXT = rogl_GetProcAddress("glMatrixRotatedEXT");
    rogl_pfn_glMatrixScalefEXT = rogl_GetProcAddress("glMatrixScalefEXT");
    rogl_pfn_glMatrixScaledEXT = rogl_GetProcAddress("glMatrixScaledEXT");
    rogl_pfn_glMatrixTranslatefEXT = rogl_GetProcAddress("glMatrixTranslatefEXT");
    rogl_pfn_glMatrixTranslatedEXT = rogl_GetProcAddress("glMatrixTranslatedEXT");
    rogl_pfn_glMatrixFrustumEXT = rogl_GetProcAddress("glMatrixFrustumEXT");
    rogl_pfn_glMatrixOrthoEXT = rogl_GetProcAddress("glMatrixOrthoEXT");
    rogl_pfn_glMatrixPopEXT = rogl_GetProcAddress("glMatrixPopEXT");
    rogl_pfn_glMatrixPushEXT = rogl_GetProcAddress("glMatrixPushEXT");
    rogl_pfn_glClientAttribDefaultEXT = rogl_GetProcAddress("glClientAttribDefaultEXT");
    rogl_pfn_glPushClientAttribDefaultEXT = rogl_GetProcAddress("glPushClientAttribDefaultEXT");
    rogl_pfn_glTextureParameterfEXT = rogl_GetProcAddress("glTextureParameterfEXT");
    rogl_pfn_glTextureParameterfvEXT = rogl_GetProcAddress("glTextureParameterfvEXT");
    rogl_pfn_glTextureParameteriEXT = rogl_GetProcAddress("glTextureParameteriEXT");
    rogl_pfn_glTextureParameterivEXT = rogl_GetProcAddress("glTextureParameterivEXT");
    rogl_pfn_glTextureImage1DEXT = rogl_GetProcAddress("glTextureImage1DEXT");
    rogl_pfn_glTextureImage2DEXT = rogl_GetProcAddress("glTextureImage2DEXT");
    rogl_pfn_glTextureSubImage1DEXT = rogl_GetProcAddress("glTextureSubImage1DEXT");
    rogl_pfn_glTextureSubImage2DEXT = rogl_GetProcAddress("glTextureSubImage2DEXT");
    rogl_pfn_glCopyTextureImage1DEXT = rogl_GetProcAddress("glCopyTextureImage1DEXT");
    rogl_pfn_glCopyTextureImage2DEXT = rogl_GetProcAddress("glCopyTextureImage2DEXT");
    rogl_pfn_glCopyTextureSubImage1DEXT = rogl_GetProcAddress("glCopyTextureSubImage1DEXT");
    rogl_pfn_glCopyTextureSubImage2DEXT = rogl_GetProcAddress("glCopyTextureSubImage2DEXT");
    rogl_pfn_glGetTextureImageEXT = rogl_GetProcAddress("glGetTextureImageEXT");
    rogl_pfn_glGetTextureParameterfvEXT = rogl_GetProcAddress("glGetTextureParameterfvEXT");
    rogl_pfn_glGetTextureParameterivEXT = rogl_GetProcAddress("glGetTextureParameterivEXT");
    rogl_pfn_glGetTextureLevelParameterfvEXT = rogl_GetProcAddress("glGetTextureLevelParameterfvEXT");
    rogl_pfn_glGetTextureLevelParameterivEXT = rogl_GetProcAddress("glGetTextureLevelParameterivEXT");
    rogl_pfn_glTextureImage3DEXT = rogl_GetProcAddress("glTextureImage3DEXT");
    rogl_pfn_glTextureSubImage3DEXT = rogl_GetProcAddress("glTextureSubImage3DEXT");
    rogl_pfn_glCopyTextureSubImage3DEXT = rogl_GetProcAddress("glCopyTextureSubImage3DEXT");
    rogl_pfn_glBindMultiTextureEXT = rogl_GetProcAddress("glBindMultiTextureEXT");
    rogl_pfn_glMultiTexCoordPointerEXT = rogl_GetProcAddress("glMultiTexCoordPointerEXT");
    rogl_pfn_glMultiTexEnvfEXT = rogl_GetProcAddress("glMultiTexEnvfEXT");
    rogl_pfn_glMultiTexEnvfvEXT = rogl_GetProcAddress("glMultiTexEnvfvEXT");
    rogl_pfn_glMultiTexEnviEXT = rogl_GetProcAddress("glMultiTexEnviEXT");
    rogl_pfn_glMultiTexEnvivEXT = rogl_GetProcAddress("glMultiTexEnvivEXT");
    rogl_pfn_glMultiTexGendEXT = rogl_GetProcAddress("glMultiTexGendEXT");
    rogl_pfn_glMultiTexGendvEXT = rogl_GetProcAddress("glMultiTexGendvEXT");
    rogl_pfn_glMultiTexGenfEXT = rogl_GetProcAddress("glMultiTexGenfEXT");
    rogl_pfn_glMultiTexGenfvEXT = rogl_GetProcAddress("glMultiTexGenfvEXT");
    rogl_pfn_glMultiTexGeniEXT = rogl_GetProcAddress("glMultiTexGeniEXT");
    rogl_pfn_glMultiTexGenivEXT = rogl_GetProcAddress("glMultiTexGenivEXT");
    rogl_pfn_glGetMultiTexEnvfvEXT = rogl_GetProcAddress("glGetMultiTexEnvfvEXT");
    rogl_pfn_glGetMultiTexEnvivEXT = rogl_GetProcAddress("glGetMultiTexEnvivEXT");
    rogl_pfn_glGetMultiTexGendvEXT = rogl_GetProcAddress("glGetMultiTexGendvEXT");
    rogl_pfn_glGetMultiTexGenfvEXT = rogl_GetProcAddress("glGetMultiTexGenfvEXT");
    rogl_pfn_glGetMultiTexGenivEXT = rogl_GetProcAddress("glGetMultiTexGenivEXT");
    rogl_pfn_glMultiTexParameteriEXT = rogl_GetProcAddress("glMultiTexParameteriEXT");
    rogl_pfn_glMultiTexParameterivEXT = rogl_GetProcAddress("glMultiTexParameterivEXT");
    rogl_pfn_glMultiTexParameterfEXT = rogl_GetProcAddress("glMultiTexParameterfEXT");
    rogl_pfn_glMultiTexParameterfvEXT = rogl_GetProcAddress("glMultiTexParameterfvEXT");
    rogl_pfn_glMultiTexImage1DEXT = rogl_GetProcAddress("glMultiTexImage1DEXT");
    rogl_pfn_glMultiTexImage2DEXT = rogl_GetProcAddress("glMultiTexImage2DEXT");
    rogl_pfn_glMultiTexSubImage1DEXT = rogl_GetProcAddress("glMultiTexSubImage1DEXT");
    rogl_pfn_glMultiTexSubImage2DEXT = rogl_GetProcAddress("glMultiTexSubImage2DEXT");
    rogl_pfn_glCopyMultiTexImage1DEXT = rogl_GetProcAddress("glCopyMultiTexImage1DEXT");
    rogl_pfn_glCopyMultiTexImage2DEXT = rogl_GetProcAddress("glCopyMultiTexImage2DEXT");
    rogl_pfn_glCopyMultiTexSubImage1DEXT = rogl_GetProcAddress("glCopyMultiTexSubImage1DEXT");
    rogl_pfn_glCopyMultiTexSubImage2DEXT = rogl_GetProcAddress("glCopyMultiTexSubImage2DEXT");
    rogl_pfn_glGetMultiTexImageEXT = rogl_GetProcAddress("glGetMultiTexImageEXT");
    rogl_pfn_glGetMultiTexParameterfvEXT = rogl_GetProcAddress("glGetMultiTexParameterfvEXT");
    rogl_pfn_glGetMultiTexParameterivEXT = rogl_GetProcAddress("glGetMultiTexParameterivEXT");
    rogl_pfn_glGetMultiTexLevelParameterfvEXT = rogl_GetProcAddress("glGetMultiTexLevelParameterfvEXT");
    rogl_pfn_glGetMultiTexLevelParameterivEXT = rogl_GetProcAddress("glGetMultiTexLevelParameterivEXT");
    rogl_pfn_glMultiTexImage3DEXT = rogl_GetProcAddress("glMultiTexImage3DEXT");
    rogl_pfn_glMultiTexSubImage3DEXT = rogl_GetProcAddress("glMultiTexSubImage3DEXT");
    rogl_pfn_glCopyMultiTexSubImage3DEXT = rogl_GetProcAddress("glCopyMultiTexSubImage3DEXT");
    rogl_pfn_glEnableClientStateIndexedEXT = rogl_GetProcAddress("glEnableClientStateIndexedEXT");
    rogl_pfn_glDisableClientStateIndexedEXT = rogl_GetProcAddress("glDisableClientStateIndexedEXT");
    rogl_pfn_glGetFloatIndexedvEXT = rogl_GetProcAddress("glGetFloatIndexedvEXT");
    rogl_pfn_glGetDoubleIndexedvEXT = rogl_GetProcAddress("glGetDoubleIndexedvEXT");
    rogl_pfn_glGetPointerIndexedvEXT = rogl_GetProcAddress("glGetPointerIndexedvEXT");
    rogl_pfn_glCompressedTextureImage3DEXT = rogl_GetProcAddress("glCompressedTextureImage3DEXT");
    rogl_pfn_glCompressedTextureImage2DEXT = rogl_GetProcAddress("glCompressedTextureImage2DEXT");
    rogl_pfn_glCompressedTextureImage1DEXT = rogl_GetProcAddress("glCompressedTextureImage1DEXT");
    rogl_pfn_glCompressedTextureSubImage3DEXT = rogl_GetProcAddress("glCompressedTextureSubImage3DEXT");
    rogl_pfn_glCompressedTextureSubImage2DEXT = rogl_GetProcAddress("glCompressedTextureSubImage2DEXT");
    rogl_pfn_glCompressedTextureSubImage1DEXT = rogl_GetProcAddress("glCompressedTextureSubImage1DEXT");
    rogl_pfn_glGetCompressedTextureImageEXT = rogl_GetProcAddress("glGetCompressedTextureImageEXT");
    rogl_pfn_glCompressedMultiTexImage3DEXT = rogl_GetProcAddress("glCompressedMultiTexImage3DEXT");
    rogl_pfn_glCompressedMultiTexImage2DEXT = rogl_GetProcAddress("glCompressedMultiTexImage2DEXT");
    rogl_pfn_glCompressedMultiTexImage1DEXT = rogl_GetProcAddress("glCompressedMultiTexImage1DEXT");
    rogl_pfn_glCompressedMultiTexSubImage3DEXT = rogl_GetProcAddress("glCompressedMultiTexSubImage3DEXT");
    rogl_pfn_glCompressedMultiTexSubImage2DEXT = rogl_GetProcAddress("glCompressedMultiTexSubImage2DEXT");
    rogl_pfn_glCompressedMultiTexSubImage1DEXT = rogl_GetProcAddress("glCompressedMultiTexSubImage1DEXT");
    rogl_pfn_glGetCompressedMultiTexImageEXT = rogl_GetProcAddress("glGetCompressedMultiTexImageEXT");
    rogl_pfn_glMatrixLoadTransposefEXT = rogl_GetProcAddress("glMatrixLoadTransposefEXT");
    rogl_pfn_glMatrixLoadTransposedEXT = rogl_GetProcAddress("glMatrixLoadTransposedEXT");
    rogl_pfn_glMatrixMultTransposefEXT = rogl_GetProcAddress("glMatrixMultTransposefEXT");
    rogl_pfn_glMatrixMultTransposedEXT = rogl_GetProcAddress("glMatrixMultTransposedEXT");
    rogl_pfn_glNamedBufferDataEXT = rogl_GetProcAddress("glNamedBufferDataEXT");
    rogl_pfn_glNamedBufferSubDataEXT = rogl_GetProcAddress("glNamedBufferSubDataEXT");
    rogl_pfn_glMapNamedBufferEXT = rogl_GetProcAddress("glMapNamedBufferEXT");
    rogl_pfn_glUnmapNamedBufferEXT = rogl_GetProcAddress("glUnmapNamedBufferEXT");
    rogl_pfn_glGetNamedBufferParameterivEXT = rogl_GetProcAddress("glGetNamedBufferParameterivEXT");
    rogl_pfn_glGetNamedBufferPointervEXT = rogl_GetProcAddress("glGetNamedBufferPointervEXT");
    rogl_pfn_glGetNamedBufferSubDataEXT = rogl_GetProcAddress("glGetNamedBufferSubDataEXT");
    rogl_pfn_glTextureBufferEXT = rogl_GetProcAddress("glTextureBufferEXT");
    rogl_pfn_glMultiTexBufferEXT = rogl_GetProcAddress("glMultiTexBufferEXT");
    rogl_pfn_glTextureParameterIivEXT = rogl_GetProcAddress("glTextureParameterIivEXT");
    rogl_pfn_glTextureParameterIuivEXT = rogl_GetProcAddress("glTextureParameterIuivEXT");
    rogl_pfn_glGetTextureParameterIivEXT = rogl_GetProcAddress("glGetTextureParameterIivEXT");
    rogl_pfn_glGetTextureParameterIuivEXT = rogl_GetProcAddress("glGetTextureParameterIuivEXT");
    rogl_pfn_glMultiTexParameterIivEXT = rogl_GetProcAddress("glMultiTexParameterIivEXT");
    rogl_pfn_glMultiTexParameterIuivEXT = rogl_GetProcAddress("glMultiTexParameterIuivEXT");
    rogl_pfn_glGetMultiTexParameterIivEXT = rogl_GetProcAddress("glGetMultiTexParameterIivEXT");
    rogl_pfn_glGetMultiTexParameterIuivEXT = rogl_GetProcAddress("glGetMultiTexParameterIuivEXT");
    rogl_pfn_glNamedProgramLocalParameters4fvEXT = rogl_GetProcAddress("glNamedProgramLocalParameters4fvEXT");
    rogl_pfn_glNamedProgramLocalParameterI4iEXT = rogl_GetProcAddress("glNamedProgramLocalParameterI4iEXT");
    rogl_pfn_glNamedProgramLocalParameterI4ivEXT = rogl_GetProcAddress("glNamedProgramLocalParameterI4ivEXT");
    rogl_pfn_glNamedProgramLocalParametersI4ivEXT = rogl_GetProcAddress("glNamedProgramLocalParametersI4ivEXT");
    rogl_pfn_glNamedProgramLocalParameterI4uiEXT = rogl_GetProcAddress("glNamedProgramLocalParameterI4uiEXT");
    rogl_pfn_glNamedProgramLocalParameterI4uivEXT = rogl_GetProcAddress("glNamedProgramLocalParameterI4uivEXT");
    rogl_pfn_glNamedProgramLocalParametersI4uivEXT = rogl_GetProcAddress("glNamedProgramLocalParametersI4uivEXT");
    rogl_pfn_glGetNamedProgramLocalParameterIivEXT = rogl_GetProcAddress("glGetNamedProgramLocalParameterIivEXT");
    rogl_pfn_glGetNamedProgramLocalParameterIuivEXT = rogl_GetProcAddress("glGetNamedProgramLocalParameterIuivEXT");
    rogl_pfn_glEnableClientStateiEXT = rogl_GetProcAddress("glEnableClientStateiEXT");
    rogl_pfn_glDisableClientStateiEXT = rogl_GetProcAddress("glDisableClientStateiEXT");
    rogl_pfn_glGetFloati_vEXT = rogl_GetProcAddress("glGetFloati_vEXT");
    rogl_pfn_glGetDoublei_vEXT = rogl_GetProcAddress("glGetDoublei_vEXT");
    rogl_pfn_glGetPointeri_vEXT = rogl_GetProcAddress("glGetPointeri_vEXT");
    rogl_pfn_glNamedProgramStringEXT = rogl_GetProcAddress("glNamedProgramStringEXT");
    rogl_pfn_glNamedProgramLocalParameter4dEXT = rogl_GetProcAddress("glNamedProgramLocalParameter4dEXT");
    rogl_pfn_glNamedProgramLocalParameter4dvEXT = rogl_GetProcAddress("glNamedProgramLocalParameter4dvEXT");
    rogl_pfn_glNamedProgramLocalParameter4fEXT = rogl_GetProcAddress("glNamedProgramLocalParameter4fEXT");
    rogl_pfn_glNamedProgramLocalParameter4fvEXT = rogl_GetProcAddress("glNamedProgramLocalParameter4fvEXT");
    rogl_pfn_glGetNamedProgramLocalParameterdvEXT = rogl_GetProcAddress("glGetNamedProgramLocalParameterdvEXT");
    rogl_pfn_glGetNamedProgramLocalParameterfvEXT = rogl_GetProcAddress("glGetNamedProgramLocalParameterfvEXT");
    rogl_pfn_glGetNamedProgramivEXT = rogl_GetProcAddress("glGetNamedProgramivEXT");
    rogl_pfn_glGetNamedProgramStringEXT = rogl_GetProcAddress("glGetNamedProgramStringEXT");
    rogl_pfn_glNamedRenderbufferStorageEXT = rogl_GetProcAddress("glNamedRenderbufferStorageEXT");
    rogl_pfn_glGetNamedRenderbufferParameterivEXT = rogl_GetProcAddress("glGetNamedRenderbufferParameterivEXT");
    rogl_pfn_glNamedRenderbufferStorageMultisampleEXT = rogl_GetProcAddress("glNamedRenderbufferStorageMultisampleEXT");
    rogl_pfn_glNamedRenderbufferStorageMultisampleCoverageEXT = rogl_GetProcAddress("glNamedRenderbufferStorageMultisampleCoverageEXT");
    rogl_pfn_glCheckNamedFramebufferStatusEXT = rogl_GetProcAddress("glCheckNamedFramebufferStatusEXT");
    rogl_pfn_glNamedFramebufferTexture1DEXT = rogl_GetProcAddress("glNamedFramebufferTexture1DEXT");
    rogl_pfn_glNamedFramebufferTexture2DEXT = rogl_GetProcAddress("glNamedFramebufferTexture2DEXT");
    rogl_pfn_glNamedFramebufferTexture3DEXT = rogl_GetProcAddress("glNamedFramebufferTexture3DEXT");
    rogl_pfn_glNamedFramebufferRenderbufferEXT = rogl_GetProcAddress("glNamedFramebufferRenderbufferEXT");
    rogl_pfn_glGetNamedFramebufferAttachmentParameterivEXT = rogl_GetProcAddress("glGetNamedFramebufferAttachmentParameterivEXT");
    rogl_pfn_glGenerateTextureMipmapEXT = rogl_GetProcAddress("glGenerateTextureMipmapEXT");
    rogl_pfn_glGenerateMultiTexMipmapEXT = rogl_GetProcAddress("glGenerateMultiTexMipmapEXT");
    rogl_pfn_glFramebufferDrawBufferEXT = rogl_GetProcAddress("glFramebufferDrawBufferEXT");
    rogl_pfn_glFramebufferDrawBuffersEXT = rogl_GetProcAddress("glFramebufferDrawBuffersEXT");
    rogl_pfn_glFramebufferReadBufferEXT = rogl_GetProcAddress("glFramebufferReadBufferEXT");
    rogl_pfn_glGetFramebufferParameterivEXT = rogl_GetProcAddress("glGetFramebufferParameterivEXT");
    rogl_pfn_glNamedCopyBufferSubDataEXT = rogl_GetProcAddress("glNamedCopyBufferSubDataEXT");
    rogl_pfn_glNamedFramebufferTextureEXT = rogl_GetProcAddress("glNamedFramebufferTextureEXT");
    rogl_pfn_glNamedFramebufferTextureLayerEXT = rogl_GetProcAddress("glNamedFramebufferTextureLayerEXT");
    rogl_pfn_glNamedFramebufferTextureFaceEXT = rogl_GetProcAddress("glNamedFramebufferTextureFaceEXT");
    rogl_pfn_glTextureRenderbufferEXT = rogl_GetProcAddress("glTextureRenderbufferEXT");
    rogl_pfn_glMultiTexRenderbufferEXT = rogl_GetProcAddress("glMultiTexRenderbufferEXT");
    rogl_pfn_glVertexArrayVertexOffsetEXT = rogl_GetProcAddress("glVertexArrayVertexOffsetEXT");
    rogl_pfn_glVertexArrayColorOffsetEXT = rogl_GetProcAddress("glVertexArrayColorOffsetEXT");
    rogl_pfn_glVertexArrayEdgeFlagOffsetEXT = rogl_GetProcAddress("glVertexArrayEdgeFlagOffsetEXT");
    rogl_pfn_glVertexArrayIndexOffsetEXT = rogl_GetProcAddress("glVertexArrayIndexOffsetEXT");
    rogl_pfn_glVertexArrayNormalOffsetEXT = rogl_GetProcAddress("glVertexArrayNormalOffsetEXT");
    rogl_pfn_glVertexArrayTexCoordOffsetEXT = rogl_GetProcAddress("glVertexArrayTexCoordOffsetEXT");
    rogl_pfn_glVertexArrayMultiTexCoordOffsetEXT = rogl_GetProcAddress("glVertexArrayMultiTexCoordOffsetEXT");
    rogl_pfn_glVertexArrayFogCoordOffsetEXT = rogl_GetProcAddress("glVertexArrayFogCoordOffsetEXT");
    rogl_pfn_glVertexArraySecondaryColorOffsetEXT = rogl_GetProcAddress("glVertexArraySecondaryColorOffsetEXT");
    rogl_pfn_glVertexArrayVertexAttribOffsetEXT = rogl_GetProcAddress("glVertexArrayVertexAttribOffsetEXT");
    rogl_pfn_glVertexArrayVertexAttribIOffsetEXT = rogl_GetProcAddress("glVertexArrayVertexAttribIOffsetEXT");
    rogl_pfn_glEnableVertexArrayEXT = rogl_GetProcAddress("glEnableVertexArrayEXT");
    rogl_pfn_glDisableVertexArrayEXT = rogl_GetProcAddress("glDisableVertexArrayEXT");
    rogl_pfn_glEnableVertexArrayAttribEXT = rogl_GetProcAddress("glEnableVertexArrayAttribEXT");
    rogl_pfn_glDisableVertexArrayAttribEXT = rogl_GetProcAddress("glDisableVertexArrayAttribEXT");
    rogl_pfn_glGetVertexArrayIntegervEXT = rogl_GetProcAddress("glGetVertexArrayIntegervEXT");
    rogl_pfn_glGetVertexArrayPointervEXT = rogl_GetProcAddress("glGetVertexArrayPointervEXT");
    rogl_pfn_glGetVertexArrayIntegeri_vEXT = rogl_GetProcAddress("glGetVertexArrayIntegeri_vEXT");
    rogl_pfn_glGetVertexArrayPointeri_vEXT = rogl_GetProcAddress("glGetVertexArrayPointeri_vEXT");
    rogl_pfn_glMapNamedBufferRangeEXT = rogl_GetProcAddress("glMapNamedBufferRangeEXT");
    rogl_pfn_glFlushMappedNamedBufferRangeEXT = rogl_GetProcAddress("glFlushMappedNamedBufferRangeEXT");
    rogl_pfn_glNamedBufferStorageEXT = rogl_GetProcAddress("glNamedBufferStorageEXT");
    rogl_pfn_glClearNamedBufferDataEXT = rogl_GetProcAddress("glClearNamedBufferDataEXT");
    rogl_pfn_glClearNamedBufferSubDataEXT = rogl_GetProcAddress("glClearNamedBufferSubDataEXT");
    rogl_pfn_glNamedFramebufferParameteriEXT = rogl_GetProcAddress("glNamedFramebufferParameteriEXT");
    rogl_pfn_glGetNamedFramebufferParameterivEXT = rogl_GetProcAddress("glGetNamedFramebufferParameterivEXT");
    rogl_pfn_glProgramUniform1dEXT = rogl_GetProcAddress("glProgramUniform1dEXT");
    rogl_pfn_glProgramUniform2dEXT = rogl_GetProcAddress("glProgramUniform2dEXT");
    rogl_pfn_glProgramUniform3dEXT = rogl_GetProcAddress("glProgramUniform3dEXT");
    rogl_pfn_glProgramUniform4dEXT = rogl_GetProcAddress("glProgramUniform4dEXT");
    rogl_pfn_glProgramUniform1dvEXT = rogl_GetProcAddress("glProgramUniform1dvEXT");
    rogl_pfn_glProgramUniform2dvEXT = rogl_GetProcAddress("glProgramUniform2dvEXT");
    rogl_pfn_glProgramUniform3dvEXT = rogl_GetProcAddress("glProgramUniform3dvEXT");
    rogl_pfn_glProgramUniform4dvEXT = rogl_GetProcAddress("glProgramUniform4dvEXT");
    rogl_pfn_glProgramUniformMatrix2dvEXT = rogl_GetProcAddress("glProgramUniformMatrix2dvEXT");
    rogl_pfn_glProgramUniformMatrix3dvEXT = rogl_GetProcAddress("glProgramUniformMatrix3dvEXT");
    rogl_pfn_glProgramUniformMatrix4dvEXT = rogl_GetProcAddress("glProgramUniformMatrix4dvEXT");
    rogl_pfn_glProgramUniformMatrix2x3dvEXT = rogl_GetProcAddress("glProgramUniformMatrix2x3dvEXT");
    rogl_pfn_glProgramUniformMatrix2x4dvEXT = rogl_GetProcAddress("glProgramUniformMatrix2x4dvEXT");
    rogl_pfn_glProgramUniformMatrix3x2dvEXT = rogl_GetProcAddress("glProgramUniformMatrix3x2dvEXT");
    rogl_pfn_glProgramUniformMatrix3x4dvEXT = rogl_GetProcAddress("glProgramUniformMatrix3x4dvEXT");
    rogl_pfn_glProgramUniformMatrix4x2dvEXT = rogl_GetProcAddress("glProgramUniformMatrix4x2dvEXT");
    rogl_pfn_glProgramUniformMatrix4x3dvEXT = rogl_GetProcAddress("glProgramUniformMatrix4x3dvEXT");
    rogl_pfn_glTextureBufferRangeEXT = rogl_GetProcAddress("glTextureBufferRangeEXT");
    rogl_pfn_glTextureStorage1DEXT = rogl_GetProcAddress("glTextureStorage1DEXT");
    rogl_pfn_glTextureStorage2DEXT = rogl_GetProcAddress("glTextureStorage2DEXT");
    rogl_pfn_glTextureStorage3DEXT = rogl_GetProcAddress("glTextureStorage3DEXT");
    rogl_pfn_glTextureStorage2DMultisampleEXT = rogl_GetProcAddress("glTextureStorage2DMultisampleEXT");
    rogl_pfn_glTextureStorage3DMultisampleEXT = rogl_GetProcAddress("glTextureStorage3DMultisampleEXT");
    rogl_pfn_glVertexArrayBindVertexBufferEXT = rogl_GetProcAddress("glVertexArrayBindVertexBufferEXT");
    rogl_pfn_glVertexArrayVertexAttribFormatEXT = rogl_GetProcAddress("glVertexArrayVertexAttribFormatEXT");
    rogl_pfn_glVertexArrayVertexAttribIFormatEXT = rogl_GetProcAddress("glVertexArrayVertexAttribIFormatEXT");
    rogl_pfn_glVertexArrayVertexAttribLFormatEXT = rogl_GetProcAddress("glVertexArrayVertexAttribLFormatEXT");
    rogl_pfn_glVertexArrayVertexAttribBindingEXT = rogl_GetProcAddress("glVertexArrayVertexAttribBindingEXT");
    rogl_pfn_glVertexArrayVertexBindingDivisorEXT = rogl_GetProcAddress("glVertexArrayVertexBindingDivisorEXT");
    rogl_pfn_glVertexArrayVertexAttribLOffsetEXT = rogl_GetProcAddress("glVertexArrayVertexAttribLOffsetEXT");
    rogl_pfn_glTexturePageCommitmentEXT = rogl_GetProcAddress("glTexturePageCommitmentEXT");
    rogl_pfn_glVertexArrayVertexAttribDivisorEXT = rogl_GetProcAddress("glVertexArrayVertexAttribDivisorEXT");
    rogl_pfn_glColorMaskIndexedEXT = rogl_GetProcAddress("glColorMaskIndexedEXT");
    rogl_pfn_glDrawArraysInstancedEXT = rogl_GetProcAddress("glDrawArraysInstancedEXT");
    rogl_pfn_glDrawElementsInstancedEXT = rogl_GetProcAddress("glDrawElementsInstancedEXT");
    rogl_pfn_glDrawRangeElementsEXT = rogl_GetProcAddress("glDrawRangeElementsEXT");
    rogl_pfn_glFogCoordfEXT = rogl_GetProcAddress("glFogCoordfEXT");
    rogl_pfn_glFogCoordfvEXT = rogl_GetProcAddress("glFogCoordfvEXT");
    rogl_pfn_glFogCoorddEXT = rogl_GetProcAddress("glFogCoorddEXT");
    rogl_pfn_glFogCoorddvEXT = rogl_GetProcAddress("glFogCoorddvEXT");
    rogl_pfn_glFogCoordPointerEXT = rogl_GetProcAddress("glFogCoordPointerEXT");
    rogl_pfn_glBlitFramebufferEXT = rogl_GetProcAddress("glBlitFramebufferEXT");
    rogl_pfn_glRenderbufferStorageMultisampleEXT = rogl_GetProcAddress("glRenderbufferStorageMultisampleEXT");
    rogl_pfn_glIsRenderbufferEXT = rogl_GetProcAddress("glIsRenderbufferEXT");
    rogl_pfn_glBindRenderbufferEXT = rogl_GetProcAddress("glBindRenderbufferEXT");
    rogl_pfn_glDeleteRenderbuffersEXT = rogl_GetProcAddress("glDeleteRenderbuffersEXT");
    rogl_pfn_glGenRenderbuffersEXT = rogl_GetProcAddress("glGenRenderbuffersEXT");
    rogl_pfn_glRenderbufferStorageEXT = rogl_GetProcAddress("glRenderbufferStorageEXT");
    rogl_pfn_glGetRenderbufferParameterivEXT = rogl_GetProcAddress("glGetRenderbufferParameterivEXT");
    rogl_pfn_glIsFramebufferEXT = rogl_GetProcAddress("glIsFramebufferEXT");
    rogl_pfn_glBindFramebufferEXT = rogl_GetProcAddress("glBindFramebufferEXT");
    rogl_pfn_glDeleteFramebuffersEXT = rogl_GetProcAddress("glDeleteFramebuffersEXT");
    rogl_pfn_glGenFramebuffersEXT = rogl_GetProcAddress("glGenFramebuffersEXT");
    rogl_pfn_glCheckFramebufferStatusEXT = rogl_GetProcAddress("glCheckFramebufferStatusEXT");
    rogl_pfn_glFramebufferTexture1DEXT = rogl_GetProcAddress("glFramebufferTexture1DEXT");
    rogl_pfn_glFramebufferTexture2DEXT = rogl_GetProcAddress("glFramebufferTexture2DEXT");
    rogl_pfn_glFramebufferTexture3DEXT = rogl_GetProcAddress("glFramebufferTexture3DEXT");
    rogl_pfn_glFramebufferRenderbufferEXT = rogl_GetProcAddress("glFramebufferRenderbufferEXT");
    rogl_pfn_glGetFramebufferAttachmentParameterivEXT = rogl_GetProcAddress("glGetFramebufferAttachmentParameterivEXT");
    rogl_pfn_glGenerateMipmapEXT = rogl_GetProcAddress("glGenerateMipmapEXT");
    rogl_pfn_glProgramEnvParameters4fvEXT = rogl_GetProcAddress("glProgramEnvParameters4fvEXT");
    rogl_pfn_glProgramLocalParameters4fvEXT = rogl_GetProcAddress("glProgramLocalParameters4fvEXT");
    rogl_pfn_glGetUniformuivEXT = rogl_GetProcAddress("glGetUniformuivEXT");
    rogl_pfn_glBindFragDataLocationEXT = rogl_GetProcAddress("glBindFragDataLocationEXT");
    rogl_pfn_glGetFragDataLocationEXT = rogl_GetProcAddress("glGetFragDataLocationEXT");
    rogl_pfn_glUniform1uiEXT = rogl_GetProcAddress("glUniform1uiEXT");
    rogl_pfn_glUniform2uiEXT = rogl_GetProcAddress("glUniform2uiEXT");
    rogl_pfn_glUniform3uiEXT = rogl_GetProcAddress("glUniform3uiEXT");
    rogl_pfn_glUniform4uiEXT = rogl_GetProcAddress("glUniform4uiEXT");
    rogl_pfn_glUniform1uivEXT = rogl_GetProcAddress("glUniform1uivEXT");
    rogl_pfn_glUniform2uivEXT = rogl_GetProcAddress("glUniform2uivEXT");
    rogl_pfn_glUniform3uivEXT = rogl_GetProcAddress("glUniform3uivEXT");
    rogl_pfn_glUniform4uivEXT = rogl_GetProcAddress("glUniform4uivEXT");
    rogl_pfn_glGetHistogramEXT = rogl_GetProcAddress("glGetHistogramEXT");
    rogl_pfn_glGetHistogramParameterfvEXT = rogl_GetProcAddress("glGetHistogramParameterfvEXT");
    rogl_pfn_glGetHistogramParameterivEXT = rogl_GetProcAddress("glGetHistogramParameterivEXT");
    rogl_pfn_glGetMinmaxEXT = rogl_GetProcAddress("glGetMinmaxEXT");
    rogl_pfn_glGetMinmaxParameterfvEXT = rogl_GetProcAddress("glGetMinmaxParameterfvEXT");
    rogl_pfn_glGetMinmaxParameterivEXT = rogl_GetProcAddress("glGetMinmaxParameterivEXT");
    rogl_pfn_glHistogramEXT = rogl_GetProcAddress("glHistogramEXT");
    rogl_pfn_glMinmaxEXT = rogl_GetProcAddress("glMinmaxEXT");
    rogl_pfn_glResetHistogramEXT = rogl_GetProcAddress("glResetHistogramEXT");
    rogl_pfn_glResetMinmaxEXT = rogl_GetProcAddress("glResetMinmaxEXT");
    rogl_pfn_glIndexFuncEXT = rogl_GetProcAddress("glIndexFuncEXT");
    rogl_pfn_glIndexMaterialEXT = rogl_GetProcAddress("glIndexMaterialEXT");
    rogl_pfn_glApplyTextureEXT = rogl_GetProcAddress("glApplyTextureEXT");
    rogl_pfn_glTextureLightEXT = rogl_GetProcAddress("glTextureLightEXT");
    rogl_pfn_glTextureMaterialEXT = rogl_GetProcAddress("glTextureMaterialEXT");
    rogl_pfn_glMultiDrawArraysEXT = rogl_GetProcAddress("glMultiDrawArraysEXT");
    rogl_pfn_glMultiDrawElementsEXT = rogl_GetProcAddress("glMultiDrawElementsEXT");
    rogl_pfn_glSampleMaskEXT = rogl_GetProcAddress("glSampleMaskEXT");
    rogl_pfn_glSamplePatternEXT = rogl_GetProcAddress("glSamplePatternEXT");
    rogl_pfn_glColorTableEXT = rogl_GetProcAddress("glColorTableEXT");
    rogl_pfn_glGetColorTableEXT = rogl_GetProcAddress("glGetColorTableEXT");
    rogl_pfn_glGetColorTableParameterivEXT = rogl_GetProcAddress("glGetColorTableParameterivEXT");
    rogl_pfn_glGetColorTableParameterfvEXT = rogl_GetProcAddress("glGetColorTableParameterfvEXT");
    rogl_pfn_glPixelTransformParameteriEXT = rogl_GetProcAddress("glPixelTransformParameteriEXT");
    rogl_pfn_glPixelTransformParameterfEXT = rogl_GetProcAddress("glPixelTransformParameterfEXT");
    rogl_pfn_glPixelTransformParameterivEXT = rogl_GetProcAddress("glPixelTransformParameterivEXT");
    rogl_pfn_glPixelTransformParameterfvEXT = rogl_GetProcAddress("glPixelTransformParameterfvEXT");
    rogl_pfn_glGetPixelTransformParameterivEXT = rogl_GetProcAddress("glGetPixelTransformParameterivEXT");
    rogl_pfn_glGetPixelTransformParameterfvEXT = rogl_GetProcAddress("glGetPixelTransformParameterfvEXT");
    rogl_pfn_glPointParameterfEXT = rogl_GetProcAddress("glPointParameterfEXT");
    rogl_pfn_glPointParameterfvEXT = rogl_GetProcAddress("glPointParameterfvEXT");
    rogl_pfn_glPolygonOffsetEXT = rogl_GetProcAddress("glPolygonOffsetEXT");
    rogl_pfn_glPolygonOffsetClampEXT = rogl_GetProcAddress("glPolygonOffsetClampEXT");
    rogl_pfn_glProvokingVertexEXT = rogl_GetProcAddress("glProvokingVertexEXT");
    rogl_pfn_glSecondaryColor3bEXT = rogl_GetProcAddress("glSecondaryColor3bEXT");
    rogl_pfn_glSecondaryColor3bvEXT = rogl_GetProcAddress("glSecondaryColor3bvEXT");
    rogl_pfn_glSecondaryColor3dEXT = rogl_GetProcAddress("glSecondaryColor3dEXT");
    rogl_pfn_glSecondaryColor3dvEXT = rogl_GetProcAddress("glSecondaryColor3dvEXT");
    rogl_pfn_glSecondaryColor3fEXT = rogl_GetProcAddress("glSecondaryColor3fEXT");
    rogl_pfn_glSecondaryColor3fvEXT = rogl_GetProcAddress("glSecondaryColor3fvEXT");
    rogl_pfn_glSecondaryColor3iEXT = rogl_GetProcAddress("glSecondaryColor3iEXT");
    rogl_pfn_glSecondaryColor3ivEXT = rogl_GetProcAddress("glSecondaryColor3ivEXT");
    rogl_pfn_glSecondaryColor3sEXT = rogl_GetProcAddress("glSecondaryColor3sEXT");
    rogl_pfn_glSecondaryColor3svEXT = rogl_GetProcAddress("glSecondaryColor3svEXT");
    rogl_pfn_glSecondaryColor3ubEXT = rogl_GetProcAddress("glSecondaryColor3ubEXT");
    rogl_pfn_glSecondaryColor3ubvEXT = rogl_GetProcAddress("glSecondaryColor3ubvEXT");
    rogl_pfn_glSecondaryColor3uiEXT = rogl_GetProcAddress("glSecondaryColor3uiEXT");
    rogl_pfn_glSecondaryColor3uivEXT = rogl_GetProcAddress("glSecondaryColor3uivEXT");
    rogl_pfn_glSecondaryColor3usEXT = rogl_GetProcAddress("glSecondaryColor3usEXT");
    rogl_pfn_glSecondaryColor3usvEXT = rogl_GetProcAddress("glSecondaryColor3usvEXT");
    rogl_pfn_glSecondaryColorPointerEXT = rogl_GetProcAddress("glSecondaryColorPointerEXT");
    rogl_pfn_glUseShaderProgramEXT = rogl_GetProcAddress("glUseShaderProgramEXT");
    rogl_pfn_glActiveProgramEXT = rogl_GetProcAddress("glActiveProgramEXT");
    rogl_pfn_glCreateShaderProgramEXT = rogl_GetProcAddress("glCreateShaderProgramEXT");
    rogl_pfn_glActiveShaderProgramEXT = rogl_GetProcAddress("glActiveShaderProgramEXT");
    rogl_pfn_glBindProgramPipelineEXT = rogl_GetProcAddress("glBindProgramPipelineEXT");
    rogl_pfn_glCreateShaderProgramvEXT = rogl_GetProcAddress("glCreateShaderProgramvEXT");
    rogl_pfn_glDeleteProgramPipelinesEXT = rogl_GetProcAddress("glDeleteProgramPipelinesEXT");
    rogl_pfn_glGenProgramPipelinesEXT = rogl_GetProcAddress("glGenProgramPipelinesEXT");
    rogl_pfn_glGetProgramPipelineInfoLogEXT = rogl_GetProcAddress("glGetProgramPipelineInfoLogEXT");
    rogl_pfn_glGetProgramPipelineivEXT = rogl_GetProcAddress("glGetProgramPipelineivEXT");
    rogl_pfn_glIsProgramPipelineEXT = rogl_GetProcAddress("glIsProgramPipelineEXT");
    rogl_pfn_glUseProgramStagesEXT = rogl_GetProcAddress("glUseProgramStagesEXT");
    rogl_pfn_glValidateProgramPipelineEXT = rogl_GetProcAddress("glValidateProgramPipelineEXT");
    rogl_pfn_glBindImageTextureEXT = rogl_GetProcAddress("glBindImageTextureEXT");
    rogl_pfn_glMemoryBarrierEXT = rogl_GetProcAddress("glMemoryBarrierEXT");
    rogl_pfn_glStencilClearTagEXT = rogl_GetProcAddress("glStencilClearTagEXT");
    rogl_pfn_glActiveStencilFaceEXT = rogl_GetProcAddress("glActiveStencilFaceEXT");
    rogl_pfn_glTexSubImage1DEXT = rogl_GetProcAddress("glTexSubImage1DEXT");
    rogl_pfn_glTexSubImage2DEXT = rogl_GetProcAddress("glTexSubImage2DEXT");
    rogl_pfn_glTexImage3DEXT = rogl_GetProcAddress("glTexImage3DEXT");
    rogl_pfn_glTexSubImage3DEXT = rogl_GetProcAddress("glTexSubImage3DEXT");
    rogl_pfn_glTexBufferEXT = rogl_GetProcAddress("glTexBufferEXT");
    rogl_pfn_glTexParameterIivEXT = rogl_GetProcAddress("glTexParameterIivEXT");
    rogl_pfn_glTexParameterIuivEXT = rogl_GetProcAddress("glTexParameterIuivEXT");
    rogl_pfn_glGetTexParameterIivEXT = rogl_GetProcAddress("glGetTexParameterIivEXT");
    rogl_pfn_glGetTexParameterIuivEXT = rogl_GetProcAddress("glGetTexParameterIuivEXT");
    rogl_pfn_glClearColorIiEXT = rogl_GetProcAddress("glClearColorIiEXT");
    rogl_pfn_glClearColorIuiEXT = rogl_GetProcAddress("glClearColorIuiEXT");
    rogl_pfn_glAreTexturesResidentEXT = rogl_GetProcAddress("glAreTexturesResidentEXT");
    rogl_pfn_glBindTextureEXT = rogl_GetProcAddress("glBindTextureEXT");
    rogl_pfn_glDeleteTexturesEXT = rogl_GetProcAddress("glDeleteTexturesEXT");
    rogl_pfn_glGenTexturesEXT = rogl_GetProcAddress("glGenTexturesEXT");
    rogl_pfn_glIsTextureEXT = rogl_GetProcAddress("glIsTextureEXT");
    rogl_pfn_glPrioritizeTexturesEXT = rogl_GetProcAddress("glPrioritizeTexturesEXT");
    rogl_pfn_glTextureNormalEXT = rogl_GetProcAddress("glTextureNormalEXT");
    rogl_pfn_glGetQueryObjecti64vEXT = rogl_GetProcAddress("glGetQueryObjecti64vEXT");
    rogl_pfn_glGetQueryObjectui64vEXT = rogl_GetProcAddress("glGetQueryObjectui64vEXT");
    rogl_pfn_glBeginTransformFeedbackEXT = rogl_GetProcAddress("glBeginTransformFeedbackEXT");
    rogl_pfn_glEndTransformFeedbackEXT = rogl_GetProcAddress("glEndTransformFeedbackEXT");
    rogl_pfn_glBindBufferRangeEXT = rogl_GetProcAddress("glBindBufferRangeEXT");
    rogl_pfn_glBindBufferOffsetEXT = rogl_GetProcAddress("glBindBufferOffsetEXT");
    rogl_pfn_glBindBufferBaseEXT = rogl_GetProcAddress("glBindBufferBaseEXT");
    rogl_pfn_glTransformFeedbackVaryingsEXT = rogl_GetProcAddress("glTransformFeedbackVaryingsEXT");
    rogl_pfn_glGetTransformFeedbackVaryingEXT = rogl_GetProcAddress("glGetTransformFeedbackVaryingEXT");
    rogl_pfn_glArrayElementEXT = rogl_GetProcAddress("glArrayElementEXT");
    rogl_pfn_glColorPointerEXT = rogl_GetProcAddress("glColorPointerEXT");
    rogl_pfn_glDrawArraysEXT = rogl_GetProcAddress("glDrawArraysEXT");
    rogl_pfn_glEdgeFlagPointerEXT = rogl_GetProcAddress("glEdgeFlagPointerEXT");
    rogl_pfn_glGetPointervEXT = rogl_GetProcAddress("glGetPointervEXT");
    rogl_pfn_glIndexPointerEXT = rogl_GetProcAddress("glIndexPointerEXT");
    rogl_pfn_glNormalPointerEXT = rogl_GetProcAddress("glNormalPointerEXT");
    rogl_pfn_glTexCoordPointerEXT = rogl_GetProcAddress("glTexCoordPointerEXT");
    rogl_pfn_glVertexPointerEXT = rogl_GetProcAddress("glVertexPointerEXT");
    rogl_pfn_glVertexAttribL1dEXT = rogl_GetProcAddress("glVertexAttribL1dEXT");
    rogl_pfn_glVertexAttribL2dEXT = rogl_GetProcAddress("glVertexAttribL2dEXT");
    rogl_pfn_glVertexAttribL3dEXT = rogl_GetProcAddress("glVertexAttribL3dEXT");
    rogl_pfn_glVertexAttribL4dEXT = rogl_GetProcAddress("glVertexAttribL4dEXT");
    rogl_pfn_glVertexAttribL1dvEXT = rogl_GetProcAddress("glVertexAttribL1dvEXT");
    rogl_pfn_glVertexAttribL2dvEXT = rogl_GetProcAddress("glVertexAttribL2dvEXT");
    rogl_pfn_glVertexAttribL3dvEXT = rogl_GetProcAddress("glVertexAttribL3dvEXT");
    rogl_pfn_glVertexAttribL4dvEXT = rogl_GetProcAddress("glVertexAttribL4dvEXT");
    rogl_pfn_glVertexAttribLPointerEXT = rogl_GetProcAddress("glVertexAttribLPointerEXT");
    rogl_pfn_glGetVertexAttribLdvEXT = rogl_GetProcAddress("glGetVertexAttribLdvEXT");
    rogl_pfn_glBeginVertexShaderEXT = rogl_GetProcAddress("glBeginVertexShaderEXT");
    rogl_pfn_glEndVertexShaderEXT = rogl_GetProcAddress("glEndVertexShaderEXT");
    rogl_pfn_glBindVertexShaderEXT = rogl_GetProcAddress("glBindVertexShaderEXT");
    rogl_pfn_glGenVertexShadersEXT = rogl_GetProcAddress("glGenVertexShadersEXT");
    rogl_pfn_glDeleteVertexShaderEXT = rogl_GetProcAddress("glDeleteVertexShaderEXT");
    rogl_pfn_glShaderOp1EXT = rogl_GetProcAddress("glShaderOp1EXT");
    rogl_pfn_glShaderOp2EXT = rogl_GetProcAddress("glShaderOp2EXT");
    rogl_pfn_glShaderOp3EXT = rogl_GetProcAddress("glShaderOp3EXT");
    rogl_pfn_glSwizzleEXT = rogl_GetProcAddress("glSwizzleEXT");
    rogl_pfn_glWriteMaskEXT = rogl_GetProcAddress("glWriteMaskEXT");
    rogl_pfn_glInsertComponentEXT = rogl_GetProcAddress("glInsertComponentEXT");
    rogl_pfn_glExtractComponentEXT = rogl_GetProcAddress("glExtractComponentEXT");
    rogl_pfn_glGenSymbolsEXT = rogl_GetProcAddress("glGenSymbolsEXT");
    rogl_pfn_glSetInvariantEXT = rogl_GetProcAddress("glSetInvariantEXT");
    rogl_pfn_glSetLocalConstantEXT = rogl_GetProcAddress("glSetLocalConstantEXT");
    rogl_pfn_glVariantbvEXT = rogl_GetProcAddress("glVariantbvEXT");
    rogl_pfn_glVariantsvEXT = rogl_GetProcAddress("glVariantsvEXT");
    rogl_pfn_glVariantivEXT = rogl_GetProcAddress("glVariantivEXT");
    rogl_pfn_glVariantfvEXT = rogl_GetProcAddress("glVariantfvEXT");
    rogl_pfn_glVariantdvEXT = rogl_GetProcAddress("glVariantdvEXT");
    rogl_pfn_glVariantubvEXT = rogl_GetProcAddress("glVariantubvEXT");
    rogl_pfn_glVariantusvEXT = rogl_GetProcAddress("glVariantusvEXT");
    rogl_pfn_glVariantuivEXT = rogl_GetProcAddress("glVariantuivEXT");
    rogl_pfn_glVariantPointerEXT = rogl_GetProcAddress("glVariantPointerEXT");
    rogl_pfn_glEnableVariantClientStateEXT = rogl_GetProcAddress("glEnableVariantClientStateEXT");
    rogl_pfn_glDisableVariantClientStateEXT = rogl_GetProcAddress("glDisableVariantClientStateEXT");
    rogl_pfn_glBindLightParameterEXT = rogl_GetProcAddress("glBindLightParameterEXT");
    rogl_pfn_glBindMaterialParameterEXT = rogl_GetProcAddress("glBindMaterialParameterEXT");
    rogl_pfn_glBindTexGenParameterEXT = rogl_GetProcAddress("glBindTexGenParameterEXT");
    rogl_pfn_glBindTextureUnitParameterEXT = rogl_GetProcAddress("glBindTextureUnitParameterEXT");
    rogl_pfn_glBindParameterEXT = rogl_GetProcAddress("glBindParameterEXT");
    rogl_pfn_glIsVariantEnabledEXT = rogl_GetProcAddress("glIsVariantEnabledEXT");
    rogl_pfn_glGetVariantBooleanvEXT = rogl_GetProcAddress("glGetVariantBooleanvEXT");
    rogl_pfn_glGetVariantIntegervEXT = rogl_GetProcAddress("glGetVariantIntegervEXT");
    rogl_pfn_glGetVariantFloatvEXT = rogl_GetProcAddress("glGetVariantFloatvEXT");
    rogl_pfn_glGetVariantPointervEXT = rogl_GetProcAddress("glGetVariantPointervEXT");
    rogl_pfn_glGetInvariantBooleanvEXT = rogl_GetProcAddress("glGetInvariantBooleanvEXT");
    rogl_pfn_glGetInvariantIntegervEXT = rogl_GetProcAddress("glGetInvariantIntegervEXT");
    rogl_pfn_glGetInvariantFloatvEXT = rogl_GetProcAddress("glGetInvariantFloatvEXT");
    rogl_pfn_glGetLocalConstantBooleanvEXT = rogl_GetProcAddress("glGetLocalConstantBooleanvEXT");
    rogl_pfn_glGetLocalConstantIntegervEXT = rogl_GetProcAddress("glGetLocalConstantIntegervEXT");
    rogl_pfn_glGetLocalConstantFloatvEXT = rogl_GetProcAddress("glGetLocalConstantFloatvEXT");
    rogl_pfn_glVertexWeightfEXT = rogl_GetProcAddress("glVertexWeightfEXT");
    rogl_pfn_glVertexWeightfvEXT = rogl_GetProcAddress("glVertexWeightfvEXT");
    rogl_pfn_glVertexWeightPointerEXT = rogl_GetProcAddress("glVertexWeightPointerEXT");
    rogl_pfn_glImportSyncEXT = rogl_GetProcAddress("glImportSyncEXT");
    rogl_pfn_glFrameTerminatorGREMEDY = rogl_GetProcAddress("glFrameTerminatorGREMEDY");
    rogl_pfn_glStringMarkerGREMEDY = rogl_GetProcAddress("glStringMarkerGREMEDY");
    rogl_pfn_glImageTransformParameteriHP = rogl_GetProcAddress("glImageTransformParameteriHP");
    rogl_pfn_glImageTransformParameterfHP = rogl_GetProcAddress("glImageTransformParameterfHP");
    rogl_pfn_glImageTransformParameterivHP = rogl_GetProcAddress("glImageTransformParameterivHP");
    rogl_pfn_glImageTransformParameterfvHP = rogl_GetProcAddress("glImageTransformParameterfvHP");
    rogl_pfn_glGetImageTransformParameterivHP = rogl_GetProcAddress("glGetImageTransformParameterivHP");
    rogl_pfn_glGetImageTransformParameterfvHP = rogl_GetProcAddress("glGetImageTransformParameterfvHP");
    rogl_pfn_glMultiModeDrawArraysIBM = rogl_GetProcAddress("glMultiModeDrawArraysIBM");
    rogl_pfn_glMultiModeDrawElementsIBM = rogl_GetProcAddress("glMultiModeDrawElementsIBM");
    rogl_pfn_glFlushStaticDataIBM = rogl_GetProcAddress("glFlushStaticDataIBM");
    rogl_pfn_glColorPointerListIBM = rogl_GetProcAddress("glColorPointerListIBM");
    rogl_pfn_glSecondaryColorPointerListIBM = rogl_GetProcAddress("glSecondaryColorPointerListIBM");
    rogl_pfn_glEdgeFlagPointerListIBM = rogl_GetProcAddress("glEdgeFlagPointerListIBM");
    rogl_pfn_glFogCoordPointerListIBM = rogl_GetProcAddress("glFogCoordPointerListIBM");
    rogl_pfn_glIndexPointerListIBM = rogl_GetProcAddress("glIndexPointerListIBM");
    rogl_pfn_glNormalPointerListIBM = rogl_GetProcAddress("glNormalPointerListIBM");
    rogl_pfn_glTexCoordPointerListIBM = rogl_GetProcAddress("glTexCoordPointerListIBM");
    rogl_pfn_glVertexPointerListIBM = rogl_GetProcAddress("glVertexPointerListIBM");
    rogl_pfn_glBlendFuncSeparateINGR = rogl_GetProcAddress("glBlendFuncSeparateINGR");
    rogl_pfn_glApplyFramebufferAttachmentCMAAINTEL = rogl_GetProcAddress("glApplyFramebufferAttachmentCMAAINTEL");
    rogl_pfn_glSyncTextureINTEL = rogl_GetProcAddress("glSyncTextureINTEL");
    rogl_pfn_glUnmapTexture2DINTEL = rogl_GetProcAddress("glUnmapTexture2DINTEL");
    rogl_pfn_glMapTexture2DINTEL = rogl_GetProcAddress("glMapTexture2DINTEL");
    rogl_pfn_glVertexPointervINTEL = rogl_GetProcAddress("glVertexPointervINTEL");
    rogl_pfn_glNormalPointervINTEL = rogl_GetProcAddress("glNormalPointervINTEL");
    rogl_pfn_glColorPointervINTEL = rogl_GetProcAddress("glColorPointervINTEL");
    rogl_pfn_glTexCoordPointervINTEL = rogl_GetProcAddress("glTexCoordPointervINTEL");
    rogl_pfn_glBeginPerfQueryINTEL = rogl_GetProcAddress("glBeginPerfQueryINTEL");
    rogl_pfn_glCreatePerfQueryINTEL = rogl_GetProcAddress("glCreatePerfQueryINTEL");
    rogl_pfn_glDeletePerfQueryINTEL = rogl_GetProcAddress("glDeletePerfQueryINTEL");
    rogl_pfn_glEndPerfQueryINTEL = rogl_GetProcAddress("glEndPerfQueryINTEL");
    rogl_pfn_glGetFirstPerfQueryIdINTEL = rogl_GetProcAddress("glGetFirstPerfQueryIdINTEL");
    rogl_pfn_glGetNextPerfQueryIdINTEL = rogl_GetProcAddress("glGetNextPerfQueryIdINTEL");
    rogl_pfn_glGetPerfCounterInfoINTEL = rogl_GetProcAddress("glGetPerfCounterInfoINTEL");
    rogl_pfn_glGetPerfQueryDataINTEL = rogl_GetProcAddress("glGetPerfQueryDataINTEL");
    rogl_pfn_glGetPerfQueryIdByNameINTEL = rogl_GetProcAddress("glGetPerfQueryIdByNameINTEL");
    rogl_pfn_glGetPerfQueryInfoINTEL = rogl_GetProcAddress("glGetPerfQueryInfoINTEL");
    rogl_pfn_glBlendBarrierKHR = rogl_GetProcAddress("glBlendBarrierKHR");
    rogl_pfn_glDebugMessageControlKHR = rogl_GetProcAddress("glDebugMessageControlKHR");
    rogl_pfn_glDebugMessageInsertKHR = rogl_GetProcAddress("glDebugMessageInsertKHR");
    rogl_pfn_glDebugMessageCallbackKHR = rogl_GetProcAddress("glDebugMessageCallbackKHR");
    rogl_pfn_glGetDebugMessageLogKHR = rogl_GetProcAddress("glGetDebugMessageLogKHR");
    rogl_pfn_glPushDebugGroupKHR = rogl_GetProcAddress("glPushDebugGroupKHR");
    rogl_pfn_glPopDebugGroupKHR = rogl_GetProcAddress("glPopDebugGroupKHR");
    rogl_pfn_glObjectLabelKHR = rogl_GetProcAddress("glObjectLabelKHR");
    rogl_pfn_glGetObjectLabelKHR = rogl_GetProcAddress("glGetObjectLabelKHR");
    rogl_pfn_glObjectPtrLabelKHR = rogl_GetProcAddress("glObjectPtrLabelKHR");
    rogl_pfn_glGetObjectPtrLabelKHR = rogl_GetProcAddress("glGetObjectPtrLabelKHR");
    rogl_pfn_glGetPointervKHR = rogl_GetProcAddress("glGetPointervKHR");
    rogl_pfn_glGetGraphicsResetStatusKHR = rogl_GetProcAddress("glGetGraphicsResetStatusKHR");
    rogl_pfn_glReadnPixelsKHR = rogl_GetProcAddress("glReadnPixelsKHR");
    rogl_pfn_glGetnUniformfvKHR = rogl_GetProcAddress("glGetnUniformfvKHR");
    rogl_pfn_glGetnUniformivKHR = rogl_GetProcAddress("glGetnUniformivKHR");
    rogl_pfn_glGetnUniformuivKHR = rogl_GetProcAddress("glGetnUniformuivKHR");
    rogl_pfn_glResizeBuffersMESA = rogl_GetProcAddress("glResizeBuffersMESA");
    rogl_pfn_glWindowPos2dMESA = rogl_GetProcAddress("glWindowPos2dMESA");
    rogl_pfn_glWindowPos2dvMESA = rogl_GetProcAddress("glWindowPos2dvMESA");
    rogl_pfn_glWindowPos2fMESA = rogl_GetProcAddress("glWindowPos2fMESA");
    rogl_pfn_glWindowPos2fvMESA = rogl_GetProcAddress("glWindowPos2fvMESA");
    rogl_pfn_glWindowPos2iMESA = rogl_GetProcAddress("glWindowPos2iMESA");
    rogl_pfn_glWindowPos2ivMESA = rogl_GetProcAddress("glWindowPos2ivMESA");
    rogl_pfn_glWindowPos2sMESA = rogl_GetProcAddress("glWindowPos2sMESA");
    rogl_pfn_glWindowPos2svMESA = rogl_GetProcAddress("glWindowPos2svMESA");
    rogl_pfn_glWindowPos3dMESA = rogl_GetProcAddress("glWindowPos3dMESA");
    rogl_pfn_glWindowPos3dvMESA = rogl_GetProcAddress("glWindowPos3dvMESA");
    rogl_pfn_glWindowPos3fMESA = rogl_GetProcAddress("glWindowPos3fMESA");
    rogl_pfn_glWindowPos3fvMESA = rogl_GetProcAddress("glWindowPos3fvMESA");
    rogl_pfn_glWindowPos3iMESA = rogl_GetProcAddress("glWindowPos3iMESA");
    rogl_pfn_glWindowPos3ivMESA = rogl_GetProcAddress("glWindowPos3ivMESA");
    rogl_pfn_glWindowPos3sMESA = rogl_GetProcAddress("glWindowPos3sMESA");
    rogl_pfn_glWindowPos3svMESA = rogl_GetProcAddress("glWindowPos3svMESA");
    rogl_pfn_glWindowPos4dMESA = rogl_GetProcAddress("glWindowPos4dMESA");
    rogl_pfn_glWindowPos4dvMESA = rogl_GetProcAddress("glWindowPos4dvMESA");
    rogl_pfn_glWindowPos4fMESA = rogl_GetProcAddress("glWindowPos4fMESA");
    rogl_pfn_glWindowPos4fvMESA = rogl_GetProcAddress("glWindowPos4fvMESA");
    rogl_pfn_glWindowPos4iMESA = rogl_GetProcAddress("glWindowPos4iMESA");
    rogl_pfn_glWindowPos4ivMESA = rogl_GetProcAddress("glWindowPos4ivMESA");
    rogl_pfn_glWindowPos4sMESA = rogl_GetProcAddress("glWindowPos4sMESA");
    rogl_pfn_glWindowPos4svMESA = rogl_GetProcAddress("glWindowPos4svMESA");
    rogl_pfn_glBeginConditionalRenderNVX = rogl_GetProcAddress("glBeginConditionalRenderNVX");
    rogl_pfn_glEndConditionalRenderNVX = rogl_GetProcAddress("glEndConditionalRenderNVX");
    rogl_pfn_glMultiDrawArraysIndirectBindlessNV = rogl_GetProcAddress("glMultiDrawArraysIndirectBindlessNV");
    rogl_pfn_glMultiDrawElementsIndirectBindlessNV = rogl_GetProcAddress("glMultiDrawElementsIndirectBindlessNV");
    rogl_pfn_glMultiDrawArraysIndirectBindlessCountNV = rogl_GetProcAddress("glMultiDrawArraysIndirectBindlessCountNV");
    rogl_pfn_glMultiDrawElementsIndirectBindlessCountNV = rogl_GetProcAddress("glMultiDrawElementsIndirectBindlessCountNV");
    rogl_pfn_glGetTextureHandleNV = rogl_GetProcAddress("glGetTextureHandleNV");
    rogl_pfn_glGetTextureSamplerHandleNV = rogl_GetProcAddress("glGetTextureSamplerHandleNV");
    rogl_pfn_glMakeTextureHandleResidentNV = rogl_GetProcAddress("glMakeTextureHandleResidentNV");
    rogl_pfn_glMakeTextureHandleNonResidentNV = rogl_GetProcAddress("glMakeTextureHandleNonResidentNV");
    rogl_pfn_glGetImageHandleNV = rogl_GetProcAddress("glGetImageHandleNV");
    rogl_pfn_glMakeImageHandleResidentNV = rogl_GetProcAddress("glMakeImageHandleResidentNV");
    rogl_pfn_glMakeImageHandleNonResidentNV = rogl_GetProcAddress("glMakeImageHandleNonResidentNV");
    rogl_pfn_glUniformHandleui64NV = rogl_GetProcAddress("glUniformHandleui64NV");
    rogl_pfn_glUniformHandleui64vNV = rogl_GetProcAddress("glUniformHandleui64vNV");
    rogl_pfn_glProgramUniformHandleui64NV = rogl_GetProcAddress("glProgramUniformHandleui64NV");
    rogl_pfn_glProgramUniformHandleui64vNV = rogl_GetProcAddress("glProgramUniformHandleui64vNV");
    rogl_pfn_glIsTextureHandleResidentNV = rogl_GetProcAddress("glIsTextureHandleResidentNV");
    rogl_pfn_glIsImageHandleResidentNV = rogl_GetProcAddress("glIsImageHandleResidentNV");
    rogl_pfn_glBlendParameteriNV = rogl_GetProcAddress("glBlendParameteriNV");
    rogl_pfn_glBlendBarrierNV = rogl_GetProcAddress("glBlendBarrierNV");
    rogl_pfn_glCreateStatesNV = rogl_GetProcAddress("glCreateStatesNV");
    rogl_pfn_glDeleteStatesNV = rogl_GetProcAddress("glDeleteStatesNV");
    rogl_pfn_glIsStateNV = rogl_GetProcAddress("glIsStateNV");
    rogl_pfn_glStateCaptureNV = rogl_GetProcAddress("glStateCaptureNV");
    rogl_pfn_glGetCommandHeaderNV = rogl_GetProcAddress("glGetCommandHeaderNV");
    rogl_pfn_glGetStageIndexNV = rogl_GetProcAddress("glGetStageIndexNV");
    rogl_pfn_glDrawCommandsNV = rogl_GetProcAddress("glDrawCommandsNV");
    rogl_pfn_glDrawCommandsAddressNV = rogl_GetProcAddress("glDrawCommandsAddressNV");
    rogl_pfn_glDrawCommandsStatesNV = rogl_GetProcAddress("glDrawCommandsStatesNV");
    rogl_pfn_glDrawCommandsStatesAddressNV = rogl_GetProcAddress("glDrawCommandsStatesAddressNV");
    rogl_pfn_glCreateCommandListsNV = rogl_GetProcAddress("glCreateCommandListsNV");
    rogl_pfn_glDeleteCommandListsNV = rogl_GetProcAddress("glDeleteCommandListsNV");
    rogl_pfn_glIsCommandListNV = rogl_GetProcAddress("glIsCommandListNV");
    rogl_pfn_glListDrawCommandsStatesClientNV = rogl_GetProcAddress("glListDrawCommandsStatesClientNV");
    rogl_pfn_glCommandListSegmentsNV = rogl_GetProcAddress("glCommandListSegmentsNV");
    rogl_pfn_glCompileCommandListNV = rogl_GetProcAddress("glCompileCommandListNV");
    rogl_pfn_glCallCommandListNV = rogl_GetProcAddress("glCallCommandListNV");
    rogl_pfn_glBeginConditionalRenderNV = rogl_GetProcAddress("glBeginConditionalRenderNV");
    rogl_pfn_glEndConditionalRenderNV = rogl_GetProcAddress("glEndConditionalRenderNV");
    rogl_pfn_glSubpixelPrecisionBiasNV = rogl_GetProcAddress("glSubpixelPrecisionBiasNV");
    rogl_pfn_glConservativeRasterParameterfNV = rogl_GetProcAddress("glConservativeRasterParameterfNV");
    rogl_pfn_glCopyImageSubDataNV = rogl_GetProcAddress("glCopyImageSubDataNV");
    rogl_pfn_glDepthRangedNV = rogl_GetProcAddress("glDepthRangedNV");
    rogl_pfn_glClearDepthdNV = rogl_GetProcAddress("glClearDepthdNV");
    rogl_pfn_glDepthBoundsdNV = rogl_GetProcAddress("glDepthBoundsdNV");
    rogl_pfn_glDrawTextureNV = rogl_GetProcAddress("glDrawTextureNV");
    rogl_pfn_glMapControlPointsNV = rogl_GetProcAddress("glMapControlPointsNV");
    rogl_pfn_glMapParameterivNV = rogl_GetProcAddress("glMapParameterivNV");
    rogl_pfn_glMapParameterfvNV = rogl_GetProcAddress("glMapParameterfvNV");
    rogl_pfn_glGetMapControlPointsNV = rogl_GetProcAddress("glGetMapControlPointsNV");
    rogl_pfn_glGetMapParameterivNV = rogl_GetProcAddress("glGetMapParameterivNV");
    rogl_pfn_glGetMapParameterfvNV = rogl_GetProcAddress("glGetMapParameterfvNV");
    rogl_pfn_glGetMapAttribParameterivNV = rogl_GetProcAddress("glGetMapAttribParameterivNV");
    rogl_pfn_glGetMapAttribParameterfvNV = rogl_GetProcAddress("glGetMapAttribParameterfvNV");
    rogl_pfn_glEvalMapsNV = rogl_GetProcAddress("glEvalMapsNV");
    rogl_pfn_glGetMultisamplefvNV = rogl_GetProcAddress("glGetMultisamplefvNV");
    rogl_pfn_glSampleMaskIndexedNV = rogl_GetProcAddress("glSampleMaskIndexedNV");
    rogl_pfn_glTexRenderbufferNV = rogl_GetProcAddress("glTexRenderbufferNV");
    rogl_pfn_glDeleteFencesNV = rogl_GetProcAddress("glDeleteFencesNV");
    rogl_pfn_glGenFencesNV = rogl_GetProcAddress("glGenFencesNV");
    rogl_pfn_glIsFenceNV = rogl_GetProcAddress("glIsFenceNV");
    rogl_pfn_glTestFenceNV = rogl_GetProcAddress("glTestFenceNV");
    rogl_pfn_glGetFenceivNV = rogl_GetProcAddress("glGetFenceivNV");
    rogl_pfn_glFinishFenceNV = rogl_GetProcAddress("glFinishFenceNV");
    rogl_pfn_glSetFenceNV = rogl_GetProcAddress("glSetFenceNV");
    rogl_pfn_glFragmentCoverageColorNV = rogl_GetProcAddress("glFragmentCoverageColorNV");
    rogl_pfn_glProgramNamedParameter4fNV = rogl_GetProcAddress("glProgramNamedParameter4fNV");
    rogl_pfn_glProgramNamedParameter4fvNV = rogl_GetProcAddress("glProgramNamedParameter4fvNV");
    rogl_pfn_glProgramNamedParameter4dNV = rogl_GetProcAddress("glProgramNamedParameter4dNV");
    rogl_pfn_glProgramNamedParameter4dvNV = rogl_GetProcAddress("glProgramNamedParameter4dvNV");
    rogl_pfn_glGetProgramNamedParameterfvNV = rogl_GetProcAddress("glGetProgramNamedParameterfvNV");
    rogl_pfn_glGetProgramNamedParameterdvNV = rogl_GetProcAddress("glGetProgramNamedParameterdvNV");
    rogl_pfn_glCoverageModulationTableNV = rogl_GetProcAddress("glCoverageModulationTableNV");
    rogl_pfn_glGetCoverageModulationTableNV = rogl_GetProcAddress("glGetCoverageModulationTableNV");
    rogl_pfn_glCoverageModulationNV = rogl_GetProcAddress("glCoverageModulationNV");
    rogl_pfn_glRenderbufferStorageMultisampleCoverageNV = rogl_GetProcAddress("glRenderbufferStorageMultisampleCoverageNV");
    rogl_pfn_glProgramVertexLimitNV = rogl_GetProcAddress("glProgramVertexLimitNV");
    rogl_pfn_glFramebufferTextureEXT = rogl_GetProcAddress("glFramebufferTextureEXT");
    rogl_pfn_glFramebufferTextureFaceEXT = rogl_GetProcAddress("glFramebufferTextureFaceEXT");
    rogl_pfn_glProgramLocalParameterI4iNV = rogl_GetProcAddress("glProgramLocalParameterI4iNV");
    rogl_pfn_glProgramLocalParameterI4ivNV = rogl_GetProcAddress("glProgramLocalParameterI4ivNV");
    rogl_pfn_glProgramLocalParametersI4ivNV = rogl_GetProcAddress("glProgramLocalParametersI4ivNV");
    rogl_pfn_glProgramLocalParameterI4uiNV = rogl_GetProcAddress("glProgramLocalParameterI4uiNV");
    rogl_pfn_glProgramLocalParameterI4uivNV = rogl_GetProcAddress("glProgramLocalParameterI4uivNV");
    rogl_pfn_glProgramLocalParametersI4uivNV = rogl_GetProcAddress("glProgramLocalParametersI4uivNV");
    rogl_pfn_glProgramEnvParameterI4iNV = rogl_GetProcAddress("glProgramEnvParameterI4iNV");
    rogl_pfn_glProgramEnvParameterI4ivNV = rogl_GetProcAddress("glProgramEnvParameterI4ivNV");
    rogl_pfn_glProgramEnvParametersI4ivNV = rogl_GetProcAddress("glProgramEnvParametersI4ivNV");
    rogl_pfn_glProgramEnvParameterI4uiNV = rogl_GetProcAddress("glProgramEnvParameterI4uiNV");
    rogl_pfn_glProgramEnvParameterI4uivNV = rogl_GetProcAddress("glProgramEnvParameterI4uivNV");
    rogl_pfn_glProgramEnvParametersI4uivNV = rogl_GetProcAddress("glProgramEnvParametersI4uivNV");
    rogl_pfn_glGetProgramLocalParameterIivNV = rogl_GetProcAddress("glGetProgramLocalParameterIivNV");
    rogl_pfn_glGetProgramLocalParameterIuivNV = rogl_GetProcAddress("glGetProgramLocalParameterIuivNV");
    rogl_pfn_glGetProgramEnvParameterIivNV = rogl_GetProcAddress("glGetProgramEnvParameterIivNV");
    rogl_pfn_glGetProgramEnvParameterIuivNV = rogl_GetProcAddress("glGetProgramEnvParameterIuivNV");
    rogl_pfn_glProgramSubroutineParametersuivNV = rogl_GetProcAddress("glProgramSubroutineParametersuivNV");
    rogl_pfn_glGetProgramSubroutineParameteruivNV = rogl_GetProcAddress("glGetProgramSubroutineParameteruivNV");
    rogl_pfn_glVertex2hNV = rogl_GetProcAddress("glVertex2hNV");
    rogl_pfn_glVertex2hvNV = rogl_GetProcAddress("glVertex2hvNV");
    rogl_pfn_glVertex3hNV = rogl_GetProcAddress("glVertex3hNV");
    rogl_pfn_glVertex3hvNV = rogl_GetProcAddress("glVertex3hvNV");
    rogl_pfn_glVertex4hNV = rogl_GetProcAddress("glVertex4hNV");
    rogl_pfn_glVertex4hvNV = rogl_GetProcAddress("glVertex4hvNV");
    rogl_pfn_glNormal3hNV = rogl_GetProcAddress("glNormal3hNV");
    rogl_pfn_glNormal3hvNV = rogl_GetProcAddress("glNormal3hvNV");
    rogl_pfn_glColor3hNV = rogl_GetProcAddress("glColor3hNV");
    rogl_pfn_glColor3hvNV = rogl_GetProcAddress("glColor3hvNV");
    rogl_pfn_glColor4hNV = rogl_GetProcAddress("glColor4hNV");
    rogl_pfn_glColor4hvNV = rogl_GetProcAddress("glColor4hvNV");
    rogl_pfn_glTexCoord1hNV = rogl_GetProcAddress("glTexCoord1hNV");
    rogl_pfn_glTexCoord1hvNV = rogl_GetProcAddress("glTexCoord1hvNV");
    rogl_pfn_glTexCoord2hNV = rogl_GetProcAddress("glTexCoord2hNV");
    rogl_pfn_glTexCoord2hvNV = rogl_GetProcAddress("glTexCoord2hvNV");
    rogl_pfn_glTexCoord3hNV = rogl_GetProcAddress("glTexCoord3hNV");
    rogl_pfn_glTexCoord3hvNV = rogl_GetProcAddress("glTexCoord3hvNV");
    rogl_pfn_glTexCoord4hNV = rogl_GetProcAddress("glTexCoord4hNV");
    rogl_pfn_glTexCoord4hvNV = rogl_GetProcAddress("glTexCoord4hvNV");
    rogl_pfn_glMultiTexCoord1hNV = rogl_GetProcAddress("glMultiTexCoord1hNV");
    rogl_pfn_glMultiTexCoord1hvNV = rogl_GetProcAddress("glMultiTexCoord1hvNV");
    rogl_pfn_glMultiTexCoord2hNV = rogl_GetProcAddress("glMultiTexCoord2hNV");
    rogl_pfn_glMultiTexCoord2hvNV = rogl_GetProcAddress("glMultiTexCoord2hvNV");
    rogl_pfn_glMultiTexCoord3hNV = rogl_GetProcAddress("glMultiTexCoord3hNV");
    rogl_pfn_glMultiTexCoord3hvNV = rogl_GetProcAddress("glMultiTexCoord3hvNV");
    rogl_pfn_glMultiTexCoord4hNV = rogl_GetProcAddress("glMultiTexCoord4hNV");
    rogl_pfn_glMultiTexCoord4hvNV = rogl_GetProcAddress("glMultiTexCoord4hvNV");
    rogl_pfn_glFogCoordhNV = rogl_GetProcAddress("glFogCoordhNV");
    rogl_pfn_glFogCoordhvNV = rogl_GetProcAddress("glFogCoordhvNV");
    rogl_pfn_glSecondaryColor3hNV = rogl_GetProcAddress("glSecondaryColor3hNV");
    rogl_pfn_glSecondaryColor3hvNV = rogl_GetProcAddress("glSecondaryColor3hvNV");
    rogl_pfn_glVertexWeighthNV = rogl_GetProcAddress("glVertexWeighthNV");
    rogl_pfn_glVertexWeighthvNV = rogl_GetProcAddress("glVertexWeighthvNV");
    rogl_pfn_glVertexAttrib1hNV = rogl_GetProcAddress("glVertexAttrib1hNV");
    rogl_pfn_glVertexAttrib1hvNV = rogl_GetProcAddress("glVertexAttrib1hvNV");
    rogl_pfn_glVertexAttrib2hNV = rogl_GetProcAddress("glVertexAttrib2hNV");
    rogl_pfn_glVertexAttrib2hvNV = rogl_GetProcAddress("glVertexAttrib2hvNV");
    rogl_pfn_glVertexAttrib3hNV = rogl_GetProcAddress("glVertexAttrib3hNV");
    rogl_pfn_glVertexAttrib3hvNV = rogl_GetProcAddress("glVertexAttrib3hvNV");
    rogl_pfn_glVertexAttrib4hNV = rogl_GetProcAddress("glVertexAttrib4hNV");
    rogl_pfn_glVertexAttrib4hvNV = rogl_GetProcAddress("glVertexAttrib4hvNV");
    rogl_pfn_glVertexAttribs1hvNV = rogl_GetProcAddress("glVertexAttribs1hvNV");
    rogl_pfn_glVertexAttribs2hvNV = rogl_GetProcAddress("glVertexAttribs2hvNV");
    rogl_pfn_glVertexAttribs3hvNV = rogl_GetProcAddress("glVertexAttribs3hvNV");
    rogl_pfn_glVertexAttribs4hvNV = rogl_GetProcAddress("glVertexAttribs4hvNV");
    rogl_pfn_glGetInternalformatSampleivNV = rogl_GetProcAddress("glGetInternalformatSampleivNV");
    rogl_pfn_glGenOcclusionQueriesNV = rogl_GetProcAddress("glGenOcclusionQueriesNV");
    rogl_pfn_glDeleteOcclusionQueriesNV = rogl_GetProcAddress("glDeleteOcclusionQueriesNV");
    rogl_pfn_glIsOcclusionQueryNV = rogl_GetProcAddress("glIsOcclusionQueryNV");
    rogl_pfn_glBeginOcclusionQueryNV = rogl_GetProcAddress("glBeginOcclusionQueryNV");
    rogl_pfn_glEndOcclusionQueryNV = rogl_GetProcAddress("glEndOcclusionQueryNV");
    rogl_pfn_glGetOcclusionQueryivNV = rogl_GetProcAddress("glGetOcclusionQueryivNV");
    rogl_pfn_glGetOcclusionQueryuivNV = rogl_GetProcAddress("glGetOcclusionQueryuivNV");
    rogl_pfn_glProgramBufferParametersfvNV = rogl_GetProcAddress("glProgramBufferParametersfvNV");
    rogl_pfn_glProgramBufferParametersIivNV = rogl_GetProcAddress("glProgramBufferParametersIivNV");
    rogl_pfn_glProgramBufferParametersIuivNV = rogl_GetProcAddress("glProgramBufferParametersIuivNV");
    rogl_pfn_glGenPathsNV = rogl_GetProcAddress("glGenPathsNV");
    rogl_pfn_glDeletePathsNV = rogl_GetProcAddress("glDeletePathsNV");
    rogl_pfn_glIsPathNV = rogl_GetProcAddress("glIsPathNV");
    rogl_pfn_glPathCommandsNV = rogl_GetProcAddress("glPathCommandsNV");
    rogl_pfn_glPathCoordsNV = rogl_GetProcAddress("glPathCoordsNV");
    rogl_pfn_glPathSubCommandsNV = rogl_GetProcAddress("glPathSubCommandsNV");
    rogl_pfn_glPathSubCoordsNV = rogl_GetProcAddress("glPathSubCoordsNV");
    rogl_pfn_glPathStringNV = rogl_GetProcAddress("glPathStringNV");
    rogl_pfn_glPathGlyphsNV = rogl_GetProcAddress("glPathGlyphsNV");
    rogl_pfn_glPathGlyphRangeNV = rogl_GetProcAddress("glPathGlyphRangeNV");
    rogl_pfn_glWeightPathsNV = rogl_GetProcAddress("glWeightPathsNV");
    rogl_pfn_glCopyPathNV = rogl_GetProcAddress("glCopyPathNV");
    rogl_pfn_glInterpolatePathsNV = rogl_GetProcAddress("glInterpolatePathsNV");
    rogl_pfn_glTransformPathNV = rogl_GetProcAddress("glTransformPathNV");
    rogl_pfn_glPathParameterivNV = rogl_GetProcAddress("glPathParameterivNV");
    rogl_pfn_glPathParameteriNV = rogl_GetProcAddress("glPathParameteriNV");
    rogl_pfn_glPathParameterfvNV = rogl_GetProcAddress("glPathParameterfvNV");
    rogl_pfn_glPathParameterfNV = rogl_GetProcAddress("glPathParameterfNV");
    rogl_pfn_glPathDashArrayNV = rogl_GetProcAddress("glPathDashArrayNV");
    rogl_pfn_glPathStencilFuncNV = rogl_GetProcAddress("glPathStencilFuncNV");
    rogl_pfn_glPathStencilDepthOffsetNV = rogl_GetProcAddress("glPathStencilDepthOffsetNV");
    rogl_pfn_glStencilFillPathNV = rogl_GetProcAddress("glStencilFillPathNV");
    rogl_pfn_glStencilStrokePathNV = rogl_GetProcAddress("glStencilStrokePathNV");
    rogl_pfn_glStencilFillPathInstancedNV = rogl_GetProcAddress("glStencilFillPathInstancedNV");
    rogl_pfn_glStencilStrokePathInstancedNV = rogl_GetProcAddress("glStencilStrokePathInstancedNV");
    rogl_pfn_glPathCoverDepthFuncNV = rogl_GetProcAddress("glPathCoverDepthFuncNV");
    rogl_pfn_glCoverFillPathNV = rogl_GetProcAddress("glCoverFillPathNV");
    rogl_pfn_glCoverStrokePathNV = rogl_GetProcAddress("glCoverStrokePathNV");
    rogl_pfn_glCoverFillPathInstancedNV = rogl_GetProcAddress("glCoverFillPathInstancedNV");
    rogl_pfn_glCoverStrokePathInstancedNV = rogl_GetProcAddress("glCoverStrokePathInstancedNV");
    rogl_pfn_glGetPathParameterivNV = rogl_GetProcAddress("glGetPathParameterivNV");
    rogl_pfn_glGetPathParameterfvNV = rogl_GetProcAddress("glGetPathParameterfvNV");
    rogl_pfn_glGetPathCommandsNV = rogl_GetProcAddress("glGetPathCommandsNV");
    rogl_pfn_glGetPathCoordsNV = rogl_GetProcAddress("glGetPathCoordsNV");
    rogl_pfn_glGetPathDashArrayNV = rogl_GetProcAddress("glGetPathDashArrayNV");
    rogl_pfn_glGetPathMetricsNV = rogl_GetProcAddress("glGetPathMetricsNV");
    rogl_pfn_glGetPathMetricRangeNV = rogl_GetProcAddress("glGetPathMetricRangeNV");
    rogl_pfn_glGetPathSpacingNV = rogl_GetProcAddress("glGetPathSpacingNV");
    rogl_pfn_glIsPointInFillPathNV = rogl_GetProcAddress("glIsPointInFillPathNV");
    rogl_pfn_glIsPointInStrokePathNV = rogl_GetProcAddress("glIsPointInStrokePathNV");
    rogl_pfn_glGetPathLengthNV = rogl_GetProcAddress("glGetPathLengthNV");
    rogl_pfn_glPointAlongPathNV = rogl_GetProcAddress("glPointAlongPathNV");
    rogl_pfn_glMatrixLoad3x2fNV = rogl_GetProcAddress("glMatrixLoad3x2fNV");
    rogl_pfn_glMatrixLoad3x3fNV = rogl_GetProcAddress("glMatrixLoad3x3fNV");
    rogl_pfn_glMatrixLoadTranspose3x3fNV = rogl_GetProcAddress("glMatrixLoadTranspose3x3fNV");
    rogl_pfn_glMatrixMult3x2fNV = rogl_GetProcAddress("glMatrixMult3x2fNV");
    rogl_pfn_glMatrixMult3x3fNV = rogl_GetProcAddress("glMatrixMult3x3fNV");
    rogl_pfn_glMatrixMultTranspose3x3fNV = rogl_GetProcAddress("glMatrixMultTranspose3x3fNV");
    rogl_pfn_glStencilThenCoverFillPathNV = rogl_GetProcAddress("glStencilThenCoverFillPathNV");
    rogl_pfn_glStencilThenCoverStrokePathNV = rogl_GetProcAddress("glStencilThenCoverStrokePathNV");
    rogl_pfn_glStencilThenCoverFillPathInstancedNV = rogl_GetProcAddress("glStencilThenCoverFillPathInstancedNV");
    rogl_pfn_glStencilThenCoverStrokePathInstancedNV = rogl_GetProcAddress("glStencilThenCoverStrokePathInstancedNV");
    rogl_pfn_glPathGlyphIndexRangeNV = rogl_GetProcAddress("glPathGlyphIndexRangeNV");
    rogl_pfn_glPathGlyphIndexArrayNV = rogl_GetProcAddress("glPathGlyphIndexArrayNV");
    rogl_pfn_glPathMemoryGlyphIndexArrayNV = rogl_GetProcAddress("glPathMemoryGlyphIndexArrayNV");
    rogl_pfn_glProgramPathFragmentInputGenNV = rogl_GetProcAddress("glProgramPathFragmentInputGenNV");
    rogl_pfn_glGetProgramResourcefvNV = rogl_GetProcAddress("glGetProgramResourcefvNV");
    rogl_pfn_glPathColorGenNV = rogl_GetProcAddress("glPathColorGenNV");
    rogl_pfn_glPathTexGenNV = rogl_GetProcAddress("glPathTexGenNV");
    rogl_pfn_glPathFogGenNV = rogl_GetProcAddress("glPathFogGenNV");
    rogl_pfn_glGetPathColorGenivNV = rogl_GetProcAddress("glGetPathColorGenivNV");
    rogl_pfn_glGetPathColorGenfvNV = rogl_GetProcAddress("glGetPathColorGenfvNV");
    rogl_pfn_glGetPathTexGenivNV = rogl_GetProcAddress("glGetPathTexGenivNV");
    rogl_pfn_glGetPathTexGenfvNV = rogl_GetProcAddress("glGetPathTexGenfvNV");
    rogl_pfn_glPixelDataRangeNV = rogl_GetProcAddress("glPixelDataRangeNV");
    rogl_pfn_glFlushPixelDataRangeNV = rogl_GetProcAddress("glFlushPixelDataRangeNV");
    rogl_pfn_glPointParameteriNV = rogl_GetProcAddress("glPointParameteriNV");
    rogl_pfn_glPointParameterivNV = rogl_GetProcAddress("glPointParameterivNV");
    rogl_pfn_glPresentFrameKeyedNV = rogl_GetProcAddress("glPresentFrameKeyedNV");
    rogl_pfn_glPresentFrameDualFillNV = rogl_GetProcAddress("glPresentFrameDualFillNV");
    rogl_pfn_glGetVideoivNV = rogl_GetProcAddress("glGetVideoivNV");
    rogl_pfn_glGetVideouivNV = rogl_GetProcAddress("glGetVideouivNV");
    rogl_pfn_glGetVideoi64vNV = rogl_GetProcAddress("glGetVideoi64vNV");
    rogl_pfn_glGetVideoui64vNV = rogl_GetProcAddress("glGetVideoui64vNV");
    rogl_pfn_glPrimitiveRestartNV = rogl_GetProcAddress("glPrimitiveRestartNV");
    rogl_pfn_glPrimitiveRestartIndexNV = rogl_GetProcAddress("glPrimitiveRestartIndexNV");
    rogl_pfn_glCombinerParameterfvNV = rogl_GetProcAddress("glCombinerParameterfvNV");
    rogl_pfn_glCombinerParameterfNV = rogl_GetProcAddress("glCombinerParameterfNV");
    rogl_pfn_glCombinerParameterivNV = rogl_GetProcAddress("glCombinerParameterivNV");
    rogl_pfn_glCombinerParameteriNV = rogl_GetProcAddress("glCombinerParameteriNV");
    rogl_pfn_glCombinerInputNV = rogl_GetProcAddress("glCombinerInputNV");
    rogl_pfn_glCombinerOutputNV = rogl_GetProcAddress("glCombinerOutputNV");
    rogl_pfn_glFinalCombinerInputNV = rogl_GetProcAddress("glFinalCombinerInputNV");
    rogl_pfn_glGetCombinerInputParameterfvNV = rogl_GetProcAddress("glGetCombinerInputParameterfvNV");
    rogl_pfn_glGetCombinerInputParameterivNV = rogl_GetProcAddress("glGetCombinerInputParameterivNV");
    rogl_pfn_glGetCombinerOutputParameterfvNV = rogl_GetProcAddress("glGetCombinerOutputParameterfvNV");
    rogl_pfn_glGetCombinerOutputParameterivNV = rogl_GetProcAddress("glGetCombinerOutputParameterivNV");
    rogl_pfn_glGetFinalCombinerInputParameterfvNV = rogl_GetProcAddress("glGetFinalCombinerInputParameterfvNV");
    rogl_pfn_glGetFinalCombinerInputParameterivNV = rogl_GetProcAddress("glGetFinalCombinerInputParameterivNV");
    rogl_pfn_glCombinerStageParameterfvNV = rogl_GetProcAddress("glCombinerStageParameterfvNV");
    rogl_pfn_glGetCombinerStageParameterfvNV = rogl_GetProcAddress("glGetCombinerStageParameterfvNV");
    rogl_pfn_glFramebufferSampleLocationsfvNV = rogl_GetProcAddress("glFramebufferSampleLocationsfvNV");
    rogl_pfn_glNamedFramebufferSampleLocationsfvNV = rogl_GetProcAddress("glNamedFramebufferSampleLocationsfvNV");
    rogl_pfn_glResolveDepthValuesNV = rogl_GetProcAddress("glResolveDepthValuesNV");
    rogl_pfn_glMakeBufferResidentNV = rogl_GetProcAddress("glMakeBufferResidentNV");
    rogl_pfn_glMakeBufferNonResidentNV = rogl_GetProcAddress("glMakeBufferNonResidentNV");
    rogl_pfn_glIsBufferResidentNV = rogl_GetProcAddress("glIsBufferResidentNV");
    rogl_pfn_glMakeNamedBufferResidentNV = rogl_GetProcAddress("glMakeNamedBufferResidentNV");
    rogl_pfn_glMakeNamedBufferNonResidentNV = rogl_GetProcAddress("glMakeNamedBufferNonResidentNV");
    rogl_pfn_glIsNamedBufferResidentNV = rogl_GetProcAddress("glIsNamedBufferResidentNV");
    rogl_pfn_glGetBufferParameterui64vNV = rogl_GetProcAddress("glGetBufferParameterui64vNV");
    rogl_pfn_glGetNamedBufferParameterui64vNV = rogl_GetProcAddress("glGetNamedBufferParameterui64vNV");
    rogl_pfn_glGetIntegerui64vNV = rogl_GetProcAddress("glGetIntegerui64vNV");
    rogl_pfn_glUniformui64NV = rogl_GetProcAddress("glUniformui64NV");
    rogl_pfn_glUniformui64vNV = rogl_GetProcAddress("glUniformui64vNV");
    rogl_pfn_glProgramUniformui64NV = rogl_GetProcAddress("glProgramUniformui64NV");
    rogl_pfn_glProgramUniformui64vNV = rogl_GetProcAddress("glProgramUniformui64vNV");
    rogl_pfn_glTextureBarrierNV = rogl_GetProcAddress("glTextureBarrierNV");
    rogl_pfn_glTexImage2DMultisampleCoverageNV = rogl_GetProcAddress("glTexImage2DMultisampleCoverageNV");
    rogl_pfn_glTexImage3DMultisampleCoverageNV = rogl_GetProcAddress("glTexImage3DMultisampleCoverageNV");
    rogl_pfn_glTextureImage2DMultisampleNV = rogl_GetProcAddress("glTextureImage2DMultisampleNV");
    rogl_pfn_glTextureImage3DMultisampleNV = rogl_GetProcAddress("glTextureImage3DMultisampleNV");
    rogl_pfn_glTextureImage2DMultisampleCoverageNV = rogl_GetProcAddress("glTextureImage2DMultisampleCoverageNV");
    rogl_pfn_glTextureImage3DMultisampleCoverageNV = rogl_GetProcAddress("glTextureImage3DMultisampleCoverageNV");
    rogl_pfn_glBeginTransformFeedbackNV = rogl_GetProcAddress("glBeginTransformFeedbackNV");
    rogl_pfn_glEndTransformFeedbackNV = rogl_GetProcAddress("glEndTransformFeedbackNV");
    rogl_pfn_glTransformFeedbackAttribsNV = rogl_GetProcAddress("glTransformFeedbackAttribsNV");
    rogl_pfn_glBindBufferRangeNV = rogl_GetProcAddress("glBindBufferRangeNV");
    rogl_pfn_glBindBufferOffsetNV = rogl_GetProcAddress("glBindBufferOffsetNV");
    rogl_pfn_glBindBufferBaseNV = rogl_GetProcAddress("glBindBufferBaseNV");
    rogl_pfn_glTransformFeedbackVaryingsNV = rogl_GetProcAddress("glTransformFeedbackVaryingsNV");
    rogl_pfn_glActiveVaryingNV = rogl_GetProcAddress("glActiveVaryingNV");
    rogl_pfn_glGetVaryingLocationNV = rogl_GetProcAddress("glGetVaryingLocationNV");
    rogl_pfn_glGetActiveVaryingNV = rogl_GetProcAddress("glGetActiveVaryingNV");
    rogl_pfn_glGetTransformFeedbackVaryingNV = rogl_GetProcAddress("glGetTransformFeedbackVaryingNV");
    rogl_pfn_glTransformFeedbackStreamAttribsNV = rogl_GetProcAddress("glTransformFeedbackStreamAttribsNV");
    rogl_pfn_glBindTransformFeedbackNV = rogl_GetProcAddress("glBindTransformFeedbackNV");
    rogl_pfn_glDeleteTransformFeedbacksNV = rogl_GetProcAddress("glDeleteTransformFeedbacksNV");
    rogl_pfn_glGenTransformFeedbacksNV = rogl_GetProcAddress("glGenTransformFeedbacksNV");
    rogl_pfn_glIsTransformFeedbackNV = rogl_GetProcAddress("glIsTransformFeedbackNV");
    rogl_pfn_glPauseTransformFeedbackNV = rogl_GetProcAddress("glPauseTransformFeedbackNV");
    rogl_pfn_glResumeTransformFeedbackNV = rogl_GetProcAddress("glResumeTransformFeedbackNV");
    rogl_pfn_glDrawTransformFeedbackNV = rogl_GetProcAddress("glDrawTransformFeedbackNV");
    rogl_pfn_glVDPAUInitNV = rogl_GetProcAddress("glVDPAUInitNV");
    rogl_pfn_glVDPAUFiniNV = rogl_GetProcAddress("glVDPAUFiniNV");
    rogl_pfn_glVDPAURegisterVideoSurfaceNV = rogl_GetProcAddress("glVDPAURegisterVideoSurfaceNV");
    rogl_pfn_glVDPAURegisterOutputSurfaceNV = rogl_GetProcAddress("glVDPAURegisterOutputSurfaceNV");
    rogl_pfn_glVDPAUIsSurfaceNV = rogl_GetProcAddress("glVDPAUIsSurfaceNV");
    rogl_pfn_glVDPAUUnregisterSurfaceNV = rogl_GetProcAddress("glVDPAUUnregisterSurfaceNV");
    rogl_pfn_glVDPAUGetSurfaceivNV = rogl_GetProcAddress("glVDPAUGetSurfaceivNV");
    rogl_pfn_glVDPAUSurfaceAccessNV = rogl_GetProcAddress("glVDPAUSurfaceAccessNV");
    rogl_pfn_glVDPAUMapSurfacesNV = rogl_GetProcAddress("glVDPAUMapSurfacesNV");
    rogl_pfn_glVDPAUUnmapSurfacesNV = rogl_GetProcAddress("glVDPAUUnmapSurfacesNV");
    rogl_pfn_glFlushVertexArrayRangeNV = rogl_GetProcAddress("glFlushVertexArrayRangeNV");
    rogl_pfn_glVertexArrayRangeNV = rogl_GetProcAddress("glVertexArrayRangeNV");
    rogl_pfn_glVertexAttribL1i64NV = rogl_GetProcAddress("glVertexAttribL1i64NV");
    rogl_pfn_glVertexAttribL2i64NV = rogl_GetProcAddress("glVertexAttribL2i64NV");
    rogl_pfn_glVertexAttribL3i64NV = rogl_GetProcAddress("glVertexAttribL3i64NV");
    rogl_pfn_glVertexAttribL4i64NV = rogl_GetProcAddress("glVertexAttribL4i64NV");
    rogl_pfn_glVertexAttribL1i64vNV = rogl_GetProcAddress("glVertexAttribL1i64vNV");
    rogl_pfn_glVertexAttribL2i64vNV = rogl_GetProcAddress("glVertexAttribL2i64vNV");
    rogl_pfn_glVertexAttribL3i64vNV = rogl_GetProcAddress("glVertexAttribL3i64vNV");
    rogl_pfn_glVertexAttribL4i64vNV = rogl_GetProcAddress("glVertexAttribL4i64vNV");
    rogl_pfn_glVertexAttribL1ui64NV = rogl_GetProcAddress("glVertexAttribL1ui64NV");
    rogl_pfn_glVertexAttribL2ui64NV = rogl_GetProcAddress("glVertexAttribL2ui64NV");
    rogl_pfn_glVertexAttribL3ui64NV = rogl_GetProcAddress("glVertexAttribL3ui64NV");
    rogl_pfn_glVertexAttribL4ui64NV = rogl_GetProcAddress("glVertexAttribL4ui64NV");
    rogl_pfn_glVertexAttribL1ui64vNV = rogl_GetProcAddress("glVertexAttribL1ui64vNV");
    rogl_pfn_glVertexAttribL2ui64vNV = rogl_GetProcAddress("glVertexAttribL2ui64vNV");
    rogl_pfn_glVertexAttribL3ui64vNV = rogl_GetProcAddress("glVertexAttribL3ui64vNV");
    rogl_pfn_glVertexAttribL4ui64vNV = rogl_GetProcAddress("glVertexAttribL4ui64vNV");
    rogl_pfn_glGetVertexAttribLi64vNV = rogl_GetProcAddress("glGetVertexAttribLi64vNV");
    rogl_pfn_glGetVertexAttribLui64vNV = rogl_GetProcAddress("glGetVertexAttribLui64vNV");
    rogl_pfn_glVertexAttribLFormatNV = rogl_GetProcAddress("glVertexAttribLFormatNV");
    rogl_pfn_glBufferAddressRangeNV = rogl_GetProcAddress("glBufferAddressRangeNV");
    rogl_pfn_glVertexFormatNV = rogl_GetProcAddress("glVertexFormatNV");
    rogl_pfn_glNormalFormatNV = rogl_GetProcAddress("glNormalFormatNV");
    rogl_pfn_glColorFormatNV = rogl_GetProcAddress("glColorFormatNV");
    rogl_pfn_glIndexFormatNV = rogl_GetProcAddress("glIndexFormatNV");
    rogl_pfn_glTexCoordFormatNV = rogl_GetProcAddress("glTexCoordFormatNV");
    rogl_pfn_glEdgeFlagFormatNV = rogl_GetProcAddress("glEdgeFlagFormatNV");
    rogl_pfn_glSecondaryColorFormatNV = rogl_GetProcAddress("glSecondaryColorFormatNV");
    rogl_pfn_glFogCoordFormatNV = rogl_GetProcAddress("glFogCoordFormatNV");
    rogl_pfn_glVertexAttribFormatNV = rogl_GetProcAddress("glVertexAttribFormatNV");
    rogl_pfn_glVertexAttribIFormatNV = rogl_GetProcAddress("glVertexAttribIFormatNV");
    rogl_pfn_glGetIntegerui64i_vNV = rogl_GetProcAddress("glGetIntegerui64i_vNV");
    rogl_pfn_glAreProgramsResidentNV = rogl_GetProcAddress("glAreProgramsResidentNV");
    rogl_pfn_glBindProgramNV = rogl_GetProcAddress("glBindProgramNV");
    rogl_pfn_glDeleteProgramsNV = rogl_GetProcAddress("glDeleteProgramsNV");
    rogl_pfn_glExecuteProgramNV = rogl_GetProcAddress("glExecuteProgramNV");
    rogl_pfn_glGenProgramsNV = rogl_GetProcAddress("glGenProgramsNV");
    rogl_pfn_glGetProgramParameterdvNV = rogl_GetProcAddress("glGetProgramParameterdvNV");
    rogl_pfn_glGetProgramParameterfvNV = rogl_GetProcAddress("glGetProgramParameterfvNV");
    rogl_pfn_glGetProgramivNV = rogl_GetProcAddress("glGetProgramivNV");
    rogl_pfn_glGetProgramStringNV = rogl_GetProcAddress("glGetProgramStringNV");
    rogl_pfn_glGetTrackMatrixivNV = rogl_GetProcAddress("glGetTrackMatrixivNV");
    rogl_pfn_glGetVertexAttribdvNV = rogl_GetProcAddress("glGetVertexAttribdvNV");
    rogl_pfn_glGetVertexAttribfvNV = rogl_GetProcAddress("glGetVertexAttribfvNV");
    rogl_pfn_glGetVertexAttribivNV = rogl_GetProcAddress("glGetVertexAttribivNV");
    rogl_pfn_glGetVertexAttribPointervNV = rogl_GetProcAddress("glGetVertexAttribPointervNV");
    rogl_pfn_glIsProgramNV = rogl_GetProcAddress("glIsProgramNV");
    rogl_pfn_glLoadProgramNV = rogl_GetProcAddress("glLoadProgramNV");
    rogl_pfn_glProgramParameter4dNV = rogl_GetProcAddress("glProgramParameter4dNV");
    rogl_pfn_glProgramParameter4dvNV = rogl_GetProcAddress("glProgramParameter4dvNV");
    rogl_pfn_glProgramParameter4fNV = rogl_GetProcAddress("glProgramParameter4fNV");
    rogl_pfn_glProgramParameter4fvNV = rogl_GetProcAddress("glProgramParameter4fvNV");
    rogl_pfn_glProgramParameters4dvNV = rogl_GetProcAddress("glProgramParameters4dvNV");
    rogl_pfn_glProgramParameters4fvNV = rogl_GetProcAddress("glProgramParameters4fvNV");
    rogl_pfn_glRequestResidentProgramsNV = rogl_GetProcAddress("glRequestResidentProgramsNV");
    rogl_pfn_glTrackMatrixNV = rogl_GetProcAddress("glTrackMatrixNV");
    rogl_pfn_glVertexAttribPointerNV = rogl_GetProcAddress("glVertexAttribPointerNV");
    rogl_pfn_glVertexAttrib1dNV = rogl_GetProcAddress("glVertexAttrib1dNV");
    rogl_pfn_glVertexAttrib1dvNV = rogl_GetProcAddress("glVertexAttrib1dvNV");
    rogl_pfn_glVertexAttrib1fNV = rogl_GetProcAddress("glVertexAttrib1fNV");
    rogl_pfn_glVertexAttrib1fvNV = rogl_GetProcAddress("glVertexAttrib1fvNV");
    rogl_pfn_glVertexAttrib1sNV = rogl_GetProcAddress("glVertexAttrib1sNV");
    rogl_pfn_glVertexAttrib1svNV = rogl_GetProcAddress("glVertexAttrib1svNV");
    rogl_pfn_glVertexAttrib2dNV = rogl_GetProcAddress("glVertexAttrib2dNV");
    rogl_pfn_glVertexAttrib2dvNV = rogl_GetProcAddress("glVertexAttrib2dvNV");
    rogl_pfn_glVertexAttrib2fNV = rogl_GetProcAddress("glVertexAttrib2fNV");
    rogl_pfn_glVertexAttrib2fvNV = rogl_GetProcAddress("glVertexAttrib2fvNV");
    rogl_pfn_glVertexAttrib2sNV = rogl_GetProcAddress("glVertexAttrib2sNV");
    rogl_pfn_glVertexAttrib2svNV = rogl_GetProcAddress("glVertexAttrib2svNV");
    rogl_pfn_glVertexAttrib3dNV = rogl_GetProcAddress("glVertexAttrib3dNV");
    rogl_pfn_glVertexAttrib3dvNV = rogl_GetProcAddress("glVertexAttrib3dvNV");
    rogl_pfn_glVertexAttrib3fNV = rogl_GetProcAddress("glVertexAttrib3fNV");
    rogl_pfn_glVertexAttrib3fvNV = rogl_GetProcAddress("glVertexAttrib3fvNV");
    rogl_pfn_glVertexAttrib3sNV = rogl_GetProcAddress("glVertexAttrib3sNV");
    rogl_pfn_glVertexAttrib3svNV = rogl_GetProcAddress("glVertexAttrib3svNV");
    rogl_pfn_glVertexAttrib4dNV = rogl_GetProcAddress("glVertexAttrib4dNV");
    rogl_pfn_glVertexAttrib4dvNV = rogl_GetProcAddress("glVertexAttrib4dvNV");
    rogl_pfn_glVertexAttrib4fNV = rogl_GetProcAddress("glVertexAttrib4fNV");
    rogl_pfn_glVertexAttrib4fvNV = rogl_GetProcAddress("glVertexAttrib4fvNV");
    rogl_pfn_glVertexAttrib4sNV = rogl_GetProcAddress("glVertexAttrib4sNV");
    rogl_pfn_glVertexAttrib4svNV = rogl_GetProcAddress("glVertexAttrib4svNV");
    rogl_pfn_glVertexAttrib4ubNV = rogl_GetProcAddress("glVertexAttrib4ubNV");
    rogl_pfn_glVertexAttrib4ubvNV = rogl_GetProcAddress("glVertexAttrib4ubvNV");
    rogl_pfn_glVertexAttribs1dvNV = rogl_GetProcAddress("glVertexAttribs1dvNV");
    rogl_pfn_glVertexAttribs1fvNV = rogl_GetProcAddress("glVertexAttribs1fvNV");
    rogl_pfn_glVertexAttribs1svNV = rogl_GetProcAddress("glVertexAttribs1svNV");
    rogl_pfn_glVertexAttribs2dvNV = rogl_GetProcAddress("glVertexAttribs2dvNV");
    rogl_pfn_glVertexAttribs2fvNV = rogl_GetProcAddress("glVertexAttribs2fvNV");
    rogl_pfn_glVertexAttribs2svNV = rogl_GetProcAddress("glVertexAttribs2svNV");
    rogl_pfn_glVertexAttribs3dvNV = rogl_GetProcAddress("glVertexAttribs3dvNV");
    rogl_pfn_glVertexAttribs3fvNV = rogl_GetProcAddress("glVertexAttribs3fvNV");
    rogl_pfn_glVertexAttribs3svNV = rogl_GetProcAddress("glVertexAttribs3svNV");
    rogl_pfn_glVertexAttribs4dvNV = rogl_GetProcAddress("glVertexAttribs4dvNV");
    rogl_pfn_glVertexAttribs4fvNV = rogl_GetProcAddress("glVertexAttribs4fvNV");
    rogl_pfn_glVertexAttribs4svNV = rogl_GetProcAddress("glVertexAttribs4svNV");
    rogl_pfn_glVertexAttribs4ubvNV = rogl_GetProcAddress("glVertexAttribs4ubvNV");
    rogl_pfn_glVertexAttribI1iEXT = rogl_GetProcAddress("glVertexAttribI1iEXT");
    rogl_pfn_glVertexAttribI2iEXT = rogl_GetProcAddress("glVertexAttribI2iEXT");
    rogl_pfn_glVertexAttribI3iEXT = rogl_GetProcAddress("glVertexAttribI3iEXT");
    rogl_pfn_glVertexAttribI4iEXT = rogl_GetProcAddress("glVertexAttribI4iEXT");
    rogl_pfn_glVertexAttribI1uiEXT = rogl_GetProcAddress("glVertexAttribI1uiEXT");
    rogl_pfn_glVertexAttribI2uiEXT = rogl_GetProcAddress("glVertexAttribI2uiEXT");
    rogl_pfn_glVertexAttribI3uiEXT = rogl_GetProcAddress("glVertexAttribI3uiEXT");
    rogl_pfn_glVertexAttribI4uiEXT = rogl_GetProcAddress("glVertexAttribI4uiEXT");
    rogl_pfn_glVertexAttribI1ivEXT = rogl_GetProcAddress("glVertexAttribI1ivEXT");
    rogl_pfn_glVertexAttribI2ivEXT = rogl_GetProcAddress("glVertexAttribI2ivEXT");
    rogl_pfn_glVertexAttribI3ivEXT = rogl_GetProcAddress("glVertexAttribI3ivEXT");
    rogl_pfn_glVertexAttribI4ivEXT = rogl_GetProcAddress("glVertexAttribI4ivEXT");
    rogl_pfn_glVertexAttribI1uivEXT = rogl_GetProcAddress("glVertexAttribI1uivEXT");
    rogl_pfn_glVertexAttribI2uivEXT = rogl_GetProcAddress("glVertexAttribI2uivEXT");
    rogl_pfn_glVertexAttribI3uivEXT = rogl_GetProcAddress("glVertexAttribI3uivEXT");
    rogl_pfn_glVertexAttribI4uivEXT = rogl_GetProcAddress("glVertexAttribI4uivEXT");
    rogl_pfn_glVertexAttribI4bvEXT = rogl_GetProcAddress("glVertexAttribI4bvEXT");
    rogl_pfn_glVertexAttribI4svEXT = rogl_GetProcAddress("glVertexAttribI4svEXT");
    rogl_pfn_glVertexAttribI4ubvEXT = rogl_GetProcAddress("glVertexAttribI4ubvEXT");
    rogl_pfn_glVertexAttribI4usvEXT = rogl_GetProcAddress("glVertexAttribI4usvEXT");
    rogl_pfn_glVertexAttribIPointerEXT = rogl_GetProcAddress("glVertexAttribIPointerEXT");
    rogl_pfn_glGetVertexAttribIivEXT = rogl_GetProcAddress("glGetVertexAttribIivEXT");
    rogl_pfn_glGetVertexAttribIuivEXT = rogl_GetProcAddress("glGetVertexAttribIuivEXT");
    rogl_pfn_glBeginVideoCaptureNV = rogl_GetProcAddress("glBeginVideoCaptureNV");
    rogl_pfn_glBindVideoCaptureStreamBufferNV = rogl_GetProcAddress("glBindVideoCaptureStreamBufferNV");
    rogl_pfn_glBindVideoCaptureStreamTextureNV = rogl_GetProcAddress("glBindVideoCaptureStreamTextureNV");
    rogl_pfn_glEndVideoCaptureNV = rogl_GetProcAddress("glEndVideoCaptureNV");
    rogl_pfn_glGetVideoCaptureivNV = rogl_GetProcAddress("glGetVideoCaptureivNV");
    rogl_pfn_glGetVideoCaptureStreamivNV = rogl_GetProcAddress("glGetVideoCaptureStreamivNV");
    rogl_pfn_glGetVideoCaptureStreamfvNV = rogl_GetProcAddress("glGetVideoCaptureStreamfvNV");
    rogl_pfn_glGetVideoCaptureStreamdvNV = rogl_GetProcAddress("glGetVideoCaptureStreamdvNV");
    rogl_pfn_glVideoCaptureNV = rogl_GetProcAddress("glVideoCaptureNV");
    rogl_pfn_glVideoCaptureStreamParameterivNV = rogl_GetProcAddress("glVideoCaptureStreamParameterivNV");
    rogl_pfn_glVideoCaptureStreamParameterfvNV = rogl_GetProcAddress("glVideoCaptureStreamParameterfvNV");
    rogl_pfn_glVideoCaptureStreamParameterdvNV = rogl_GetProcAddress("glVideoCaptureStreamParameterdvNV");
    rogl_pfn_glMultiTexCoord1bOES = rogl_GetProcAddress("glMultiTexCoord1bOES");
    rogl_pfn_glMultiTexCoord1bvOES = rogl_GetProcAddress("glMultiTexCoord1bvOES");
    rogl_pfn_glMultiTexCoord2bOES = rogl_GetProcAddress("glMultiTexCoord2bOES");
    rogl_pfn_glMultiTexCoord2bvOES = rogl_GetProcAddress("glMultiTexCoord2bvOES");
    rogl_pfn_glMultiTexCoord3bOES = rogl_GetProcAddress("glMultiTexCoord3bOES");
    rogl_pfn_glMultiTexCoord3bvOES = rogl_GetProcAddress("glMultiTexCoord3bvOES");
    rogl_pfn_glMultiTexCoord4bOES = rogl_GetProcAddress("glMultiTexCoord4bOES");
    rogl_pfn_glMultiTexCoord4bvOES = rogl_GetProcAddress("glMultiTexCoord4bvOES");
    rogl_pfn_glTexCoord1bOES = rogl_GetProcAddress("glTexCoord1bOES");
    rogl_pfn_glTexCoord1bvOES = rogl_GetProcAddress("glTexCoord1bvOES");
    rogl_pfn_glTexCoord2bOES = rogl_GetProcAddress("glTexCoord2bOES");
    rogl_pfn_glTexCoord2bvOES = rogl_GetProcAddress("glTexCoord2bvOES");
    rogl_pfn_glTexCoord3bOES = rogl_GetProcAddress("glTexCoord3bOES");
    rogl_pfn_glTexCoord3bvOES = rogl_GetProcAddress("glTexCoord3bvOES");
    rogl_pfn_glTexCoord4bOES = rogl_GetProcAddress("glTexCoord4bOES");
    rogl_pfn_glTexCoord4bvOES = rogl_GetProcAddress("glTexCoord4bvOES");
    rogl_pfn_glVertex2bOES = rogl_GetProcAddress("glVertex2bOES");
    rogl_pfn_glVertex2bvOES = rogl_GetProcAddress("glVertex2bvOES");
    rogl_pfn_glVertex3bOES = rogl_GetProcAddress("glVertex3bOES");
    rogl_pfn_glVertex3bvOES = rogl_GetProcAddress("glVertex3bvOES");
    rogl_pfn_glVertex4bOES = rogl_GetProcAddress("glVertex4bOES");
    rogl_pfn_glVertex4bvOES = rogl_GetProcAddress("glVertex4bvOES");
    rogl_pfn_glAlphaFuncxOES = rogl_GetProcAddress("glAlphaFuncxOES");
    rogl_pfn_glClearColorxOES = rogl_GetProcAddress("glClearColorxOES");
    rogl_pfn_glClearDepthxOES = rogl_GetProcAddress("glClearDepthxOES");
    rogl_pfn_glClipPlanexOES = rogl_GetProcAddress("glClipPlanexOES");
    rogl_pfn_glColor4xOES = rogl_GetProcAddress("glColor4xOES");
    rogl_pfn_glDepthRangexOES = rogl_GetProcAddress("glDepthRangexOES");
    rogl_pfn_glFogxOES = rogl_GetProcAddress("glFogxOES");
    rogl_pfn_glFogxvOES = rogl_GetProcAddress("glFogxvOES");
    rogl_pfn_glFrustumxOES = rogl_GetProcAddress("glFrustumxOES");
    rogl_pfn_glGetClipPlanexOES = rogl_GetProcAddress("glGetClipPlanexOES");
    rogl_pfn_glGetFixedvOES = rogl_GetProcAddress("glGetFixedvOES");
    rogl_pfn_glGetTexEnvxvOES = rogl_GetProcAddress("glGetTexEnvxvOES");
    rogl_pfn_glGetTexParameterxvOES = rogl_GetProcAddress("glGetTexParameterxvOES");
    rogl_pfn_glLightModelxOES = rogl_GetProcAddress("glLightModelxOES");
    rogl_pfn_glLightModelxvOES = rogl_GetProcAddress("glLightModelxvOES");
    rogl_pfn_glLightxOES = rogl_GetProcAddress("glLightxOES");
    rogl_pfn_glLightxvOES = rogl_GetProcAddress("glLightxvOES");
    rogl_pfn_glLineWidthxOES = rogl_GetProcAddress("glLineWidthxOES");
    rogl_pfn_glLoadMatrixxOES = rogl_GetProcAddress("glLoadMatrixxOES");
    rogl_pfn_glMaterialxOES = rogl_GetProcAddress("glMaterialxOES");
    rogl_pfn_glMaterialxvOES = rogl_GetProcAddress("glMaterialxvOES");
    rogl_pfn_glMultMatrixxOES = rogl_GetProcAddress("glMultMatrixxOES");
    rogl_pfn_glMultiTexCoord4xOES = rogl_GetProcAddress("glMultiTexCoord4xOES");
    rogl_pfn_glNormal3xOES = rogl_GetProcAddress("glNormal3xOES");
    rogl_pfn_glOrthoxOES = rogl_GetProcAddress("glOrthoxOES");
    rogl_pfn_glPointParameterxvOES = rogl_GetProcAddress("glPointParameterxvOES");
    rogl_pfn_glPointSizexOES = rogl_GetProcAddress("glPointSizexOES");
    rogl_pfn_glPolygonOffsetxOES = rogl_GetProcAddress("glPolygonOffsetxOES");
    rogl_pfn_glRotatexOES = rogl_GetProcAddress("glRotatexOES");
    rogl_pfn_glScalexOES = rogl_GetProcAddress("glScalexOES");
    rogl_pfn_glTexEnvxOES = rogl_GetProcAddress("glTexEnvxOES");
    rogl_pfn_glTexEnvxvOES = rogl_GetProcAddress("glTexEnvxvOES");
    rogl_pfn_glTexParameterxOES = rogl_GetProcAddress("glTexParameterxOES");
    rogl_pfn_glTexParameterxvOES = rogl_GetProcAddress("glTexParameterxvOES");
    rogl_pfn_glTranslatexOES = rogl_GetProcAddress("glTranslatexOES");
    rogl_pfn_glGetLightxvOES = rogl_GetProcAddress("glGetLightxvOES");
    rogl_pfn_glGetMaterialxvOES = rogl_GetProcAddress("glGetMaterialxvOES");
    rogl_pfn_glPointParameterxOES = rogl_GetProcAddress("glPointParameterxOES");
    rogl_pfn_glSampleCoveragexOES = rogl_GetProcAddress("glSampleCoveragexOES");
    rogl_pfn_glAccumxOES = rogl_GetProcAddress("glAccumxOES");
    rogl_pfn_glBitmapxOES = rogl_GetProcAddress("glBitmapxOES");
    rogl_pfn_glBlendColorxOES = rogl_GetProcAddress("glBlendColorxOES");
    rogl_pfn_glClearAccumxOES = rogl_GetProcAddress("glClearAccumxOES");
    rogl_pfn_glColor3xOES = rogl_GetProcAddress("glColor3xOES");
    rogl_pfn_glColor3xvOES = rogl_GetProcAddress("glColor3xvOES");
    rogl_pfn_glColor4xvOES = rogl_GetProcAddress("glColor4xvOES");
    rogl_pfn_glConvolutionParameterxOES = rogl_GetProcAddress("glConvolutionParameterxOES");
    rogl_pfn_glConvolutionParameterxvOES = rogl_GetProcAddress("glConvolutionParameterxvOES");
    rogl_pfn_glEvalCoord1xOES = rogl_GetProcAddress("glEvalCoord1xOES");
    rogl_pfn_glEvalCoord1xvOES = rogl_GetProcAddress("glEvalCoord1xvOES");
    rogl_pfn_glEvalCoord2xOES = rogl_GetProcAddress("glEvalCoord2xOES");
    rogl_pfn_glEvalCoord2xvOES = rogl_GetProcAddress("glEvalCoord2xvOES");
    rogl_pfn_glFeedbackBufferxOES = rogl_GetProcAddress("glFeedbackBufferxOES");
    rogl_pfn_glGetConvolutionParameterxvOES = rogl_GetProcAddress("glGetConvolutionParameterxvOES");
    rogl_pfn_glGetHistogramParameterxvOES = rogl_GetProcAddress("glGetHistogramParameterxvOES");
    rogl_pfn_glGetLightxOES = rogl_GetProcAddress("glGetLightxOES");
    rogl_pfn_glGetMapxvOES = rogl_GetProcAddress("glGetMapxvOES");
    rogl_pfn_glGetMaterialxOES = rogl_GetProcAddress("glGetMaterialxOES");
    rogl_pfn_glGetPixelMapxv = rogl_GetProcAddress("glGetPixelMapxv");
    rogl_pfn_glGetTexGenxvOES = rogl_GetProcAddress("glGetTexGenxvOES");
    rogl_pfn_glGetTexLevelParameterxvOES = rogl_GetProcAddress("glGetTexLevelParameterxvOES");
    rogl_pfn_glIndexxOES = rogl_GetProcAddress("glIndexxOES");
    rogl_pfn_glIndexxvOES = rogl_GetProcAddress("glIndexxvOES");
    rogl_pfn_glLoadTransposeMatrixxOES = rogl_GetProcAddress("glLoadTransposeMatrixxOES");
    rogl_pfn_glMap1xOES = rogl_GetProcAddress("glMap1xOES");
    rogl_pfn_glMap2xOES = rogl_GetProcAddress("glMap2xOES");
    rogl_pfn_glMapGrid1xOES = rogl_GetProcAddress("glMapGrid1xOES");
    rogl_pfn_glMapGrid2xOES = rogl_GetProcAddress("glMapGrid2xOES");
    rogl_pfn_glMultTransposeMatrixxOES = rogl_GetProcAddress("glMultTransposeMatrixxOES");
    rogl_pfn_glMultiTexCoord1xOES = rogl_GetProcAddress("glMultiTexCoord1xOES");
    rogl_pfn_glMultiTexCoord1xvOES = rogl_GetProcAddress("glMultiTexCoord1xvOES");
    rogl_pfn_glMultiTexCoord2xOES = rogl_GetProcAddress("glMultiTexCoord2xOES");
    rogl_pfn_glMultiTexCoord2xvOES = rogl_GetProcAddress("glMultiTexCoord2xvOES");
    rogl_pfn_glMultiTexCoord3xOES = rogl_GetProcAddress("glMultiTexCoord3xOES");
    rogl_pfn_glMultiTexCoord3xvOES = rogl_GetProcAddress("glMultiTexCoord3xvOES");
    rogl_pfn_glMultiTexCoord4xvOES = rogl_GetProcAddress("glMultiTexCoord4xvOES");
    rogl_pfn_glNormal3xvOES = rogl_GetProcAddress("glNormal3xvOES");
    rogl_pfn_glPassThroughxOES = rogl_GetProcAddress("glPassThroughxOES");
    rogl_pfn_glPixelMapx = rogl_GetProcAddress("glPixelMapx");
    rogl_pfn_glPixelStorex = rogl_GetProcAddress("glPixelStorex");
    rogl_pfn_glPixelTransferxOES = rogl_GetProcAddress("glPixelTransferxOES");
    rogl_pfn_glPixelZoomxOES = rogl_GetProcAddress("glPixelZoomxOES");
    rogl_pfn_glPrioritizeTexturesxOES = rogl_GetProcAddress("glPrioritizeTexturesxOES");
    rogl_pfn_glRasterPos2xOES = rogl_GetProcAddress("glRasterPos2xOES");
    rogl_pfn_glRasterPos2xvOES = rogl_GetProcAddress("glRasterPos2xvOES");
    rogl_pfn_glRasterPos3xOES = rogl_GetProcAddress("glRasterPos3xOES");
    rogl_pfn_glRasterPos3xvOES = rogl_GetProcAddress("glRasterPos3xvOES");
    rogl_pfn_glRasterPos4xOES = rogl_GetProcAddress("glRasterPos4xOES");
    rogl_pfn_glRasterPos4xvOES = rogl_GetProcAddress("glRasterPos4xvOES");
    rogl_pfn_glRectxOES = rogl_GetProcAddress("glRectxOES");
    rogl_pfn_glRectxvOES = rogl_GetProcAddress("glRectxvOES");
    rogl_pfn_glTexCoord1xOES = rogl_GetProcAddress("glTexCoord1xOES");
    rogl_pfn_glTexCoord1xvOES = rogl_GetProcAddress("glTexCoord1xvOES");
    rogl_pfn_glTexCoord2xOES = rogl_GetProcAddress("glTexCoord2xOES");
    rogl_pfn_glTexCoord2xvOES = rogl_GetProcAddress("glTexCoord2xvOES");
    rogl_pfn_glTexCoord3xOES = rogl_GetProcAddress("glTexCoord3xOES");
    rogl_pfn_glTexCoord3xvOES = rogl_GetProcAddress("glTexCoord3xvOES");
    rogl_pfn_glTexCoord4xOES = rogl_GetProcAddress("glTexCoord4xOES");
    rogl_pfn_glTexCoord4xvOES = rogl_GetProcAddress("glTexCoord4xvOES");
    rogl_pfn_glTexGenxOES = rogl_GetProcAddress("glTexGenxOES");
    rogl_pfn_glTexGenxvOES = rogl_GetProcAddress("glTexGenxvOES");
    rogl_pfn_glVertex2xOES = rogl_GetProcAddress("glVertex2xOES");
    rogl_pfn_glVertex2xvOES = rogl_GetProcAddress("glVertex2xvOES");
    rogl_pfn_glVertex3xOES = rogl_GetProcAddress("glVertex3xOES");
    rogl_pfn_glVertex3xvOES = rogl_GetProcAddress("glVertex3xvOES");
    rogl_pfn_glVertex4xOES = rogl_GetProcAddress("glVertex4xOES");
    rogl_pfn_glVertex4xvOES = rogl_GetProcAddress("glVertex4xvOES");
    rogl_pfn_glQueryMatrixxOES = rogl_GetProcAddress("glQueryMatrixxOES");
    rogl_pfn_glClearDepthfOES = rogl_GetProcAddress("glClearDepthfOES");
    rogl_pfn_glClipPlanefOES = rogl_GetProcAddress("glClipPlanefOES");
    rogl_pfn_glDepthRangefOES = rogl_GetProcAddress("glDepthRangefOES");
    rogl_pfn_glFrustumfOES = rogl_GetProcAddress("glFrustumfOES");
    rogl_pfn_glGetClipPlanefOES = rogl_GetProcAddress("glGetClipPlanefOES");
    rogl_pfn_glOrthofOES = rogl_GetProcAddress("glOrthofOES");
    rogl_pfn_glFramebufferTextureMultiviewOVR = rogl_GetProcAddress("glFramebufferTextureMultiviewOVR");
    rogl_pfn_glHintPGI = rogl_GetProcAddress("glHintPGI");
    rogl_pfn_glDetailTexFuncSGIS = rogl_GetProcAddress("glDetailTexFuncSGIS");
    rogl_pfn_glGetDetailTexFuncSGIS = rogl_GetProcAddress("glGetDetailTexFuncSGIS");
    rogl_pfn_glFogFuncSGIS = rogl_GetProcAddress("glFogFuncSGIS");
    rogl_pfn_glGetFogFuncSGIS = rogl_GetProcAddress("glGetFogFuncSGIS");
    rogl_pfn_glSampleMaskSGIS = rogl_GetProcAddress("glSampleMaskSGIS");
    rogl_pfn_glSamplePatternSGIS = rogl_GetProcAddress("glSamplePatternSGIS");
    rogl_pfn_glPixelTexGenParameteriSGIS = rogl_GetProcAddress("glPixelTexGenParameteriSGIS");
    rogl_pfn_glPixelTexGenParameterivSGIS = rogl_GetProcAddress("glPixelTexGenParameterivSGIS");
    rogl_pfn_glPixelTexGenParameterfSGIS = rogl_GetProcAddress("glPixelTexGenParameterfSGIS");
    rogl_pfn_glPixelTexGenParameterfvSGIS = rogl_GetProcAddress("glPixelTexGenParameterfvSGIS");
    rogl_pfn_glGetPixelTexGenParameterivSGIS = rogl_GetProcAddress("glGetPixelTexGenParameterivSGIS");
    rogl_pfn_glGetPixelTexGenParameterfvSGIS = rogl_GetProcAddress("glGetPixelTexGenParameterfvSGIS");
    rogl_pfn_glPointParameterfSGIS = rogl_GetProcAddress("glPointParameterfSGIS");
    rogl_pfn_glPointParameterfvSGIS = rogl_GetProcAddress("glPointParameterfvSGIS");
    rogl_pfn_glSharpenTexFuncSGIS = rogl_GetProcAddress("glSharpenTexFuncSGIS");
    rogl_pfn_glGetSharpenTexFuncSGIS = rogl_GetProcAddress("glGetSharpenTexFuncSGIS");
    rogl_pfn_glTexImage4DSGIS = rogl_GetProcAddress("glTexImage4DSGIS");
    rogl_pfn_glTexSubImage4DSGIS = rogl_GetProcAddress("glTexSubImage4DSGIS");
    rogl_pfn_glTextureColorMaskSGIS = rogl_GetProcAddress("glTextureColorMaskSGIS");
    rogl_pfn_glGetTexFilterFuncSGIS = rogl_GetProcAddress("glGetTexFilterFuncSGIS");
    rogl_pfn_glTexFilterFuncSGIS = rogl_GetProcAddress("glTexFilterFuncSGIS");
    rogl_pfn_glAsyncMarkerSGIX = rogl_GetProcAddress("glAsyncMarkerSGIX");
    rogl_pfn_glFinishAsyncSGIX = rogl_GetProcAddress("glFinishAsyncSGIX");
    rogl_pfn_glPollAsyncSGIX = rogl_GetProcAddress("glPollAsyncSGIX");
    rogl_pfn_glGenAsyncMarkersSGIX = rogl_GetProcAddress("glGenAsyncMarkersSGIX");
    rogl_pfn_glDeleteAsyncMarkersSGIX = rogl_GetProcAddress("glDeleteAsyncMarkersSGIX");
    rogl_pfn_glIsAsyncMarkerSGIX = rogl_GetProcAddress("glIsAsyncMarkerSGIX");
    rogl_pfn_glFlushRasterSGIX = rogl_GetProcAddress("glFlushRasterSGIX");
    rogl_pfn_glFragmentColorMaterialSGIX = rogl_GetProcAddress("glFragmentColorMaterialSGIX");
    rogl_pfn_glFragmentLightfSGIX = rogl_GetProcAddress("glFragmentLightfSGIX");
    rogl_pfn_glFragmentLightfvSGIX = rogl_GetProcAddress("glFragmentLightfvSGIX");
    rogl_pfn_glFragmentLightiSGIX = rogl_GetProcAddress("glFragmentLightiSGIX");
    rogl_pfn_glFragmentLightivSGIX = rogl_GetProcAddress("glFragmentLightivSGIX");
    rogl_pfn_glFragmentLightModelfSGIX = rogl_GetProcAddress("glFragmentLightModelfSGIX");
    rogl_pfn_glFragmentLightModelfvSGIX = rogl_GetProcAddress("glFragmentLightModelfvSGIX");
    rogl_pfn_glFragmentLightModeliSGIX = rogl_GetProcAddress("glFragmentLightModeliSGIX");
    rogl_pfn_glFragmentLightModelivSGIX = rogl_GetProcAddress("glFragmentLightModelivSGIX");
    rogl_pfn_glFragmentMaterialfSGIX = rogl_GetProcAddress("glFragmentMaterialfSGIX");
    rogl_pfn_glFragmentMaterialfvSGIX = rogl_GetProcAddress("glFragmentMaterialfvSGIX");
    rogl_pfn_glFragmentMaterialiSGIX = rogl_GetProcAddress("glFragmentMaterialiSGIX");
    rogl_pfn_glFragmentMaterialivSGIX = rogl_GetProcAddress("glFragmentMaterialivSGIX");
    rogl_pfn_glGetFragmentLightfvSGIX = rogl_GetProcAddress("glGetFragmentLightfvSGIX");
    rogl_pfn_glGetFragmentLightivSGIX = rogl_GetProcAddress("glGetFragmentLightivSGIX");
    rogl_pfn_glGetFragmentMaterialfvSGIX = rogl_GetProcAddress("glGetFragmentMaterialfvSGIX");
    rogl_pfn_glGetFragmentMaterialivSGIX = rogl_GetProcAddress("glGetFragmentMaterialivSGIX");
    rogl_pfn_glLightEnviSGIX = rogl_GetProcAddress("glLightEnviSGIX");
    rogl_pfn_glFrameZoomSGIX = rogl_GetProcAddress("glFrameZoomSGIX");
    rogl_pfn_glIglooInterfaceSGIX = rogl_GetProcAddress("glIglooInterfaceSGIX");
    rogl_pfn_glGetInstrumentsSGIX = rogl_GetProcAddress("glGetInstrumentsSGIX");
    rogl_pfn_glInstrumentsBufferSGIX = rogl_GetProcAddress("glInstrumentsBufferSGIX");
    rogl_pfn_glPollInstrumentsSGIX = rogl_GetProcAddress("glPollInstrumentsSGIX");
    rogl_pfn_glReadInstrumentsSGIX = rogl_GetProcAddress("glReadInstrumentsSGIX");
    rogl_pfn_glStartInstrumentsSGIX = rogl_GetProcAddress("glStartInstrumentsSGIX");
    rogl_pfn_glStopInstrumentsSGIX = rogl_GetProcAddress("glStopInstrumentsSGIX");
    rogl_pfn_glGetListParameterfvSGIX = rogl_GetProcAddress("glGetListParameterfvSGIX");
    rogl_pfn_glGetListParameterivSGIX = rogl_GetProcAddress("glGetListParameterivSGIX");
    rogl_pfn_glListParameterfSGIX = rogl_GetProcAddress("glListParameterfSGIX");
    rogl_pfn_glListParameterfvSGIX = rogl_GetProcAddress("glListParameterfvSGIX");
    rogl_pfn_glListParameteriSGIX = rogl_GetProcAddress("glListParameteriSGIX");
    rogl_pfn_glListParameterivSGIX = rogl_GetProcAddress("glListParameterivSGIX");
    rogl_pfn_glPixelTexGenSGIX = rogl_GetProcAddress("glPixelTexGenSGIX");
    rogl_pfn_glDeformationMap3dSGIX = rogl_GetProcAddress("glDeformationMap3dSGIX");
    rogl_pfn_glDeformationMap3fSGIX = rogl_GetProcAddress("glDeformationMap3fSGIX");
    rogl_pfn_glDeformSGIX = rogl_GetProcAddress("glDeformSGIX");
    rogl_pfn_glLoadIdentityDeformationMapSGIX = rogl_GetProcAddress("glLoadIdentityDeformationMapSGIX");
    rogl_pfn_glReferencePlaneSGIX = rogl_GetProcAddress("glReferencePlaneSGIX");
    rogl_pfn_glSpriteParameterfSGIX = rogl_GetProcAddress("glSpriteParameterfSGIX");
    rogl_pfn_glSpriteParameterfvSGIX = rogl_GetProcAddress("glSpriteParameterfvSGIX");
    rogl_pfn_glSpriteParameteriSGIX = rogl_GetProcAddress("glSpriteParameteriSGIX");
    rogl_pfn_glSpriteParameterivSGIX = rogl_GetProcAddress("glSpriteParameterivSGIX");
    rogl_pfn_glTagSampleBufferSGIX = rogl_GetProcAddress("glTagSampleBufferSGIX");
    rogl_pfn_glColorTableSGI = rogl_GetProcAddress("glColorTableSGI");
    rogl_pfn_glColorTableParameterfvSGI = rogl_GetProcAddress("glColorTableParameterfvSGI");
    rogl_pfn_glColorTableParameterivSGI = rogl_GetProcAddress("glColorTableParameterivSGI");
    rogl_pfn_glCopyColorTableSGI = rogl_GetProcAddress("glCopyColorTableSGI");
    rogl_pfn_glGetColorTableSGI = rogl_GetProcAddress("glGetColorTableSGI");
    rogl_pfn_glGetColorTableParameterfvSGI = rogl_GetProcAddress("glGetColorTableParameterfvSGI");
    rogl_pfn_glGetColorTableParameterivSGI = rogl_GetProcAddress("glGetColorTableParameterivSGI");
    rogl_pfn_glFinishTextureSUNX = rogl_GetProcAddress("glFinishTextureSUNX");
    rogl_pfn_glGlobalAlphaFactorbSUN = rogl_GetProcAddress("glGlobalAlphaFactorbSUN");
    rogl_pfn_glGlobalAlphaFactorsSUN = rogl_GetProcAddress("glGlobalAlphaFactorsSUN");
    rogl_pfn_glGlobalAlphaFactoriSUN = rogl_GetProcAddress("glGlobalAlphaFactoriSUN");
    rogl_pfn_glGlobalAlphaFactorfSUN = rogl_GetProcAddress("glGlobalAlphaFactorfSUN");
    rogl_pfn_glGlobalAlphaFactordSUN = rogl_GetProcAddress("glGlobalAlphaFactordSUN");
    rogl_pfn_glGlobalAlphaFactorubSUN = rogl_GetProcAddress("glGlobalAlphaFactorubSUN");
    rogl_pfn_glGlobalAlphaFactorusSUN = rogl_GetProcAddress("glGlobalAlphaFactorusSUN");
    rogl_pfn_glGlobalAlphaFactoruiSUN = rogl_GetProcAddress("glGlobalAlphaFactoruiSUN");
    rogl_pfn_glDrawMeshArraysSUN = rogl_GetProcAddress("glDrawMeshArraysSUN");
    rogl_pfn_glReplacementCodeuiSUN = rogl_GetProcAddress("glReplacementCodeuiSUN");
    rogl_pfn_glReplacementCodeusSUN = rogl_GetProcAddress("glReplacementCodeusSUN");
    rogl_pfn_glReplacementCodeubSUN = rogl_GetProcAddress("glReplacementCodeubSUN");
    rogl_pfn_glReplacementCodeuivSUN = rogl_GetProcAddress("glReplacementCodeuivSUN");
    rogl_pfn_glReplacementCodeusvSUN = rogl_GetProcAddress("glReplacementCodeusvSUN");
    rogl_pfn_glReplacementCodeubvSUN = rogl_GetProcAddress("glReplacementCodeubvSUN");
    rogl_pfn_glReplacementCodePointerSUN = rogl_GetProcAddress("glReplacementCodePointerSUN");
    rogl_pfn_glColor4ubVertex2fSUN = rogl_GetProcAddress("glColor4ubVertex2fSUN");
    rogl_pfn_glColor4ubVertex2fvSUN = rogl_GetProcAddress("glColor4ubVertex2fvSUN");
    rogl_pfn_glColor4ubVertex3fSUN = rogl_GetProcAddress("glColor4ubVertex3fSUN");
    rogl_pfn_glColor4ubVertex3fvSUN = rogl_GetProcAddress("glColor4ubVertex3fvSUN");
    rogl_pfn_glColor3fVertex3fSUN = rogl_GetProcAddress("glColor3fVertex3fSUN");
    rogl_pfn_glColor3fVertex3fvSUN = rogl_GetProcAddress("glColor3fVertex3fvSUN");
    rogl_pfn_glNormal3fVertex3fSUN = rogl_GetProcAddress("glNormal3fVertex3fSUN");
    rogl_pfn_glNormal3fVertex3fvSUN = rogl_GetProcAddress("glNormal3fVertex3fvSUN");
    rogl_pfn_glColor4fNormal3fVertex3fSUN = rogl_GetProcAddress("glColor4fNormal3fVertex3fSUN");
    rogl_pfn_glColor4fNormal3fVertex3fvSUN = rogl_GetProcAddress("glColor4fNormal3fVertex3fvSUN");
    rogl_pfn_glTexCoord2fVertex3fSUN = rogl_GetProcAddress("glTexCoord2fVertex3fSUN");
    rogl_pfn_glTexCoord2fVertex3fvSUN = rogl_GetProcAddress("glTexCoord2fVertex3fvSUN");
    rogl_pfn_glTexCoord4fVertex4fSUN = rogl_GetProcAddress("glTexCoord4fVertex4fSUN");
    rogl_pfn_glTexCoord4fVertex4fvSUN = rogl_GetProcAddress("glTexCoord4fVertex4fvSUN");
    rogl_pfn_glTexCoord2fColor4ubVertex3fSUN = rogl_GetProcAddress("glTexCoord2fColor4ubVertex3fSUN");
    rogl_pfn_glTexCoord2fColor4ubVertex3fvSUN = rogl_GetProcAddress("glTexCoord2fColor4ubVertex3fvSUN");
    rogl_pfn_glTexCoord2fColor3fVertex3fSUN = rogl_GetProcAddress("glTexCoord2fColor3fVertex3fSUN");
    rogl_pfn_glTexCoord2fColor3fVertex3fvSUN = rogl_GetProcAddress("glTexCoord2fColor3fVertex3fvSUN");
    rogl_pfn_glTexCoord2fNormal3fVertex3fSUN = rogl_GetProcAddress("glTexCoord2fNormal3fVertex3fSUN");
    rogl_pfn_glTexCoord2fNormal3fVertex3fvSUN = rogl_GetProcAddress("glTexCoord2fNormal3fVertex3fvSUN");
    rogl_pfn_glTexCoord2fColor4fNormal3fVertex3fSUN = rogl_GetProcAddress("glTexCoord2fColor4fNormal3fVertex3fSUN");
    rogl_pfn_glTexCoord2fColor4fNormal3fVertex3fvSUN = rogl_GetProcAddress("glTexCoord2fColor4fNormal3fVertex3fvSUN");
    rogl_pfn_glTexCoord4fColor4fNormal3fVertex4fSUN = rogl_GetProcAddress("glTexCoord4fColor4fNormal3fVertex4fSUN");
    rogl_pfn_glTexCoord4fColor4fNormal3fVertex4fvSUN = rogl_GetProcAddress("glTexCoord4fColor4fNormal3fVertex4fvSUN");
    rogl_pfn_glReplacementCodeuiVertex3fSUN = rogl_GetProcAddress("glReplacementCodeuiVertex3fSUN");
    rogl_pfn_glReplacementCodeuiVertex3fvSUN = rogl_GetProcAddress("glReplacementCodeuiVertex3fvSUN");
    rogl_pfn_glReplacementCodeuiColor4ubVertex3fSUN = rogl_GetProcAddress("glReplacementCodeuiColor4ubVertex3fSUN");
    rogl_pfn_glReplacementCodeuiColor4ubVertex3fvSUN = rogl_GetProcAddress("glReplacementCodeuiColor4ubVertex3fvSUN");
    rogl_pfn_glReplacementCodeuiColor3fVertex3fSUN = rogl_GetProcAddress("glReplacementCodeuiColor3fVertex3fSUN");
    rogl_pfn_glReplacementCodeuiColor3fVertex3fvSUN = rogl_GetProcAddress("glReplacementCodeuiColor3fVertex3fvSUN");
    rogl_pfn_glReplacementCodeuiNormal3fVertex3fSUN = rogl_GetProcAddress("glReplacementCodeuiNormal3fVertex3fSUN");
    rogl_pfn_glReplacementCodeuiNormal3fVertex3fvSUN = rogl_GetProcAddress("glReplacementCodeuiNormal3fVertex3fvSUN");
    rogl_pfn_glReplacementCodeuiColor4fNormal3fVertex3fSUN = rogl_GetProcAddress("glReplacementCodeuiColor4fNormal3fVertex3fSUN");
    rogl_pfn_glReplacementCodeuiColor4fNormal3fVertex3fvSUN = rogl_GetProcAddress("glReplacementCodeuiColor4fNormal3fVertex3fvSUN");
    rogl_pfn_glReplacementCodeuiTexCoord2fVertex3fSUN = rogl_GetProcAddress("glReplacementCodeuiTexCoord2fVertex3fSUN");
    rogl_pfn_glReplacementCodeuiTexCoord2fVertex3fvSUN = rogl_GetProcAddress("glReplacementCodeuiTexCoord2fVertex3fvSUN");
    rogl_pfn_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = rogl_GetProcAddress("glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN");
    rogl_pfn_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = rogl_GetProcAddress("glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN");
    rogl_pfn_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = rogl_GetProcAddress("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN");
    rogl_pfn_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = rogl_GetProcAddress("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN");
}
